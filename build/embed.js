(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  return function () {
    vertxNext(flush);
  };
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = r('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof require === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

polyfill();
// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":3}],2:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

//
// We store our EE objects in a plain object whose properties are event names.
// If `Object.create(null)` is not supported we prefix the event names with a
// `~` to make sure that the built-in object properties are not overridden or
// used as an attack vector.
// We also assume that `Object.create(null)` is available when the event name
// is an ES6 Symbol.
//
var prefix = typeof Object.create !== 'function' ? '~' : false;

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} [once=false] Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Hold the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var events = this._events
    , names = []
    , name;

  if (!events) return names;

  for (name in events) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @param {Boolean} exists We only need to know if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events && this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} [context=this] The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} [context=this] The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Mixed} context Only remove listeners matching this context.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return this;

  var listeners = this._events[evt]
    , events = [];

  if (fn) {
    if (listeners.fn) {
      if (
           listeners.fn !== fn
        || (once && !listeners.once)
        || (context && listeners.context !== context)
      ) {
        events.push(listeners);
      }
    } else {
      for (var i = 0, length = listeners.length; i < length; i++) {
        if (
             listeners[i].fn !== fn
          || (once && !listeners[i].once)
          || (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[evt] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[prefix ? prefix + event : event];
  else this._events = prefix ? {} : Object.create(null);

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],3:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],4:[function(require,module,exports){
(function(){var g={};
(function(window){var k,aa=this;aa.md=!0;function m(a,b){var c=a.split("."),d=aa;c[0]in d||!d.execScript||d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)c.length||void 0===b?d[e]?d=d[e]:d=d[e]={}:d[e]=b}function ba(a){var b=p;function c(){}c.prototype=b.prototype;a.qd=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.nd=function(a,c,f){return b.prototype[c].apply(a,Array.prototype.slice.call(arguments,2))}};/*

 Copyright 2016 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
function ca(a){this.c=Math.exp(Math.log(.5)/a);this.b=this.a=0}function da(a,b,c){var d=Math.pow(a.c,b);c=c*(1-d)+d*a.a;isNaN(c)||(a.a=c,a.b+=b)}function ea(a){return a.a/(1-Math.pow(a.c,a.b))};function fa(){this.c=new ca(2);this.f=new ca(5);this.a=0;this.b=5E5}fa.prototype.setDefaultEstimate=function(a){this.b=a};fa.prototype.getBandwidthEstimate=function(){return 128E3>this.a?this.b:Math.min(ea(this.c),ea(this.f))};function ga(){}function ha(){};function q(){this.h=null;this.f=!1;this.b=new fa;this.g={};this.a={};this.i=!1;this.c=null}m("shaka.abr.SimpleAbrManager",q);q.prototype.stop=function(){this.h=null;this.f=!1;this.g={};this.a={};this.c=null};q.prototype.stop=q.prototype.stop;q.prototype.init=function(a){this.h=a};q.prototype.init=q.prototype.init;
q.prototype.chooseStreams=function(a){for(var b in a)this.g[b]=a[b];b={};if("audio"in a){var c=ia(this);c?(b.audio=c,this.a.audio=c):delete this.a.audio}"video"in a&&((c=ja(this))?(b.video=c,this.a.video=c):delete this.a.video);"text"in a&&(b.text=a.text.streams[0]);this.c=Date.now();return b};q.prototype.chooseStreams=q.prototype.chooseStreams;q.prototype.enable=function(){this.f=!0};q.prototype.enable=q.prototype.enable;q.prototype.disable=function(){this.f=!1};q.prototype.disable=q.prototype.disable;
q.prototype.segmentDownloaded=function(a,b,c){var d=this.b;b-=a;16E3>c||(a=8E3*c/b,b/=1E3,d.a+=c,da(d.c,b,a),da(d.f,b,a));if(null!=this.c&&this.f)a:{if(!this.i){if(!(128E3<=this.b.a))break a;this.i=!0}else if(8E3>Date.now()-this.c)break a;c={};if(d=ia(this))c.audio=d,this.a.audio=d;if(d=ja(this))c.video=d,this.a.video=d;this.c=Date.now();this.b.getBandwidthEstimate();this.h(c)}};q.prototype.segmentDownloaded=q.prototype.segmentDownloaded;q.prototype.getBandwidthEstimate=function(){return this.b.getBandwidthEstimate()};
q.prototype.getBandwidthEstimate=q.prototype.getBandwidthEstimate;q.prototype.setDefaultEstimate=function(a){this.b.setDefaultEstimate(a)};q.prototype.setDefaultEstimate=q.prototype.setDefaultEstimate;function ia(a){a=a.g.audio;if(!a)return null;a=ka(a);return a[Math.floor(a.length/2)]}
function ja(a){var b=a.g.video;if(!b)return null;var b=ka(b),c=a.a.audio,c=c&&c.bandwidth||0;a=a.b.getBandwidthEstimate();for(var d=b[0],e=0;e<b.length;++e){var f=b[e];if(f.bandwidth){var g=((e+1<b.length?b[e+1]:{bandwidth:Infinity}).bandwidth+c)/.85;a>=(f.bandwidth+c)/.95&&a<=g&&(d=f)}}return d}function ka(a){return a.streams.slice(0).filter(function(a){return a.allowedByApplication&&a.allowedByKeySystem}).sort(function(a,c){return a.bandwidth-c.bandwidth})};function t(a,b){var c=b||{},d;for(d in c)this[d]=c[d];this.defaultPrevented=this.cancelable=this.bubbles=!1;this.timeStamp=window.performance&&window.performance.now?window.performance.now():Date.now();this.type=a;this.isTrusted=!1;this.target=this.currentTarget=null;this.a=!1}t.prototype.preventDefault=function(){};t.prototype.stopImmediatePropagation=function(){this.a=!0};t.prototype.stopPropagation=function(){};var la="ended play playing pause pausing ratechange seeked seeking timeupdate volumechange".split(" "),ma="buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume".split(" "),na=["loop","playbackRate"],oa=["pause","play"],pa="adaptation buffering emsg error loading unloading texttrackvisibility trackschanged".split(" "),qa="drmInfo getConfiguration getManifestUri getPlaybackRate getTracks getStats isBuffering isInProgress isLive isTextTrackVisible keySystem seekRange".split(" "),
ra=[["getConfiguration","configure"]],sa=[["isTextTrackVisible","setTextTrackVisibility"]],ta="addTextTrack cancelTrickPlay configure resetConfiguration selectTrack setTextTrackVisibility trickPlay".split(" "),ua=["load","unload"];
function va(a){return JSON.stringify(a,function(a,c){if("manager"!=a&&"function"!=typeof c){if(c instanceof Event||c instanceof t){var b={},e;for(e in c){var f=c[e];f&&"object"==typeof f||e in Event||(b[e]=f)}return b}if(c instanceof TimeRanges)for(b={__type__:"TimeRanges",length:c.length,start:[],end:[]},e=0;e<c.length;++e)b.start.push(c.start(e)),b.end.push(c.end(e));else b="number"==typeof c?isNaN(c)?"NaN":isFinite(c)?c:0>c?"-Infinity":"Infinity":c;return b}})}
function wa(a){return JSON.parse(a,function(a,c){return"NaN"==c?NaN:"-Infinity"==c?-Infinity:"Infinity"==c?Infinity:c&&"object"==typeof c&&"TimeRanges"==c.__type__?xa(c):c})}function xa(a){return{length:a.length,start:function(b){return a.start[b]},end:function(b){return a.end[b]}}};function v(a,b,c){this.category=a;this.code=b;this.data=Array.prototype.slice.call(arguments,2)}m("shaka.util.Error",v);v.prototype.toString=function(){return"shaka.util.Error "+JSON.stringify(this,null,"  ")};v.Category={NETWORK:1,TEXT:2,MEDIA:3,MANIFEST:4,STREAMING:5,DRM:6,PLAYER:7,CAST:8,STORAGE:9};
v.Code={UNSUPPORTED_SCHEME:1E3,BAD_HTTP_STATUS:1001,HTTP_ERROR:1002,TIMEOUT:1003,MALFORMED_DATA_URI:1004,UNKNOWN_DATA_URI_ENCODING:1005,INVALID_TEXT_HEADER:2E3,INVALID_TEXT_CUE:2001,UNABLE_TO_DETECT_ENCODING:2003,BAD_ENCODING:2004,INVALID_XML:2005,INVALID_TTML:2006,INVALID_MP4_TTML:2007,INVALID_MP4_VTT:2008,BUFFER_READ_OUT_OF_BOUNDS:3E3,JS_INTEGER_OVERFLOW:3001,EBML_OVERFLOW:3002,EBML_BAD_FLOATING_POINT_SIZE:3003,MP4_SIDX_WRONG_BOX_TYPE:3004,MP4_SIDX_INVALID_TIMESCALE:3005,MP4_SIDX_TYPE_NOT_SUPPORTED:3006,
WEBM_CUES_ELEMENT_MISSING:3007,WEBM_EBML_HEADER_ELEMENT_MISSING:3008,WEBM_SEGMENT_ELEMENT_MISSING:3009,WEBM_INFO_ELEMENT_MISSING:3010,WEBM_DURATION_ELEMENT_MISSING:3011,WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING:3012,WEBM_CUE_TIME_ELEMENT_MISSING:3013,MEDIA_SOURCE_OPERATION_FAILED:3014,MEDIA_SOURCE_OPERATION_THREW:3015,VIDEO_ERROR:3016,QUOTA_EXCEEDED_ERROR:3017,UNABLE_TO_GUESS_MANIFEST_TYPE:4E3,DASH_INVALID_XML:4001,DASH_NO_SEGMENT_INFO:4002,DASH_EMPTY_ADAPTATION_SET:4003,DASH_EMPTY_PERIOD:4004,DASH_WEBM_MISSING_INIT:4005,
DASH_UNSUPPORTED_CONTAINER:4006,DASH_PSSH_BAD_ENCODING:4007,DASH_NO_COMMON_KEY_SYSTEM:4008,DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED:4009,DASH_CONFLICTING_KEY_IDS:4010,UNPLAYABLE_PERIOD:4011,RESTRICTIONS_CANNOT_BE_MET:4012,NO_PERIODS:4014,DASH_DUPLICATE_REPRESENTATION_ID:4018,INVALID_STREAMS_CHOSEN:5005,NO_RECOGNIZED_KEY_SYSTEMS:6E3,REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE:6001,FAILED_TO_CREATE_CDM:6002,FAILED_TO_ATTACH_TO_VIDEO:6003,INVALID_SERVER_CERTIFICATE:6004,FAILED_TO_CREATE_SESSION:6005,FAILED_TO_GENERATE_LICENSE_REQUEST:6006,
LICENSE_REQUEST_FAILED:6007,LICENSE_RESPONSE_REJECTED:6008,ENCRYPTED_CONTENT_WITHOUT_DRM_INFO:6010,NO_LICENSE_SERVER_GIVEN:6012,OFFLINE_SESSION_REMOVED:6013,EXPIRED:6014,LOAD_INTERRUPTED:7E3,CAST_API_UNAVAILABLE:8E3,NO_CAST_RECEIVERS:8001,ALREADY_CASTING:8002,UNEXPECTED_CAST_ERROR:8003,CAST_CANCELED_BY_USER:8004,CAST_CONNECTION_TIMED_OUT:8005,CAST_RECEIVER_APP_UNAVAILABLE:8006,INDEXED_DB_NOT_SUPPORTED:9E3,INDEXED_DB_ERROR:9001,OPERATION_ABORTED:9002,REQUESTED_ITEM_NOT_FOUND:9003,MALFORMED_OFFLINE_URI:9004,
CANNOT_STORE_LIVE_OFFLINE:9005,STORE_ALREADY_IN_PROGRESS:9006,NO_INIT_DATA_FOR_OFFLINE:9007};function w(){var a,b,c=new Promise(function(c,e){a=c;b=e});c.resolve=a;c.reject=b;return c};function ya(a,b,c,d,e){this.C=a;this.l=b;this.A=c;this.B=d;this.s=e;this.f=this.j=this.h=!1;this.v="";this.a=this.i=null;this.b={video:{},player:{}};this.m=0;this.c={};this.g=null}k=ya.prototype;k.o=function(){za(this);this.a&&(this.a.stop(function(){},function(){}),this.a=null);this.B=this.A=this.l=null;this.f=this.j=this.h=!1;this.g=this.c=this.b=this.a=this.i=null;return Promise.resolve()};k.O=function(){return this.f};k.cb=function(){return this.v};
k.init=function(){if(window.chrome&&chrome.cast&&chrome.cast.isAvailable){delete window.__onGCastApiAvailable;this.h=!0;this.l();var a=new chrome.cast.SessionRequest(this.C),a=new chrome.cast.ApiConfig(a,this.kc.bind(this),this.rc.bind(this),"origin_scoped");chrome.cast.initialize(a,function(){},function(){})}else window.__onGCastApiAvailable=function(a){a&&this.init()}.bind(this)};k.fb=function(a){this.i=a;this.f&&Aa(this,{type:"appData",appData:this.i})};
k.cast=function(a){if(!this.h)return Promise.reject(new v(8,8E3));if(!this.j)return Promise.reject(new v(8,8001));if(this.f)return Promise.reject(new v(8,8002));this.g=new w;chrome.cast.requestSession(this.ab.bind(this,a),this.ub.bind(this));return this.g};
k.get=function(a,b){if("video"==a){if(0<=oa.indexOf(b))return this.Fb.bind(this,a,b)}else if("player"==a){if(0<=ta.indexOf(b))return this.Fb.bind(this,a,b);if(0<=ua.indexOf(b))return this.Gc.bind(this,a,b);if(0<=qa.indexOf(b))return this.Cb.bind(this,a,b)}return this.Cb(a,b)};k.set=function(a,b,c){this.b[a][b]=c;Aa(this,{type:"set",targetName:a,property:b,value:c})};
k.ab=function(a,b){this.a=b;this.a.addUpdateListener(this.vb.bind(this));this.a.addMessageListener("urn:x-cast:com.google.shaka.v2",this.lc.bind(this));this.vb();Aa(this,{type:"init",initState:a,appData:this.i});this.g.resolve()};k.ub=function(a){var b=8003;switch(a.code){case "cancel":b=8004;break;case "timeout":b=8005;break;case "receiver_unavailable":b=8006}this.g.reject(new v(8,b,a))};k.Cb=function(a,b){return this.b[a][b]};
k.Fb=function(a,b){Aa(this,{type:"call",targetName:a,methodName:b,args:Array.prototype.slice.call(arguments,2)})};k.Gc=function(a,b){var c=Array.prototype.slice.call(arguments,2),d=new w,e=this.m.toString();this.m++;this.c[e]=d;Aa(this,{type:"asyncCall",targetName:a,methodName:b,args:c,id:e});return d};k.kc=function(a){var b=this.s();this.g=new w;this.ab(b,a)};k.rc=function(a){this.j="available"==a;this.l()};
k.vb=function(){var a=this.a?"connected"==this.a.status:!1;if(this.f&&!a){this.B();for(var b in this.b)this.b[b]={};za(this)}this.v=(this.f=a)?this.a.receiver.friendlyName:"";this.l()};function za(a){for(var b in a.c){var c=a.c[b];delete a.c[b];c.reject(new v(7,7E3))}}
k.lc=function(a,b){var c=wa(b);switch(c.type){case "event":var d=c.targetName,e=c.event;this.A(d,new t(e.type,e));break;case "update":e=c.update;for(d in e){var c=this.b[d]||{},f;for(f in e[d])c[f]=e[d][f]}break;case "asyncComplete":if(d=c.id,f=c.error,c=this.c[d],delete this.c[d],c)if(f){d=new v(f.category,f.code);for(e in f)d[e]=f[e];c.reject(d)}else c.resolve()}};function Aa(a,b){var c=va(b);a.a.sendMessage("urn:x-cast:com.google.shaka.v2",c,function(){},ga)};function Ba(){this.a={}}k=Ba.prototype;k.push=function(a,b){this.a.hasOwnProperty(a)?this.a[a].push(b):this.a[a]=[b]};k.set=function(a,b){this.a[a]=b};k.has=function(a){return this.a.hasOwnProperty(a)};k.get=function(a){return(a=this.a[a])?a.slice():null};k.remove=function(a,b){var c=this.a[a];if(c)for(var d=0;d<c.length;++d)c[d]==b&&(c.splice(d,1),--d)};k.keys=function(){var a=[],b;for(b in this.a)a.push(b);return a};function x(){this.a=new Ba}x.prototype.o=function(){Ca(this);this.a=null;return Promise.resolve()};function y(a,b,c,d){b=new Da(b,c,d);a.a.push(c,b)}x.prototype.la=function(a,b){for(var c=this.a.get(b)||[],d=0;d<c.length;++d){var e=c[d];e.target==a&&(e.la(),this.a.remove(b,e))}};function Ca(a){var b=a.a,c=[],d;for(d in b.a)c.push.apply(c,b.a[d]);for(b=0;b<c.length;++b)c[b].la();a.a.a={}}function Da(a,b,c){this.target=a;this.type=b;this.a=c;this.target.addEventListener(b,c,!1)}
Da.prototype.la=function(){this.target&&(this.target.removeEventListener(this.type,this.a,!1),this.a=this.target=null)};function p(){this.Ba=new Ba;this.U=this}p.prototype.addEventListener=function(a,b){this.Ba.push(a,b)};p.prototype.removeEventListener=function(a,b){this.Ba.remove(a,b)};p.prototype.dispatchEvent=function(a){for(var b=this.Ba.get(a.type)||[],c=0;c<b.length;++c){a.target=this.U;a.currentTarget=this.U;var d=b[c];try{d.handleEvent?d.handleEvent(a):d.call(this,a)}catch(e){}if(a.a)break}return a.defaultPrevented};function z(a,b,c){p.call(this);this.c=a;this.b=b;this.h=this.f=this.g=this.i=this.j=null;this.a=new ya(c,this.Vc.bind(this),this.Wc.bind(this),this.Xc.bind(this),this.qb.bind(this));Ea(this)}ba(z);m("shaka.cast.CastProxy",z);z.prototype.o=function(){var a=[this.h?this.h.o():null,this.b?this.b.o():null,this.a?this.a.o():null];this.a=this.h=this.i=this.j=this.b=this.c=null;return Promise.all(a)};z.prototype.destroy=z.prototype.o;z.prototype.cc=function(){return this.j};z.prototype.getVideo=z.prototype.cc;
z.prototype.ac=function(){return this.i};z.prototype.getPlayer=z.prototype.ac;z.prototype.Qb=function(){return this.a?this.a.h&&this.a.j:!1};z.prototype.canCast=z.prototype.Qb;z.prototype.O=function(){return this.a?this.a.O():!1};z.prototype.isCasting=z.prototype.O;z.prototype.cb=function(){return this.a?this.a.cb():""};z.prototype.receiverName=z.prototype.cb;z.prototype.cast=function(){var a=this.qb();return this.a.cast(a).then(function(){return this.b.kb()}.bind(this))};z.prototype.cast=z.prototype.cast;
z.prototype.fb=function(a){this.a.fb(a)};z.prototype.setAppData=z.prototype.fb;z.prototype.cd=function(){var a=this.a;if(a.f){var b=a.s();chrome.cast.requestSession(a.ab.bind(a,b),a.ub.bind(a))}};z.prototype.suggestDisconnect=z.prototype.cd;
function Ea(a){a.a.init();a.h=new x;la.forEach(function(a){y(this.h,this.c,a,this.kd.bind(this))}.bind(a));pa.forEach(function(a){y(this.h,this.b,a,this.Cc.bind(this))}.bind(a));a.j={};for(var b in a.c)Object.defineProperty(a.j,b,{configurable:!1,enumerable:!0,get:a.jd.bind(a,b),set:a.ld.bind(a,b)});a.i={};for(b in a.b)Object.defineProperty(a.i,b,{configurable:!1,enumerable:!0,get:a.Bc.bind(a,b)});a.g=new p;a.g.U=a.j;a.f=new p;a.f.U=a.i}k=z.prototype;
k.qb=function(){var a={video:{},player:{},playerAfterLoad:{},manifest:this.b.pa,startTime:null};this.c.pause();na.forEach(function(b){a.video[b]=this.c[b]}.bind(this));this.c.ended||(a.startTime=this.c.currentTime);ra.forEach(function(b){var c=b[1];b=this.b[b[0]]();a.player[c]=b}.bind(this));sa.forEach(function(b){var c=b[1];b=this.b[b[0]]();a.playerAfterLoad[c]=b}.bind(this));return a};k.Vc=function(){this.dispatchEvent(new t("caststatuschanged"))};
k.Xc=function(){ra.forEach(function(a){var b=a[1];a=this.a.get("player",a[0])();this.b[b](a)}.bind(this));var a=this.a.get("player","getManifestUri")(),b=this.a.get("video","ended"),c=Promise.resolve(),d=this.c.autoplay,e=null;b||(e=this.a.get("video","currentTime"));a&&(this.c.autoplay=!1,c=this.b.load(a,e),c["catch"](function(a){this.b.dispatchEvent(new t("error",{detail:a}))}.bind(this)));var f={};na.forEach(function(a){f[a]=this.a.get("video",a)}.bind(this));c.then(function(){na.forEach(function(a){this.c[a]=
f[a]}.bind(this));sa.forEach(function(a){var b=a[1];a=this.a.get("player",a[0])();this.b[b](a)}.bind(this));this.c.autoplay=d;a&&this.c.play()}.bind(this))};
k.jd=function(a){if("addEventListener"==a)return this.g.addEventListener.bind(this.g);if("removeEventListener"==a)return this.g.removeEventListener.bind(this.g);if(this.a.O()&&!Object.keys(this.a.b.video).length){var b=this.c[a];if("function"!=typeof b)return b}return this.a.O()?this.a.get("video",a):(b=this.c[a],"function"==typeof b&&(b=b.bind(this.c)),b)};k.ld=function(a,b){this.a.O()?this.a.set("video",a,b):this.c[a]=b};k.kd=function(a){this.a.O()||this.g.dispatchEvent(new t(a.type,a))};
k.Bc=function(a){return"addEventListener"==a?this.f.addEventListener.bind(this.f):"removeEventListener"==a?this.f.removeEventListener.bind(this.f):"getNetworkingEngine"==a?this.b.rb.bind(this.b):this.a.O()&&!Object.keys(this.a.b.video).length&&0<=qa.indexOf(a)||!this.a.O()?(a=this.b[a],a.bind(this.b)):this.a.get("player",a)};k.Cc=function(a){this.a.O()||this.f.dispatchEvent(a)};k.Wc=function(a,b){this.a.O()&&("video"==a?this.g.dispatchEvent(b):"player"==a&&this.f.dispatchEvent(b))};function A(a,b,c){p.call(this);this.b=a;this.a=b;this.i={video:a,player:b};this.j=c||function(){};this.h=!1;this.c=!0;this.f=this.g=null;Fa(this)}ba(A);m("shaka.cast.CastReceiver",A);A.prototype.ec=function(){return this.h};A.prototype.isConnected=A.prototype.ec;A.prototype.fc=function(){return this.c};A.prototype.isIdle=A.prototype.fc;
A.prototype.o=function(){var a=this.a?this.a.o():Promise.resolve();null!=this.f&&window.clearTimeout(this.f);this.j=this.i=this.a=this.b=null;this.h=!1;this.c=!0;this.f=this.g=null;return a.then(function(){cast.receiver.CastReceiverManager.getInstance().stop()})};A.prototype.destroy=A.prototype.o;
function Fa(a){var b=cast.receiver.CastReceiverManager.getInstance();b.onSenderConnected=a.Ab.bind(a);b.onSenderDisconnected=a.Ab.bind(a);b.onSystemVolumeChanged=a.Xb.bind(a);a.g=b.getCastMessageBus("urn:x-cast:com.google.shaka.v2");a.g.onMessage=a.mc.bind(a);b.start();la.forEach(function(a){this.b.addEventListener(a,this.Db.bind(this,"video"))}.bind(a));pa.forEach(function(a){this.a.addEventListener(a,this.Db.bind(this,"player"))}.bind(a));cast.__platform__&&cast.__platform__.canDisplayType('video/mp4; codecs="avc1.640028"; width=3840; height=2160')?
a.a.gb(3840,2160):a.a.gb(1920,1080);a.a.addEventListener("loading",function(){this.c=!1;Ga(this)}.bind(a));a.b.addEventListener("playing",function(){this.c=!1;Ga(this)}.bind(a));a.a.addEventListener("unloading",function(){this.c=!0;Ga(this)}.bind(a));a.b.addEventListener("ended",function(){window.setTimeout(function(){this.b&&this.b.ended&&(this.c=!0,Ga(this))}.bind(this),5E3)}.bind(a))}k=A.prototype;k.Ab=function(){this.h=!!cast.receiver.CastReceiverManager.getInstance().getSenders().length;Ga(this)};
function Ga(a){Promise.resolve().then(function(){this.dispatchEvent(new t("caststatuschanged"))}.bind(a))}
function Ha(a,b,c){for(var d in b.player)a.a[d](b.player[d]);a.j(c);c=Promise.resolve();var e=a.b.autoplay;b.manifest&&(a.b.autoplay=!1,c=a.a.load(b.manifest,b.startTime),c["catch"](function(a){this.a.dispatchEvent(new t("error",{detail:a}))}.bind(a)));c.then(function(){for(var a in b.video){var c=b.video[a];this.b[a]=c}for(a in b.playerAfterLoad)c=b.playerAfterLoad[a],this.a[a](c);this.b.autoplay=e;b.manifest&&this.b.play()}.bind(a))}
k.Db=function(a,b){this.bb();Ia(this,{type:"event",targetName:a,event:b})};k.bb=function(){null!=this.f&&window.clearTimeout(this.f);this.f=window.setTimeout(this.bb.bind(this),500);var a={video:{},player:{}};ma.forEach(function(b){a.video[b]=this.b[b]}.bind(this));qa.forEach(function(b){a.player[b]=this.a[b]()}.bind(this));var b=cast.receiver.CastReceiverManager.getInstance().getSystemVolume();b&&(a.video.volume=b.level,a.video.muted=b.muted);Ia(this,{type:"update",update:a})};
k.Xb=function(){var a=cast.receiver.CastReceiverManager.getInstance().getSystemVolume();a&&Ia(this,{type:"update",update:{video:{volume:a.level,muted:a.muted}}});Ia(this,{type:"event",targetName:"video",event:{type:"volumechange"}})};
k.mc=function(a){var b=wa(a.data);switch(b.type){case "init":Ha(this,b.initState,b.appData);this.bb();break;case "appData":this.j(b.appData);break;case "set":var c=b.targetName,d=b.property,e=b.value;if("video"==c)if(b=cast.receiver.CastReceiverManager.getInstance(),"volume"==d){b.setSystemVolumeLevel(e);break}else if("muted"==d){b.setSystemVolumeMuted(e);break}this.i[c][d]=e;break;case "call":c=b.targetName;d=b.methodName;e=b.args;c=this.i[c];c[d].apply(c,e);break;case "asyncCall":c=b.targetName,
d=b.methodName,e=b.args,b=b.id,a=a.senderId,c=this.i[c],c[d].apply(c,e).then(this.Jb.bind(this,a,b,null),this.Jb.bind(this,a,b))}};k.Jb=function(a,b,c){Ia(this,{type:"asyncComplete",id:b,error:c},a)};function Ia(a,b,c){a.h&&(b=va(b),c?a.g.getCastChannel(c).send(b):a.g.broadcast(b))};function Ja(a,b){return a.reduce(function(a,b,e){return b["catch"](a.bind(null,e))}.bind(null,b),Promise.reject())}function B(a,b){return a.concat(b)}function C(){}function Ka(a){return null!=a}function La(a){return function(b){return b!=a}}function Ma(a,b,c){return c.indexOf(a)==b};function Na(a){return!a||!Object.keys(a).length}function F(a){return Object.keys(a).map(function(b){return a[b]})}function Oa(a,b){return Object.keys(a).reduce(function(c,d){c[d]=b(a[d],d);return c},{})}function Pa(a,b){return Object.keys(a).every(function(c){return b(c,a[c])})};function Qa(a){return window.btoa(String.fromCharCode.apply(null,a)).replace(/\+/g,"-").replace(/\//g,"_").replace(/=*$/,"")}function Ra(a){a=window.atob(a.replace(/-/g,"+").replace(/_/g,"/"));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}function Sa(a){for(var b=new Uint8Array(a.length/2),c=0;c<a.length;c+=2)b[c/2]=window.parseInt(a.substr(c,2),16);return b}
function Ta(a){for(var b="",c=0;c<a.length;++c){var d=a[c].toString(16);1==d.length&&(d="0"+d);b+=d}return b}function Ua(a,b){if(!a&&!b)return!0;if(!a||!b||a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(a[c]!=b[c])return!1;return!0};function Va(a,b){var c=G(a,b);return 1!=c.length?null:c[0]}function G(a,b){return Array.prototype.filter.call(a.childNodes,function(a){return a.tagName==b})}function Wa(a){var b=a.firstChild;return b&&b.nodeType==Node.TEXT_NODE?a.textContent.trim():null}function H(a,b,c,d){var e=null;a=a.getAttribute(b);null!=a&&(e=c(a));return null==e?void 0!==d?d:null:e}function Xa(a){if(!a)return null;a=Date.parse(a);return isNaN(a)?null:Math.floor(a/1E3)}
function I(a){if(!a)return null;a=/^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);if(!a)return null;a=31536E3*Number(a[1]||null)+2592E3*Number(a[2]||null)+86400*Number(a[3]||null)+3600*Number(a[4]||null)+60*Number(a[5]||null)+Number(a[6]||null);return isFinite(a)?a:null}function Ya(a){var b=/([0-9]+)-([0-9]+)/.exec(a);if(!b)return null;a=Number(b[1]);if(!isFinite(a))return null;b=Number(b[2]);return isFinite(b)?{start:a,end:b}:null}
function Za(a){a=Number(a);return a%1?null:a}function $a(a){a=Number(a);return!(a%1)&&0<a?a:null}function bb(a){a=Number(a);return!(a%1)&&0<=a?a:null}function cb(a){var b;a=(b=a.match(/^(\d+)\/(\d+)$/))?Number(b[1]/b[2]):Number(a);return isNaN(a)?null:a};var db={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"};
function eb(a,b){var c=fb(a),d=null,e=c.filter(function(a){return"urn:mpeg:dash:mp4protection:2011"==a.Ib?(d=a.init||d,!1):!0}),f=c.map(function(a){return a.keyId}).filter(Ka),g=null;if(0<f.length&&(g=f[0],f.some(La(g))))throw new v(4,4010);f=[];0<e.length?(f=gb(d,b,e),f.length||(f=[hb("",d)])):0<c.length&&(f=F(db).map(function(a){return hb(a,d)}));return{nb:g,od:d,drmInfos:f,pb:!0}}
function ib(a,b,c){var d=eb(a,b);if(c.pb){a=1==c.drmInfos.length&&!c.drmInfos[0].keySystem;b=!d.drmInfos.length;if(!c.drmInfos.length||a&&!b)c.drmInfos=d.drmInfos;c.pb=!1}else if(0<d.drmInfos.length&&(c.drmInfos=c.drmInfos.filter(function(a){return d.drmInfos.some(function(b){return b.keySystem==a.keySystem})}),!c.drmInfos.length))throw new v(4,4008);return d.nb||c.nb}
function hb(a,b){return{keySystem:a,licenseServerUri:"",distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",videoRobustness:"",serverCertificate:null,initData:b||[],keyIds:[]}}function gb(a,b,c){return c.map(function(c){var d=db[c.Ib];return d?[hb(d,c.init||a)]:b(c.node)||[]}).reduce(B,[])}
function fb(a){return a.map(function(a){var b=a.getAttribute("schemeIdUri"),d=a.getAttribute("cenc:default_KID"),e=G(a,"cenc:pssh").map(Wa);if(!b)return null;b=b.toLowerCase();if(d&&(d=d.replace(/-/g,"").toLowerCase(),0<=d.indexOf(" ")))throw new v(4,4009);var f=[];try{f=e.map(function(a){return{initDataType:"cenc",initData:Ra(a)}})}catch(g){throw new v(4,4007);}return{node:a,Ib:b,keyId:d,init:0<f.length?f:null}}).filter(Ka)};var jb=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;function kb(a){var b;a instanceof kb?(lb(this,a.T),this.ma=a.ma,this.V=a.V,mb(this,a.ya),this.P=a.P,nb(this,ob(a.a)),this.da=a.da):a&&(b=String(a).match(jb))?(lb(this,b[1]||"",!0),this.ma=pb(b[2]||""),this.V=pb(b[3]||"",!0),mb(this,b[4]),this.P=pb(b[5]||"",!0),nb(this,b[6]||"",!0),this.da=pb(b[7]||"")):this.a=new qb(null)}k=kb.prototype;k.T="";k.ma="";k.V="";k.ya=null;k.P="";k.da="";
k.toString=function(){var a=[],b=this.T;b&&a.push(rb(b,sb,!0),":");if(b=this.V){a.push("//");var c=this.ma;c&&a.push(rb(c,sb,!0),"@");a.push(encodeURIComponent(b).replace(/%25([0-9a-fA-F]{2})/g,"%$1"));b=this.ya;null!=b&&a.push(":",String(b))}if(b=this.P)this.V&&"/"!=b.charAt(0)&&a.push("/"),a.push(rb(b,"/"==b.charAt(0)?tb:ub,!0));(b=this.a.toString())&&a.push("?",b);(b=this.da)&&a.push("#",rb(b,vb));return a.join("")};
k.resolve=function(a){var b=new kb(this);"data"===b.T&&(b=new kb);var c=!!a.T;c?lb(b,a.T):c=!!a.ma;c?b.ma=a.ma:c=!!a.V;c?b.V=a.V:c=null!=a.ya;var d=a.P;if(c)mb(b,a.ya);else if(c=!!a.P){if("/"!=d.charAt(0))if(this.V&&!this.P)d="/"+d;else{var e=b.P.lastIndexOf("/");-1!=e&&(d=b.P.substr(0,e+1)+d)}if(".."==d||"."==d)d="";else if(-1!=d.indexOf("./")||-1!=d.indexOf("/.")){for(var e=!d.lastIndexOf("/",0),d=d.split("/"),f=[],g=0;g<d.length;){var h=d[g++];"."==h?e&&g==d.length&&f.push(""):".."==h?((1<f.length||
1==f.length&&""!=f[0])&&f.pop(),e&&g==d.length&&f.push("")):(f.push(h),e=!0)}d=f.join("/")}}c?b.P=d:c=""!==a.a.toString();c?nb(b,ob(a.a)):c=!!a.da;c&&(b.da=a.da);return b};function lb(a,b,c){a.T=c?pb(b,!0):b;a.T&&(a.T=a.T.replace(/:$/,""))}function mb(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.ya=b}else a.ya=null}function nb(a,b,c){b instanceof qb?a.a=b:(c||(b=rb(b,wb)),a.a=new qb(b))}function pb(a,b){return a?b?decodeURI(a):decodeURIComponent(a):""}
function rb(a,b,c){return"string"==typeof a?(a=encodeURI(a).replace(b,xb),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function xb(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var sb=/[#\/\?@]/g,ub=/[\#\?:]/g,tb=/[\#\?]/g,wb=/[\#\?@]/g,vb=/#/g;function qb(a){this.b=a||null}qb.prototype.a=null;qb.prototype.c=null;
qb.prototype.toString=function(){if(this.b)return this.b;if(!this.a)return"";var a=[],b;for(b in this.a)for(var c=encodeURIComponent(b),d=this.a[b],e=0;e<d.length;e++){var f=c;""!==d[e]&&(f+="="+encodeURIComponent(d[e]));a.push(f)}return this.b=a.join("&")};function ob(a){var b=new qb;b.b=a.b;if(a.a){var c={},d;for(d in a.a)c[d]=a.a[d].concat();b.a=c;b.c=a.c}return b};function yb(a,b,c){this.a=a;this.M=b;this.D=c}m("shaka.media.InitSegmentReference",yb);function J(a,b,c,d,e,f){this.position=a;this.startTime=b;this.endTime=c;this.a=d;this.M=e;this.D=f}m("shaka.media.SegmentReference",J);var zb=1/15;function Ab(a,b,c,d,e){null!==e&&(e=Math.round(e));var f={RepresentationID:b,Number:c,Bandwidth:d,Time:e};return a.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g,function(a,b,c){if("$$"==a)return"$";var d=f[b];if(null==d)return a;"RepresentationID"==b&&c&&(c=void 0);a=d.toString();c=window.parseInt(c,10)||1;return Array(Math.max(0,c-a.length)+1).join("0")+a})}
function Bb(a,b,c){if(c.length){var d=c[0];d.startTime<=zb&&(c[0]=new J(d.position,0,d.endTime,d.a,d.M,d.D));a||(a=c[c.length-1],a.startTime>b||(c[c.length-1]=new J(a.position,a.startTime,b,a.a,a.M,a.D)))}}function K(a,b){if(!b.length)return a;var c=b.map(function(a){return new kb(a)});return a.map(function(a){return new kb(a)}).map(function(a){return c.map(a.resolve.bind(a))}).reduce(B,[]).map(function(a){return a.toString()})}
function Cb(a,b){var c=L(a,b,"timescale"),d=1;c&&(d=$a(c)||1);c=L(a,b,"duration");(c=$a(c||""))&&(c/=d);var e=L(a,b,"startNumber"),f=L(a,b,"presentationTimeOffset"),g=bb(e||"");if(null==e||null==g)g=1;var h=Db(a,b,"SegmentTimeline"),e=null;if(h){for(var e=d,l=Number(f),n=a.I.duration||Infinity,h=G(h,"S"),r=[],u=0,X=0;X<h.length;++X){var D=h[X],E=H(D,"t",bb),ab=H(D,"d",bb),D=H(D,"r",Za);null!=E&&(E-=l);if(!ab)break;E=null!=E?E:u;D=D||0;if(0>D)if(X+1<h.length){D=H(h[X+1],"t",bb);if(null==D)break;else if(E>=
D)break;D=Math.ceil((D-E)/ab)-1}else{if(Infinity==n)break;else if(E/e>=n)break;D=Math.ceil((n*e-E)/ab)-1}0<r.length&&E!=u&&(r[r.length-1].end=E/e);for(var Yc=0;Yc<=D;++Yc)u=E+ab,r.push({start:E/e,end:u/e,gd:E}),E=u}e=r}return{timescale:d,G:c,ja:g,presentationTimeOffset:Number(f)/d||0,lb:Number(f),w:e}}function L(a,b,c){return[b(a.u),b(a.R),b(a.L)].filter(Ka).map(function(a){return a.getAttribute(c)}).reduce(function(a,b){return a||b})}
function Db(a,b,c){return[b(a.u),b(a.R),b(a.L)].filter(Ka).map(function(a){return Va(a,c)}).reduce(function(a,b){return a||b})};function Eb(a){if(!a)return"";a=new Uint8Array(a);239==a[0]&&187==a[1]&&191==a[2]&&(a=a.subarray(3));a=escape(Fb(a));try{return decodeURIComponent(a)}catch(b){throw new v(2,2004);}}function Gb(a,b){if(!a)return"";if(a.byteLength%2)throw new v(2,2004);var c;if(a instanceof ArrayBuffer)c=a;else{var d=new Uint8Array(a.byteLength);d.set(new Uint8Array(a));c=d.buffer}var d=a.byteLength/2,e=new Uint16Array(d);c=new DataView(c);for(var f=0;f<d;f++)e[f]=c.getUint16(2*f,b);return Fb(e)}
function Hb(a){var b=new Uint8Array(a);if(239==b[0]&&187==b[1]&&191==b[2])return Eb(b);if(254==b[0]&&255==b[1])return Gb(b.subarray(2),!1);if(255==b[0]&&254==b[1])return Gb(b.subarray(2),!0);var c=function(a,b){return a.byteLength<=b||32<=a[b]&&126>=a[b]}.bind(null,b);if(b[0]||b[2]){if(!b[1]&&!b[3])return Gb(a,!0);if(c(0)&&c(1)&&c(2)&&c(3))return Eb(a)}else return Gb(a,!1);throw new v(2,2003);}
function Ib(a){a=unescape(encodeURIComponent(a));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b.buffer}function Fb(a){for(var b="",c=0;c<a.length;c+=16E3)b+=String.fromCharCode.apply(null,a.subarray(c,c+16E3));return b};function Jb(a){this.b=a;this.c=0==Kb;this.a=0}var Kb=1;function Lb(a){return a.a<a.b.byteLength}function Mb(a){try{var b=a.b.getUint8(a.a)}catch(c){Nb()}a.a+=1;return b}function Ob(a){try{var b=a.b.getUint16(a.a,a.c)}catch(c){Nb()}a.a+=2;return b}function M(a){try{var b=a.b.getUint32(a.a,a.c)}catch(c){Nb()}a.a+=4;return b}
function Pb(a){var b,c;try{a.c?(b=a.b.getUint32(a.a,!0),c=a.b.getUint32(a.a+4,!0)):(c=a.b.getUint32(a.a,!1),b=a.b.getUint32(a.a+4,!1))}catch(d){Nb()}if(2097151<c)throw new v(3,3001);a.a+=8;return c*Math.pow(2,32)+b}function Qb(a,b){a.a+b>a.b.byteLength&&Nb();var c=a.b.buffer.slice(a.a,a.a+b);a.a+=b;return new Uint8Array(c)}function N(a,b){a.a+b>a.b.byteLength&&Nb();a.a+=b}
function Rb(a){var b=a.a;try{for(;Lb(a)&&a.b.getUint8(a.a);)a.a+=1}catch(c){Nb()}b=a.b.buffer.slice(b,a.a);a.a+=1;return Eb(b)}function Nb(){throw new v(3,3E3);};function Sb(a,b){for(;Lb(b);){var c=b.a,d=M(b),e=M(b);1==d?d=Pb(b):d||(d=b.b.byteLength-c);if(e==a)return d;N(b,d-(b.a-c))}return-1}function Tb(a,b){for(var c=new Jb(new DataView(a)),d=[[1836019574,0],[1953653099,0],[1835297121,0],[1835626086,0],[1937007212,0],[1937011556,8],[b,0]],e=-1,f=0;f<d.length;f++){var g=d[f][1],e=Sb(d[f][0],c);if(-1==e)return-1;N(c,g)}return e};function Ub(a,b,c,d){var e=[];a=new Jb(new DataView(a));var f=Sb(1936286840,a);if(-1==f)throw new v(3,3004);var g=Mb(a);N(a,3);N(a,4);var h=M(a);if(!h)throw new v(3,3005);var l,n;g?(l=Pb(a),n=Pb(a)):(l=M(a),n=M(a));N(a,2);g=Ob(a);d=l-d;b=b+f+n;for(f=0;f<g;f++){l=M(a);n=(l&2147483648)>>>31;l&=2147483647;var r=M(a);N(a,4);if(1==n)throw new v(3,3006);e.push(new J(e.length,d/h,(d+r)/h,function(){return c},b,b+l-1));d+=r;b+=l}return e};function O(a){this.a=a}m("shaka.media.SegmentIndex",O);O.prototype.o=function(){this.a=null;return Promise.resolve()};O.prototype.destroy=O.prototype.o;O.prototype.find=function(a){for(var b=this.a.length-1;0<=b;--b){var c=this.a[b];if(a>=c.startTime&&a<c.endTime)return c.position}return null};O.prototype.find=O.prototype.find;O.prototype.get=function(a){if(!this.a.length)return null;a-=this.a[0].position;return 0>a||a>=this.a.length?null:this.a[a]};O.prototype.get=O.prototype.get;
O.prototype.Za=function(a){for(var b=[],c=0,d=0;c<this.a.length&&d<a.length;){var e=this.a[c],f=a[d];e.startTime<f.startTime?(b.push(e),c++):(e.startTime>f.startTime||(.1<Math.abs(e.endTime-f.endTime)?b.push(f):b.push(e),c++),d++)}for(;c<this.a.length;)b.push(this.a[c++]);if(b.length)for(c=b[b.length-1].position+1;d<a.length;)f=a[d++],f=new J(c++,f.startTime,f.endTime,f.a,f.M,f.D),b.push(f);else b=a;this.a=b};O.prototype.merge=O.prototype.Za;
O.prototype.Ta=function(a){for(var b=0;b<this.a.length&&!(this.a[b].endTime>a);++b);this.a.splice(0,b)};O.prototype.evict=O.prototype.Ta;function Vb(a){this.b=a;this.a=new Jb(a);Wb||(Wb=[new Uint8Array([255]),new Uint8Array([127,255]),new Uint8Array([63,255,255]),new Uint8Array([31,255,255,255]),new Uint8Array([15,255,255,255,255]),new Uint8Array([7,255,255,255,255,255]),new Uint8Array([3,255,255,255,255,255,255]),new Uint8Array([1,255,255,255,255,255,255,255])])}var Wb;
function Xb(a){var b;b=Yb(a);if(7<b.length)throw new v(3,3002);for(var c=0,d=0;d<b.length;d++)c=256*c+b[d];b=c;c=Yb(a);a:{for(d=0;d<Wb.length;d++)if(Ua(c,Wb[d])){d=!0;break a}d=!1}if(d)c=a.b.byteLength-a.a.a;else{if(8==c.length&&c[1]&224)throw new v(3,3001);for(var d=c[0]&(1<<8-c.length)-1,e=1;e<c.length;e++)d=256*d+c[e];c=d}c=a.a.a+c<=a.b.byteLength?c:a.b.byteLength-a.a.a;d=new DataView(a.b.buffer,a.b.byteOffset+a.a.a,c);N(a.a,c);return new Zb(b,d)}
function Yb(a){var b=Mb(a.a),c;for(c=1;8>=c&&!(b&1<<8-c);c++);if(8<c)throw new v(3,3002);var d=new Uint8Array(c);d[0]=b;for(b=1;b<c;b++)d[b]=Mb(a.a);return d}function Zb(a,b){this.id=a;this.a=b}function $b(a){if(8<a.a.byteLength)throw new v(3,3002);if(8==a.a.byteLength&&a.a.getUint8(0)&224)throw new v(3,3001);for(var b=0,c=0;c<a.a.byteLength;c++)var d=a.a.getUint8(c),b=256*b+d;return b};function ac(a,b,c,d,e,f){function g(){return e}var h=[];a=new Vb(a.a);for(var l=-1,n=-1;Lb(a.a);){var r=Xb(a);if(187==r.id){var u=bc(r);u&&(r=c*(u.hd-f),u=b+u.Fc,0<=l&&h.push(new J(h.length,l,r,g,n,u-1)),l=r,n=u)}}0<=l&&h.push(new J(h.length,l,d,g,n,null));return h}function bc(a){var b=new Vb(a.a);a=Xb(b);if(179!=a.id)throw new v(3,3013);a=$b(a);b=Xb(b);if(183!=b.id)throw new v(3,3012);for(var b=new Vb(b.a),c=0;Lb(b.a);){var d=Xb(b);if(241==d.id){c=$b(d);break}}return{hd:a,Fc:c}};function cc(a,b){var c=Db(a,b,"Initialization");if(!c)return null;var d=a.u.N,e=c.getAttribute("sourceURL");e&&(d=K(a.u.N,[e]));var e=0,f=null;if(c=H(c,"range",Ya))e=c.start,f=c.end;return new yb(function(){return d},e,f)}
function dc(a,b){var c=L(a,ec,"presentationTimeOffset"),d=cc(a,ec),e;e=Number(c);var f=a.u.contentType,g=a.u.mimeType.split("/")[1];if("text"!=f&&"mp4"!=g&&"webm"!=g)throw new v(4,4006);if("webm"==g&&!d)throw new v(4,4005);var f=Db(a,ec,"RepresentationIndex"),h=L(a,ec,"indexRange"),l=a.u.N,h=Ya(h||"");if(f){var n=f.getAttribute("sourceURL");n&&(l=K(a.u.N,[n]));h=H(f,"range",Ya,h)}if(!h)throw new v(4,4002);e=fc(a,b,d,l,h.start,h.end,g,e);return{createSegmentIndex:e.createSegmentIndex,findSegmentPosition:e.findSegmentPosition,
getSegmentReference:e.getSegmentReference,initSegmentReference:d,presentationTimeOffset:Number(c)||0}}
function fc(a,b,c,d,e,f,g,h){var l=a.presentationTimeline,n=a.I.start,r=a.I.duration,u=b,X=null;return{createSegmentIndex:function(){var b=[u(d,e,f),"webm"==g?u(c.a(),c.M,c.D):null];u=null;return Promise.all(b).then(function(b){var c,f,u=b[0];b=b[1]||null;if("mp4"==g)u=Ub(u,e,d,h);else{b=new Vb(new DataView(b));if(440786851!=Xb(b).id)throw new v(3,3008);f=Xb(b);if(408125543!=f.id)throw new v(3,3009);b=f.a.byteOffset;f=new Vb(f.a);for(c=null;Lb(f.a);){var D=Xb(f);if(357149030==D.id){c=D;break}}if(!c)throw new v(3,
3010);c=new Vb(c.a);D=1E6;for(f=null;Lb(c.a);){var E=Xb(c);if(2807729==E.id)D=$b(E);else if(17545==E.id)if(f=E,4==f.a.byteLength)f=f.a.getFloat32(0);else if(8==f.a.byteLength)f=f.a.getFloat64(0);else throw new v(3,3003);}if(null==f)throw new v(3,3011);c=D/=1E9;f*=D;u=Xb(new Vb(new DataView(u)));if(475249515!=u.id)throw new v(3,3007);u=ac(u,b,c,f,d,h)}Bb(a.Sa,r,u);l.Ha(n,u);X=new O(u)})},findSegmentPosition:function(a){return X.find(a)},getSegmentReference:function(a){return X.get(a)}}}
function ec(a){return a.Ia};function gc(a,b){var c=cc(a,hc),d;d=ic(a);var e=Cb(a,hc),f=e.ja;f||(f=1);var g=0;e.G?g=e.G*(f-1):e.w&&0<e.w.length&&(g=e.w[0].start);d={G:e.G,startTime:g,ja:f,presentationTimeOffset:e.presentationTimeOffset,w:e.w,wa:d};if(!d.G&&!d.w&&1<d.wa.length)throw new v(4,4002);if(!d.G&&!a.I.duration&&!d.w&&1==d.wa.length)throw new v(4,4002);if(d.w&&!d.w.length)throw new v(4,4002);f=e=null;a.L.id&&a.u.id&&(f=a.L.id+","+a.u.id,e=b[f]);g=jc(a.I.duration,d.ja,a.u.N,d);Bb(a.Sa,a.I.duration,g);e?(e.Za(g),e.Ta(a.presentationTimeline.ua()-
a.I.start)):(a.presentationTimeline.Ha(a.I.start,g),e=new O(g),f&&(b[f]=e));return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:e.find.bind(e),getSegmentReference:e.get.bind(e),initSegmentReference:c,presentationTimeOffset:d.presentationTimeOffset}}function hc(a){return a.$}
function jc(a,b,c,d){var e=d.wa.length;d.w&&d.w.length!=d.wa.length&&(e=Math.min(d.w.length,d.wa.length));for(var f=[],g=d.startTime,h=0;h<e;h++){var l=d.wa[h],n=K(c,[l.ic]),r;r=null!=d.G?g+d.G:d.w?d.w[h].end:g+a;f.push(new J(h+b,g,r,function(a){return a}.bind(null,n),l.start,l.end));g=r}return f}
function ic(a){return[a.u.$,a.R.$,a.L.$].filter(Ka).map(function(a){return G(a,"SegmentURL")}).reduce(function(a,c){return 0<a.length?a:c}).map(function(b){b.getAttribute("indexRange")&&!a.tb&&(a.tb=!0);var c=b.getAttribute("media");b=H(b,"mediaRange",Ya,{start:0,end:null});return{ic:c,start:b.start,end:b.end}})};function kc(a,b,c,d){var e=lc(a),f;f=Cb(a,mc);var g=L(a,mc,"media"),h=L(a,mc,"index");f={G:f.G,timescale:f.timescale,ja:f.ja,presentationTimeOffset:f.presentationTimeOffset,lb:f.lb,w:f.w,Ya:g,Fa:h};g=0+(f.Fa?1:0);g+=f.w?1:0;g+=f.G?1:0;if(!g)throw new v(4,4002);1!=g&&(f.Fa&&(f.w=null),f.G=null);if(!f.Fa&&!f.Ya)throw new v(4,4002);if(f.Fa){c=a.u.mimeType.split("/")[1];if("mp4"!=c&&"webm"!=c)throw new v(4,4006);if("webm"==c&&!e)throw new v(4,4005);d=Ab(f.Fa,a.u.id,null,a.bandwidth||null,null);d=K(a.u.N,
[d]);a=fc(a,b,e,d,0,null,c,f.presentationTimeOffset)}else f.G?(d||a.presentationTimeline.$a(f.G),a=nc(a,f)):(d=b=null,a.L.id&&a.u.id&&(d=a.L.id+","+a.u.id,b=c[d]),g=oc(a,f),Bb(a.Sa,a.I.duration,g),b?(b.Za(g),b.Ta(a.presentationTimeline.ua()-a.I.start)):(a.presentationTimeline.Ha(a.I.start,g),b=new O(g),d&&(c[d]=b)),a={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:b.find.bind(b),getSegmentReference:b.get.bind(b)});return{createSegmentIndex:a.createSegmentIndex,findSegmentPosition:a.findSegmentPosition,
getSegmentReference:a.getSegmentReference,initSegmentReference:e,presentationTimeOffset:f.presentationTimeOffset}}function mc(a){return a.Ja}
function nc(a,b){var c=a.I.duration,d=b.G,e=b.ja,f=b.timescale,g=b.Ya,h=a.bandwidth||null,l=a.u.id,n=a.u.N;return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0>a||c&&a>=c?null:Math.floor(a/d)},getSegmentReference:function(a){var b=a*d;return 0>b||c&&b>=c?null:new J(a,b,b+d,function(){var c=Ab(g,l,a+e,h,b*f);return K(n,[c])},0,null)}}}
function oc(a,b){for(var c=[],d=0;d<b.w.length;d++){var e=d+b.ja;c.push(new J(e,b.w[d].start,b.w[d].end,function(a,b,c,d,e,r){a=Ab(a,b,e,c,r);return K(d,[a]).map(function(a){return a.toString()})}.bind(null,b.Ya,a.u.id,a.bandwidth||null,a.u.N,e,b.w[d].gd+b.lb),0,null))}return c}function lc(a){var b=L(a,mc,"initialization");if(!b)return null;var c=a.u.id,d=a.bandwidth||null,e=a.u.N;return new yb(function(){var a=Ab(b,c,null,d,null);return K(e,[a])},0,null)};function P(a){this.f=!1;this.a=[];this.b=[];this.c=[];this.h=a||null}m("shaka.net.NetworkingEngine",P);P.RequestType={MANIFEST:0,SEGMENT:1,LICENSE:2};var pc={};P.registerScheme=function(a,b){pc[a]=b};P.unregisterScheme=function(a){delete pc[a]};P.prototype.Ec=function(a){this.b.push(a)};P.prototype.registerRequestFilter=P.prototype.Ec;P.prototype.fd=function(a){var b=this.b;a=b.indexOf(a);0<=a&&b.splice(a,1)};P.prototype.unregisterRequestFilter=P.prototype.fd;P.prototype.Tb=function(){this.b=[]};
P.prototype.clearAllRequestFilters=P.prototype.Tb;P.prototype.Eb=function(a){this.c.push(a)};P.prototype.registerResponseFilter=P.prototype.Eb;P.prototype.Ob=function(a){var b=this.c;a=b.indexOf(a);0<=a&&b.splice(a,1)};P.prototype.unregisterResponseFilter=P.prototype.Ob;P.prototype.Ub=function(){this.c=[]};P.prototype.clearAllResponseFilters=P.prototype.Ub;function qc(){return{maxAttempts:2,baseDelay:1E3,backoffFactor:2,fuzzFactor:.5,timeout:0}}
function rc(a,b){return{uris:a,method:"GET",body:null,headers:{},allowCrossSiteCredentials:!1,retryParameters:b}}P.prototype.o=function(){this.f=!0;this.b=[];this.c=[];for(var a=[],b=0;b<this.a.length;++b)a.push(this.a[b]["catch"](C));return Promise.all(a)};P.prototype.destroy=P.prototype.o;
P.prototype.request=function(a,b){if(this.f)return Promise.reject();for(var c=Date.now(),d=this.b,e=0;e<d.length;e++)try{d[e](a,b)}catch(l){return Promise.reject(l)}for(var e=b.retryParameters||{},d=e.maxAttempts||1,f=e.backoffFactor||2,g=null==e.baseDelay?1E3:e.baseDelay,h=this.g(a,b,0),e=1;e<d;e++)h=h["catch"](this.i.bind(this,a,b,g,e%b.uris.length)),g*=f;this.a.push(h);return h.then(function(b){0<=this.a.indexOf(h)&&this.a.splice(this.a.indexOf(h),1);var d=Date.now();this.h&&1==a&&this.h(c,d,b.data.byteLength);
return b}.bind(this))["catch"](function(a){0<=this.a.indexOf(h)&&this.a.splice(this.a.indexOf(h),1);return Promise.reject(a)}.bind(this))};P.prototype.request=P.prototype.request;P.prototype.g=function(a,b,c){if(this.f)return Promise.reject();var d=new kb(b.uris[c]),e=d.T;e||(e=location.protocol,e=e.slice(0,-1),lb(d,e),b.uris[c]=d.toString());return(e=pc[e])?e(b.uris[c],b).then(function(b){for(var c=this.c,d=0;d<c.length;d++)c[d](a,b);return b}.bind(this)):Promise.reject(new v(1,1E3,d))};
P.prototype.i=function(a,b,c,d){var e=new w,f=b.retryParameters||{};window.setTimeout(e.resolve,c*(1+(2*Math.random()-1)*(null==f.fuzzFactor?.5:f.fuzzFactor)));return e.then(this.g.bind(this,a,b,d))};var sc={},tc={};m("shaka.media.ManifestParser.registerParserByExtension",function(a,b){tc[a]=b});m("shaka.media.ManifestParser.registerParserByMime",function(a,b){sc[a]=b});function uc(){var a={},b;for(b in sc)a[b]=!0;for(b in tc)a[b]=!0;["application/dash+xml","application/x-mpegurl","application/vnd.apple.mpegurl","application/vnd.ms-sstr+xml"].forEach(function(b){a[b]=!!sc[b]});["mpd","m3u8","ism"].forEach(function(b){a[b]=!!tc[b]});return a}
function vc(a,b,c,d){var e=d;e||(d=(new kb(a)).P.split("/").pop().split("."),1<d.length&&(d=d.pop().toLowerCase(),e=tc[d]));if(e)return Promise.resolve(e);c=rc([a],c);c.method="HEAD";return b.request(0,c).then(function(b){(b=b.headers["content-type"])&&(b=b.toLowerCase());return(e=sc[b])?e:Promise.reject(new v(4,4E3,a))},function(a){return Promise.reject(a)})};function Q(a,b){this.j=a;this.i=b;this.c=this.a=Infinity;this.b=1;this.h=this.f=0;this.g=!0}m("shaka.media.PresentationTimeline",Q);Q.prototype.ea=function(){return this.a};Q.prototype.getDuration=Q.prototype.ea;Q.prototype.Aa=function(a){this.a=a};Q.prototype.setDuration=Q.prototype.Aa;Q.prototype.Kb=function(a){this.h=a};Q.prototype.setClockOffset=Q.prototype.Kb;Q.prototype.Mb=function(a){this.g=a};Q.prototype.setStatic=Q.prototype.Mb;Q.prototype.bc=function(){return this.c};
Q.prototype.getSegmentAvailabilityDuration=Q.prototype.bc;Q.prototype.Lb=function(a){this.c=a};Q.prototype.setSegmentAvailabilityDuration=Q.prototype.Lb;Q.prototype.Ha=function(a,b){b.length&&(this.b=b.reduce(function(a,b){return Math.max(a,b.endTime-b.startTime)},this.b),a||(this.f=Math.max(this.f,b[0].startTime)))};Q.prototype.notifySegments=Q.prototype.Ha;Q.prototype.$a=function(a){this.b=Math.max(this.b,a)};Q.prototype.notifyMaxSegmentDuration=Q.prototype.$a;
Q.prototype.S=function(){return Infinity==this.a&&!this.g};Q.prototype.isLive=Q.prototype.S;Q.prototype.fa=function(){return Infinity!=this.a&&!this.g};Q.prototype.isInProgress=Q.prototype.fa;Q.prototype.ta=function(){return Math.max(Math.min(this.f,this.Z()),this.ua())};Q.prototype.getEarliestStart=Q.prototype.ta;Q.prototype.ua=function(){return Infinity==this.c?0:Math.max(0,this.Z()-this.c)};Q.prototype.getSegmentAvailabilityStart=Q.prototype.ua;
Q.prototype.Z=function(){return this.S()||this.fa()?Math.min(Math.max(0,(Date.now()+this.h)/1E3-this.b-this.j),this.a):this.a};Q.prototype.getSegmentAvailabilityEnd=Q.prototype.Z;Q.prototype.Va=function(){return Math.max(0,this.Z()-(this.S()||this.fa()?this.i:0))};Q.prototype.getSeekRangeEnd=Q.prototype.Va;function wc(a,b,c){this.g=R[b];this.c=a;this.h=0;this.f=Infinity;this.a=this.b=null;this.i=c}var R={};m("shaka.media.TextEngine.registerParser",function(a,b){R[a]=b});m("shaka.media.TextEngine.unregisterParser",function(a){delete R[a]});function xc(a,b,c){return a>=b?null:new VTTCue(a,b,c)}m("shaka.media.TextEngine.makeCue",xc);wc.prototype.o=function(){this.c&&yc(this,function(){return!0});this.c=this.g=null;return Promise.resolve()};
function zc(a,b,c,d){var e=a.h;return Promise.resolve().then(function(){if(this.c){var a=this.g(b,e,c,d,this.i);if(null!=c&&null!=d){for(var g=0;g<a.length&&!(a[g].startTime>=this.f);++g)this.c.addCue(a[g]);null==this.b&&(this.b=c);this.a=Math.min(d,this.f)}}}.bind(a))}
wc.prototype.remove=function(a,b){return Promise.resolve().then(function(){this.c&&(yc(this,function(c){return c.startTime>=b||c.endTime<=a?!1:!0}),null==this.b||b<=this.b||a>=this.a||(a<=this.b&&b>=this.a?this.b=this.a=null:a<=this.b&&b<this.a?this.b=b:a>this.b&&b>=this.a&&(this.a=a)))}.bind(this))};function Ac(a,b){return null==a.a||a.a<b||b<a.b?0:a.a-b}function yc(a,b){for(var c=a.c.cues,d=[],e=0;e<c.length;++e)b(c[e])&&d.push(c[e]);for(e=0;e<d.length;++e)a.c.removeCue(d[e])};function Bc(a,b,c){return c==b||a>=Cc&&c==b.split("-")[0]||a>=Dc&&c.split("-")[0]==b.split("-")[0]?!0:!1}var Cc=1,Dc=2;function Ec(a){a=a.toLowerCase().split("-");var b=Fc[a[0]];b&&(a[0]=b);return a.join("-")}
var Fc={aar:"aa",abk:"ab",afr:"af",aka:"ak",alb:"sq",amh:"am",ara:"ar",arg:"an",arm:"hy",asm:"as",ava:"av",ave:"ae",aym:"ay",aze:"az",bak:"ba",bam:"bm",baq:"eu",bel:"be",ben:"bn",bih:"bh",bis:"bi",bod:"bo",bos:"bs",bre:"br",bul:"bg",bur:"my",cat:"ca",ces:"cs",cha:"ch",che:"ce",chi:"zh",chu:"cu",chv:"cv",cor:"kw",cos:"co",cre:"cr",cym:"cy",cze:"cs",dan:"da",deu:"de",div:"dv",dut:"nl",dzo:"dz",ell:"el",eng:"en",epo:"eo",est:"et",eus:"eu",ewe:"ee",fao:"fo",fas:"fa",fij:"fj",fin:"fi",fra:"fr",fre:"fr",
fry:"fy",ful:"ff",geo:"ka",ger:"de",gla:"gd",gle:"ga",glg:"gl",glv:"gv",gre:"el",grn:"gn",guj:"gu",hat:"ht",hau:"ha",heb:"he",her:"hz",hin:"hi",hmo:"ho",hrv:"hr",hun:"hu",hye:"hy",ibo:"ig",ice:"is",ido:"io",iii:"ii",iku:"iu",ile:"ie",ina:"ia",ind:"id",ipk:"ik",isl:"is",ita:"it",jav:"jv",jpn:"ja",kal:"kl",kan:"kn",kas:"ks",kat:"ka",kau:"kr",kaz:"kk",khm:"km",kik:"ki",kin:"rw",kir:"ky",kom:"kv",kon:"kg",kor:"ko",kua:"kj",kur:"ku",lao:"lo",lat:"la",lav:"lv",lim:"li",lin:"ln",lit:"lt",ltz:"lb",lub:"lu",
lug:"lg",mac:"mk",mah:"mh",mal:"ml",mao:"mi",mar:"mr",may:"ms",mkd:"mk",mlg:"mg",mlt:"mt",mon:"mn",mri:"mi",msa:"ms",mya:"my",nau:"na",nav:"nv",nbl:"nr",nde:"nd",ndo:"ng",nep:"ne",nld:"nl",nno:"nn",nob:"nb",nor:"no",nya:"ny",oci:"oc",oji:"oj",ori:"or",orm:"om",oss:"os",pan:"pa",per:"fa",pli:"pi",pol:"pl",por:"pt",pus:"ps",que:"qu",roh:"rm",ron:"ro",rum:"ro",run:"rn",rus:"ru",sag:"sg",san:"sa",sin:"si",slk:"sk",slo:"sk",slv:"sl",sme:"se",smo:"sm",sna:"sn",snd:"sd",som:"so",sot:"st",spa:"es",sqi:"sq",
srd:"sc",srp:"sr",ssw:"ss",sun:"su",swa:"sw",swe:"sv",tah:"ty",tam:"ta",tat:"tt",tel:"te",tgk:"tg",tgl:"tl",tha:"th",tib:"bo",tir:"ti",ton:"to",tsn:"tn",tso:"ts",tuk:"tk",tur:"tr",twi:"tw",uig:"ug",ukr:"uk",urd:"ur",uzb:"uz",ven:"ve",vie:"vi",vol:"vo",wel:"cy",wln:"wa",wol:"wo",xho:"xh",yid:"yi",yor:"yo",zha:"za",zho:"zh",zul:"zu"};function Gc(a,b,c){for(var d=0;d<a.length;++d)if(c(a[d],b))return d;return-1};function Hc(a){this.a=null;this.b=function(){this.a=null;a()}.bind(this)}Hc.prototype.cancel=function(){null!=this.a&&(clearTimeout(this.a),this.a=null)};function Ic(a){a.cancel();a.a=setTimeout(a.b,100)};function Jc(a,b,c){this.l=this.h=this.s=null;this.B=!1;this.b=null;this.f=new x;this.a=[];this.m=[];this.j=new w;this.H=a;this.i=null;this.g=function(a){this.j.reject(a);b(a)}.bind(this);this.A={};this.K=c;this.v=new Hc(this.Dc.bind(this));this.C=this.c=!1;this.j["catch"](function(){})}k=Jc.prototype;
k.o=function(){this.c=!0;var a=this.a.map(function(a){return(a.ha.close()||Promise.resolve())["catch"](C)});this.j.reject();this.f&&a.push(this.f.o());this.l&&a.push(this.l.setMediaKeys(null)["catch"](C));this.v&&this.v.cancel();this.f=this.l=this.h=this.s=this.b=this.v=null;this.a=[];this.m=[];this.g=this.i=this.H=null;return Promise.all(a)};k.configure=function(a){this.i=a};
k.init=function(a,b){var c={},d=[];this.C=b;this.m=a.offlineSessionIds;Kc(this,a,b||0<a.offlineSessionIds.length,c,d);return d.length?Lc(this,c,d):(this.B=!0,Promise.resolve())};
function Mc(a,b){if(!a.h)return y(a.f,b,"encrypted",function(){this.f.la(b,"encrypted");this.g(new v(6,6010))}.bind(a)),Promise.resolve();a.l=b;var c=a.l.setMediaKeys(a.h),c=c["catch"](function(a){return Promise.reject(new v(6,6003,a.message))}),d=null;a.b.serverCertificate&&(d=a.h.setServerCertificate(a.b.serverCertificate),d=d["catch"](function(a){return Promise.reject(new v(6,6004,a.message))}));return Promise.all([c,d]).then(function(){if(this.c)return Promise.reject();Nc(this);this.b.initData.length||
this.m.length||y(this.f,this.l,"encrypted",this.jc.bind(this))}.bind(a))["catch"](function(a){return this.c?Promise.resolve():Promise.reject(a)}.bind(a))}function Oc(a,b){return Promise.all(b.map(function(a){return Pc(this,a).then(function(a){if(a){for(var b=new w,c=0;c<this.a.length;c++)if(this.a[c].ha==a){this.a[c].Oa=b;break}return Promise.all([a.remove(),b])}}.bind(this))}.bind(a)))}
function Nc(a){var b=a.b?a.b.initData:[];b.forEach(function(a){Qc(this,a.initDataType,a.initData)}.bind(a));a.m.forEach(function(a){Pc(this,a)}.bind(a));b.length||a.m.length||a.j.resolve();return a.j}k.keySystem=function(){return this.b?this.b.keySystem:""};function Rc(a){return a.a.map(function(a){return a.ha.sessionId})}
function Kc(a,b,c,d,e){var f=Sc(a);b.periods.forEach(function(a){a.streamSets.forEach(function(a){"text"!=a.type&&(f&&(a.drmInfos=[f]),a.drmInfos.forEach(function(b){Tc(this,b);var f=d[b.keySystem];f||(f={audioCapabilities:[],videoCapabilities:[],distinctiveIdentifier:"optional",persistentState:c?"required":"optional",sessionTypes:[c?"persistent-license":"temporary"],label:b.keySystem,drmInfos:[]},d[b.keySystem]=f,e.push(b.keySystem));f.drmInfos.push(b);b.distinctiveIdentifierRequired&&(f.distinctiveIdentifier=
"required");b.persistentStateRequired&&(f.persistentState="required");var g="video"==a.type?f.videoCapabilities:f.audioCapabilities,h=("video"==a.type?b.videoRobustness:b.audioRobustness)||"";a.streams.forEach(function(a){var c=a.mimeType;a.codecs&&(c+='; codecs="'+a.codecs+'"');a.keyId&&b.keyIds.push(a.keyId);g.push({robustness:h,contentType:c})}.bind(this))}.bind(this)))}.bind(this))}.bind(a))}
function Lc(a,b,c){if(1==c.length&&""==c[0])return Promise.reject(new v(6,6E3));var d=new w,e=d;[!0,!1].forEach(function(a){c.forEach(function(c){var d=b[c];d.drmInfos.some(function(a){return!!a.licenseServerUri})==a&&(d.audioCapabilities.length||delete d.audioCapabilities,d.videoCapabilities.length||delete d.videoCapabilities,e=e["catch"](function(){return this.c?Promise.reject():navigator.requestMediaKeySystemAccess(c,[d])}.bind(this)))}.bind(this))}.bind(a));e=e["catch"](function(){return Promise.reject(new v(6,
6001))});e=e.then(function(a){if(this.c)return Promise.reject();var c=0<=navigator.userAgent.indexOf("Edge/"),d=a.getConfiguration();this.s=(d.audioCapabilities||[]).concat(d.videoCapabilities||[]).map(function(a){return a.contentType});c&&(this.s=null);c=b[a.keySystem];Uc(this,a.keySystem,c,c.drmInfos);return this.b.licenseServerUri?a.createMediaKeys():Promise.reject(new v(6,6012))}.bind(a)).then(function(a){if(this.c)return Promise.reject();this.h=a;this.B=!0}.bind(a))["catch"](function(a){if(this.c)return Promise.resolve();
this.s=this.b=null;return a instanceof v?Promise.reject(a):Promise.reject(new v(6,6002,a.message))}.bind(a));d.reject();return e}
function Tc(a,b){var c=b.keySystem;if(c){if(!b.licenseServerUri){var d=a.i.servers[c];d&&(b.licenseServerUri=d)}b.keyIds||(b.keyIds=[]);if(c=a.i.advanced[c])b.distinctiveIdentifierRequired||(b.distinctiveIdentifierRequired=c.distinctiveIdentifierRequired),b.persistentStateRequired||(b.persistentStateRequired=c.persistentStateRequired),b.videoRobustness||(b.videoRobustness=c.videoRobustness),b.audioRobustness||(b.audioRobustness=c.audioRobustness),b.serverCertificate||(b.serverCertificate=c.serverCertificate)}}
function Sc(a){if(Na(a.i.clearKeys))return null;var b=[],c=[],d;for(d in a.i.clearKeys){var e=a.i.clearKeys[d],f=Sa(d),e=Sa(e),f={kty:"oct",kid:Qa(f),k:Qa(e)};b.push(f);c.push(f.kid)}a=JSON.stringify({keys:b});c=JSON.stringify({kids:c});c=[{initData:new Uint8Array(Ib(c)),initDataType:"keyids"}];return{keySystem:"org.w3.clearkey",licenseServerUri:"data:application/json;base64,"+window.btoa(a),distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",videoRobustness:"",serverCertificate:null,
initData:c,keyIds:[]}}function Uc(a,b,c,d){var e=[],f=[],g=[],h=[];Vc(d,e,f,g,h);a.b={keySystem:b,licenseServerUri:e[0],distinctiveIdentifierRequired:"required"==c.distinctiveIdentifier,persistentStateRequired:"required"==c.persistentState,audioRobustness:c.audioCapabilities?c.audioCapabilities[0].robustness:"",videoRobustness:c.videoCapabilities?c.videoCapabilities[0].robustness:"",serverCertificate:f[0],initData:g,keyIds:h}}
function Vc(a,b,c,d,e){function f(a,b){return a.initDataType==b.initDataType&&Ua(a.initData,b.initData)}a.forEach(function(a){-1==b.indexOf(a.licenseServerUri)&&b.push(a.licenseServerUri);a.serverCertificate&&-1==Gc(c,a.serverCertificate,Ua)&&c.push(a.serverCertificate);a.initData&&a.initData.forEach(function(a){-1==Gc(d,a,f)&&d.push(a)});if(a.keyIds)for(var g=0;g<a.keyIds.length;++g)-1==e.indexOf(a.keyIds[g])&&e.push(a.keyIds[g])})}
k.jc=function(a){for(var b=new Uint8Array(a.initData),c=0;c<this.a.length;++c)if(Ua(b,this.a[c].initData))return;Qc(this,a.initDataType,b)};
function Pc(a,b){var c;try{c=a.h.createSession("persistent-license")}catch(f){var d=new v(6,6005,f.message);a.g(d);return Promise.reject(d)}y(a.f,c,"message",a.Bb.bind(a));y(a.f,c,"keystatuseschange",a.wb.bind(a));var e={initData:null,ha:c,loaded:!1,Oa:null};a.a.push(e);return c.load(b).then(function(a){if(!this.c){if(a)return e.loaded=!0,this.a.every(function(a){return a.loaded})&&this.j.resolve(),c;this.a.splice(this.a.indexOf(e),1);this.g(new v(6,6013))}}.bind(a),function(a){this.c||(this.a.splice(this.a.indexOf(e),
1),this.g(new v(6,6005,a.message)))}.bind(a))}function Qc(a,b,c){var d;try{d=a.C?a.h.createSession("persistent-license"):a.h.createSession()}catch(e){a.g(new v(6,6005,e.message));return}y(a.f,d,"message",a.Bb.bind(a));y(a.f,d,"keystatuseschange",a.wb.bind(a));a.a.push({initData:c,ha:d,loaded:!1,Oa:null});d.generateRequest(b,c.buffer)["catch"](function(a){if(!this.c){for(var b=0;b<this.a.length;++b)if(this.a[b].ha==d){this.a.splice(b,1);break}this.g(new v(6,6006,a.message))}}.bind(a))}
k.Bb=function(a){for(var b=a.target,c,d=0;d<this.a.length;d++)if(this.a[d].ha==b){c=this.a[d].Oa;break}d=rc([this.b.licenseServerUri],this.i.retryParameters);d.body=a.message;d.method="POST";"com.microsoft.playready"==this.b.keySystem&&Wc(d);this.H.request(2,d).then(function(a){return this.c?Promise.reject():b.update(a.data).then(function(){c&&c.resolve()})}.bind(this),function(a){if(this.c)return Promise.resolve();a=new v(6,6007,a);this.g(a);c&&c.reject(a)}.bind(this))["catch"](function(a){if(this.c)return Promise.resolve();
a=new v(6,6008,a.message);this.g(a);c&&c.reject(a)}.bind(this))};function Wc(a){for(var b=Gb(a.body,!0),b=(new DOMParser).parseFromString(b,"application/xml"),c=b.getElementsByTagName("HttpHeader"),d=0;d<c.length;++d)a.headers[c[d].querySelector("name").textContent]=c[d].querySelector("value").textContent;a.body=Ra(b.querySelector("Challenge").textContent).buffer}
k.wb=function(a){a=a.target;var b;for(b=0;b<this.a.length&&this.a[b].ha!=a;++b);if(b!=this.a.length){var c=!1;a.keyStatuses.forEach(function(a,d){if("string"==typeof d){var e=d;d=a;a=e}if("com.microsoft.playready"==this.b.keySystem&&16==d.byteLength){var e=new DataView(d),f=e.getUint32(0,!0),l=e.getUint16(4,!0),n=e.getUint16(6,!0);e.setUint32(0,f,!1);e.setUint16(4,l,!1);e.setUint16(6,n,!1)}"com.microsoft.playready"==this.b.keySystem&&"status-pending"==a&&(a="usable");"status-pending"!=a&&(this.a[b].loaded=
!0,this.a.every(function(a){return a.loaded})&&this.j.resolve());"expired"==a&&(c=!0);e=Ta(new Uint8Array(d));this.A[e]=a}.bind(this));var d=a.expiration-Date.now();(0>d||c&&1E3>d)&&!this.a[b].Oa&&(this.a.splice(b,1),a.close());Ic(this.v)}};k.Dc=function(){Pa(this.A,function(a,b){return"expired"==b})&&this.g(new v(6,6014));this.K(this.A)};
function Xc(){var a=[],b=[{contentType:'video/mp4; codecs="avc1.42E01E"'},{contentType:'video/webm; codecs="vp8"'}],c=[{videoCapabilities:b,persistentState:"required",sessionTypes:["persistent-license"]},{videoCapabilities:b}],d={};"org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" ").forEach(function(b){var e=navigator.requestMediaKeySystemAccess(b,c).then(function(a){var c=a.getConfiguration().sessionTypes;d[b]=
{persistentState:c?0<=c.indexOf("persistent-license"):!1};return a.createMediaKeys()})["catch"](function(){d[b]=null});a.push(e)});return Promise.all(a).then(function(){return d})};function Zc(a){return!a||1==a.length&&1E-6>a.end(0)-a.start(0)?null:a.length?a.end(a.length-1):null}function $c(a,b){var c=0;if(!a||1==a.length&&1E-6>a.end(0)-a.start(0))return c;var d=!1,e=1E-4;b||(e=.25);for(var f=0;f<a.length;++f)if(b+e>=a.start(f)&&b<a.end(f))c+=a.end(f)-b,d=!0;else if(d&&.04>=a.start(f)-a.end(f-1))c+=a.end(f)-a.start(f),c+=a.start(f)-a.end(f-1);else if(0<f&&b+e<a.start(f)&&b+e>=a.end(f-1))if(.04>=a.start(f)-b)c+=a.end(f)-b,d=!0;else break;else d=!1;return c}
function ad(a,b,c){var d=$c(a,b);d||(d=$c(a,b+c))&&(d+=c);return d};function bd(a,b,c){this.f=a;this.F=b;this.i=c;this.c={};this.b=null;this.a={};this.g=new x;this.h=!1}
function cd(){var a={};'video/mp4; codecs="avc1.42E01E",video/mp4; codecs="avc3.42E01E",video/mp4; codecs="hvc1.1.6.L93.90",audio/mp4; codecs="mp4a.40.2",audio/mp4; codecs="ac-3",audio/mp4; codecs="ec-3",video/webm; codecs="vp8",video/webm; codecs="vp9",video/webm; codecs="av1",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="avc3.42E01E",video/mp2t; codecs="hvc1.1.6.L93.90",video/mp2t; codecs="mp4a.40.2",video/mp2t; codecs="ac-3",video/mp2t; codecs="ec-3",video/mp2t; codecs="mp4a.40.2",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",").forEach(function(b){a[b]=!!R[b]||
MediaSource.isTypeSupported(b);var c=b.split(";")[0];a[c]=a[c]||a[b]});return a}k=bd.prototype;k.o=function(){this.h=!0;var a=[],b;for(b in this.a){var c=this.a[b],d=c[0];this.a[b]=c.slice(0,1);d&&a.push(d.p["catch"](C));for(d=1;d<c.length;++d)c[d].p["catch"](C),c[d].p.reject()}this.b&&a.push(this.b.o());return Promise.all(a).then(function(){this.g.o();this.b=this.i=this.F=this.f=this.g=null;this.c={};this.a={}}.bind(this))};
k.init=function(a,b){for(var c in a){var d=a[c];"text"==c?this.b=new wc(this.i,d,b):(d=this.F.addSourceBuffer(d),y(this.g,d,"error",this.$c.bind(this,c)),y(this.g,d,"updateend",this.xa.bind(this,c)),this.c[c]=d,this.a[c]=[])}};function dd(a,b){var c;"text"==b?c=a.b.b:(c=ed(a,b),c=!c||1==c.length&&1E-6>c.end(0)-c.start(0)?null:1==c.length&&0>c.start(0)?0:c.length?c.start(0):null);return c}
function fd(a,b,c,d){"text"==b?(b=Ac(a.b,c),!b&&d&&(b=Ac(a.b,c+d))&&(b+=d)):(a=ed(a,b),b=ad(a,c,d||0));return b}function ed(a,b){try{return a.c[b].buffered}catch(c){return null}}function gd(a,b,c,d,e){return"text"==b?zc(a.b,c,d,e):hd(a,b,a.Zc.bind(a,b,c))}k.remove=function(a,b,c){return"text"==a?this.b.remove(b,c):hd(this,a,this.Gb.bind(this,a,b,c))};function id(a,b){return"text"==b?a.b.remove(0,Infinity):hd(a,b,a.Gb.bind(a,b,0,a.F.duration))}
function jd(a,b,c){return"text"==b?(a.b.h=c,Promise.resolve()):hd(a,b,a.Pc.bind(a,b,c))}function kd(a,b,c){return"text"==b?(a.b.f=c,Promise.resolve()):Promise.all([hd(a,b,a.Pb.bind(a,b)),hd(a,b,a.Nc.bind(a,b,c))])}k.endOfStream=function(a){return ld(this,function(){a?this.F.endOfStream(a):this.F.endOfStream()}.bind(this))};k.Aa=function(a){return ld(this,function(){this.F.duration=a}.bind(this))};k.ea=function(){return this.F.duration};k.Zc=function(a,b){this.c[a].appendBuffer(b)};
k.Gb=function(a,b,c){c<=b?this.xa(a):this.c[a].remove(b,c)};k.Pb=function(a){var b=this.c[a].appendWindowEnd;this.c[a].abort();this.c[a].appendWindowEnd=b;this.xa(a)};k.Yb=function(a){this.f.currentTime-=.001;this.xa(a)};k.Pc=function(a,b){this.c[a].timestampOffset=b;this.xa(a)};k.Nc=function(a,b){this.c[a].appendWindowEnd=b+.04;this.xa(a)};k.$c=function(a){this.a[a][0].p.reject(new v(3,3014,this.f.error?this.f.error.code:0))};k.xa=function(a){var b=this.a[a][0];b&&(b.p.resolve(),nd(this,a))};
function hd(a,b,c){if(a.h)return Promise.reject();c={start:c,p:new w};a.a[b].push(c);if(1==a.a[b].length)try{c.start()}catch(d){"QuotaExceededError"==d.name?c.p.reject(new v(3,3017,b)):c.p.reject(new v(3,3015,d)),nd(a,b)}return c.p}
function ld(a,b){if(a.h)return Promise.reject();var c=[],d;for(d in a.c){var e=new w,f={start:function(a){a.resolve()}.bind(null,e),p:e};a.a[d].push(f);c.push(e);1==a.a[d].length&&f.start()}return Promise.all(c).then(function(){var a,c;try{b()}catch(l){c=Promise.reject(new v(3,3015,l))}for(a in this.c)nd(this,a);return c}.bind(a),function(){return Promise.reject()}.bind(a))}function nd(a,b){a.a[b].shift();var c=a.a[b][0];if(c)try{c.start()}catch(d){c.p.reject(new v(3,3015,d)),nd(a,b)}};function od(a,b,c){var d=!1;a.streamSets.forEach(function(a){a.streams.forEach(function(e){var f=e.allowedByApplication;e.allowedByApplication=!0;if("video"==a.type){if(e.width<b.minWidth||e.width>b.maxWidth||e.width>c.width||e.height<b.minHeight||e.height>b.maxHeight||e.height>c.height||e.width*e.height<b.minPixels||e.width*e.height>b.maxPixels||e.bandwidth<b.minVideoBandwidth||e.bandwidth>b.maxVideoBandwidth)e.allowedByApplication=!1}else"audio"==a.type&&(e.bandwidth<b.minAudioBandwidth||e.bandwidth>
b.maxAudioBandwidth)&&(e.allowedByApplication=!1);f!=e.allowedByApplication&&(d=!0)})});return d}
function pd(a,b,c){var d="",e=null;a&&a.B&&(d=a.keySystem(),e=a.s);for(a=0;a<c.streamSets.length;++a){var f=c.streamSets[a];if(d&&f.drmInfos.length&&!f.drmInfos.some(function(a){return a.keySystem==d}))c.streamSets.splice(a,1),--a;else{for(var g=b[f.type],h=0;h<f.streams.length;++h){var l=f.streams[h],n=qd(l.mimeType,l.codecs);R[n]||MediaSource.isTypeSupported(n)?e&&l.encrypted&&0>e.indexOf(n)?(f.streams.splice(h,1),--h):!g||l.mimeType==g.mimeType&&l.codecs.split(".")[0]==g.codecs.split(".")[0]||
(f.streams.splice(h,1),--h):(f.streams.splice(h,1),--h)}f.streams.length||(c.streamSets.splice(a,1),--a)}}}function rd(a,b){return a.streamSets.map(function(a){var c=b?b[a.type]:null;return a.streams.filter(function(a){return a.allowedByApplication&&a.allowedByKeySystem}).map(function(b){return{id:b.id,active:c==b,type:a.type,bandwidth:b.bandwidth,language:a.language,kind:b.kind||null,width:b.width||null,height:b.height||null,frameRate:b.frameRate||void 0,codecs:b.codecs||null}})}).reduce(B,[])}
function sd(a,b){for(var c=0;c<a.streamSets.length;c++)for(var d=a.streamSets[c],e=0;e<d.streams.length;e++){var f=d.streams[e];if(f.id==b.id)return{stream:f,bd:d}}return null}function td(a){return a.streams.some(function(a){return a.allowedByApplication&&a.allowedByKeySystem})}
function ud(a,b,c){var d={};a.streamSets.forEach(function(a){!td(a)||a.type in d||(d[a.type]=a)});var e=0;a.streamSets.forEach(function(a){if(td(a)&&"video"==a.type){var b=vd(a);b>e?(e=b,d.video=a):b==e&&wd(a)<wd(d.video)&&(d.video=a)}});a.streamSets.forEach(function(a){td(a)&&a.primary&&(d[a.type].primary?wd(a)<wd(d[a.type])&&(d[a.type]=a):d[a.type]=a)});[Dc,Cc,0].forEach(function(e){a.streamSets.forEach(function(a){if(td(a)){var f;"audio"==a.type?f=b.preferredAudioLanguage:"text"==a.type&&(f=b.preferredTextLanguage);
if(f){f=Ec(f);var g=Ec(a.language);Bc(e,f,g)&&(a.language==d[a.type].language?wd(a)<wd(d[a.type])&&(d[a.type]=a):d[a.type]=a,c&&(c[a.type]=!0))}}})});return d}function wd(a){var b=0;if(!a||1>a.streams.length)return b;a.streams.forEach(function(a){b+=a.bandwidth});return b/a.streams.length}function vd(a){var b=0;if(!a)return b;a.streams.forEach(function(a){a.height>b&&(b=a.height)});return b}function qd(a,b){var c=a;b&&(c+='; codecs="'+b+'"');return c};function xd(){this.m=this.l=this.j=this.c=this.a=null;this.g=[];this.b=null;this.h=[];this.v=1;this.i={};this.s=0;this.f=null;this.La=this.La.bind(this)}m("shaka.dash.DashParser",xd);k=xd.prototype;k.configure=function(a){this.c=a};k.start=function(a,b,c,d,e){this.g=[a];this.a=b;this.j=c;this.l=d;this.m=e;return yd(this).then(function(){this.a&&zd(this,0);return this.b}.bind(this))};
k.stop=function(){this.a&&this.a.Ob(this.La);this.c=this.m=this.l=this.j=this.a=null;this.g=[];this.b=null;this.h=[];this.i={};null!=this.f&&(window.clearTimeout(this.f),this.f=null);return Promise.resolve()};function yd(a){return a.a.request(0,rc(a.g,a.c.retryParameters)).then(function(a){if(this.a)return Ad(this,a.data,a.uri)}.bind(a))}
function Ad(a,b,c){var d=Eb(b),e=new DOMParser,f=null;b=null;try{f=e.parseFromString(d,"text/xml")}catch(X){}f&&"MPD"==f.documentElement.tagName&&(b=f.documentElement);if(!b)throw new v(4,4001);c=[c];d=G(b,"Location").map(Wa).filter(Ka);0<d.length&&(c=a.g=d);d=G(b,"BaseURL").map(Wa);c=K(c,d);var g=H(b,"minBufferTime",I);a.s=H(b,"minimumUpdatePeriod",I,-1);var h=H(b,"availabilityStartTime",Xa),d=H(b,"timeShiftBufferDepth",I),l=H(b,"suggestedPresentationDelay",I),e=H(b,"maxSegmentDuration",I),f=b.getAttribute("type")||
"static",n;if(a.b)n=a.b.presentationTimeline;else{var r=Math.max(10,1.5*g);n=new Q(h,null!=l?l:r)}var h=Bd(a,{Sa:"static"!=f,presentationTimeline:n,L:null,I:null,R:null,u:null,bandwidth:void 0,tb:!1},c,b),l=h.duration,u=h.periods;n.Mb("static"==f);n.Aa(l||Infinity);n.Lb(null!=d?d:Infinity);n.$a(e||1);if(a.b)return Promise.resolve();b=G(b,"UTCTiming");d=n.S();h.ca&&a.a.Eb(a.La);return Cd(a,c,b,d).then(function(a){this.a&&(n.Kb(a),this.b={presentationTimeline:n,periods:u,offlineSessionIds:[],minBufferTime:g||
0})}.bind(a))}
function Bd(a,b,c,d){var e=H(d,"mediaPresentationDuration",I),f=!1,g=[],h=0;d=G(d,"Period");for(var l=0;l<d.length;l++){var n=d[l],h=H(n,"start",I,h),r=H(n,"duration",I);if(null==r)if(l+1!=d.length){var u=H(d[l+1],"start",I);null!=u&&(r=u-h)}else null!=e&&(r=e-h);u={start:h,duration:r,node:n,ca:!1};n=Dd(a,b,c,u);g.push(n);f=f||u.ca;u=b.L.id;a.h.every(La(u))&&(a.j(n),a.h.push(u),a.b&&a.b.periods.push(n));if(null==r){h=null;break}h+=r}return null!=e?{periods:g,duration:e,ca:f}:{periods:g,duration:h,
ca:f}}function Dd(a,b,c,d){b.L=Ed(d.node,null,c);b.I=d;b.L.id||(b.L.id="__shaka_period_"+d.start);a=G(d.node,"AdaptationSet").map(a.zc.bind(a,b)).filter(Ka);b=a.map(function(a){return a.Hc}).reduce(B,[]);c=b.filter(Ma);if(b.length!=c.length)throw new v(4,4018);if(!a.length)throw new v(4,4004);for(b=0;b<a.length;b++)a[b].ca&&(d.ca=!0);a=Fd(a);return{startTime:d.start,streamSets:a}}
k.zc=function(a,b){a.R=Ed(b,a.L,null);var c=!1,d=G(b,"Role"),e=void 0;"text"==a.R.contentType&&(e="subtitle");for(var f=0;f<d.length;f++){var g=d[f].getAttribute("schemeIdUri");if(null==g||"urn:mpeg:dash:role:2011"==g)switch(g=d[f].getAttribute("value"),g){case "main":c=!0;break;case "caption":case "subtitle":e=g}}var d=Gd(b),h=[];G(b,"SupplementalProperty").forEach(function(a){var b=a.getAttribute("schemeIdUri");("urn:mpeg:dash:adaptation-set-switching:2016"==b||"http://dashif.org/guidelines/AdaptationSetSwitching"==
b||"http://dashif.org/descriptor/AdaptationSetSwitching"==b)&&(a=a.getAttribute("value"))&&h.push.apply(h,a.split(","))});var l=null,n=!1;G(b,"EssentialProperty").forEach(function(a){"http://dashif.org/guidelines/trickmode"==a.getAttribute("schemeIdUri")?l=a.getAttribute("value"):n=!0});if(null!=l||n)return null;var f=G(b,"ContentProtection"),f=eb(f,this.c.dash.customScheme),g=Ec(b.getAttribute("lang")||"und"),r=G(b,"Representation"),e=r.map(this.Ac.bind(this,a,f,e,g)).filter(function(a){return!!a});
if(!e.length)throw new v(4,4003);a.R.contentType||(a.R.contentType=Hd(e[0].mimeType,e[0].codecs));r=r.map(function(a){return a.getAttribute("id")}).filter(Ka);return{id:a.R.id||"__fake__"+this.v++,contentType:a.R.contentType,language:g,hc:c,streams:e,drmInfos:f.drmInfos,dd:h,ca:d,Hc:r}};function Gd(a){if(Va(a,"InbandEventStream"))return!0;a=G(a,"Representation");var b;if(0<a.length)for(var c=0;c<a.length;c++)if(b=Va(a[c],"InbandEventStream"))return!0;return!1}
k.Ac=function(a,b,c,d,e){a.u=Ed(e,a.R,null);if(!Id(a.u))return null;a.bandwidth=H(e,"bandwidth",$a)||void 0;var f;f=this.Ic.bind(this);if(a.u.Ia)f=dc(a,f);else if(a.u.$)f=gc(a,this.i);else if(a.u.Ja)f=kc(a,f,this.i,!!this.b);else{var g=a.u.N,h=a.I.duration||0;f={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0<=a&&a<h?1:null},getSegmentReference:function(a){return 1!=a?null:new J(1,0,h,function(){return g},0,null)},initSegmentReference:null,presentationTimeOffset:0}}e=
G(e,"ContentProtection");e=ib(e,this.c.dash.customScheme,b);return{id:this.v++,createSegmentIndex:f.createSegmentIndex,findSegmentPosition:f.findSegmentPosition,getSegmentReference:f.getSegmentReference,initSegmentReference:f.initSegmentReference,presentationTimeOffset:f.presentationTimeOffset,mimeType:a.u.mimeType,codecs:a.u.codecs,frameRate:a.u.frameRate,bandwidth:a.bandwidth,width:a.u.width,height:a.u.height,kind:c,encrypted:0<b.drmInfos.length,keyId:e,language:d,allowedByApplication:!0,allowedByKeySystem:!0}};
k.Yc=function(){this.f=null;var a=Date.now();yd(this).then(function(){this.a&&zd(this,(Date.now()-a)/1E3)}.bind(this))["catch"](function(a){this.l(a);this.a&&zd(this,0)}.bind(this))};function zd(a,b){0>a.s||(a.f=window.setTimeout(a.Yc.bind(a),1E3*Math.max(Math.max(3,a.s)-b,0)))}
function Ed(a,b,c){b=b||{contentType:"",mimeType:"",codecs:"",frameRate:void 0};c=c||b.N;var d=G(a,"BaseURL").map(Wa),e=a.getAttribute("contentType")||b.contentType,f=a.getAttribute("mimeType")||b.mimeType,g=a.getAttribute("codecs")||b.codecs,h=H(a,"frameRate",cb)||b.frameRate;e||(e=Hd(f,g));return{N:K(c,d),Ia:Va(a,"SegmentBase")||b.Ia,$:Va(a,"SegmentList")||b.$,Ja:Va(a,"SegmentTemplate")||b.Ja,width:H(a,"width",bb)||b.width,height:H(a,"height",bb)||b.height,contentType:e,mimeType:f,codecs:g,frameRate:h,
id:a.getAttribute("id")}}
function Fd(a){var b={};a.forEach(function(a){b[a.id]=[a]});a.forEach(function(a){var c=b[a.id];a.dd.forEach(function(a){(a=b[a])&&a!=c&&(c.push.apply(c,a),a.forEach(function(a){b[a.id]=c}))})});var c=[],d=[];F(b).forEach(function(a){if(!(0<=d.indexOf(a))){d.push(a);var b=new Ba;a.forEach(function(a){b.push(a.contentType||"",a)});b.keys().forEach(function(a){var d=new Ba;b.get(a).forEach(function(a){d.push(a.language,a)});d.keys().forEach(function(b){var e=d.get(b);b={language:b,type:a,primary:e.some(function(a){return a.hc}),
drmInfos:e.map(function(a){return a.drmInfos}).reduce(B,[]),streams:e.map(function(a){return a.streams}).reduce(B,[])};c.push(b)})})}});return c}function Id(a){var b;b=0+(a.Ia?1:0);b+=a.$?1:0;b+=a.Ja?1:0;if(!b)return"text"==a.contentType||"application"==a.contentType?!0:!1;1!=b&&(a.Ia&&(a.$=null),a.Ja=null);return!0}
function Jd(a,b,c,d){b=K(b,[c]);b=rc(b,a.c.retryParameters);b.method=d;return a.a.request(0,b).then(function(a){if("HEAD"==d){if(!a.headers||!a.headers.date)return 0;a=a.headers.date}else a=Eb(a.data);a=Date.parse(a);return isNaN(a)?0:a-Date.now()})}
function Cd(a,b,c,d){c=c.map(function(a){return{scheme:a.getAttribute("schemeIdUri"),value:a.getAttribute("value")}});var e=a.c.dash.clockSyncUri;d&&!c.length&&e&&c.push({scheme:"urn:mpeg:dash:utc:http-head:2014",value:e});return Ja(c,function(a){var c=a.value;switch(a.scheme){case "urn:mpeg:dash:utc:http-head:2014":case "urn:mpeg:dash:utc:http-head:2012":return Jd(this,b,c,"HEAD");case "urn:mpeg:dash:utc:http-xsdate:2014":case "urn:mpeg:dash:utc:http-iso:2014":case "urn:mpeg:dash:utc:http-xsdate:2012":case "urn:mpeg:dash:utc:http-iso:2012":return Jd(this,
b,c,"GET");case "urn:mpeg:dash:utc:direct:2014":case "urn:mpeg:dash:utc:direct:2012":return a=Date.parse(c),isNaN(a)?0:a-Date.now();case "urn:mpeg:dash:utc:http-ntp:2014":case "urn:mpeg:dash:utc:ntp:2014":case "urn:mpeg:dash:utc:sntp:2014":return Promise.reject();default:return Promise.reject()}}.bind(a))["catch"](function(){return 0})}k.Ic=function(a,b,c){a=rc(a,this.c.retryParameters);null!=b&&(a.headers.Range="bytes="+b+"-"+(null!=c?c:""));return this.a.request(1,a).then(function(a){return a.data})};
k.La=function(a,b){if(1==a){var c=new Jb(new DataView(b.data)),d=Sb(1701671783,c);if(-1!=d){var e=c.a-8+d;N(c,4);d=Rb(c);if("urn:mpeg:dash:event:2012"==d)yd(this);else{var f=Rb(c),g=M(c),h=M(c),l=M(c),n=M(c),c=Qb(c,e-c.a);this.m(new t("emsg",{detail:{schemeIdUri:d,value:f,timescale:g,presentationTimeDelta:h,eventDuration:l,id:n,messageData:c}}))}}}};function Hd(a,b){return R[qd(a,b)]?"text":a.split("/")[0]}tc.mpd=xd;sc["application/dash+xml"]=xd;function S(a,b){var c=Eb(a),d=[],e=new DOMParser,f=null;try{f=e.parseFromString(c,"text/xml")}catch(r){throw new v(2,2005);}if(f){var g,h,l;if(e=f.getElementsByTagName("tt")[0])f=e.getAttribute("ttp:frameRate"),g=e.getAttribute("ttp:subFrameRate"),h=e.getAttribute("ttp:frameRateMultiplier"),l=e.getAttribute("ttp:tickRate"),c=e.getAttribute("xml:space")||"default";else throw new v(2,2006);if("default"!=c&&"preserve"!=c)throw new v(2,2005);c="default"==c;f=new Kd(f,g,h,l);g=S.b(e.getElementsByTagName("styling")[0]);
h=S.b(e.getElementsByTagName("layout")[0]);e=S.b(e.getElementsByTagName("body")[0]);for(l=0;l<e.length;l++){var n=S.c(e[l],b,f,g,h,c);n&&d.push(n)}}return d}m("shaka.media.TtmlTextParser",S);S.m=/^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;S.v=/^(?:(\d{2,}):)?(\d{2}):(\d{2})$/;S.s=/^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/;S.A=/^(\d*\.?\d*)f$/;S.C=/^(\d*\.?\d*)t$/;S.B=/^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/;S.l=/^(\d{1,2}|100)% (\d{1,2}|100)%$/;
S.Ka={left:"start",center:"center",right:"end",start:"start",end:"end"};S.Ra={left:"line-left",center:"center",right:"line-right"};S.b=function(a){var b=[];if(!a)return b;for(var c=a.childNodes,d=0;d<c.length;d++){var e="span"==c[d].nodeName&&"p"==a.nodeName;c[d].nodeType!=Node.ELEMENT_NODE||"br"==c[d].nodeName||e||(e=S.b(c[d]),b=b.concat(e))}b.length||b.push(a);return b};
S.h=function(a,b){for(var c=a.childNodes,d=0;d<c.length;d++)if("br"==c[d].nodeName&&0<d)c[d-1].textContent+="\n";else if(0<c[d].childNodes.length)S.h(c[d],b);else if(b){var e=c[d].textContent.trim(),e=e.replace(/\s+/g," ");c[d].textContent=e}};
S.c=function(a,b,c,d,e,f){if(!a.hasAttribute("begin")&&!a.hasAttribute("end")&&/^\s*$/.test(a.textContent))return null;S.h(a,f);f=S.a(a.getAttribute("begin"),c);var g=S.a(a.getAttribute("end"),c);c=S.a(a.getAttribute("dur"),c);var h=a.textContent;null==g&&null!=c&&(g=f+c);if(null==f||null==g)throw new v(2,2001);b=xc(f+b,g+b,h);if(!b)return null;e=S.i(a,"region",e);S.qa(b,a,e,d);return b};
S.qa=function(a,b,c,d){var e,f=S.f(b,c,d,"tts:extent");f&&(e=S.l.exec(f))&&(a.size=Number(e[1]));e=S.f(b,c,d,"tts:writingMode");f=!0;"tb"==e||"tblr"==e?a.vertical="lr":"tbrl"==e?a.vertical="rl":f=!1;if(e=S.f(b,c,d,"tts:origin"))if(e=S.l.exec(e))f?(a.position=Number(e[2]),a.line=Number(e[1])):(a.position=Number(e[1]),a.line=Number(e[2])),a.snapToLines=!1;if(b=S.f(b,c,d,"tts:textAlign"))a.align=b,"center"==b&&("center"!=a.align&&(a.align="middle"),a.position="auto"),a.positionAlign=S.Ra[b],a.lineAlign=
S.Ka[b]};S.f=function(a,b,c,d){for(var e=S.b(b),f=0;f<e.length;f++){var g=e[f].getAttribute(d);if(g)return g}e=S.i;return(a=e(b,"style",c)||e(a,"style",c))?a.getAttribute(d):null};S.i=function(a,b,c){if(!a||1>c.length)return null;var d=null;if(a=S.ra(a,b))for(b=0;b<c.length;b++)if(c[b].getAttribute("xml:id")==a){d=c[b];break}return d};S.ra=function(a,b){for(var c=null;a&&!(c=a.getAttribute(b));){var d=a.parentNode;if(d instanceof Element)a=d;else break}return c};
S.a=function(a,b){var c=null;S.m.test(a)?c=S.sa(b,a):S.v.test(a)?c=S.g(S.v,a):S.s.test(a)?c=S.g(S.s,a):S.A.test(a)?c=S.Ca(b,a):S.C.test(a)?c=S.Da(b,a):S.B.test(a)&&(c=S.g(S.B,a));return c};S.Ca=function(a,b){var c=S.A.exec(b);return Number(c[1])/a.frameRate};S.Da=function(a,b){var c=S.C.exec(b);return Number(c[1])/a.a};S.sa=function(a,b){var c=S.m.exec(b),d=Number(c[1]),e=Number(c[2]),f=Number(c[3]),g=Number(c[4]),g=g+(Number(c[5])||0)/a.b,f=f+g/a.frameRate;return f+60*e+3600*d};
S.g=function(a,b){var c=a.exec(b);return c&&""!=c[0]?(Number(c[4])||0)/1E3+(Number(c[3])||0)+60*(Number(c[2])||0)+3600*(Number(c[1])||0):null};function Kd(a,b,c,d){this.frameRate=Number(a)||30;this.b=Number(b)||1;this.a=Number(d);this.a||(this.a=a?this.frameRate*this.b:1);c&&(a=/^(\d+) (\d+)$/g.exec(c))&&(this.frameRate*=a[1]/a[2])}R["application/ttml+xml"]=S;function Ld(a,b){var c=new Jb(new DataView(a)),d=Sb(1835295092,c);if(-1!=d)return S(Qb(c,d-8).buffer,b);if(-1!=Tb(a,Ld.U))return[];throw new v(2,2007);}m("shaka.media.Mp4TtmlParser",Ld);Ld.U=1937010800;R['application/mp4; codecs="stpp"']=Ld;function Md(a){this.b=a;this.a=0}function Nd(a,b){var c;b.lastIndex=a.a;c=(c=b.exec(a.b))?{position:c.index,length:c[0].length,Kc:c}:null;if(a.a==a.b.length||!c||c.position!=a.a)return null;a.a+=c.length;return c.Kc}function Od(a){return a.a==a.b.length?null:(a=Nd(a,/[^ \t\n]*/gm))?a[0]:null};function T(a,b,c,d,e){a=Eb(a);a=a.replace(/\r\n|\r(?=[^\n]|$)/gm,"\n");a=a.split(/\n{2,}/m);if(!/^WEBVTT($|[ \t\n])/m.test(a[0]))throw new v(2,2E3);d=[];for(var f=1;f<a.length;f++){var g=a[f].split("\n");(g=T.c(g,b,c,e))&&d.push(g)}return d}m("shaka.media.VttTextParser",T);
T.c=function(a,b,c,d){if(1==a.length&&!a[0]||/^NOTE($|[ \t])/.test(a[0]))return null;var e=null;0>a[0].indexOf("--\x3e")&&(e=a[0],a.splice(0,1));var f=new Md(a[0]),g=T.a(f),h=Nd(f,/[ \t]+--\x3e[ \t]+/g),l=T.a(f);if(null==g||!h||null==l)throw new v(2,2001);d?(g+=c,l+=c):(g+=b,l+=b);a=xc(g,l,a.slice(1).join("\n").trim());if(!a)return null;Nd(f,/[ \t]+/gm);for(b=Od(f);b;)T.j(a,b),Nd(f,/[ \t]+/gm),b=Od(f);null!=e&&(a.id=e);return a};
T.j=function(a,b){var c;if(c=/^align:(start|middle|center|end|left|right)$/.exec(b))a.align=c[1],"center"==c[1]&&"center"!=a.align&&(a.position="auto",a.align="middle");else if(c=/^vertical:(lr|rl)$/.exec(b))a.vertical=c[1];else if(c=/^size:(\d{1,2}|100)%$/.exec(b))a.size=Number(c[1]);else if(c=/^position:(\d{1,2}|100)%(?:,(line-left|line-right|center|start|end))?$/.exec(b))a.position=Number(c[1]),c[2]&&(a.positionAlign=c[2]);else if(c=/^line:(\d{1,2}|100)%(?:,(start|end|center))?$/.exec(b))a.snapToLines=
!1,a.line=Number(c[1]),c[2]&&(a.lineAlign=c[2]);else if(c=/^line:(-?\d+)(?:,(start|end|center))?$/.exec(b))a.snapToLines=!0,a.line=Number(c[1]),c[2]&&(a.lineAlign=c[2])};T.a=function(a){a=Nd(a,/(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3})/g);if(!a)return null;var b=Number(a[2]),c=Number(a[3]);return 59<b||59<c?null:Number(a[4])/1E3+c+60*b+3600*(Number(a[1])||0)};R["text/vtt"]=T;R['text/vtt; codecs="vtt"']=T;function U(a,b,c,d){var e=new Jb(new DataView(a)),f=Sb(1835295092,e);if(-1!=f)return U.Ba(Qb(e,f-8).buffer,b,c,d);if(-1!=Tb(a,U.pa))return[];throw new v(2,2008);}m("shaka.media.Mp4VttParser",U);U.Ba=function(a,b,c,d){a=new Jb(new DataView(a));c+=b;d+=b;for(b=[];Lb(a);){var e=Sb(U.oa,a);if(-1==e)break;(e=U.c(Qb(a,e-8).buffer,c,d))&&b.push(e)}return b};
U.c=function(a,b,c){a=new Jb(new DataView(a));for(var d,e,f;Lb(a);){var g=M(a),h=M(a),l=Eb(Qb(a,g-8).buffer);1==g&&Pb(a);switch(h){case U.K:d=l;break;case U.H:f=l;break;case U.Y:e=l}}if(!d)throw new v(2,2008);b=xc(b,c,d);if(!b)return null;f&&(b.id=f);if(e)for(e=new Md(e),f=Od(e);f;)T.j(b,f),Nd(e,/[ \t]+/gm),f=Od(e);return b};U.pa=2004251764;U.oa=1987343459;U.K=1885436268;U.H=1768187247;U.Y=1937011815;R['application/mp4; codecs="wvtt"']=U;function Pd(a,b,c,d,e,f){this.a=a;this.c=b;this.j=c;this.s=d;this.l=e;this.m=f;this.b=new x;this.g=!1;this.h=1;this.i=this.f=null;0<a.readyState?this.xb():y(this.b,a,"loadedmetadata",this.xb.bind(this));y(this.b,a,"ratechange",this.qc.bind(this));Qd(this)}k=Pd.prototype;k.o=function(){var a=this.b.o();this.b=null;Rd(this);null!=this.f&&(window.clearInterval(this.f),this.f=null);this.m=this.l=this.c=this.a=null;return a};function Sd(a){return 0<a.a.readyState?Td(a,a.a.currentTime):Ud(a)}
function Ud(a){return a.s?Td(a,a.s):Infinity>a.c.ea()?a.c.ta():Math.max(a.c.Va(),a.c.ta())}function Vd(a,b){b!=a.g&&(a.g=b,Wd(a,a.h),a.l(b))}function Qd(a){Rd(a);a.i=window.setTimeout(a.uc.bind(a),250)}function Rd(a){a.i&&(window.clearTimeout(a.i),a.i=null)}k.uc=function(){this.i=null;Qd(this);var a=ad(this.a.buffered,this.a.currentTime,.1),b=Zc(this.a.buffered)>=(this.c.S()?this.c.Z()-.1:this.a.duration-.1)||this.a.ended;this.g?(b||a>=this.j)&&Vd(this,!1):!b&&.5>a&&Vd(this,!0)};k.Ua=function(){return this.h};
function Wd(a,b){null!=a.f&&(window.clearInterval(a.f),a.f=null);a.h=b;a.a.playbackRate=a.g||0>b?0:b;!a.g&&0>b&&(a.f=window.setInterval(function(){this.a.currentTime+=b/4}.bind(a),250))}k.qc=function(){this.a.playbackRate!=(this.g||0>this.h?0:this.h)&&Wd(this,this.a.playbackRate)};
k.xb=function(){this.b.la(this.a,"loadedmetadata");var a=Ud(this);.001>Math.abs(this.a.currentTime-a)?(y(this.b,this.a,"seeking",this.zb.bind(this)),y(this.b,this.a,"playing",this.yb.bind(this))):(y(this.b,this.a,"seeking",this.sc.bind(this)),this.a.currentTime=a)};k.sc=function(){this.b.la(this.a,"seeking");y(this.b,this.a,"seeking",this.zb.bind(this));y(this.b,this.a,"playing",this.yb.bind(this))};k.zb=function(){var a=this.a.currentTime,b=Xd(this,a);.001<Math.abs(b-a)?Yd(this,a,b):this.m()};
k.yb=function(){var a=this.a.currentTime,b=Xd(this,a);.001<Math.abs(b-a)&&Yd(this,a,b)};function Xd(a,b){var c=a.c,d=c.ta(),e=c.Z();if(!c.S()||Infinity==c.c)return b<d?d:b>e?e:b;c=d+1;d=c+a.j;return b>=d&&b<=e||$c(a.a.buffered,b)&&b>=c&&b<=e?b:b>e?e:e<d&&b>=c&&b<=e?b:Math.min(d+2,e)}function Yd(a,b,c){a.a.currentTime=c;var d=0,e=function(){!this.a||10<=d++||this.a.currentTime!=b||(this.a.currentTime=c,setTimeout(e,100))}.bind(a);setTimeout(e,100)}
function Td(a,b){var c=a.c.ta();if(b<c)return c;c=a.c.Z();return b>c?c:b};function Zd(a,b,c,d,e,f,g,h,l){this.m=a;this.f=b;this.U=c;this.a=d;this.H=e;this.v=f;this.j=g;this.A=h||null;this.B=l||null;this.g=null;this.i=1;this.C=Promise.resolve();this.h=[];this.l={};this.b={};this.c=this.s=this.K=!1}Zd.prototype.o=function(){for(var a in this.b)$d(this.b[a]);this.g=this.b=this.l=this.h=this.B=this.A=this.j=this.v=this.H=this.C=this.a=this.U=this.f=this.m=null;this.c=!0;return Promise.resolve()};
Zd.prototype.configure=function(a){this.g=a;this.m.j=this.i*Math.max(this.a.minBufferTime||0,this.g.rebufferingGoal)};Zd.prototype.init=function(){var a=this.H(this.a.periods[ae(this,Sd(this.m))]);return Na(a)?Promise.reject(new v(5,5005)):be(this,a).then(function(){this.A&&this.A()}.bind(this))};function ce(a){return a.a.periods[ae(a,Sd(a.m))]}function de(a){return Oa(a.b,function(a){return a.stream})}function ee(a,b){var c={};c.text=b;return be(a,c)}
function fe(a,b,c,d){var e=a.b[b];!e&&"text"==b&&a.g.ignoreTextStreamFailures?ee(a,c):e&&(b=a.h[ge(a,c)])&&b.za&&(b=a.l[c.id])&&b.za&&e.stream!=c&&(e.stream=c,e.Ma=!0,d&&(e.ba?e.Qa=!0:e.ga?(e.na=!0,e.Qa=!0):($d(e),he(a,e,!0))))}function ie(a){var b=Sd(a.m);if(!Object.keys(a.b).every(function(a){return 0<fd(this.f,a,b)}.bind(a)))for(var c in a.b){var d=a.b[c];d.ba||d.na||(d.ga?d.na=!0:null==dd(a.f,c)?null==d.aa&&je(a,d,0):($d(d),he(a,d,!1)))}}
function be(a,b,c){var d=ae(a,Sd(a.m)),e=Oa(b,function(a){return qd(a.mimeType,a.codecs)});a.f.init(e,a.g.useRelativeCueTimestamps);ke(a);e=F(b);return le(a,e).then(function(){if(!this.c)for(var a in b){var e=b[a];this.b[a]||(this.b[a]={stream:e,type:a,va:null,W:null,Ma:!0,Ga:d,endOfStream:!1,ga:!1,aa:null,na:!1,Qa:!1,ba:!1,eb:!1,Xa:!1,Hb:c||0},je(this,this.b[a],0))}}.bind(a))}
function me(a,b){var c=a.h[b];if(c)return c.J;c={J:new w,za:!1};a.h[b]=c;var d=a.a.periods[b].streamSets.map(function(a){return a.streams}).reduce(B,[]);a.C=a.C.then(function(){if(!this.c)return le(this,d)}.bind(a)).then(function(){this.c||(this.h[b].J.resolve(),this.h[b].za=!0)}.bind(a))["catch"](function(a){this.c||(this.h[b].J.reject(),delete this.h[b],this.j(a))}.bind(a));return c.J}
function le(a,b){for(var c=[],d=0;d<b.length;++d){var e=b[d],f=a.l[e.id];f?c.push(f.J):(a.l[e.id]={J:new w,za:!1},c.push(e.createSegmentIndex()))}return Promise.all(c).then(function(){if(!this.c)for(var a=0;a<b.length;++a){var c=this.l[b[a].id];c.za||(c.J.resolve(),c.za=!0)}}.bind(a))["catch"](function(a){if(!this.c)return this.l[e.id].J.reject(),delete this.l[e.id],Promise.reject(a)}.bind(a))}function ke(a){var b=a.a.presentationTimeline.ea();Infinity>b?a.f.Aa(b):a.f.Aa(Math.pow(2,32))}
Zd.prototype.Y=function(a){if(!this.c&&!a.ga&&null!=a.aa&&!a.ba)if(a.aa=null,a.na)he(this,a,a.Qa);else{try{var b=ne(this,a);null!=b&&(je(this,a,b),a.Xa=!1)}catch(c){this.j(c);return}b=F(this.b);oe(this,a);b.every(function(a){return a.endOfStream})&&this.f.endOfStream()}};
function ne(a,b){var c=Sd(a.m),d,e=a.f;d=b.type;d="text"==d?e.b.a:Zc(ed(e,d));var f=b.va&&b.W?a.a.periods[ge(a,b.va)].startTime+b.W.endTime:Math.max(c,b.Hb);b.Hb=0;var e=ge(a,b.stream),g=ae(a,f),h=fd(a.f,b.type,c,.1),l=Math.max(a.i*Math.max(a.a.minBufferTime||0,a.g.rebufferingGoal),a.i*a.g.bufferingGoal);if(f>=a.a.presentationTimeline.ea())return b.endOfStream=!0,null;b.endOfStream=!1;b.Ga=g;if(g!=e)return null;if(h>=l)return.5;b.W&&b.stream==b.va?(f=b.W.position+1,d=pe(a,b,e,f)):(f=b.W?b.stream.findSegmentPosition(Math.max(0,
a.a.periods[ge(a,b.va)].startTime+b.W.endTime-a.a.periods[e].startTime)):b.stream.findSegmentPosition(Math.max(0,(d||c)-a.a.periods[e].startTime)),null==f?d=null:(g=null,null==d&&(g=pe(a,b,e,Math.max(0,f-1))),d=g||pe(a,b,e,f)));if(!d)return 1;qe(a,b,c,e,d);return null}function pe(a,b,c,d){c=a.a.periods[c];b=b.stream.getSegmentReference(d);if(!b)return null;a=a.a.presentationTimeline;d=a.Z();return c.startTime+b.endTime<a.ua()||c.startTime+b.startTime>d?null:b}
function qe(a,b,c,d,e){var f=a.a.periods[d],g=b.stream,h=a.a.periods[d+1],l=null,l=h?h.startTime:a.a.presentationTimeline.ea();d=re(a,b,d,l);b.ga=!0;b.Ma=!1;h=se(a,e);Promise.all([d,h]).then(function(a){if(!this.c&&!this.s)return te(this,b,c,f,g,e,a[1])}.bind(a)).then(function(){this.c||this.s||(b.ga=!1,b.eb=!1,je(this,b,0),ue(this,g))}.bind(a))["catch"](function(a){this.c||this.s||(b.ga=!1,1001==a.code||1002==a.code||1003==a.code?"text"==b.type&&this.g.ignoreTextStreamFailures&&1001==a.code?delete this.b.text:
(this.j(a),je(this,b,4)):3017==a.code?ve(this,b,a):"text"==b.type&&this.g.ignoreTextStreamFailures?delete this.b.text:(b.Xa=!0,this.j(a)))}.bind(a))}function ve(a,b,c){if(!F(a.b).some(function(a){return a!=b&&a.eb})){var d=Math.round(100*a.i);if(20<d)a.i-=.2;else if(4<d)a.i-=.04;else{b.Xa=!0;a.s=!0;a.j(c);return}b.eb=!0}je(a,b,4)}
function re(a,b,c,d){if(!b.Ma)return Promise.resolve();c=jd(a.f,b.type,a.a.periods[c].startTime-b.stream.presentationTimeOffset);d=null!=d?kd(a.f,b.type,d):Promise.resolve();if(!b.stream.initSegmentReference)return Promise.all([c,d]);a=se(a,b.stream.initSegmentReference).then(function(a){if(!this.c)return gd(this.f,b.type,a,null,null)}.bind(a))["catch"](function(a){b.Ma=!0;return Promise.reject(a)});return Promise.all([c,d,a])}
function te(a,b,c,d,e,f,g){return we(a,b,c).then(function(){if(!this.c)return gd(this.f,b.type,g,f.startTime+d.startTime,f.endTime+d.startTime)}.bind(a)).then(function(){if(!this.c)return b.va=e,b.W=f,Promise.resolve()}.bind(a))}function we(a,b,c){var d=dd(a.f,b.type);if(null==d)return Promise.resolve();c=c-d-a.g.bufferBehind;return 0>=c?Promise.resolve():a.f.remove(b.type,d,d+c).then(function(){}.bind(a))}
function ue(a,b){if(!a.K&&(a.K=F(a.b).every(function(a){return"text"==a.type?!0:!a.na&&!a.ba&&a.W}),a.K)){var c=ge(a,b);a.h[c]||me(a,c).then(function(){this.v()}.bind(a))["catch"](C);for(c=0;c<a.a.periods.length;++c)me(a,c)["catch"](C);a.B&&a.B()}}
function oe(a,b){if(b.Ga!=ge(a,b.stream)){var c=b.Ga,d=F(a.b);d.every(function(a){return a.Ga==c})&&d.every(xe)&&me(a,c).then(function(){if(!this.c&&d.every(function(a){var b=ge(this,a.stream);return xe(a)&&a.Ga==c&&b!=c}.bind(this))){var a=this.a.periods[c],b=this.H(a),g;for(g in this.b)if(!b[g]&&"text"!=g){this.j(new v(5,5005));return}for(g in b)if(!this.b[g])if("text"==g)be(this,{text:b.text},a.startTime),delete b[g];else{this.j(new v(5,5005));return}for(g in this.b)(a=b[g])?(fe(this,g,a,!1),je(this,
this.b[g],0)):delete this.b[g];this.v()}}.bind(a))["catch"](C)}}function xe(a){return!a.ga&&null==a.aa&&!a.na&&!a.ba}function ae(a,b){for(var c=a.a.periods.length-1;0<c;--c)if(b>=a.a.periods[c].startTime)return c;return 0}function ge(a,b){for(var c=0;c<a.a.periods.length;++c)for(var d=a.a.periods[c],e=0;e<d.streamSets.length;++e)if(0<=d.streamSets[e].streams.indexOf(b))return c;return-1}
function se(a,b){var c=rc(b.a(),a.g.retryParameters);if(b.M||null!=b.D){var d="bytes="+b.M+"-";null!=b.D&&(d+=b.D);c.headers.Range=d}return a.U.request(1,c).then(function(a){return a.data})}function he(a,b,c){b.na=!1;b.Qa=!1;b.ba=!0;id(a.f,b.type).then(function(){if(!this.c&&c){var a=this.f,e=b.type;return"text"==e?Promise.resolve():hd(a,e,a.Yb.bind(a,e))}}.bind(a)).then(function(){this.c||(b.va=null,b.W=null,b.ba=!1,je(this,b,0))}.bind(a))}
function je(a,b,c){b.aa=window.setTimeout(a.Y.bind(a,b),1E3*c)}function $d(a){null!=a.aa&&(window.clearTimeout(a.aa),a.aa=null)};function ye(a){return new Promise(function(b){var c=a.split(":");if(2>c.length||"data"!=c[0])throw new v(1,1004,a);c=c.slice(1).join(":").split(",");if(2>c.length)throw new v(1,1004,a);var d=c[0],c=window.decodeURIComponent(c.slice(1).join(",")),d=d.split(";"),e=null;1<d.length&&(e=d[1]);if("base64"==e)c=Ra(c).buffer;else{if(e)throw new v(1,1005,a);c=Ib(c)}b({uri:a,data:c,headers:{"content-type":d[0]}})})}m("shaka.net.DataUriPlugin",ye);pc.data=ye;function ze(a,b){return new Promise(function(c,d){var e=new XMLHttpRequest;e.open(b.method,a,!0);e.responseType="arraybuffer";e.timeout=b.retryParameters.timeout;e.withCredentials=b.allowCrossSiteCredentials;e.onload=function(b){b=b.target;var e=b.getAllResponseHeaders().split("\r\n").reduce(function(a,b){var c=b.split(": ");a[c[0].toLowerCase()]=c.slice(1).join(": ");return a},{});if(200<=b.status&&299>=b.status&&202!=b.status)b.responseURL&&(a=b.responseURL),c({uri:a,data:b.response,headers:e,pd:!!e["x-shaka-from-cache"]});
else{var f=null;try{f=Hb(b.response)}catch(n){}d(new v(1,1001,a,b.status,f,e))}};e.onerror=function(){d(new v(1,1002,a))};e.ontimeout=function(){d(new v(1,1003,a))};for(var f in b.headers)e.setRequestHeader(f,b.headers[f]);e.send(b.body)})}m("shaka.net.HttpPlugin",ze);pc.http=ze;pc.https=ze;function Ae(){this.a=null;this.c=[];this.b={}}k=Ae.prototype;
k.init=function(a){if(!window.indexedDB)return Promise.reject(new v(9,9E3));var b=window.indexedDB.open("shaka_offline_db",1),c=new w;b.onupgradeneeded=function(b){b=b.target.result;for(var c in a)b.createObjectStore(c,{keyPath:a[c]})};b.onsuccess=function(a){this.a=a.target.result;c.resolve()}.bind(this);b.onerror=Be.bind(null,b,c);return c.then(function(){var b=Object.keys(a);return Promise.all(b.map(function(a){return Ce(this,a).then(function(b){this.b[a]=b}.bind(this))}.bind(this)))}.bind(this))};
k.o=function(){return Promise.all(this.c.map(function(a){try{a.transaction.abort()}catch(b){}return a.J["catch"](C)})).then(function(){this.a&&(this.a.close(),this.a=null)}.bind(this))};k.get=function(a,b){return De(this,a,"readonly",function(a){return a.get(b)})};k.forEach=function(a,b){return De(this,a,"readonly",function(a){return a.openCursor()},function(a){a&&(b(a.value),a["continue"]())})};function Ee(a,b,c){return De(a,b,"readwrite",function(a){return a.put(c)})}
k.remove=function(a,b){return De(this,a,"readwrite",function(a){return a["delete"](b)})};function Fe(a,b){var c=[];return De(a,"segment","readwrite",function(a){return a.openCursor()},function(a){if(a){if(b(a.value)){var d=a["delete"](),f=new w;d.onsuccess=f.resolve;d.onerror=Be.bind(null,d,f);c.push(f)}a["continue"]()}}).then(function(){return Promise.all(c)}).then(function(){return c.length})}
function Ce(a,b){var c=0;return De(a,b,"readonly",function(a){return a.openCursor(null,"prev")},function(a){a&&(c=a.key+1)}).then(function(){return c})}
function De(a,b,c,d,e){c=a.a.transaction([b],c);var f=d(c.objectStore(b)),g=new w;e&&(f.onsuccess=function(a){e(a.target.result)});f.onerror=Be.bind(null,f,g);var h={transaction:c,J:g};a.c.push(h);var l=function(){this.c.splice(this.c.indexOf(h),1)}.bind(a);c.oncomplete=function(){l();g.resolve(f.result)};c.onerror=function(a){l();Be(f,g,a)};return g}function Be(a,b,c){"AbortError"==a.error.name?b.reject(new v(9,9002)):b.reject(new v(9,9001,a.error));c.preventDefault()};var Ge={manifest:"key",segment:"key"};function He(a){return{offlineUri:"offline:"+a.key,originalManifestUri:a.originalManifestUri,duration:a.duration,size:a.size,tracks:a.periods[0].streams.map(function(a){return{id:a.id,active:!1,type:a.contentType,bandwidth:0,language:a.language,kind:a.kind||null,width:a.width,height:a.height,frameRate:a.frameRate,codecs:a.codecs}}),appMetadata:a.appMetadata}};function Ie(a,b,c){this.b={};this.i=c;this.m=a;this.l=b;this.j=this.a=null;this.f=this.g=this.h=this.c=0}Ie.prototype.o=function(){var a=this.j||Promise.resolve();this.b={};this.j=this.a=this.l=this.m=this.i=null;return a};function Je(a,b,c,d,e){a.b[b]=a.b[b]||[];a.b[b].push({uris:c.a(),M:c.M,D:c.D,mb:d,Ea:e})}
function Ke(a,b){a.c=0;a.h=0;a.g=0;a.f=0;F(a.b).forEach(function(a){a.forEach(function(a){null!=a.D?this.c+=a.D-a.M+1:this.g+=a.mb}.bind(this))}.bind(a));a.a=b;a.a.size=a.c;var c=F(a.b).map(function(a){var b=0,c=function(){if(!this.i)return Promise.reject(new v(9,9002));if(b>=a.length)return Promise.resolve();var d=a[b++];return Le(this,d).then(c)}.bind(this);return c()}.bind(a));a.b={};return a.j=Promise.all(c)}
function Le(a,b){var c=rc(b.uris,a.l);if(b.M||null!=b.D)c.headers.Range="bytes="+b.M+"-"+(null==b.D?"":b.D);var d;return a.m.request(1,c).then(function(a){if(!this.a)return Promise.reject(new v(9,9002));d=a.data.byteLength;return b.Ea(a.data)}.bind(a)).then(function(){if(!this.a)return Promise.reject(new v(9,9002));null==b.D?(this.a.size+=d,this.f+=b.mb):this.h+=d;var a=(this.h+this.f)/(this.c+this.g),c=He(this.a);this.i.progressCallback(c,a)}.bind(a))};function Me(){}Me.prototype.configure=function(){};Me.prototype.start=function(a){var b=/^offline:([0-9]+)$/.exec(a);if(!b)return Promise.reject(new v(1,9004,a));var c=Number(b[1]),d=new Ae;return d.init(Ge).then(function(){return d.get("manifest",c)}).then(function(a){if(!a)throw new v(9,9003,c);return Ne(a)}).then(function(a){return d.o().then(function(){return a})},function(a){return d.o().then(function(){throw a;})})};Me.prototype.stop=function(){return Promise.resolve()};
function Ne(a){var b=new Q(null,0);b.Aa(a.duration);var c=a.drmInfo?[a.drmInfo]:[];return{presentationTimeline:b,minBufferTime:10,offlineSessionIds:a.sessionIds,periods:a.periods.map(function(a){return{startTime:a.startTime,streamSets:a.streams.map(function(d){var e=d.segments.map(function(a,b){return new J(b,a.startTime,a.endTime,function(){return[a.uri]},0,null)});b.Ha(a.startTime,e);e=new O(e);return{language:d.language,type:d.contentType,primary:d.primary,drmInfos:c,streams:[{id:d.id,createSegmentIndex:Promise.resolve.bind(Promise),
findSegmentPosition:e.find.bind(e),getSegmentReference:e.get.bind(e),initSegmentReference:d.initSegmentUri?new yb(function(){return[d.initSegmentUri]},0,null):null,presentationTimeOffset:d.presentationTimeOffset,mimeType:d.mimeType,codecs:d.codecs,bandwidth:0,width:d.width||void 0,height:d.height||void 0,kind:d.kind,encrypted:d.encrypted,keyId:d.keyId,allowedByApplication:!0,allowedByKeySystem:!0}]}})}})}}sc["application/x-offline-manifest"]=Me;function Oe(a){if(/^offline:([0-9]+)$/.exec(a)){var b={uri:a,data:new ArrayBuffer(0),headers:{"content-type":"application/x-offline-manifest"}};return Promise.resolve(b)}if(b=/^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a)){var c=Number(b[1]),d=new Ae;return d.init(Ge).then(function(){return d.get("segment",c)}).then(function(b){return d.o().then(function(){if(!b)throw new v(9,9003,c);return{uri:a,data:b.data,headers:{}}})})}return Promise.reject(new v(1,9004,a))}m("shaka.offline.OfflineScheme",Oe);
pc.offline=Oe;function Pe(){this.a=Promise.resolve();this.c=this.b=this.f=!1;this.g=new Promise(function(a){this.h=a}.bind(this))}Pe.prototype.then=function(a){this.a=this.a.then(a).then(function(a){return this.c?(this.h(),Promise.reject(this.i)):Promise.resolve(a)}.bind(this));return this};function Qe(a){a.f||(a.a=a.a.then(function(a){this.b=!0;return Promise.resolve(a)}.bind(a),function(a){this.b=!0;return Promise.reject(a)}.bind(a)));a.f=!0;return a.a}
Pe.prototype.cancel=function(a){if(this.b)return Promise.resolve();this.c=!0;this.i=a;return this.g};function Re(a,b,c,d,e){var f=e in d,g;for(g in b){var h=e+"."+g,l=f?d[e]:c[g],n=!!{".abr.manager":!0}[h];if(f||g in a)void 0===b[g]?void 0===l||f?delete a[g]:a[g]=l:n?a[g]=b[g]:"object"==typeof a[g]&&"object"==typeof b[g]?Re(a[g],b[g],l,d,h):typeof b[g]==typeof l&&(a[g]=b[g])}};function V(a,b){p.call(this);this.A=!1;this.f=a;this.m=null;this.v=new x;this.Ka=new q;this.pa=this.c=this.l=this.b=this.i=this.qa=this.C=this.F=this.g=this.h=null;this.Ra=1E9;this.oa=[];this.Da=!1;this.sa=!0;this.H=this.j=null;this.s={};this.a=Se(this);this.Ca={width:Infinity,height:Infinity};this.B=[];this.Y=this.K=this.ra=0;b&&b(this);this.h=new P(this.Uc.bind(this));this.qa=Te(this);for(var c=0;c<this.f.textTracks.length;++c){var d=this.f.textTracks[c];d.mode="disabled";"Shaka Player TextTrack"==
d.label&&(this.m=d)}this.m||(this.m=this.f.addTextTrack("subtitles","Shaka Player TextTrack"));this.m.mode="hidden";y(this.v,this.f,"error",this.tc.bind(this))}ba(V);m("shaka.Player",V);V.prototype.o=function(){this.A=!0;var a=Promise.resolve();this.j&&(a=this.j.cancel(new v(7,7E3)));return a.then(function(){var a=Promise.all([this.H,Ue(this),this.v?this.v.o():null,this.h?this.h.o():null]);this.a=this.h=this.Ka=this.v=this.m=this.f=null;return a}.bind(this))};V.prototype.destroy=V.prototype.o;
V.version="v2.0.7";var Ve={};V.registerSupportPlugin=function(a,b){Ve[a]=b};V.isBrowserSupported=function(){return!!window.Promise&&!!window.Uint8Array&&!!Array.prototype.forEach&&!!window.MediaSource&&!!window.MediaKeys&&!!window.navigator&&!!window.navigator.requestMediaKeySystemAccess&&!!window.MediaKeySystemAccess&&!!window.MediaKeySystemAccess.prototype.getConfiguration};
V.probeSupport=function(){return Xc().then(function(a){var b=uc(),c=cd();a={manifest:b,media:c,drm:a};for(var d in Ve)a[d]=Ve[d]();return a})};
V.prototype.load=function(a,b,c){var d=this.kb(),e=new Pe;this.j=e;this.dispatchEvent(new t("loading"));return Qe(e.then(function(){return d}).then(function(){return vc(a,this.h,this.a.manifest.retryParameters,c)}.bind(this)).then(function(b){this.l=new b;this.l.configure(this.a.manifest);return this.l.start(a,this.h,this.Na.bind(this),this.ia.bind(this),this.Rc.bind(this))}.bind(this)).then(function(b){if(0==b.periods.length)throw new v(4,4014);this.c=b;this.pa=a;this.g=new Jc(this.h,this.ia.bind(this),
this.Sc.bind(this));this.g.configure(this.a.drm);return this.g.init(b,!1)}.bind(this)).then(function(){this.c.periods.forEach(this.Na.bind(this));this.Y=Date.now()/1E3;return Promise.all([Mc(this.g,this.f),this.qa])}.bind(this)).then(function(){this.a.abr.manager.init(this.ib.bind(this));this.i=new Pd(this.f,this.c.presentationTimeline,1*Math.max(this.c.minBufferTime||0,this.a.streaming.rebufferingGoal),b||null,this.Nb.bind(this),this.Tc.bind(this));this.C=new bd(this.f,this.F,this.m);this.b=new Zd(this.i,
this.C,this.h,this.c,this.Qc.bind(this),this.Rb.bind(this),this.ia.bind(this));this.b.configure(this.a.streaming);return this.b.init()}.bind(this)).then(function(){this.c.periods.forEach(this.Na.bind(this));We(this);Xe(this);this.j=null}.bind(this)))["catch"](function(a){this.j==e&&(this.j=null,this.dispatchEvent(new t("unloading")));return Promise.reject(a)}.bind(this))};V.prototype.load=V.prototype.load;
function Te(a){a.F=new MediaSource;var b=new w;y(a.v,a.F,"sourceopen",b.resolve);a.f.src=window.URL.createObjectURL(a.F);return b}V.prototype.configure=function(a){a.abr&&a.abr.manager&&a.abr.manager!=this.a.abr.manager&&(this.a.abr.manager.stop(),a.abr.manager.init(this.ib.bind(this)));Re(this.a,a,Se(this),Ye(),"");Ze(this)};V.prototype.configure=V.prototype.configure;
function Ze(a){a.l&&a.l.configure(a.a.manifest);a.g&&a.g.configure(a.a.drm);if(a.b){a.b.configure(a.a.streaming);try{a.c.periods.forEach(a.Na.bind(a))}catch(b){a.ia(b)}$e(a,ce(a.b))}a.a.abr.enabled&&!a.sa?a.a.abr.manager.enable():a.a.abr.manager.disable();a.a.abr.manager.setDefaultEstimate(a.a.abr.defaultBandwidthEstimate)}V.prototype.getConfiguration=function(){var a=Se(this);Re(a,this.a,Se(this),Ye(),"");return a};V.prototype.getConfiguration=V.prototype.getConfiguration;
V.prototype.Jc=function(){var a=Se(this);a.abr&&a.abr.manager&&a.abr.manager!=this.a.abr.manager&&(this.a.abr.manager.stop(),a.abr.manager.init(this.ib.bind(this)));this.a=Se(this);Ze(this)};V.prototype.resetConfiguration=V.prototype.Jc;V.prototype.$b=function(){return this.f};V.prototype.getMediaElement=V.prototype.$b;V.prototype.rb=function(){return this.h};V.prototype.getNetworkingEngine=V.prototype.rb;V.prototype.Zb=function(){return this.pa};V.prototype.getManifestUri=V.prototype.Zb;
V.prototype.S=function(){return this.c?this.c.presentationTimeline.S():!1};V.prototype.isLive=V.prototype.S;V.prototype.fa=function(){return this.c?this.c.presentationTimeline.fa():!1};V.prototype.isInProgress=V.prototype.fa;V.prototype.Lc=function(){var a=0,b=0;this.c&&(b=this.c.presentationTimeline,a=b.ua(),b=b.Va());return{start:a,end:b}};V.prototype.seekRange=V.prototype.Lc;V.prototype.keySystem=function(){return this.g?this.g.keySystem():""};V.prototype.keySystem=V.prototype.keySystem;
V.prototype.drmInfo=function(){return this.g?this.g.b:null};V.prototype.drmInfo=V.prototype.drmInfo;V.prototype.dc=function(){return this.Da};V.prototype.isBuffering=V.prototype.dc;V.prototype.kb=function(){if(this.A)return Promise.resolve();this.dispatchEvent(new t("unloading"));var a=Promise.resolve();this.j&&(a=this.j.cancel(new v(7,7E3)));return a.then(function(){this.H||(this.H=af(this).then(function(){this.H=null}.bind(this)));return this.H}.bind(this))};V.prototype.unload=V.prototype.kb;
V.prototype.Ua=function(){return this.i?this.i.Ua():0};V.prototype.getPlaybackRate=V.prototype.Ua;V.prototype.ed=function(a){this.i&&Wd(this.i,a)};V.prototype.trickPlay=V.prototype.ed;V.prototype.Sb=function(){this.i&&Wd(this.i,1)};V.prototype.cancelTrickPlay=V.prototype.Sb;V.prototype.getTracks=function(){if(!this.b)return[];var a=de(this.b);return rd(ce(this.b),a).filter(function(a){return 0>this.oa.indexOf(a.id)}.bind(this))};V.prototype.getTracks=V.prototype.getTracks;
V.prototype.Mc=function(a,b){if(this.b){var c=sd(ce(this.b),a);if(c){var d=c.stream;d.allowedByApplication&&d.allowedByKeySystem&&(this.B.push({timestamp:Date.now()/1E3,id:d.id,type:a.type,fromAdaptation:!1}),c={},c[a.type]=d,"text"!=a.type&&(d=de(this.b).text,this.configure({abr:{enabled:!1}}),d&&(c.text=d)),bf(this,c,b))}}};V.prototype.selectTrack=V.prototype.Mc;V.prototype.gc=function(){return"showing"==this.m.mode};V.prototype.isTextTrackVisible=V.prototype.gc;
V.prototype.Oc=function(a){this.m.mode=a?"showing":"hidden";cf(this)};V.prototype.setTextTrackVisibility=V.prototype.Oc;
V.prototype.getStats=function(){df(this);var a={},b={},c=this.f&&this.f.getVideoPlaybackQuality?this.f.getVideoPlaybackQuality():{};this.b&&(b=de(this.b),a=b.video||{},b=b.audio||{});return{width:a.width||0,height:a.height||0,streamBandwidth:a.bandwidth+b.bandwidth||0,decodedFrames:Number(c.totalVideoFrames),droppedFrames:Number(c.droppedVideoFrames),estimatedBandwidth:this.a.abr.manager.getBandwidthEstimate(),playTime:this.ra,bufferingTime:this.K,switchHistory:this.B.slice(0)}};
V.prototype.getStats=V.prototype.getStats;
V.prototype.addTextTrack=function(a,b,c,d,e){if(!this.b)return Promise.reject();for(var f=ce(this.b),g,h=0;h<this.c.periods.length;h++)if(this.c.periods[h]==f){if(h==this.c.periods.length-1){if(g=this.c.presentationTimeline.ea()-f.startTime,Infinity==g)return Promise.reject()}else g=this.c.periods[h+1].startTime-f.startTime;break}var l={id:this.Ra++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(){return 1},getSegmentReference:function(b){return 1!=b?null:new J(1,0,
g,function(){return[a]},0,null)},initSegmentReference:null,presentationTimeOffset:0,mimeType:d,codecs:e||"",bandwidth:0,kind:c,encrypted:!1,keyId:null,language:b,allowedByApplication:!0,allowedByKeySystem:!0};d={language:b,type:"text",primary:!1,drmInfos:[],streams:[l]};this.oa.push(l.id);f.streamSets.push(d);return ee(this.b,l).then(function(){if(!this.A)return this.oa.splice(this.oa.indexOf(l.id),1),$e(this,f),We(this),{id:l.id,active:!1,type:"text",bandwidth:0,language:b,kind:c,width:null,height:null}}.bind(this))};
V.prototype.addTextTrack=V.prototype.addTextTrack;V.prototype.gb=function(a,b){this.Ca.width=a;this.Ca.height=b};V.prototype.setMaxHardwareResolution=V.prototype.gb;
function Ue(a){a.v&&a.v.la(a.F,"sourceopen");a.f&&(a.f.removeAttribute("src"),a.f.load());var b=Promise.all([a.a?a.a.abr.manager.stop():null,a.g?a.g.o():null,a.C?a.C.o():null,a.i?a.i.o():null,a.b?a.b.o():null,a.l?a.l.stop():null]);a.g=null;a.C=null;a.i=null;a.b=null;a.l=null;a.c=null;a.pa=null;a.qa=null;a.F=null;a.s={};a.B=[];a.ra=0;a.K=0;return b}function af(a){return a.l?Ue(a).then(function(){this.A||(this.Nb(!1),this.qa=Te(this))}.bind(a)):Promise.resolve()}
function Ye(){return{".drm.servers":"",".drm.clearKeys":"",".drm.advanced":{distinctiveIdentifierRequired:!1,persistentStateRequired:!1,videoRobustness:"",audioRobustness:"",serverCertificate:null}}}
function Se(a){return{drm:{retryParameters:qc(),servers:{},clearKeys:{},advanced:{}},manifest:{retryParameters:qc(),dash:{customScheme:function(a){if(a)return null},clockSyncUri:""}},streaming:{retryParameters:qc(),rebufferingGoal:2,bufferingGoal:10,bufferBehind:30,ignoreTextStreamFailures:!1,useRelativeCueTimestamps:!1},abr:{manager:a.Ka,enabled:!0,defaultBandwidthEstimate:5E5},preferredAudioLanguage:"",preferredTextLanguage:"",restrictions:{minWidth:0,maxWidth:Infinity,minHeight:0,maxHeight:Infinity,
minPixels:0,maxPixels:Infinity,minAudioBandwidth:0,maxAudioBandwidth:Infinity,minVideoBandwidth:0,maxVideoBandwidth:Infinity}}}k=V.prototype;k.Na=function(a){var b=this.b?de(this.b):{};pd(this.g,b,a);b=a.streamSets.some(td);od(a,this.a.restrictions,this.Ca)&&!this.j&&We(this);a=!a.streamSets.some(td);if(!b)throw new v(4,4011);if(a)throw new v(4,4012);};function bf(a,b,c){for(var d in b){var e=b[d],f=c||!1;"text"==d&&(f=!0);a.sa?a.s[d]={stream:e,Vb:f}:fe(a.b,d,e,f)}}
function df(a){if(a.c){var b=Date.now()/1E3;a.Da?a.K+=b-a.Y:a.ra+=b-a.Y;a.Y=b}}k.Uc=function(a,b,c){this.a.abr.manager.segmentDownloaded(a,b,c)};k.Nb=function(a){df(this);this.Da=a;this.dispatchEvent(new t("buffering",{buffering:a}))};k.Tc=function(){this.b&&ie(this.b)};
function ef(a,b,c){if(!F(b).some(td))return a.ia(new v(4,4012)),{};var d={};if(c)["video","audio","text"].forEach(function(a){a in b&&(d[a]=b[a])});else{c=de(a.b);for(var e in c){var f=c[e];f.allowedByApplication&&f.allowedByKeySystem&&b[e].language==f.language||(d[e]=b[e])}}if(Na(d))return{};ha(Object.keys(d));var g=a.a.abr.manager.chooseStreams(d);return Pa(d,function(a){return!!g[a]})?g:(a.ia(new v(4,4012)),{})}
function $e(a,b){var c={audio:!1,text:!1},d=ud(b,a.a,c),e=ef(a,d),f;for(f in e)a.B.push({timestamp:Date.now()/1E3,id:e[f].id,type:f,fromAdaptation:!0});bf(a,e,!0);Xe(a);d.text&&d.audio&&c.text&&d.text.language!=d.audio.language&&(a.m.mode="showing",cf(a))}k.Qc=function(a){this.sa=!0;this.a.abr.manager.disable();a=ud(a,this.a);a=ef(this,a,!0);for(var b in this.s)a[b]=this.s[b].stream;this.s={};for(b in a)this.B.push({timestamp:Date.now()/1E3,id:a[b].id,type:b,fromAdaptation:!0});this.j||We(this);return a};
k.Rb=function(){this.sa=!1;this.a.abr.enabled&&this.a.abr.manager.enable();for(var a in this.s){var b=this.s[a];fe(this.b,a,b.stream,b.Vb)}this.s={}};k.ib=function(a,b){var c=de(this.b),d;for(d in a){var e=a[d];c[d]!=e?this.B.push({timestamp:Date.now()/1E3,id:e.id,type:d,fromAdaptation:!0}):delete a[d]}if(!Na(a)&&this.b){for(d in a)fe(this.b,d,a[d],b||!1);Xe(this)}};function Xe(a){Promise.resolve().then(function(){this.A||this.dispatchEvent(new t("adaptation"))}.bind(a))}
function We(a){Promise.resolve().then(function(){this.A||this.dispatchEvent(new t("trackschanged"))}.bind(a))}function cf(a){a.dispatchEvent(new t("texttrackvisibility"))}k.ia=function(a){this.dispatchEvent(new t("error",{detail:a}))};k.Rc=function(a){this.dispatchEvent(a)};k.tc=function(){if(this.f.error){var a=this.f.error.code;if(1!=a){var b=this.f.error.msExtendedCode;b&&(0>b&&(b+=Math.pow(2,32)),b=b.toString(16));this.ia(new v(3,3016,a,b))}}};
k.Sc=function(a){var b=["output-restricted","internal-error"],c=ce(this.b),d=!1;c.streamSets.forEach(function(c){c.streams.forEach(function(c){var e=c.allowedByKeySystem;c.keyId&&c.keyId in a&&(c.allowedByKeySystem=0>b.indexOf(a[c.keyId]));e!=c.allowedByKeySystem&&(d=!0)})});$e(this,c);d&&We(this)};function W(a){this.a=new Ae;this.c=a;this.j=ff(this);this.g=null;this.v=!1;this.i=null;this.l=[];this.f=-1;this.m=0;this.b=null;this.h=new Ie(a.h,a.getConfiguration().streaming.retryParameters,this.j)}m("shaka.offline.Storage",W);function gf(){return!!window.indexedDB}W.support=gf;
W.prototype.o=function(){var a=this.l,b=this.a,c=this.h?this.h.o()["catch"](function(){}).then(function(){return Promise.all(a.map(function(a){return b.remove("segment",a)}))}).then(function(){return b.o()}):Promise.resolve();this.j=this.c=this.h=this.a=null;return c};W.prototype.destroy=W.prototype.o;W.prototype.configure=function(a){Re(this.j,a,ff(this),{},"")};W.prototype.configure=W.prototype.configure;
W.prototype.ad=function(a,b,c){function d(a){f=a}if(this.v)return Promise.reject(new v(9,9006));this.v=!0;var e,f=null;return hf(this).then(function(){Y(this);return jf(this,a,d,c)}.bind(this)).then(function(c){Y(this);this.b=c.manifest;this.g=c.Wb;if(this.b.presentationTimeline.S()||this.b.presentationTimeline.fa())throw new v(9,9005,a);this.b.periods.forEach(this.s.bind(this));this.f=this.a.b.manifest++;this.m=0;c=this.b.periods.map(this.A.bind(this));var d=this.g.b,f=Rc(this.g);if(d){if(!f.length)throw new v(9,
9007,a);d.initData=[]}e={key:this.f,originalManifestUri:a,duration:this.m,size:0,periods:c,sessionIds:f,drmInfo:d,appMetadata:b};return Ke(this.h,e)}.bind(this)).then(function(){Y(this);if(f)throw f;return Ee(this.a,"manifest",e)}.bind(this)).then(function(){return kf(this)}.bind(this)).then(function(){return He(e)}.bind(this))["catch"](function(a){return kf(this)["catch"](C).then(function(){throw a;})}.bind(this))};W.prototype.store=W.prototype.ad;
W.prototype.remove=function(a){function b(a){6013!=a.code&&(e=a)}var c=a.offlineUri,d=/^offline:([0-9]+)$/.exec(c);if(!d)return Promise.reject(new v(9,9004,c));var e=null,f,g,h=Number(d[1]);return hf(this).then(function(){Y(this);return this.a.get("manifest",h)}.bind(this)).then(function(a){Y(this);if(!a)throw new v(9,9003,c);f=a;a=Ne(f);g=new Jc(this.c.h,b,function(){});g.configure(this.c.getConfiguration().drm);return g.init(a,!0)}.bind(this)).then(function(){return Oc(g,f.sessionIds)}.bind(this)).then(function(){return g.o()}.bind(this)).then(function(){Y(this);
if(e)throw e;var b=f.periods.map(function(a){return a.streams.map(function(a){var b=a.segments.map(function(a){a=/^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a.uri);return Number(a[1])});a.initSegmentUri&&(a=/^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a.initSegmentUri),b.push(Number(a[1])));return b}).reduce(B,[])}).reduce(B,[]),c=0,d=b.length,g=this.j.progressCallback;return Fe(this.a,function(e){e=b.indexOf(e.key);0<=e&&(g(a,c/d),c++);return 0<=e}.bind(this))}.bind(this)).then(function(){Y(this);this.j.progressCallback(a,
1);return this.a.remove("manifest",h)}.bind(this))};W.prototype.remove=W.prototype.remove;W.prototype.list=function(){var a=[];return hf(this).then(function(){Y(this);return this.a.forEach("manifest",function(b){a.push(He(b))})}.bind(this)).then(function(){return a})};W.prototype.list=W.prototype.list;
function jf(a,b,c,d){function e(){}var f=a.c.h,g=a.c.getConfiguration(),h,l,n;return vc(b,f,g.manifest.retryParameters,d).then(function(a){Y(this);n=new a;n.configure(g.manifest);return n.start(b,f,this.s.bind(this),c)}.bind(a)).then(function(a){Y(this);h=a;l=new Jc(f,c,e);l.configure(g.drm);return l.init(h,!0)}.bind(a)).then(function(){Y(this);return lf(h)}.bind(a)).then(function(){Y(this);return Nc(l)}.bind(a)).then(function(){Y(this);return n.stop()}.bind(a)).then(function(){Y(this);return{manifest:h,
Wb:l}}.bind(a))["catch"](function(a){if(n)return n.stop().then(function(){throw a;});throw a;})}
W.prototype.B=function(a){var b=[],c=a.filter(function(a){return"video"==a.type&&480>=a.height});c.sort(function(a,b){return b.bandwidth-a.bandwidth});c.length&&b.push(c[0]);for(var d=Ec(this.c.getConfiguration().preferredAudioLanguage),c=[0,Cc,Dc],e=a.filter(function(a){return"audio"==a.type}),c=c.map(function(a){return e.filter(function(b){b=Ec(b.language);return Bc(a,d,b)})}),f=e,g=0;g<c.length;g++)c[g].length&&(f=c[g]);f.sort(function(a,b){return a.bandwidth-b.bandwidth});f.length&&b.push(f[Math.floor(f.length/
2)]);var c=Ec(this.c.getConfiguration().preferredTextLanguage),h=Bc.bind(null,Dc,c);b.push.apply(b,a.filter(function(a){var b=Ec(a.language);return"text"==a.type&&h(b)}));return b};function ff(a){return{trackSelectionCallback:a.B.bind(a),progressCallback:function(a,c){if(a||c)return null}}}function hf(a){return a.a.a?Promise.resolve():a.a.init(Ge)}
W.prototype.s=function(a){function b(a,b,c){b=b.filter(function(a){return a.type==c});return 0==b.length?null:sd(a,b[0]).stream}var c={};this.i&&(c={video:b(this.b.periods[0],this.i,"video"),audio:b(this.b.periods[0],this.i,"audio")});pd(this.g,c,a);od(a,this.c.getConfiguration().restrictions,{width:Infinity,height:Infinity})};function kf(a){var b=a.g?a.g.o():Promise.resolve();a.g=null;a.b=null;a.v=!1;a.i=null;a.l=[];a.f=-1;return b}
function lf(a){a=a.periods.map(function(a){return a.streamSets}).reduce(B,[]).map(function(a){return a.streams}).reduce(B,[]);return Promise.all(a.map(function(a){return a.createSegmentIndex()}))}
W.prototype.A=function(a){var b=rd(a,null),b=this.j.trackSelectionCallback(b);this.i||(this.i=b,this.b.periods.forEach(this.s.bind(this)));for(var c=b.length-1;0<c;--c){for(var d=!1,e=c-1;0<=e;--e)if(b[c].type==b[e].type&&b[c].kind==b[e].kind&&b[c].language==b[e].language){d=!0;break}if(d)break}b=b.map(function(b){b=sd(a,b);return mf(this,a,b.bd,b.stream)}.bind(this));return{startTime:a.startTime,streams:b}};
function mf(a,b,c,d){for(var e=[],f=a.b.presentationTimeline.ta(),g=f,h=d.findSegmentPosition(f),l=null!=h?d.getSegmentReference(h):null;l;){var n=a.a.b.segment++;Je(a.h,c.type,l,(l.endTime-l.startTime)*d.bandwidth/8,function(a,b,c,d){b={key:a,data:d,manifestKey:this.f,streamNumber:c,segmentNumber:b};this.l.push(a);return Ee(this.a,"segment",b)}.bind(a,n,l.position,d.id));e.push({startTime:l.startTime,endTime:l.endTime,uri:"offline:"+a.f+"/"+d.id+"/"+n});g=l.endTime+b.startTime;l=d.getSegmentReference(++h)}a.m=
Math.max(a.m,g-f);b=null;d.initSegmentReference&&(n=a.a.b.segment++,b="offline:"+a.f+"/"+d.id+"/"+n,Je(a.h,c.type,d.initSegmentReference,0,function(a,b){var c={key:n,data:b,manifestKey:this.f,streamNumber:a,segmentNumber:-1};this.l.push(n);return Ee(this.a,"segment",c)}.bind(a,d.id)));return{id:d.id,primary:c.primary,presentationTimeOffset:d.presentationTimeOffset||0,contentType:c.type,mimeType:d.mimeType,codecs:d.codecs,frameRate:d.frameRate,kind:d.kind,language:c.language,width:d.width||null,height:d.height||
null,initSegmentUri:b,encrypted:d.encrypted,keyId:d.keyId,segments:e}}function Y(a){if(!a.c)throw new v(9,9002);}Ve.offline=gf;m("shaka.polyfill.installAll",function(){for(var a=0;a<nf.length;++a)nf[a]()});var nf=[];function of(a){nf.push(a)}m("shaka.polyfill.register",of);function pf(a){var b=a.type.replace(/^(webkit|moz|MS)/,"").toLowerCase(),b=new Event(b,a);a.target.dispatchEvent(b)}
of(function(){if(window.Document){var a=Element.prototype;a.requestFullscreen=a.requestFullscreen||a.mozRequestFullScreen||a.msRequestFullscreen||a.webkitRequestFullscreen;a=Document.prototype;a.exitFullscreen=a.exitFullscreen||a.mozCancelFullScreen||a.msExitFullscreen||a.webkitExitFullscreen;"fullscreenElement"in document||(Object.defineProperty(document,"fullscreenElement",{get:function(){return document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement}}),Object.defineProperty(document,
"fullscreenEnabled",{get:function(){return document.mozFullScreenEnabled||document.msFullscreenEnabled||document.webkitFullscreenEnabled}}));document.addEventListener("webkitfullscreenchange",pf);document.addEventListener("webkitfullscreenerror",pf);document.addEventListener("mozfullscreenchange",pf);document.addEventListener("mozfullscreenerror",pf);document.addEventListener("MSFullscreenChange",pf);document.addEventListener("MSFullscreenError",pf)}});of(function(){var a=navigator.userAgent;a&&0<=a.indexOf("CrKey")&&delete window.indexedDB});function qf(a){this.c=[];this.b=[];this.a=[];for(a=new Jb(new DataView(a.buffer));Lb(a);){var b=Sb(1886614376,a);if(-1==b)break;var c=a.a-8,d=Mb(a);if(1<d)N(a,b-(a.a-c));else{N(a,3);var e=Ta(Qb(a,16)),f=[];if(0<d)for(var d=M(a),g=0;g<d;++g){var h=Ta(Qb(a,16));f.push(h)}d=M(a);N(a,d);this.b.push.apply(this.b,f);this.c.push(e);this.a.push({start:c,end:a.a-1});a.a!=c+b&&N(a,b-(a.a-c))}}};function rf(a,b){try{var c=new sf(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
function sf(a,b){this.keySystem=a;for(var c=!1,d=0;d<b.length;++d){var e=b[d],f={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:e.initDataTypes,sessionTypes:["temporary"],label:e.label},g=!1;if(e.audioCapabilities)for(var h=0;h<e.audioCapabilities.length;++h){var l=e.audioCapabilities[h];if(l.contentType){var g=!0,n=l.contentType.split(";")[0];MSMediaKeys.isTypeSupported(this.keySystem,n)&&(f.audioCapabilities.push(l),c=!0)}}if(e.videoCapabilities)for(h=
0;h<e.videoCapabilities.length;++h)l=e.videoCapabilities[h],l.contentType&&(g=!0,n=l.contentType.split(";")[0],MSMediaKeys.isTypeSupported(this.keySystem,n)&&(f.videoCapabilities.push(l),c=!0));g||(c=MSMediaKeys.isTypeSupported(this.keySystem,"video/mp4"));"required"==e.persistentState&&(f.persistentState="required",f.sessionTypes=["persistent-license"]);if(c){this.a=f;return}}c=Error("Unsupported keySystem");c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}
sf.prototype.createMediaKeys=function(){var a=new tf(this.keySystem);return Promise.resolve(a)};sf.prototype.getConfiguration=function(){return this.a};function uf(a){var b=this.mediaKeys;b&&b!=a&&vf(b,null);delete this.mediaKeys;return(this.mediaKeys=a)?vf(a,this):Promise.resolve()}function tf(a){this.a=new MSMediaKeys(a);this.b=new x}tf.prototype.createSession=function(a){if("temporary"!=(a||"temporary"))throw new TypeError("Session type "+a+" is unsupported on this platform.");return new wf(this.a)};
tf.prototype.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};function vf(a,b){function c(){b.msSetMediaKeys(d.a);b.removeEventListener("loadedmetadata",c)}Ca(a.b);if(!b)return Promise.resolve();y(a.b,b,"msneedkey",xf);var d=a;try{return 1<=b.readyState?b.msSetMediaKeys(a.a):b.addEventListener("loadedmetadata",c),Promise.resolve()}catch(e){return Promise.reject(e)}}
function wf(a){p.call(this);this.c=null;this.g=a;this.b=this.a=null;this.f=new x;this.sessionId="";this.expiration=NaN;this.closed=new w;this.keyStatuses=new yf}ba(wf);k=wf.prototype;k.generateRequest=function(a,b){this.a=new w;try{this.c=this.g.createSession("video/mp4",new Uint8Array(b),null),y(this.f,this.c,"mskeymessage",this.pc.bind(this)),y(this.f,this.c,"mskeyadded",this.nc.bind(this)),y(this.f,this.c,"mskeyerror",this.oc.bind(this)),zf(this,"status-pending")}catch(c){this.a.reject(c)}return this.a};
k.load=function(){return Promise.reject(Error("MediaKeySession.load not yet supported"))};k.update=function(a){this.b=new w;try{this.c.update(new Uint8Array(a))}catch(b){this.b.reject(b)}return this.b};k.close=function(){try{this.c.close(),this.closed.resolve(),Ca(this.f)}catch(a){this.closed.reject(a)}return this.closed};k.remove=function(){return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"))};
function xf(a){var b=document.createEvent("CustomEvent");b.initCustomEvent("encrypted",!1,!1,null);b.initDataType="cenc";if(a=a.initData){var c=new qf(a);if(!(1>=c.a.length)){for(var d=[],e=0;e<c.a.length;e++)d.push(a.subarray(c.a[e].start,c.a[e].end+1));e=Af;a=[];for(c=0;c<d.length;++c){for(var f=!1,g=0;g<a.length&&!(f=e?e(d[c],a[g]):d[c]===a[g]);++g);f||a.push(d[c])}for(e=d=0;e<a.length;e++)d+=a[e].length;d=new Uint8Array(d);for(e=c=0;e<a.length;e++)d.set(a[e],c),c+=a[e].length;a=d}}b.initData=
a;this.dispatchEvent(b)}function Af(a,b){return Ua(a,b)}k.pc=function(a){this.a&&(this.a.resolve(),this.a=null);this.dispatchEvent(new t("message",{messageType:void 0==this.keyStatuses.Wa()?"licenserequest":"licenserenewal",message:a.message.buffer}))};k.nc=function(){this.a?(zf(this,"usable"),this.a.resolve(),this.a=null):this.b&&(zf(this,"usable"),this.b.resolve(),this.b=null)};
k.oc=function(){var a=Error("EME PatchedMediaKeysMs key error");a.errorCode=this.c.error;if(this.a)this.a.reject(a),this.a=null;else if(this.b)this.b.reject(a),this.b=null;else switch(this.c.error.code){case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:zf(this,"output-not-allowed");default:zf(this,"internal-error")}};function zf(a,b){a.keyStatuses.hb(b);a.dispatchEvent(new t("keystatuseschange"))}function yf(){this.size=0;this.a=void 0}var Bf;k=yf.prototype;
k.hb=function(a){this.size=void 0==a?0:1;this.a=a};k.Wa=function(){return this.a};k.forEach=function(a){this.a&&a(this.a,Bf)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=Bf;return this.a&&Ua(new Uint8Array(a),new Uint8Array(b))?!0:!1};k.keys=function(){};function Cf(){return Promise.reject(Error("The key system specified is not supported."))}function Df(a){return a?Promise.reject(Error("MediaKeys not supported.")):Promise.resolve()}function Ef(){throw new TypeError("Illegal constructor.");}Ef.prototype.createSession=function(){};Ef.prototype.setServerCertificate=function(){};function Ff(){throw new TypeError("Illegal constructor.");}Ff.prototype.getConfiguration=function(){};Ff.prototype.createMediaKeys=function(){};var Gf="";function Hf(a){Gf=a;If=(new Uint8Array([0])).buffer;navigator.requestMediaKeySystemAccess=Jf;delete HTMLMediaElement.prototype.mediaKeys;HTMLMediaElement.prototype.mediaKeys=null;HTMLMediaElement.prototype.setMediaKeys=Kf;window.MediaKeys=Lf;window.MediaKeySystemAccess=Mf}function Nf(a){var b=Gf;return b?b+a.charAt(0).toUpperCase()+a.slice(1):a}function Jf(a,b){try{var c=new Mf(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
function Kf(a){var b=this.mediaKeys;b&&b!=a&&Of(b,null);delete this.mediaKeys;(this.mediaKeys=a)&&Of(a,this);return Promise.resolve()}
function Mf(a,b){this.a=this.keySystem=a;var c=!0;"org.w3.clearkey"==a&&(this.a="webkit-org.w3.clearkey",c=!1);var d=!1,e;e=document.getElementsByTagName("video");e=e.length?e[0]:document.createElement("video");for(var f=0;f<b.length;++f){var g=b[f],h={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:g.initDataTypes,sessionTypes:["temporary"],label:g.label},l=!1;if(g.audioCapabilities)for(var n=0;n<g.audioCapabilities.length;++n){var r=
g.audioCapabilities[n];if(r.contentType){var l=!0,u=r.contentType.split(";")[0];e.canPlayType(u,this.a)&&(h.audioCapabilities.push(r),d=!0)}}if(g.videoCapabilities)for(n=0;n<g.videoCapabilities.length;++n)r=g.videoCapabilities[n],r.contentType&&(l=!0,e.canPlayType(r.contentType,this.a)&&(h.videoCapabilities.push(r),d=!0));l||(d=e.canPlayType("video/mp4",this.a)||e.canPlayType("video/webm",this.a));"required"==g.persistentState&&(c?(h.persistentState="required",h.sessionTypes=["persistent-license"]):
d=!1);if(d){this.b=h;return}}c="Unsupported keySystem";if("org.w3.clearkey"==a||"com.widevine.alpha"==a)c="None of the requested configurations were supported.";c=Error(c);c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}Mf.prototype.createMediaKeys=function(){var a=new Lf(this.a);return Promise.resolve(a)};Mf.prototype.getConfiguration=function(){return this.b};function Lf(a){this.g=a;this.b=null;this.a=new x;this.c=[];this.f={}}
function Of(a,b){a.b=b;Ca(a.a);var c=Gf;b&&(y(a.a,b,c+"needkey",a.yc.bind(a)),y(a.a,b,c+"keymessage",a.xc.bind(a)),y(a.a,b,c+"keyadded",a.vc.bind(a)),y(a.a,b,c+"keyerror",a.wc.bind(a)))}k=Lf.prototype;k.createSession=function(a){var b=a||"temporary";if("temporary"!=b&&"persistent-license"!=b)throw new TypeError("Session type "+a+" is unsupported on this platform.");a=this.b||document.createElement("video");a.src||(a.src="about:blank");b=new Pf(a,this.g,b);this.c.push(b);return b};
k.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};k.yc=function(a){var b=document.createEvent("CustomEvent");b.initCustomEvent("encrypted",!1,!1,null);b.initDataType="webm";b.initData=a.initData;this.b.dispatchEvent(b)};k.xc=function(a){var b=Qf(this,a.sessionId);b&&(a=new t("message",{messageType:void 0==b.keyStatuses.Wa()?"licenserequest":"licenserenewal",message:a.message}),b.b&&(b.b.resolve(),b.b=null),b.dispatchEvent(a))};
k.vc=function(a){if(a=Qf(this,a.sessionId))Rf(a,"usable"),a.a&&a.a.resolve(),a.a=null};
k.wc=function(a){var b=Qf(this,a.sessionId);if(b){var c=Error("EME v0.1b key error");c.errorCode=a.errorCode;c.errorCode.systemCode=a.systemCode;!a.sessionId&&b.b?(c.method="generateRequest",45==a.systemCode&&(c.message="Unsupported session type."),b.b.reject(c),b.b=null):a.sessionId&&b.a?(c.method="update",b.a.reject(c),b.a=null):(c=a.systemCode,a.errorCode.code==MediaKeyError.MEDIA_KEYERR_OUTPUT?Rf(b,"output-restricted"):1==c?Rf(b,"expired"):Rf(b,"internal-error"))}};
function Qf(a,b){var c=a.f[b];return c?c:(c=a.c.shift())?(c.sessionId=b,a.f[b]=c):null}function Pf(a,b,c){p.call(this);this.f=a;this.h=!1;this.a=this.b=null;this.c=b;this.g=c;this.sessionId="";this.expiration=NaN;this.closed=new w;this.keyStatuses=new Sf}ba(Pf);
function Tf(a,b,c){if(a.h)return Promise.reject(Error("The session is already initialized."));a.h=!0;var d;try{if("persistent-license"==a.g)if(c)d=new Uint8Array(Ib("LOAD_SESSION|"+c));else{var e=Ib("PERSISTENT|"),f=new Uint8Array(e.byteLength+b.byteLength);f.set(new Uint8Array(e),0);f.set(new Uint8Array(b),e.byteLength);d=f}else d=new Uint8Array(b)}catch(h){return Promise.reject(h)}a.b=new w;var g=Nf("generateKeyRequest");try{a.f[g](a.c,d)}catch(h){if("InvalidStateError"!=h.name)return a.b=null,
Promise.reject(h);setTimeout(function(){try{this.f[g](this.c,d)}catch(l){this.b.reject(l),this.b=null}}.bind(a),10)}return a.b}k=Pf.prototype;
k.jb=function(a,b){if(this.a)this.a.then(this.jb.bind(this,a,b))["catch"](this.jb.bind(this,a,b));else{this.a=a;var c,d;"webkit-org.w3.clearkey"==this.c?(c=Eb(b),d=JSON.parse(c),"oct"!=d.keys[0].kty&&(this.a.reject(Error("Response is not a valid JSON Web Key Set.")),this.a=null),c=Ra(d.keys[0].k),d=Ra(d.keys[0].kid)):(c=new Uint8Array(b),d=null);var e=Nf("addKey");try{this.f[e](this.c,c,d,this.sessionId)}catch(f){this.a.reject(f),this.a=null}}};
function Rf(a,b){a.keyStatuses.hb(b);a.dispatchEvent(new t("keystatuseschange"))}k.generateRequest=function(a,b){return Tf(this,b,null)};k.load=function(a){return"persistent-license"==this.g?Tf(this,null,a):Promise.reject(Error("Not a persistent session."))};k.update=function(a){var b=new w;this.jb(b,a);return b};
k.close=function(){if("persistent-license"!=this.g){if(!this.sessionId)return this.closed.reject(Error("The session is not callable.")),this.closed;var a=Nf("cancelKeyRequest");try{this.f[a](this.c,this.sessionId)}catch(b){}}this.closed.resolve();return this.closed};k.remove=function(){return"persistent-license"!=this.g?Promise.reject(Error("Not a persistent session.")):this.close()};function Sf(){this.size=0;this.a=void 0}var If;k=Sf.prototype;k.hb=function(a){this.size=void 0==a?0:1;this.a=a};
k.Wa=function(){return this.a};k.forEach=function(a){this.a&&a(this.a,If)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=If;return this.a&&Ua(new Uint8Array(a),new Uint8Array(b))?!0:!1};k.keys=function(){};of(function(){!window.HTMLVideoElement||navigator.requestMediaKeySystemAccess&&MediaKeySystemAccess.prototype.getConfiguration||(HTMLMediaElement.prototype.webkitGenerateKeyRequest?Hf("webkit"):HTMLMediaElement.prototype.generateKeyRequest?Hf(""):window.MSMediaKeys?(Bf=(new Uint8Array([0])).buffer,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=uf,window.MediaKeys=tf,window.MediaKeySystemAccess=sf,navigator.requestMediaKeySystemAccess=
rf):(navigator.requestMediaKeySystemAccess=Cf,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=Df,window.MediaKeys=Ef,window.MediaKeySystemAccess=Ff))});function Uf(){var a=MediaSource.prototype.addSourceBuffer;MediaSource.prototype.addSourceBuffer=function(){var b=a.apply(this,arguments);b.abort=function(){};return b}}
function Vf(){var a=MediaSource.prototype.endOfStream;MediaSource.prototype.endOfStream=function(){for(var b=0,d=0;d<this.sourceBuffers.length;++d)var e=this.sourceBuffers[d],e=e.buffered.end(e.buffered.length-1),b=Math.max(b,e);if(!isNaN(this.duration)&&b<this.duration)for(this.sb=!0,d=0;d<this.sourceBuffers.length;++d)e=this.sourceBuffers[d],e.ob=!1;return a.apply(this,arguments)};var b=MediaSource.prototype.addSourceBuffer;MediaSource.prototype.addSourceBuffer=function(){var a=b.apply(this,arguments);
a.F=this;a.addEventListener("updateend",Wf,!1);this.a||(this.addEventListener("sourceclose",Xf,!1),this.a=!0);return a}}function Wf(a){var b=a.target,c=b.F;if(c.sb){a.preventDefault();a.stopPropagation();a.stopImmediatePropagation();b.ob=!0;for(a=0;a<c.sourceBuffers.length;++a)if(0==c.sourceBuffers[a].ob)return;c.sb=!1}}function Xf(a){a=a.target;for(var b=0;b<a.sourceBuffers.length;++b)a.sourceBuffers[b].removeEventListener("updateend",Wf,!1);a.removeEventListener("sourceclose",Xf,!1)}
of(function(){if(window.MediaSource){var a=navigator.vendor,b=navigator.appVersion;!a||!b||0>a.indexOf("Apple")||(0<=b.indexOf("Version/8")?window.MediaSource=null:0<=b.indexOf("Version/9")?Uf():0<=b.indexOf("Version/10")&&(Uf(),Vf()))}});function Z(a){this.c=[];this.b=[];this.ka=Yf;if(a)try{a(this.X.bind(this),this.a.bind(this))}catch(b){this.a(b)}}var Yf=0;function Zf(a){var b=new Z;b.X(void 0);return b.then(function(){return a})}function $f(a){var b=new Z;b.a(a);return b}function ag(a){function b(a,b,c){a.ka==Yf&&(e[b]=c,d++,d==e.length&&a.X(e))}var c=new Z;if(!a.length)return c.X([]),c;for(var d=0,e=Array(a.length),f=c.a.bind(c),g=0;g<a.length;++g)a[g]&&a[g].then?a[g].then(b.bind(null,c,g),f):b(c,g,a[g]);return c}
function bg(a){for(var b=new Z,c=b.X.bind(b),d=b.a.bind(b),e=0;e<a.length;++e)a[e]&&a[e].then?a[e].then(c,d):c(a[e]);return b}Z.prototype.then=function(a,b){var c=new Z;switch(this.ka){case 1:cg(this,c,a);break;case 2:cg(this,c,b);break;case Yf:this.c.push({J:c,Ea:a}),this.b.push({J:c,Ea:b})}return c};Z.prototype["catch"]=function(a){return this.then(void 0,a)};
Z.prototype.X=function(a){if(this.ka==Yf){this.Pa=a;this.ka=1;for(a=0;a<this.c.length;++a)cg(this,this.c[a].J,this.c[a].Ea);this.c=[];this.b=[]}};Z.prototype.a=function(a){if(this.ka==Yf){this.Pa=a;this.ka=2;for(a=0;a<this.b.length;++a)cg(this,this.b[a].J,this.b[a].Ea);this.c=[];this.b=[]}};
function cg(a,b,c){dg.push(function(){if(c&&"function"==typeof c){try{var a=c(this.Pa)}catch(f){b.a(f);return}var e;try{e=a&&a.then}catch(f){b.a(f);return}a instanceof Z?a==b?b.a(new TypeError("Chaining cycle detected")):a.then(b.X.bind(b),b.a.bind(b)):e?eg(a,e,b):b.X(a)}else 1==this.ka?b.X(this.Pa):b.a(this.Pa)}.bind(a));null==fg&&(fg=gg(hg))}
function eg(a,b,c){try{var d=!1;b.call(a,function(a){if(!d){d=!0;var b;try{b=a&&a.then}catch(g){c.a(g);return}b?eg(a,b,c):c.X(a)}},c.a.bind(c))}catch(e){c.a(e)}}function hg(){for(;dg.length;){null!=fg&&(ig(fg),fg=null);var a=dg;dg=[];for(var b=0;b<a.length;++b)a[b]()}}function gg(){return 0}function ig(){}var fg=null,dg=[];
of(function(a){window.setImmediate?(gg=function(a){return window.setImmediate(a)},ig=function(a){return window.clearImmediate(a)}):(gg=function(a){return window.setTimeout(a,0)},ig=function(a){return window.clearTimeout(a)});if(!window.Promise||a)window.Promise=Z,window.Promise.resolve=Zf,window.Promise.reject=$f,window.Promise.all=ag,window.Promise.race=bg,window.Promise.prototype.then=Z.prototype.then,window.Promise.prototype["catch"]=Z.prototype["catch"]});function jg(){return{droppedVideoFrames:this.webkitDroppedFrameCount,totalVideoFrames:this.webkitDecodedFrameCount,corruptedVideoFrames:0,creationTime:NaN,totalFrameDelay:0}}of(function(){if(window.HTMLVideoElement){var a=HTMLVideoElement.prototype;!a.getVideoPlaybackQuality&&"webkitDroppedFrameCount"in a&&(a.getVideoPlaybackQuality=jg)}});function kg(a,b,c){return new window.TextTrackCue(a,b,c)}function lg(a,b,c){return new window.TextTrackCue(a+"-"+b+"-"+c,a,b,c)}of(function(){if(!window.VTTCue&&window.TextTrackCue){var a=TextTrackCue.length;if(3==a)window.VTTCue=kg;else if(6==a)window.VTTCue=lg;else{var b;try{b=!!kg(1,2,"")}catch(c){b=!1}b&&(window.VTTCue=kg)}}});}.call(g,this));
if (typeof(module)!="undefined"&&module.exports)module.exports=g.shaka;
else if (typeof(define)!="undefined" && define.amd)define(function(){return g.shaka});
else this.shaka=g.shaka;
})();


},{}],5:[function(require,module,exports){
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:12,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};"object"===typeof module&&(module.exports=Stats);

},{}],6:[function(require,module,exports){
(function (process){
/**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */

var TWEEN = TWEEN || (function () {

	var _tweens = [];

	return {

		getAll: function () {

			return _tweens;

		},

		removeAll: function () {

			_tweens = [];

		},

		add: function (tween) {

			_tweens.push(tween);

		},

		remove: function (tween) {

			var i = _tweens.indexOf(tween);

			if (i !== -1) {
				_tweens.splice(i, 1);
			}

		},

		update: function (time, preserve) {

			if (_tweens.length === 0) {
				return false;
			}

			var i = 0;

			time = time !== undefined ? time : TWEEN.now();

			while (i < _tweens.length) {

				if (_tweens[i].update(time) || preserve) {
					i++;
				} else {
					_tweens.splice(i, 1);
				}

			}

			return true;

		}
	};

})();


// Include a performance.now polyfill
(function () {
	// In node.js, use process.hrtime.
	if (this.window === undefined && this.process !== undefined) {
		TWEEN.now = function () {
			var time = process.hrtime();

			// Convert [seconds, microseconds] to milliseconds.
			return time[0] * 1000 + time[1] / 1000;
		};
	}
	// In a browser, use window.performance.now if it is available.
	else if (this.window !== undefined &&
	         window.performance !== undefined &&
		 window.performance.now !== undefined) {

		// This must be bound, because directly assigning this function
		// leads to an invocation exception in Chrome.
		TWEEN.now = window.performance.now.bind(window.performance);
	}
	// Use Date.now if it is available.
	else if (Date.now !== undefined) {
		TWEEN.now = Date.now;
	}
	// Otherwise, use 'new Date().getTime()'.
	else {
		TWEEN.now = function () {
			return new Date().getTime();
		};
	}
})();


TWEEN.Tween = function (object) {

	var _object = object;
	var _valuesStart = {};
	var _valuesEnd = {};
	var _valuesStartRepeat = {};
	var _duration = 1000;
	var _repeat = 0;
	var _yoyo = false;
	var _isPlaying = false;
	var _reversed = false;
	var _delayTime = 0;
	var _startTime = null;
	var _easingFunction = TWEEN.Easing.Linear.None;
	var _interpolationFunction = TWEEN.Interpolation.Linear;
	var _chainedTweens = [];
	var _onStartCallback = null;
	var _onStartCallbackFired = false;
	var _onUpdateCallback = null;
	var _onCompleteCallback = null;
	var _onStopCallback = null;

	// Set all starting values present on the target object
	for (var field in object) {
		_valuesStart[field] = parseFloat(object[field], 10);
	}

	this.to = function (properties, duration) {

		if (duration !== undefined) {
			_duration = duration;
		}

		_valuesEnd = properties;

		return this;

	};

	this.start = function (time) {

		TWEEN.add(this);

		_isPlaying = true;

		_onStartCallbackFired = false;

		_startTime = time !== undefined ? time : TWEEN.now();
		_startTime += _delayTime;

		for (var property in _valuesEnd) {

			// Check if an Array was provided as property value
			if (_valuesEnd[property] instanceof Array) {

				if (_valuesEnd[property].length === 0) {
					continue;
				}

				// Create a local copy of the Array with the start value at the front
				_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);

			}

			// If `to()` specifies a property that doesn't exist in the source object,
			// we should not set that property in the object
			if (_valuesStart[property] === undefined) {
				continue;
			}

			_valuesStart[property] = _object[property];

			if ((_valuesStart[property] instanceof Array) === false) {
				_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
			}

			_valuesStartRepeat[property] = _valuesStart[property] || 0;

		}

		return this;

	};

	this.stop = function () {

		if (!_isPlaying) {
			return this;
		}

		TWEEN.remove(this);
		_isPlaying = false;

		if (_onStopCallback !== null) {
			_onStopCallback.call(_object);
		}

		this.stopChainedTweens();
		return this;

	};

	this.stopChainedTweens = function () {

		for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
			_chainedTweens[i].stop();
		}

	};

	this.delay = function (amount) {

		_delayTime = amount;
		return this;

	};

	this.repeat = function (times) {

		_repeat = times;
		return this;

	};

	this.yoyo = function (yoyo) {

		_yoyo = yoyo;
		return this;

	};


	this.easing = function (easing) {

		_easingFunction = easing;
		return this;

	};

	this.interpolation = function (interpolation) {

		_interpolationFunction = interpolation;
		return this;

	};

	this.chain = function () {

		_chainedTweens = arguments;
		return this;

	};

	this.onStart = function (callback) {

		_onStartCallback = callback;
		return this;

	};

	this.onUpdate = function (callback) {

		_onUpdateCallback = callback;
		return this;

	};

	this.onComplete = function (callback) {

		_onCompleteCallback = callback;
		return this;

	};

	this.onStop = function (callback) {

		_onStopCallback = callback;
		return this;

	};

	this.update = function (time) {

		var property;
		var elapsed;
		var value;

		if (time < _startTime) {
			return true;
		}

		if (_onStartCallbackFired === false) {

			if (_onStartCallback !== null) {
				_onStartCallback.call(_object);
			}

			_onStartCallbackFired = true;

		}

		elapsed = (time - _startTime) / _duration;
		elapsed = elapsed > 1 ? 1 : elapsed;

		value = _easingFunction(elapsed);

		for (property in _valuesEnd) {

			// Don't update properties that do not exist in the source object
			if (_valuesStart[property] === undefined) {
				continue;
			}

			var start = _valuesStart[property] || 0;
			var end = _valuesEnd[property];

			if (end instanceof Array) {

				_object[property] = _interpolationFunction(end, value);

			} else {

				// Parses relative end values with start as base (e.g.: +10, -3)
				if (typeof (end) === 'string') {

					if (end.charAt(0) === '+' || end.charAt(0) === '-') {
						end = start + parseFloat(end, 10);
					} else {
						end = parseFloat(end, 10);
					}
				}

				// Protect against non numeric properties.
				if (typeof (end) === 'number') {
					_object[property] = start + (end - start) * value;
				}

			}

		}

		if (_onUpdateCallback !== null) {
			_onUpdateCallback.call(_object, value);
		}

		if (elapsed === 1) {

			if (_repeat > 0) {

				if (isFinite(_repeat)) {
					_repeat--;
				}

				// Reassign starting values, restart by making startTime = now
				for (property in _valuesStartRepeat) {

					if (typeof (_valuesEnd[property]) === 'string') {
						_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);
					}

					if (_yoyo) {
						var tmp = _valuesStartRepeat[property];

						_valuesStartRepeat[property] = _valuesEnd[property];
						_valuesEnd[property] = tmp;
					}

					_valuesStart[property] = _valuesStartRepeat[property];

				}

				if (_yoyo) {
					_reversed = !_reversed;
				}

				_startTime = time + _delayTime;

				return true;

			} else {

				if (_onCompleteCallback !== null) {
					_onCompleteCallback.call(_object);
				}

				for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
					// Make the chained tweens start exactly at the time they should,
					// even if the `update()` method was called way past the duration of the tween
					_chainedTweens[i].start(_startTime + _duration);
				}

				return false;

			}

		}

		return true;

	};

};


TWEEN.Easing = {

	Linear: {

		None: function (k) {

			return k;

		}

	},

	Quadratic: {

		In: function (k) {

			return k * k;

		},

		Out: function (k) {

			return k * (2 - k);

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k;
			}

			return - 0.5 * (--k * (k - 2) - 1);

		}

	},

	Cubic: {

		In: function (k) {

			return k * k * k;

		},

		Out: function (k) {

			return --k * k * k + 1;

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k + 2);

		}

	},

	Quartic: {

		In: function (k) {

			return k * k * k * k;

		},

		Out: function (k) {

			return 1 - (--k * k * k * k);

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k;
			}

			return - 0.5 * ((k -= 2) * k * k * k - 2);

		}

	},

	Quintic: {

		In: function (k) {

			return k * k * k * k * k;

		},

		Out: function (k) {

			return --k * k * k * k * k + 1;

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k * k * k + 2);

		}

	},

	Sinusoidal: {

		In: function (k) {

			return 1 - Math.cos(k * Math.PI / 2);

		},

		Out: function (k) {

			return Math.sin(k * Math.PI / 2);

		},

		InOut: function (k) {

			return 0.5 * (1 - Math.cos(Math.PI * k));

		}

	},

	Exponential: {

		In: function (k) {

			return k === 0 ? 0 : Math.pow(1024, k - 1);

		},

		Out: function (k) {

			return k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);

		},

		InOut: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			if ((k *= 2) < 1) {
				return 0.5 * Math.pow(1024, k - 1);
			}

			return 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);

		}

	},

	Circular: {

		In: function (k) {

			return 1 - Math.sqrt(1 - k * k);

		},

		Out: function (k) {

			return Math.sqrt(1 - (--k * k));

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return - 0.5 * (Math.sqrt(1 - k * k) - 1);
			}

			return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);

		}

	},

	Elastic: {

		In: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);

		},

		Out: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;

		},

		InOut: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			k *= 2;

			if (k < 1) {
				return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
			}

			return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;

		}

	},

	Back: {

		In: function (k) {

			var s = 1.70158;

			return k * k * ((s + 1) * k - s);

		},

		Out: function (k) {

			var s = 1.70158;

			return --k * k * ((s + 1) * k + s) + 1;

		},

		InOut: function (k) {

			var s = 1.70158 * 1.525;

			if ((k *= 2) < 1) {
				return 0.5 * (k * k * ((s + 1) * k - s));
			}

			return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);

		}

	},

	Bounce: {

		In: function (k) {

			return 1 - TWEEN.Easing.Bounce.Out(1 - k);

		},

		Out: function (k) {

			if (k < (1 / 2.75)) {
				return 7.5625 * k * k;
			} else if (k < (2 / 2.75)) {
				return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
			} else if (k < (2.5 / 2.75)) {
				return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
			} else {
				return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
			}

		},

		InOut: function (k) {

			if (k < 0.5) {
				return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
			}

			return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;

		}

	}

};

TWEEN.Interpolation = {

	Linear: function (v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.Linear;

		if (k < 0) {
			return fn(v[0], v[1], f);
		}

		if (k > 1) {
			return fn(v[m], v[m - 1], m - f);
		}

		return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);

	},

	Bezier: function (v, k) {

		var b = 0;
		var n = v.length - 1;
		var pw = Math.pow;
		var bn = TWEEN.Interpolation.Utils.Bernstein;

		for (var i = 0; i <= n; i++) {
			b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
		}

		return b;

	},

	CatmullRom: function (v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.CatmullRom;

		if (v[0] === v[m]) {

			if (k < 0) {
				i = Math.floor(f = m * (1 + k));
			}

			return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);

		} else {

			if (k < 0) {
				return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
			}

			if (k > 1) {
				return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
			}

			return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);

		}

	},

	Utils: {

		Linear: function (p0, p1, t) {

			return (p1 - p0) * t + p0;

		},

		Bernstein: function (n, i) {

			var fc = TWEEN.Interpolation.Utils.Factorial;

			return fc(n) / fc(i) / fc(n - i);

		},

		Factorial: (function () {

			var a = [1];

			return function (n) {

				var s = 1;

				if (a[n]) {
					return a[n];
				}

				for (var i = n; i > 1; i--) {
					s *= i;
				}

				a[n] = s;
				return s;

			};

		})(),

		CatmullRom: function (p0, p1, p2, p3, t) {

			var v0 = (p2 - p0) * 0.5;
			var v1 = (p3 - p1) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;

			return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;

		}

	}

};

// UMD (Universal Module Definition)
(function (root) {

	if (typeof define === 'function' && define.amd) {

		// AMD
		define([], function () {
			return TWEEN;
		});

	} else if (typeof module !== 'undefined' && typeof exports === 'object') {

		// Node.js
		module.exports = TWEEN;

	} else if (root !== undefined) {

		// Global variable
		root.TWEEN = TWEEN;

	}

})(this);

}).call(this,require('_process'))

},{"_process":3}],7:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.WebVRManager = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Emitter = _dereq_('./emitter.js');
var Modes = _dereq_('./modes.js');
var Util = _dereq_('./util.js');

/**
 * Everything having to do with the WebVR button.
 * Emits a 'click' event when it's clicked.
 */
function ButtonManager(opt_root) {
  var root = opt_root || document.body;
  this.loadIcons_();

  // Make the fullscreen button.
  var fsButton = this.createButton();
  fsButton.src = this.ICONS.fullscreen;
  fsButton.title = 'Fullscreen mode';
  var s = fsButton.style;
  s.bottom = 0;
  s.right = 0;
  fsButton.addEventListener('click', this.createClickHandler_('fs'));
  root.appendChild(fsButton);
  this.fsButton = fsButton;

  // Make the VR button.
  var vrButton = this.createButton();
  vrButton.src = this.ICONS.cardboard;
  vrButton.title = 'Virtual reality mode';
  var s = vrButton.style;
  s.bottom = 0;
  s.right = '48px';
  vrButton.addEventListener('click', this.createClickHandler_('vr'));
  root.appendChild(vrButton);
  this.vrButton = vrButton;

  this.isVisible = true;

}
ButtonManager.prototype = new Emitter();

ButtonManager.prototype.createButton = function() {
  var button = document.createElement('img');
  button.className = 'webvr-button';
  var s = button.style;
  s.position = 'absolute';
  s.width = '24px'
  s.height = '24px';
  s.backgroundSize = 'cover';
  s.backgroundColor = 'transparent';
  s.border = 0;
  s.userSelect = 'none';
  s.webkitUserSelect = 'none';
  s.MozUserSelect = 'none';
  s.cursor = 'pointer';
  s.padding = '12px';
  s.zIndex = 1;
  s.display = 'none';
  s.boxSizing = 'content-box';

  // Prevent button from being selected and dragged.
  button.draggable = false;
  button.addEventListener('dragstart', function(e) {
    e.preventDefault();
  });

  // Style it on hover.
  button.addEventListener('mouseenter', function(e) {
    s.filter = s.webkitFilter = 'drop-shadow(0 0 5px rgba(255,255,255,1))';
  });
  button.addEventListener('mouseleave', function(e) {
    s.filter = s.webkitFilter = '';
  });
  return button;
};

ButtonManager.prototype.setMode = function(mode, isVRCompatible) {
  isVRCompatible = isVRCompatible || WebVRConfig.FORCE_ENABLE_VR;
  if (!this.isVisible) {
    return;
  }
  switch (mode) {
    case Modes.NORMAL:
      this.fsButton.style.display = 'block';
      this.fsButton.src = this.ICONS.fullscreen;
      this.vrButton.style.display = (isVRCompatible ? 'block' : 'none');
      break;
    case Modes.MAGIC_WINDOW:
      this.fsButton.style.display = 'block';
      this.fsButton.src = this.ICONS.exitFullscreen;
      this.vrButton.style.display = 'none';
      break;
    case Modes.VR:
      this.fsButton.style.display = 'none';
      this.vrButton.style.display = 'none';
      break;
  }

  // Hack for Safari Mac/iOS to force relayout (svg-specific issue)
  // http://goo.gl/hjgR6r
  var oldValue = this.fsButton.style.display;
  this.fsButton.style.display = 'inline-block';
  this.fsButton.offsetHeight;
  this.fsButton.style.display = oldValue;
};

ButtonManager.prototype.setVisibility = function(isVisible) {
  this.isVisible = isVisible;
  this.fsButton.style.display = isVisible ? 'block' : 'none';
  this.vrButton.style.display = isVisible ? 'block' : 'none';
};

ButtonManager.prototype.createClickHandler_ = function(eventName) {
  return function(e) {
    e.stopPropagation();
    e.preventDefault();
    this.emit(eventName);
  }.bind(this);
};

ButtonManager.prototype.loadIcons_ = function() {
  // Preload some hard-coded SVG.
  this.ICONS = {};
  this.ICONS.cardboard = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMjAuNzQgNkgzLjIxQzIuNTUgNiAyIDYuNTcgMiA3LjI4djEwLjQ0YzAgLjcuNTUgMS4yOCAxLjIzIDEuMjhoNC43OWMuNTIgMCAuOTYtLjMzIDEuMTQtLjc5bDEuNC0zLjQ4Yy4yMy0uNTkuNzktMS4wMSAxLjQ0LTEuMDFzMS4yMS40MiAxLjQ1IDEuMDFsMS4zOSAzLjQ4Yy4xOS40Ni42My43OSAxLjExLjc5aDQuNzljLjcxIDAgMS4yNi0uNTcgMS4yNi0xLjI4VjcuMjhjMC0uNy0uNTUtMS4yOC0xLjI2LTEuMjh6TTcuNSAxNC42MmMtMS4xNyAwLTIuMTMtLjk1LTIuMTMtMi4xMiAwLTEuMTcuOTYtMi4xMyAyLjEzLTIuMTMgMS4xOCAwIDIuMTIuOTYgMi4xMiAyLjEzcy0uOTUgMi4xMi0yLjEyIDIuMTJ6bTkgMGMtMS4xNyAwLTIuMTMtLjk1LTIuMTMtMi4xMiAwLTEuMTcuOTYtMi4xMyAyLjEzLTIuMTNzMi4xMi45NiAyLjEyIDIuMTMtLjk1IDIuMTItMi4xMiAyLjEyeiIvPgogICAgPHBhdGggZmlsbD0ibm9uZSIgZD0iTTAgMGgyNHYyNEgwVjB6Ii8+Cjwvc3ZnPgo=');
  this.ICONS.fullscreen = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNNyAxNEg1djVoNXYtMkg3di0zem0tMi00aDJWN2gzVjVINXY1em0xMiA3aC0zdjJoNXYtNWgtMnYzek0xNCA1djJoM3YzaDJWNWgtNXoiLz4KPC9zdmc+Cg==');
  this.ICONS.exitFullscreen = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNNSAxNmgzdjNoMnYtNUg1djJ6bTMtOEg1djJoNVY1SDh2M3ptNiAxMWgydi0zaDN2LTJoLTV2NXptMi0xMVY1aC0ydjVoNVY4aC0zeiIvPgo8L3N2Zz4K');
  this.ICONS.settings = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNMTkuNDMgMTIuOThjLjA0LS4zMi4wNy0uNjQuMDctLjk4cy0uMDMtLjY2LS4wNy0uOThsMi4xMS0xLjY1Yy4xOS0uMTUuMjQtLjQyLjEyLS42NGwtMi0zLjQ2Yy0uMTItLjIyLS4zOS0uMy0uNjEtLjIybC0yLjQ5IDFjLS41Mi0uNC0xLjA4LS43My0xLjY5LS45OGwtLjM4LTIuNjVDMTQuNDYgMi4xOCAxNC4yNSAyIDE0IDJoLTRjLS4yNSAwLS40Ni4xOC0uNDkuNDJsLS4zOCAyLjY1Yy0uNjEuMjUtMS4xNy41OS0xLjY5Ljk4bC0yLjQ5LTFjLS4yMy0uMDktLjQ5IDAtLjYxLjIybC0yIDMuNDZjLS4xMy4yMi0uMDcuNDkuMTIuNjRsMi4xMSAxLjY1Yy0uMDQuMzItLjA3LjY1LS4wNy45OHMuMDMuNjYuMDcuOThsLTIuMTEgMS42NWMtLjE5LjE1LS4yNC40Mi0uMTIuNjRsMiAzLjQ2Yy4xMi4yMi4zOS4zLjYxLjIybDIuNDktMWMuNTIuNCAxLjA4LjczIDEuNjkuOThsLjM4IDIuNjVjLjAzLjI0LjI0LjQyLjQ5LjQyaDRjLjI1IDAgLjQ2LS4xOC40OS0uNDJsLjM4LTIuNjVjLjYxLS4yNSAxLjE3LS41OSAxLjY5LS45OGwyLjQ5IDFjLjIzLjA5LjQ5IDAgLjYxLS4yMmwyLTMuNDZjLjEyLS4yMi4wNy0uNDktLjEyLS42NGwtMi4xMS0xLjY1ek0xMiAxNS41Yy0xLjkzIDAtMy41LTEuNTctMy41LTMuNXMxLjU3LTMuNSAzLjUtMy41IDMuNSAxLjU3IDMuNSAzLjUtMS41NyAzLjUtMy41IDMuNXoiLz4KPC9zdmc+Cg==');
};

module.exports = ButtonManager;

},{"./emitter.js":2,"./modes.js":3,"./util.js":4}],2:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function Emitter() {
  this.callbacks = {};
}

Emitter.prototype.emit = function(eventName) {
  var callbacks = this.callbacks[eventName];
  if (!callbacks) {
    //console.log('No valid callback specified.');
    return;
  }
  var args = [].slice.call(arguments);
  // Eliminate the first param (the callback).
  args.shift();
  for (var i = 0; i < callbacks.length; i++) {
    callbacks[i].apply(this, args);
  }
};

Emitter.prototype.on = function(eventName, callback) {
  if (eventName in this.callbacks) {
    this.callbacks[eventName].push(callback);
  } else {
    this.callbacks[eventName] = [callback];
  }
};

module.exports = Emitter;

},{}],3:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Modes = {
  UNKNOWN: 0,
  // Not fullscreen, just tracking.
  NORMAL: 1,
  // Magic window immersive mode.
  MAGIC_WINDOW: 2,
  // Full screen split screen VR mode.
  VR: 3,
};

module.exports = Modes;

},{}],4:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = {};

Util.base64 = function(mimeType, base64) {
  return 'data:' + mimeType + ';base64,' + base64;
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.isFirefox = function() {
  return /firefox/i.test(navigator.userAgent);
};

Util.isIOS = function() {
  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
};

Util.isIFrame = function() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
};

Util.appendQueryParameter = function(url, key, value) {
  // Determine delimiter based on if the URL already GET parameters in it.
  var delimiter = (url.indexOf('?') < 0 ? '?' : '&');
  url += delimiter + key + '=' + value;
  return url;
};

// From http://goo.gl/4WX3tg
Util.getQueryParameter = function(name) {
  var name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};

Util.isLandscapeMode = function() {
  return (window.orientation == 90 || window.orientation == -90);
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

module.exports = Util;

},{}],5:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ButtonManager = _dereq_('./button-manager.js');
var Emitter = _dereq_('./emitter.js');
var Modes = _dereq_('./modes.js');
var Util = _dereq_('./util.js');

/**
 * Helper for getting in and out of VR mode.
 */
function WebVRManager(renderer, effect, params) {
  this.params = params || {};

  this.mode = Modes.UNKNOWN;

  // Set option to hide the button.
  this.hideButton = this.params.hideButton || false;
  // Whether or not the FOV should be distorted or un-distorted. By default, it
  // should be distorted, but in the case of vertex shader based distortion,
  // ensure that we use undistorted parameters.
  this.predistorted = !!this.params.predistorted;

  // Save the THREE.js renderer and effect for later.
  this.renderer = renderer;
  this.effect = effect;
  var polyfillWrapper = document.querySelector('.webvr-polyfill-fullscreen-wrapper');
  this.button = new ButtonManager(polyfillWrapper);

  this.isFullscreenDisabled = !!Util.getQueryParameter('no_fullscreen');
  this.startMode = Modes.NORMAL;
  var startModeParam = parseInt(Util.getQueryParameter('start_mode'));
  if (!isNaN(startModeParam)) {
    this.startMode = startModeParam;
  }

  if (this.hideButton) {
    this.button.setVisibility(false);
  }

  // Check if the browser is compatible with WebVR.
  this.getDeviceByType_(VRDisplay).then(function(hmd) {
    this.hmd = hmd;

    // Only enable VR mode if there's a VR device attached or we are running the
    // polyfill on mobile.
    if (!this.isVRCompatibleOverride) {
      this.isVRCompatible =  !hmd.isPolyfilled || Util.isMobile();
    }

    switch (this.startMode) {
      case Modes.MAGIC_WINDOW:
        this.setMode_(Modes.MAGIC_WINDOW);
        break;
      case Modes.VR:
        this.enterVRMode_();
        this.setMode_(Modes.VR);
        break;
      default:
        this.setMode_(Modes.NORMAL);
    }

    this.emit('initialized');
  }.bind(this));

  // Hook up button listeners.
  this.button.on('fs', this.onFSClick_.bind(this));
  this.button.on('vr', this.onVRClick_.bind(this));

  // Bind to fullscreen events.
  document.addEventListener('webkitfullscreenchange',
      this.onFullscreenChange_.bind(this));
  document.addEventListener('mozfullscreenchange',
      this.onFullscreenChange_.bind(this));
  document.addEventListener('msfullscreenchange',
      this.onFullscreenChange_.bind(this));

  // Bind to VR* specific events.
  window.addEventListener('vrdisplaypresentchange',
      this.onVRDisplayPresentChange_.bind(this));
  window.addEventListener('vrdisplaydeviceparamschange',
      this.onVRDisplayDeviceParamsChange_.bind(this));
}

WebVRManager.prototype = new Emitter();

// Expose these values externally.
WebVRManager.Modes = Modes;

WebVRManager.prototype.render = function(scene, camera, timestamp) {
  // Scene may be an array of two scenes, one for each eye.
  if (scene instanceof Array) {
    this.effect.render(scene[0], camera);
  } else {
    this.effect.render(scene, camera);
  }
};

WebVRManager.prototype.setVRCompatibleOverride = function(isVRCompatible) {
  this.isVRCompatible = isVRCompatible;
  this.isVRCompatibleOverride = true;

  // Don't actually change modes, just update the buttons.
  this.button.setMode(this.mode, this.isVRCompatible);
};

WebVRManager.prototype.setFullscreenCallback = function(callback) {
  this.fullscreenCallback = callback;
};

WebVRManager.prototype.setVRCallback = function(callback) {
  this.vrCallback = callback;
};

WebVRManager.prototype.setExitFullscreenCallback = function(callback) {
  this.exitFullscreenCallback = callback;
}

/**
 * Promise returns true if there is at least one HMD device available.
 */
WebVRManager.prototype.getDeviceByType_ = function(type) {
  return new Promise(function(resolve, reject) {
    navigator.getVRDisplays().then(function(displays) {
      // Promise succeeds, but check if there are any displays actually.
      for (var i = 0; i < displays.length; i++) {
        if (displays[i] instanceof type) {
          resolve(displays[i]);
          break;
        }
      }
      resolve(null);
    }, function() {
      // No displays are found.
      resolve(null);
    });
  });
};

/**
 * Helper for entering VR mode.
 */
WebVRManager.prototype.enterVRMode_ = function() {
  this.hmd.requestPresent([{
    source: this.renderer.domElement,
    predistorted: this.predistorted
  }]);
};

WebVRManager.prototype.setMode_ = function(mode) {
  var oldMode = this.mode;
  if (mode == this.mode) {
    console.warn('Not changing modes, already in %s', mode);
    return;
  }
  // console.log('Mode change: %s => %s', this.mode, mode);
  this.mode = mode;
  this.button.setMode(mode, this.isVRCompatible);

  // Emit an event indicating the mode changed.
  this.emit('modechange', mode, oldMode);
};

/**
 * Main button was clicked.
 */
WebVRManager.prototype.onFSClick_ = function() {
  switch (this.mode) {
    case Modes.NORMAL:
      // TODO: Remove this hack if/when iOS gets real fullscreen mode.
      // If this is an iframe on iOS, break out and open in no_fullscreen mode.
      if (Util.isIOS() && Util.isIFrame()) {
        if (this.fullscreenCallback) {
          this.fullscreenCallback();
        } else {
          var url = window.location.href;
          url = Util.appendQueryParameter(url, 'no_fullscreen', 'true');
          url = Util.appendQueryParameter(url, 'start_mode', Modes.MAGIC_WINDOW);
          top.location.href = url;
          return;
        }
      }
      this.setMode_(Modes.MAGIC_WINDOW);
      this.requestFullscreen_();
      break;
    case Modes.MAGIC_WINDOW:
      if (this.isFullscreenDisabled) {
        window.history.back();
        return;
      }
      if (this.exitFullscreenCallback) {
        this.exitFullscreenCallback();
      }
      this.setMode_(Modes.NORMAL);
      this.exitFullscreen_();
      break;
  }
};

/**
 * The VR button was clicked.
 */
WebVRManager.prototype.onVRClick_ = function() {
  // TODO: Remove this hack when iOS has fullscreen mode.
  // If this is an iframe on iOS, break out and open in no_fullscreen mode.
  if (this.mode == Modes.NORMAL && Util.isIOS() && Util.isIFrame()) {
    if (this.vrCallback) {
      this.vrCallback();
    } else {
      var url = window.location.href;
      url = Util.appendQueryParameter(url, 'no_fullscreen', 'true');
      url = Util.appendQueryParameter(url, 'start_mode', Modes.VR);
      top.location.href = url;
      return;
    }
  }
  this.enterVRMode_();
};

WebVRManager.prototype.requestFullscreen_ = function() {
  var canvas = document.body;
  //var canvas = this.renderer.domElement;
  if (canvas.requestFullscreen) {
    canvas.requestFullscreen();
  } else if (canvas.mozRequestFullScreen) {
    canvas.mozRequestFullScreen();
  } else if (canvas.webkitRequestFullscreen) {
    canvas.webkitRequestFullscreen();
  } else if (canvas.msRequestFullscreen) {
    canvas.msRequestFullscreen();
  }
};

WebVRManager.prototype.exitFullscreen_ = function() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  }
};

WebVRManager.prototype.onVRDisplayPresentChange_ = function(e) {
  console.log('onVRDisplayPresentChange_', e);
  if (this.hmd.isPresenting) {
    this.setMode_(Modes.VR);
  } else {
    this.setMode_(Modes.NORMAL);
  }
};

WebVRManager.prototype.onVRDisplayDeviceParamsChange_ = function(e) {
  console.log('onVRDisplayDeviceParamsChange_', e);
};

WebVRManager.prototype.onFullscreenChange_ = function(e) {
  // If we leave full-screen, go back to normal mode.
  if (document.webkitFullscreenElement === null ||
      document.mozFullScreenElement === null) {
    this.setMode_(Modes.NORMAL);
  }
};

module.exports = WebVRManager;

},{"./button-manager.js":1,"./emitter.js":2,"./modes.js":3,"./util.js":4}]},{},[5])(5)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],8:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.WebVRPolyfill = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @api private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {Mixed} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Boolean} exists Only check if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Remove the listeners of a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {Mixed} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
         listeners.fn === fn
      && (!once || listeners.once)
      && (!context || listeners.context === context)
    ) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
           listeners[i].fn !== fn
        || (once && !listeners[i].once)
        || (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {String|Symbol} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],2:[function(_dereq_,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],3:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');
var WakeLock = _dereq_('./wakelock.js');

// Start at a higher number to reduce chance of conflict.
var nextDisplayId = 1000;
var hasShowDeprecationWarning = false;

var defaultLeftBounds = [0, 0, 0.5, 1];
var defaultRightBounds = [0.5, 0, 0.5, 1];

/**
 * The base class for all VR frame data.
 */

function VRFrameData() {
  this.leftProjectionMatrix = new Float32Array(16);
  this.leftViewMatrix = new Float32Array(16);
  this.rightProjectionMatrix = new Float32Array(16);
  this.rightViewMatrix = new Float32Array(16);
  this.pose = null;
};

/**
 * The base class for all VR displays.
 */
function VRDisplay() {
  this.isPolyfilled = true;
  this.displayId = nextDisplayId++;
  this.displayName = 'webvr-polyfill displayName';

  this.depthNear = 0.01;
  this.depthFar = 10000.0;

  this.isConnected = true;
  this.isPresenting = false;
  this.capabilities = {
    hasPosition: false,
    hasOrientation: false,
    hasExternalDisplay: false,
    canPresent: false,
    maxLayers: 1
  };
  this.stageParameters = null;

  // "Private" members.
  this.waitingForPresent_ = false;
  this.layer_ = null;

  this.fullscreenElement_ = null;
  this.fullscreenWrapper_ = null;
  this.fullscreenElementCachedStyle_ = null;

  this.fullscreenEventTarget_ = null;
  this.fullscreenChangeHandler_ = null;
  this.fullscreenErrorHandler_ = null;

  this.wakelock_ = new WakeLock();
}

VRDisplay.prototype.getFrameData = function(frameData) {
  // TODO: Technically this should retain it's value for the duration of a frame
  // but I doubt that's practical to do in javascript.
  return Util.frameDataFromPose(frameData, this.getPose(), this);
};

VRDisplay.prototype.getPose = function() {
  // TODO: Technically this should retain it's value for the duration of a frame
  // but I doubt that's practical to do in javascript.
  return this.getImmediatePose();
};

VRDisplay.prototype.requestAnimationFrame = function(callback) {
  return window.requestAnimationFrame(callback);
};

VRDisplay.prototype.cancelAnimationFrame = function(id) {
  return window.cancelAnimationFrame(id);
};

VRDisplay.prototype.wrapForFullscreen = function(element) {
  // Don't wrap in iOS.
  if (Util.isIOS()) {
    return element;
  }
  if (!this.fullscreenWrapper_) {
    this.fullscreenWrapper_ = document.createElement('div');
    var cssProperties = [
      'height: ' + Math.min(screen.height, screen.width) + 'px !important',
      'top: 0 !important',
      'left: 0 !important',
      'right: 0 !important',
      'border: 0',
      'margin: 0',
      'padding: 0',
      'z-index: 999999 !important',
      'position: fixed',
    ];
    this.fullscreenWrapper_.setAttribute('style', cssProperties.join('; ') + ';');
    this.fullscreenWrapper_.classList.add('webvr-polyfill-fullscreen-wrapper');
  }

  if (this.fullscreenElement_ == element) {
    return this.fullscreenWrapper_;
  }

  // Remove any previously applied wrappers
  this.removeFullscreenWrapper();

  this.fullscreenElement_ = element;
  var parent = this.fullscreenElement_.parentElement;
  parent.insertBefore(this.fullscreenWrapper_, this.fullscreenElement_);
  parent.removeChild(this.fullscreenElement_);
  this.fullscreenWrapper_.insertBefore(this.fullscreenElement_, this.fullscreenWrapper_.firstChild);
  this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute('style');

  var self = this;
  function applyFullscreenElementStyle() {
    if (!self.fullscreenElement_) {
      return;
    }

    var cssProperties = [
      'position: absolute',
      'top: 0',
      'left: 0',
      'width: ' + Math.max(screen.width, screen.height) + 'px',
      'height: ' + Math.min(screen.height, screen.width) + 'px',
      'border: 0',
      'margin: 0',
      'padding: 0',
    ];
    self.fullscreenElement_.setAttribute('style', cssProperties.join('; ') + ';');
  }

  applyFullscreenElementStyle();

  return this.fullscreenWrapper_;
};

VRDisplay.prototype.removeFullscreenWrapper = function() {
  if (!this.fullscreenElement_) {
    return;
  }

  var element = this.fullscreenElement_;
  if (this.fullscreenElementCachedStyle_) {
    element.setAttribute('style', this.fullscreenElementCachedStyle_);
  } else {
    element.removeAttribute('style');
  }
  this.fullscreenElement_ = null;
  this.fullscreenElementCachedStyle_ = null;

  var parent = this.fullscreenWrapper_.parentElement;
  this.fullscreenWrapper_.removeChild(element);
  parent.insertBefore(element, this.fullscreenWrapper_);
  parent.removeChild(this.fullscreenWrapper_);

  return element;
};

VRDisplay.prototype.requestPresent = function(layers) {
  var wasPresenting = this.isPresenting;
  var self = this;

  if (!(layers instanceof Array)) {
    if (!hasShowDeprecationWarning) {
      console.warn("Using a deprecated form of requestPresent. Should pass in an array of VRLayers.");
      hasShowDeprecationWarning = true;
    }
    layers = [layers];
  }

  return new Promise(function(resolve, reject) {
    if (!self.capabilities.canPresent) {
      reject(new Error('VRDisplay is not capable of presenting.'));
      return;
    }

    if (layers.length == 0 || layers.length > self.capabilities.maxLayers) {
      reject(new Error('Invalid number of layers.'));
      return;
    }

    var incomingLayer = layers[0];
    if (!incomingLayer.source) {
      /*
      todo: figure out the correct behavior if the source is not provided.
      see https://github.com/w3c/webvr/issues/58
      */
      resolve();
      return;
    }

    var leftBounds = incomingLayer.leftBounds || defaultLeftBounds;
    var rightBounds = incomingLayer.rightBounds || defaultRightBounds;
    if (wasPresenting) {
      // Already presenting, just changing configuration
      var layer = self.layer_;
      if (layer.source !== incomingLayer.source) {
        layer.source = incomingLayer.source;
      }

      for (var i = 0; i < 4; i++) {
        layer.leftBounds[i] = leftBounds[i];
        layer.rightBounds[i] = rightBounds[i];
      }

      resolve();
      return;
    }

    // Was not already presenting.
    self.layer_ = {
      predistorted: incomingLayer.predistorted,
      source: incomingLayer.source,
      leftBounds: leftBounds.slice(0),
      rightBounds: rightBounds.slice(0)
    };

    self.waitingForPresent_ = false;
    if (self.layer_ && self.layer_.source) {
      var fullscreenElement = self.wrapForFullscreen(self.layer_.source);

      function onFullscreenChange() {
        var actualFullscreenElement = Util.getFullscreenElement();

        self.isPresenting = (fullscreenElement === actualFullscreenElement);
        if (self.isPresenting) {
          if (screen.orientation && screen.orientation.lock) {
            screen.orientation.lock('landscape-primary').catch(function(error){
                    console.error('screen.orientation.lock() failed due to', error.message)
            });
          }
          self.waitingForPresent_ = false;
          self.beginPresent_();
          resolve();
        } else {
          if (screen.orientation && screen.orientation.unlock) {
            screen.orientation.unlock();
          }
          self.removeFullscreenWrapper();
          self.wakelock_.release();
          self.endPresent_();
          self.removeFullscreenListeners_();
        }
        self.fireVRDisplayPresentChange_();
      }
      function onFullscreenError() {
        if (!self.waitingForPresent_) {
          return;
        }

        self.removeFullscreenWrapper();
        self.removeFullscreenListeners_();

        self.wakelock_.release();
        self.waitingForPresent_ = false;
        self.isPresenting = false;

        reject(new Error('Unable to present.'));
      }

      self.addFullscreenListeners_(fullscreenElement,
          onFullscreenChange, onFullscreenError);

      if (Util.requestFullscreen(fullscreenElement)) {
        self.wakelock_.request();
        self.waitingForPresent_ = true;
      } else if (Util.isIOS()) {
        // *sigh* Just fake it.
        self.wakelock_.request();
        self.isPresenting = true;
        self.beginPresent_();
        self.fireVRDisplayPresentChange_();
        resolve();
      }
    }

    if (!self.waitingForPresent_ && !Util.isIOS()) {
      Util.exitFullscreen();
      reject(new Error('Unable to present.'));
    }
  });
};

VRDisplay.prototype.exitPresent = function() {
  var wasPresenting = this.isPresenting;
  var self = this;
  this.isPresenting = false;
  this.layer_ = null;
  this.wakelock_.release();

  return new Promise(function(resolve, reject) {
    if (wasPresenting) {
      if (!Util.exitFullscreen() && Util.isIOS()) {
        self.endPresent_();
        self.fireVRDisplayPresentChange_();
      }

      resolve();
    } else {
      reject(new Error('Was not presenting to VRDisplay.'));
    }
  });
};

VRDisplay.prototype.getLayers = function() {
  if (this.layer_) {
    return [this.layer_];
  }
  return [];
};

VRDisplay.prototype.fireVRDisplayPresentChange_ = function() {
  // Important: unfortunately we cannot have full spec compliance here.
  // CustomEvent custom fields all go under e.detail (so the VRDisplay ends up
  // being e.detail.display, instead of e.display as per WebVR spec).
  var event = new CustomEvent('vrdisplaypresentchange', {detail: {display: this}});
  window.dispatchEvent(event);
};

VRDisplay.prototype.addFullscreenListeners_ = function(element, changeHandler, errorHandler) {
  this.removeFullscreenListeners_();

  this.fullscreenEventTarget_ = element;
  this.fullscreenChangeHandler_ = changeHandler;
  this.fullscreenErrorHandler_ = errorHandler;

  if (changeHandler) {
    if (document.fullscreenEnabled) {
      element.addEventListener('fullscreenchange', changeHandler, false);
    } else if (document.webkitFullscreenEnabled) {
      element.addEventListener('webkitfullscreenchange', changeHandler, false);
    } else if (document.mozFullScreenEnabled) {
      document.addEventListener('mozfullscreenchange', changeHandler, false);
    } else if (document.msFullscreenEnabled) {
      element.addEventListener('msfullscreenchange', changeHandler, false);
    }
  }

  if (errorHandler) {
    if (document.fullscreenEnabled) {
      element.addEventListener('fullscreenerror', errorHandler, false);
    } else if (document.webkitFullscreenEnabled) {
      element.addEventListener('webkitfullscreenerror', errorHandler, false);
    } else if (document.mozFullScreenEnabled) {
      document.addEventListener('mozfullscreenerror', errorHandler, false);
    } else if (document.msFullscreenEnabled) {
      element.addEventListener('msfullscreenerror', errorHandler, false);
    }
  }
};

VRDisplay.prototype.removeFullscreenListeners_ = function() {
  if (!this.fullscreenEventTarget_)
    return;

  var element = this.fullscreenEventTarget_;

  if (this.fullscreenChangeHandler_) {
    var changeHandler = this.fullscreenChangeHandler_;
    element.removeEventListener('fullscreenchange', changeHandler, false);
    element.removeEventListener('webkitfullscreenchange', changeHandler, false);
    document.removeEventListener('mozfullscreenchange', changeHandler, false);
    element.removeEventListener('msfullscreenchange', changeHandler, false);
  }

  if (this.fullscreenErrorHandler_) {
    var errorHandler = this.fullscreenErrorHandler_;
    element.removeEventListener('fullscreenerror', errorHandler, false);
    element.removeEventListener('webkitfullscreenerror', errorHandler, false);
    document.removeEventListener('mozfullscreenerror', errorHandler, false);
    element.removeEventListener('msfullscreenerror', errorHandler, false);
  }

  this.fullscreenEventTarget_ = null;
  this.fullscreenChangeHandler_ = null;
  this.fullscreenErrorHandler_ = null;
};

VRDisplay.prototype.beginPresent_ = function() {
  // Override to add custom behavior when presentation begins.
};

VRDisplay.prototype.endPresent_ = function() {
  // Override to add custom behavior when presentation ends.
};

VRDisplay.prototype.submitFrame = function(pose) {
  // Override to add custom behavior for frame submission.
};

VRDisplay.prototype.getEyeParameters = function(whichEye) {
  // Override to return accurate eye parameters if canPresent is true.
  return null;
};

/*
 * Deprecated classes
 */

/**
 * The base class for all VR devices. (Deprecated)
 */
function VRDevice() {
  this.isPolyfilled = true;
  this.hardwareUnitId = 'webvr-polyfill hardwareUnitId';
  this.deviceId = 'webvr-polyfill deviceId';
  this.deviceName = 'webvr-polyfill deviceName';
}

/**
 * The base class for all VR HMD devices. (Deprecated)
 */
function HMDVRDevice() {
}
HMDVRDevice.prototype = new VRDevice();

/**
 * The base class for all VR position sensor devices. (Deprecated)
 */
function PositionSensorVRDevice() {
}
PositionSensorVRDevice.prototype = new VRDevice();

module.exports.VRFrameData = VRFrameData;
module.exports.VRDisplay = VRDisplay;
module.exports.VRDevice = VRDevice;
module.exports.HMDVRDevice = HMDVRDevice;
module.exports.PositionSensorVRDevice = PositionSensorVRDevice;

},{"./util.js":22,"./wakelock.js":24}],4:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CardboardUI = _dereq_('./cardboard-ui.js');
var Util = _dereq_('./util.js');
var WGLUPreserveGLState = _dereq_('./deps/wglu-preserve-state.js');

var distortionVS = [
  'attribute vec2 position;',
  'attribute vec3 texCoord;',

  'varying vec2 vTexCoord;',

  'uniform vec4 viewportOffsetScale[2];',

  'void main() {',
  '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];',
  '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;',
  '  gl_Position = vec4( position, 1.0, 1.0 );',
  '}',
].join('\n');

var distortionFS = [
  'precision mediump float;',
  'uniform sampler2D diffuse;',

  'varying vec2 vTexCoord;',

  'void main() {',
  '  gl_FragColor = texture2D(diffuse, vTexCoord);',
  '}',
].join('\n');

/**
 * A mesh-based distorter.
 */
function CardboardDistorter(gl) {
  this.gl = gl;
  this.ctxAttribs = gl.getContextAttributes();

  this.meshWidth = 20;
  this.meshHeight = 20;

  this.bufferScale = WebVRConfig.BUFFER_SCALE;

  this.bufferWidth = gl.drawingBufferWidth;
  this.bufferHeight = gl.drawingBufferHeight;

  // Patching support
  this.realBindFramebuffer = gl.bindFramebuffer;
  this.realEnable = gl.enable;
  this.realDisable = gl.disable;
  this.realColorMask = gl.colorMask;
  this.realClearColor = gl.clearColor;
  this.realViewport = gl.viewport;

  if (!Util.isIOS()) {
    this.realCanvasWidth = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'width');
    this.realCanvasHeight = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'height');
  }

  this.isPatched = false;

  // State tracking
  this.lastBoundFramebuffer = null;
  this.cullFace = false;
  this.depthTest = false;
  this.blend = false;
  this.scissorTest = false;
  this.stencilTest = false;
  this.viewport = [0, 0, 0, 0];
  this.colorMask = [true, true, true, true];
  this.clearColor = [0, 0, 0, 0];

  this.attribs = {
    position: 0,
    texCoord: 1
  };
  this.program = Util.linkProgram(gl, distortionVS, distortionFS, this.attribs);
  this.uniforms = Util.getProgramUniforms(gl, this.program);

  this.viewportOffsetScale = new Float32Array(8);
  this.setTextureBounds();

  this.vertexBuffer = gl.createBuffer();
  this.indexBuffer = gl.createBuffer();
  this.indexCount = 0;

  this.renderTarget = gl.createTexture();
  this.framebuffer = gl.createFramebuffer();

  this.depthStencilBuffer = null;
  this.depthBuffer = null;
  this.stencilBuffer = null;

  if (this.ctxAttribs.depth && this.ctxAttribs.stencil) {
    this.depthStencilBuffer = gl.createRenderbuffer();
  } else if (this.ctxAttribs.depth) {
    this.depthBuffer = gl.createRenderbuffer();
  } else if (this.ctxAttribs.stencil) {
    this.stencilBuffer = gl.createRenderbuffer();
  }

  this.patch();

  this.onResize();

  if (!WebVRConfig.CARDBOARD_UI_DISABLED) {
    this.cardboardUI = new CardboardUI(gl);
  }
};

/**
 * Tears down all the resources created by the distorter and removes any
 * patches.
 */
CardboardDistorter.prototype.destroy = function() {
  var gl = this.gl;

  this.unpatch();

  gl.deleteProgram(this.program);
  gl.deleteBuffer(this.vertexBuffer);
  gl.deleteBuffer(this.indexBuffer);
  gl.deleteTexture(this.renderTarget);
  gl.deleteFramebuffer(this.framebuffer);
  if (this.depthStencilBuffer) {
    gl.deleteRenderbuffer(this.depthStencilBuffer);
  }
  if (this.depthBuffer) {
    gl.deleteRenderbuffer(this.depthBuffer);
  }
  if (this.stencilBuffer) {
    gl.deleteRenderbuffer(this.stencilBuffer);
  }

  if (this.cardboardUI) {
    this.cardboardUI.destroy();
  }
};


/**
 * Resizes the backbuffer to match the canvas width and height.
 */
CardboardDistorter.prototype.onResize = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.RENDERBUFFER_BINDING,
    gl.TEXTURE_BINDING_2D, gl.TEXTURE0
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Bind real backbuffer and clear it once. We don't need to clear it again
    // after that because we're overwriting the same area every frame.
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);

    // Put things in a good state
    if (self.scissorTest) { self.realDisable.call(gl, gl.SCISSOR_TEST); }
    self.realColorMask.call(gl, true, true, true, true);
    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    self.realClearColor.call(gl, 0, 0, 0, 1);

    gl.clear(gl.COLOR_BUFFER_BIT);

    // Now bind and resize the fake backbuffer
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.framebuffer);

    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
    gl.texImage2D(gl.TEXTURE_2D, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB,
        self.bufferWidth, self.bufferHeight, 0,
        self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, self.renderTarget, 0);

    if (self.ctxAttribs.depth && self.ctxAttribs.stencil) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthStencilBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT,
          gl.RENDERBUFFER, self.depthStencilBuffer);
    } else if (self.ctxAttribs.depth) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,
          gl.RENDERBUFFER, self.depthBuffer);
    } else if (self.ctxAttribs.stencil) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.stencilBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT,
          gl.RENDERBUFFER, self.stencilBuffer);
    }

    if (!gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
      console.error('Framebuffer incomplete!');
    }

    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);

    if (self.scissorTest) { self.realEnable.call(gl, gl.SCISSOR_TEST); }

    self.realColorMask.apply(gl, self.colorMask);
    self.realViewport.apply(gl, self.viewport);
    self.realClearColor.apply(gl, self.clearColor);
  });

  if (this.cardboardUI) {
    this.cardboardUI.onResize();
  }
};

CardboardDistorter.prototype.patch = function() {
  if (this.isPatched) {
    return;
  }

  var self = this;
  var canvas = this.gl.canvas;
  var gl = this.gl;

  if (!Util.isIOS()) {
    canvas.width = Util.getScreenWidth() * this.bufferScale;
    canvas.height = Util.getScreenHeight() * this.bufferScale;

    Object.defineProperty(canvas, 'width', {
      configurable: true,
      enumerable: true,
      get: function() {
        return self.bufferWidth;
      },
      set: function(value) {
        self.bufferWidth = value;
        self.realCanvasWidth.set.call(canvas, value);
        self.onResize();
      }
    });

    Object.defineProperty(canvas, 'height', {
      configurable: true,
      enumerable: true,
      get: function() {
        return self.bufferHeight;
      },
      set: function(value) {
        self.bufferHeight = value;
        self.realCanvasHeight.set.call(canvas, value);
        self.onResize();
      }
    });
  }

  this.lastBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);

  if (this.lastBoundFramebuffer == null) {
    this.lastBoundFramebuffer = this.framebuffer;
    this.gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
  }

  this.gl.bindFramebuffer = function(target, framebuffer) {
    self.lastBoundFramebuffer = framebuffer ? framebuffer : self.framebuffer;
    // Silently make calls to bind the default framebuffer bind ours instead.
    self.realBindFramebuffer.call(gl, target, self.lastBoundFramebuffer);
  };

  this.cullFace = gl.getParameter(gl.CULL_FACE);
  this.depthTest = gl.getParameter(gl.DEPTH_TEST);
  this.blend = gl.getParameter(gl.BLEND);
  this.scissorTest = gl.getParameter(gl.SCISSOR_TEST);
  this.stencilTest = gl.getParameter(gl.STENCIL_TEST);

  gl.enable = function(pname) {
    switch (pname) {
      case gl.CULL_FACE: self.cullFace = true; break;
      case gl.DEPTH_TEST: self.depthTest = true; break;
      case gl.BLEND: self.blend = true; break;
      case gl.SCISSOR_TEST: self.scissorTest = true; break;
      case gl.STENCIL_TEST: self.stencilTest = true; break;
    }
    self.realEnable.call(gl, pname);
  };

  gl.disable = function(pname) {
    switch (pname) {
      case gl.CULL_FACE: self.cullFace = false; break;
      case gl.DEPTH_TEST: self.depthTest = false; break;
      case gl.BLEND: self.blend = false; break;
      case gl.SCISSOR_TEST: self.scissorTest = false; break;
      case gl.STENCIL_TEST: self.stencilTest = false; break;
    }
    self.realDisable.call(gl, pname);
  };

  this.colorMask = gl.getParameter(gl.COLOR_WRITEMASK);
  gl.colorMask = function(r, g, b, a) {
    self.colorMask[0] = r;
    self.colorMask[1] = g;
    self.colorMask[2] = b;
    self.colorMask[3] = a;
    self.realColorMask.call(gl, r, g, b, a);
  };

  this.clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
  gl.clearColor = function(r, g, b, a) {
    self.clearColor[0] = r;
    self.clearColor[1] = g;
    self.clearColor[2] = b;
    self.clearColor[3] = a;
    self.realClearColor.call(gl, r, g, b, a);
  };

  this.viewport = gl.getParameter(gl.VIEWPORT);
  gl.viewport = function(x, y, w, h) {
    self.viewport[0] = x;
    self.viewport[1] = y;
    self.viewport[2] = w;
    self.viewport[3] = h;
    self.realViewport.call(gl, x, y, w, h);
  };

  this.isPatched = true;
  Util.safariCssSizeWorkaround(canvas);
};

CardboardDistorter.prototype.unpatch = function() {
  if (!this.isPatched) {
    return;
  }

  var gl = this.gl;
  var canvas = this.gl.canvas;

  if (!Util.isIOS()) {
    Object.defineProperty(canvas, 'width', this.realCanvasWidth);
    Object.defineProperty(canvas, 'height', this.realCanvasHeight);
  }
  canvas.width = this.bufferWidth;
  canvas.height = this.bufferHeight;

  gl.bindFramebuffer = this.realBindFramebuffer;
  gl.enable = this.realEnable;
  gl.disable = this.realDisable;
  gl.colorMask = this.realColorMask;
  gl.clearColor = this.realClearColor;
  gl.viewport = this.realViewport;

  // Check to see if our fake backbuffer is bound and bind the real backbuffer
  // if that's the case.
  if (this.lastBoundFramebuffer == this.framebuffer) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }

  this.isPatched = false;

  setTimeout(function() {
    Util.safariCssSizeWorkaround(canvas);
  }, 1);
};

CardboardDistorter.prototype.setTextureBounds = function(leftBounds, rightBounds) {
  if (!leftBounds) {
    leftBounds = [0, 0, 0.5, 1];
  }

  if (!rightBounds) {
    rightBounds = [0.5, 0, 0.5, 1];
  }

  // Left eye
  this.viewportOffsetScale[0] = leftBounds[0]; // X
  this.viewportOffsetScale[1] = leftBounds[1]; // Y
  this.viewportOffsetScale[2] = leftBounds[2]; // Width
  this.viewportOffsetScale[3] = leftBounds[3]; // Height

  // Right eye
  this.viewportOffsetScale[4] = rightBounds[0]; // X
  this.viewportOffsetScale[5] = rightBounds[1]; // Y
  this.viewportOffsetScale[6] = rightBounds[2]; // Width
  this.viewportOffsetScale[7] = rightBounds[3]; // Height
};

/**
 * Performs distortion pass on the injected backbuffer, rendering it to the real
 * backbuffer.
 */
CardboardDistorter.prototype.submitFrame = function() {
  var gl = this.gl;
  var self = this;

  var glState = [];

  if (!WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS) {
    glState.push(
      gl.CURRENT_PROGRAM,
      gl.ARRAY_BUFFER_BINDING,
      gl.ELEMENT_ARRAY_BUFFER_BINDING,
      gl.TEXTURE_BINDING_2D, gl.TEXTURE0
    );
  }

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Bind the real default framebuffer
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);

    // Make sure the GL state is in a good place
    if (self.cullFace) { self.realDisable.call(gl, gl.CULL_FACE); }
    if (self.depthTest) { self.realDisable.call(gl, gl.DEPTH_TEST); }
    if (self.blend) { self.realDisable.call(gl, gl.BLEND); }
    if (self.scissorTest) { self.realDisable.call(gl, gl.SCISSOR_TEST); }
    if (self.stencilTest) { self.realDisable.call(gl, gl.STENCIL_TEST); }
    self.realColorMask.call(gl, true, true, true, true);
    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

    // If the backbuffer has an alpha channel clear every frame so the page
    // doesn't show through.
    if (self.ctxAttribs.alpha || Util.isIOS()) {
      self.realClearColor.call(gl, 0, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }

    // Bind distortion program and mesh
    gl.useProgram(self.program);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);

    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.enableVertexAttribArray(self.attribs.position);
    gl.enableVertexAttribArray(self.attribs.texCoord);
    gl.vertexAttribPointer(self.attribs.position, 2, gl.FLOAT, false, 20, 0);
    gl.vertexAttribPointer(self.attribs.texCoord, 3, gl.FLOAT, false, 20, 8);

    gl.activeTexture(gl.TEXTURE0);
    gl.uniform1i(self.uniforms.diffuse, 0);
    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);

    gl.uniform4fv(self.uniforms.viewportOffsetScale, self.viewportOffsetScale);

    // Draws both eyes
    gl.drawElements(gl.TRIANGLES, self.indexCount, gl.UNSIGNED_SHORT, 0);

    if (self.cardboardUI) {
      self.cardboardUI.renderNoState();
    }

    // Bind the fake default framebuffer again
    self.realBindFramebuffer.call(self.gl, gl.FRAMEBUFFER, self.framebuffer);

    // If preserveDrawingBuffer == false clear the framebuffer
    if (!self.ctxAttribs.preserveDrawingBuffer) {
      self.realClearColor.call(gl, 0, 0, 0, 0);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }

    if (!WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS) {
      self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
    }

    // Restore state
    if (self.cullFace) { self.realEnable.call(gl, gl.CULL_FACE); }
    if (self.depthTest) { self.realEnable.call(gl, gl.DEPTH_TEST); }
    if (self.blend) { self.realEnable.call(gl, gl.BLEND); }
    if (self.scissorTest) { self.realEnable.call(gl, gl.SCISSOR_TEST); }
    if (self.stencilTest) { self.realEnable.call(gl, gl.STENCIL_TEST); }

    self.realColorMask.apply(gl, self.colorMask);
    self.realViewport.apply(gl, self.viewport);
    if (self.ctxAttribs.alpha || !self.ctxAttribs.preserveDrawingBuffer) {
      self.realClearColor.apply(gl, self.clearColor);
    }
  });

  // Workaround for the fact that Safari doesn't allow us to patch the canvas
  // width and height correctly. After each submit frame check to see what the
  // real backbuffer size has been set to and resize the fake backbuffer size
  // to match.
  if (Util.isIOS()) {
    var canvas = gl.canvas;
    if (canvas.width != self.bufferWidth || canvas.height != self.bufferHeight) {
      self.bufferWidth = canvas.width;
      self.bufferHeight = canvas.height;
      self.onResize();
    }
  }
};

/**
 * Call when the deviceInfo has changed. At this point we need
 * to re-calculate the distortion mesh.
 */
CardboardDistorter.prototype.updateDeviceInfo = function(deviceInfo) {
  var gl = this.gl;
  var self = this;

  var glState = [gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING];
  WGLUPreserveGLState(gl, glState, function(gl) {
    var vertices = self.computeMeshVertices_(self.meshWidth, self.meshHeight, deviceInfo);
    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

    // Indices don't change based on device parameters, so only compute once.
    if (!self.indexCount) {
      var indices = self.computeMeshIndices_(self.meshWidth, self.meshHeight);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
      self.indexCount = indices.length;
    }
  });
};

/**
 * Build the distortion mesh vertices.
 * Based on code from the Unity cardboard plugin.
 */
CardboardDistorter.prototype.computeMeshVertices_ = function(width, height, deviceInfo) {
  var vertices = new Float32Array(2 * width * height * 5);

  var lensFrustum = deviceInfo.getLeftEyeVisibleTanAngles();
  var noLensFrustum = deviceInfo.getLeftEyeNoLensTanAngles();
  var viewport = deviceInfo.getLeftEyeVisibleScreenRect(noLensFrustum);
  var vidx = 0;
  var iidx = 0;
  for (var e = 0; e < 2; e++) {
    for (var j = 0; j < height; j++) {
      for (var i = 0; i < width; i++, vidx++) {
        var u = i / (width - 1);
        var v = j / (height - 1);

        // Grid points regularly spaced in StreoScreen, and barrel distorted in
        // the mesh.
        var s = u;
        var t = v;
        var x = Util.lerp(lensFrustum[0], lensFrustum[2], u);
        var y = Util.lerp(lensFrustum[3], lensFrustum[1], v);
        var d = Math.sqrt(x * x + y * y);
        var r = deviceInfo.distortion.distortInverse(d);
        var p = x * r / d;
        var q = y * r / d;
        u = (p - noLensFrustum[0]) / (noLensFrustum[2] - noLensFrustum[0]);
        v = (q - noLensFrustum[3]) / (noLensFrustum[1] - noLensFrustum[3]);

        // Convert u,v to mesh screen coordinates.
        var aspect = deviceInfo.device.widthMeters / deviceInfo.device.heightMeters;

        // FIXME: The original Unity plugin multiplied U by the aspect ratio
        // and didn't multiply either value by 2, but that seems to get it
        // really close to correct looking for me. I hate this kind of "Don't
        // know why it works" code though, and wold love a more logical
        // explanation of what needs to happen here.
        u = (viewport.x + u * viewport.width - 0.5) * 2.0; //* aspect;
        v = (viewport.y + v * viewport.height - 0.5) * 2.0;

        vertices[(vidx * 5) + 0] = u; // position.x
        vertices[(vidx * 5) + 1] = v; // position.y
        vertices[(vidx * 5) + 2] = s; // texCoord.x
        vertices[(vidx * 5) + 3] = t; // texCoord.y
        vertices[(vidx * 5) + 4] = e; // texCoord.z (viewport index)
      }
    }
    var w = lensFrustum[2] - lensFrustum[0];
    lensFrustum[0] = -(w + lensFrustum[0]);
    lensFrustum[2] = w - lensFrustum[2];
    w = noLensFrustum[2] - noLensFrustum[0];
    noLensFrustum[0] = -(w + noLensFrustum[0]);
    noLensFrustum[2] = w - noLensFrustum[2];
    viewport.x = 1 - (viewport.x + viewport.width);
  }
  return vertices;
}

/**
 * Build the distortion mesh indices.
 * Based on code from the Unity cardboard plugin.
 */
CardboardDistorter.prototype.computeMeshIndices_ = function(width, height) {
  var indices = new Uint16Array(2 * (width - 1) * (height - 1) * 6);
  var halfwidth = width / 2;
  var halfheight = height / 2;
  var vidx = 0;
  var iidx = 0;
  for (var e = 0; e < 2; e++) {
    for (var j = 0; j < height; j++) {
      for (var i = 0; i < width; i++, vidx++) {
        if (i == 0 || j == 0)
          continue;
        // Build a quad.  Lower right and upper left quadrants have quads with
        // the triangle diagonal flipped to get the vignette to interpolate
        // correctly.
        if ((i <= halfwidth) == (j <= halfheight)) {
          // Quad diagonal lower left to upper right.
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - width - 1;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx - width - 1;
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - 1;
        } else {
          // Quad diagonal upper left to lower right.
          indices[iidx++] = vidx - 1;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx - 1;
          indices[iidx++] = vidx - width - 1;
        }
      }
    }
  }
  return indices;
};

CardboardDistorter.prototype.getOwnPropertyDescriptor_ = function(proto, attrName) {
  var descriptor = Object.getOwnPropertyDescriptor(proto, attrName);
  // In some cases (ahem... Safari), the descriptor returns undefined get and
  // set fields. In this case, we need to create a synthetic property
  // descriptor. This works around some of the issues in
  // https://github.com/borismus/webvr-polyfill/issues/46
  if (descriptor.get === undefined || descriptor.set === undefined) {
    descriptor.configurable = true;
    descriptor.enumerable = true;
    descriptor.get = function() {
      return this.getAttribute(attrName);
    };
    descriptor.set = function(val) {
      this.setAttribute(attrName, val);
    };
  }
  return descriptor;
};

module.exports = CardboardDistorter;

},{"./cardboard-ui.js":5,"./deps/wglu-preserve-state.js":7,"./util.js":22}],5:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');
var WGLUPreserveGLState = _dereq_('./deps/wglu-preserve-state.js');

var uiVS = [
  'attribute vec2 position;',

  'uniform mat4 projectionMat;',

  'void main() {',
  '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );',
  '}',
].join('\n');

var uiFS = [
  'precision mediump float;',

  'uniform vec4 color;',

  'void main() {',
  '  gl_FragColor = color;',
  '}',
].join('\n');

var DEG2RAD = Math.PI/180.0;

// The gear has 6 identical sections, each spanning 60 degrees.
var kAnglePerGearSection = 60;

// Half-angle of the span of the outer rim.
var kOuterRimEndAngle = 12;

// Angle between the middle of the outer rim and the start of the inner rim.
var kInnerRimBeginAngle = 20;

// Distance from center to outer rim, normalized so that the entire model
// fits in a [-1, 1] x [-1, 1] square.
var kOuterRadius = 1;

// Distance from center to depressed rim, in model units.
var kMiddleRadius = 0.75;

// Radius of the inner hollow circle, in model units.
var kInnerRadius = 0.3125;

// Center line thickness in DP.
var kCenterLineThicknessDp = 4;

// Button width in DP.
var kButtonWidthDp = 28;

// Factor to scale the touch area that responds to the touch.
var kTouchSlopFactor = 1.5;

var Angles = [
  0, kOuterRimEndAngle, kInnerRimBeginAngle,
  kAnglePerGearSection - kInnerRimBeginAngle,
  kAnglePerGearSection - kOuterRimEndAngle
];

/**
 * Renders the alignment line and "options" gear. It is assumed that the canvas
 * this is rendered into covers the entire screen (or close to it.)
 */
function CardboardUI(gl) {
  this.gl = gl;

  this.attribs = {
    position: 0
  };
  this.program = Util.linkProgram(gl, uiVS, uiFS, this.attribs);
  this.uniforms = Util.getProgramUniforms(gl, this.program);

  this.vertexBuffer = gl.createBuffer();
  this.gearOffset = 0;
  this.gearVertexCount = 0;
  this.arrowOffset = 0;
  this.arrowVertexCount = 0;

  this.projMat = new Float32Array(16);

  this.listener = null;

  this.onResize();
};

/**
 * Tears down all the resources created by the UI renderer.
 */
CardboardUI.prototype.destroy = function() {
  var gl = this.gl;

  if (this.listener) {
    gl.canvas.removeEventListener('click', this.listener, false);
  }

  gl.deleteProgram(this.program);
  gl.deleteBuffer(this.vertexBuffer);
};

/**
 * Adds a listener to clicks on the gear and back icons
 */
CardboardUI.prototype.listen = function(optionsCallback, backCallback) {
  var canvas = this.gl.canvas;
  this.listener = function(event) {
    var midline = canvas.clientWidth / 2;
    var buttonSize = kButtonWidthDp * kTouchSlopFactor;
    // Check to see if the user clicked on (or around) the gear icon
    if (event.clientX > midline - buttonSize &&
        event.clientX < midline + buttonSize &&
        event.clientY > canvas.clientHeight - buttonSize) {
      optionsCallback(event);
    }
    // Check to see if the user clicked on (or around) the back icon
    else if (event.clientX < buttonSize && event.clientY < buttonSize) {
      backCallback(event);
    }
  };
  canvas.addEventListener('click', this.listener, false);
};

/**
 * Builds the UI mesh.
 */
CardboardUI.prototype.onResize = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.ARRAY_BUFFER_BINDING
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    var vertices = [];

    var midline = gl.drawingBufferWidth / 2;

    // Assumes your canvas width and height is scaled proportionately.
    // TODO(smus): The following causes buttons to become huge on iOS, but seems
    // like the right thing to do. For now, added a hack. But really, investigate why.
    var dps = (gl.drawingBufferWidth / (screen.width * window.devicePixelRatio));
    if (!Util.isIOS()) {
      dps *= window.devicePixelRatio;
    }

    var lineWidth = kCenterLineThicknessDp * dps / 2;
    var buttonSize = kButtonWidthDp * kTouchSlopFactor * dps;
    var buttonScale = kButtonWidthDp * dps / 2;
    var buttonBorder = ((kButtonWidthDp * kTouchSlopFactor) - kButtonWidthDp) * dps;

    // Build centerline
    vertices.push(midline - lineWidth, buttonSize);
    vertices.push(midline - lineWidth, gl.drawingBufferHeight);
    vertices.push(midline + lineWidth, buttonSize);
    vertices.push(midline + lineWidth, gl.drawingBufferHeight);

    // Build gear
    self.gearOffset = (vertices.length / 2);

    function addGearSegment(theta, r) {
      var angle = (90 - theta) * DEG2RAD;
      var x = Math.cos(angle);
      var y = Math.sin(angle);
      vertices.push(kInnerRadius * x * buttonScale + midline, kInnerRadius * y * buttonScale + buttonScale);
      vertices.push(r * x * buttonScale + midline, r * y * buttonScale + buttonScale);
    }

    for (var i = 0; i <= 6; i++) {
      var segmentTheta = i * kAnglePerGearSection;

      addGearSegment(segmentTheta, kOuterRadius);
      addGearSegment(segmentTheta + kOuterRimEndAngle, kOuterRadius);
      addGearSegment(segmentTheta + kInnerRimBeginAngle, kMiddleRadius);
      addGearSegment(segmentTheta + (kAnglePerGearSection - kInnerRimBeginAngle), kMiddleRadius);
      addGearSegment(segmentTheta + (kAnglePerGearSection - kOuterRimEndAngle), kOuterRadius);
    }

    self.gearVertexCount = (vertices.length / 2) - self.gearOffset;

    // Build back arrow
    self.arrowOffset = (vertices.length / 2);

    function addArrowVertex(x, y) {
      vertices.push(buttonBorder + x, gl.drawingBufferHeight - buttonBorder - y);
    }

    var angledLineWidth = lineWidth / Math.sin(45 * DEG2RAD);

    addArrowVertex(0, buttonScale);
    addArrowVertex(buttonScale, 0);
    addArrowVertex(buttonScale + angledLineWidth, angledLineWidth);
    addArrowVertex(angledLineWidth, buttonScale + angledLineWidth);

    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
    addArrowVertex(0, buttonScale);
    addArrowVertex(buttonScale, buttonScale * 2);
    addArrowVertex(buttonScale + angledLineWidth, (buttonScale * 2) - angledLineWidth);

    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
    addArrowVertex(0, buttonScale);

    addArrowVertex(angledLineWidth, buttonScale - lineWidth);
    addArrowVertex(kButtonWidthDp * dps, buttonScale - lineWidth);
    addArrowVertex(angledLineWidth, buttonScale + lineWidth);
    addArrowVertex(kButtonWidthDp * dps, buttonScale + lineWidth);

    self.arrowVertexCount = (vertices.length / 2) - self.arrowOffset;

    // Buffer data
    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
  });
};

/**
 * Performs distortion pass on the injected backbuffer, rendering it to the real
 * backbuffer.
 */
CardboardUI.prototype.render = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.CULL_FACE,
    gl.DEPTH_TEST,
    gl.BLEND,
    gl.SCISSOR_TEST,
    gl.STENCIL_TEST,
    gl.COLOR_WRITEMASK,
    gl.VIEWPORT,

    gl.CURRENT_PROGRAM,
    gl.ARRAY_BUFFER_BINDING
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Make sure the GL state is in a good place
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.SCISSOR_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.colorMask(true, true, true, true);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

    self.renderNoState();
  });
};

CardboardUI.prototype.renderNoState = function() {
  var gl = this.gl;

  // Bind distortion program and mesh
  gl.useProgram(this.program);

  gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
  gl.enableVertexAttribArray(this.attribs.position);
  gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 8, 0);

  gl.uniform4f(this.uniforms.color, 1.0, 1.0, 1.0, 1.0);

  Util.orthoMatrix(this.projMat, 0, gl.drawingBufferWidth, 0, gl.drawingBufferHeight, 0.1, 1024.0);
  gl.uniformMatrix4fv(this.uniforms.projectionMat, false, this.projMat);

  // Draws UI element
  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  gl.drawArrays(gl.TRIANGLE_STRIP, this.gearOffset, this.gearVertexCount);
  gl.drawArrays(gl.TRIANGLE_STRIP, this.arrowOffset, this.arrowVertexCount);
};

module.exports = CardboardUI;

},{"./deps/wglu-preserve-state.js":7,"./util.js":22}],6:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CardboardDistorter = _dereq_('./cardboard-distorter.js');
var CardboardUI = _dereq_('./cardboard-ui.js');
var DeviceInfo = _dereq_('./device-info.js');
var Dpdb = _dereq_('./dpdb/dpdb.js');
var FusionPoseSensor = _dereq_('./sensor-fusion/fusion-pose-sensor.js');
var RotateInstructions = _dereq_('./rotate-instructions.js');
var ViewerSelector = _dereq_('./viewer-selector.js');
var VRDisplay = _dereq_('./base.js').VRDisplay;
var Util = _dereq_('./util.js');

var Eye = {
  LEFT: 'left',
  RIGHT: 'right'
};

/**
 * VRDisplay based on mobile device parameters and DeviceMotion APIs.
 */
function CardboardVRDisplay() {
  this.displayName = 'Cardboard VRDisplay (webvr-polyfill)';

  this.capabilities.hasOrientation = true;
  this.capabilities.canPresent = true;

  // "Private" members.
  this.bufferScale_ = WebVRConfig.BUFFER_SCALE;
  this.poseSensor_ = new FusionPoseSensor();
  this.distorter_ = null;
  this.cardboardUI_ = null;

  this.dpdb_ = new Dpdb(true, this.onDeviceParamsUpdated_.bind(this));
  this.deviceInfo_ = new DeviceInfo(this.dpdb_.getDeviceParams());

  this.viewerSelector_ = new ViewerSelector();
  this.viewerSelector_.on('change', this.onViewerChanged_.bind(this));

  // Set the correct initial viewer.
  this.deviceInfo_.setViewer(this.viewerSelector_.getCurrentViewer());

  if (!WebVRConfig.ROTATE_INSTRUCTIONS_DISABLED) {
    this.rotateInstructions_ = new RotateInstructions();
  }

  if (Util.isIOS()) {
    // Listen for resize events to workaround this awful Safari bug.
    window.addEventListener('resize', this.onResize_.bind(this));
  }
}
CardboardVRDisplay.prototype = new VRDisplay();

CardboardVRDisplay.prototype.getImmediatePose = function() {
  return {
    position: this.poseSensor_.getPosition(),
    orientation: this.poseSensor_.getOrientation(),
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

CardboardVRDisplay.prototype.resetPose = function() {
  this.poseSensor_.resetPose();
};

CardboardVRDisplay.prototype.getEyeParameters = function(whichEye) {
  var offset = [this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
  var fieldOfView;

  // TODO: FoV can be a little expensive to compute. Cache when device params change.
  if (whichEye == Eye.LEFT) {
    offset[0] *= -1.0;
    fieldOfView = this.deviceInfo_.getFieldOfViewLeftEye();
  } else if (whichEye == Eye.RIGHT) {
    fieldOfView = this.deviceInfo_.getFieldOfViewRightEye();
  } else {
    console.error('Invalid eye provided: %s', whichEye);
    return null;
  }

  return {
    fieldOfView: fieldOfView,
    offset: offset,
    // TODO: Should be able to provide better values than these.
    renderWidth: this.deviceInfo_.device.width * 0.5 * this.bufferScale_,
    renderHeight: this.deviceInfo_.device.height * this.bufferScale_,
  };
};

CardboardVRDisplay.prototype.onDeviceParamsUpdated_ = function(newParams) {
  if (Util.isDebug()) {
    console.log('DPDB reported that device params were updated.');
  }
  this.deviceInfo_.updateDeviceParams(newParams);

  if (this.distorter_) {
    this.distorter_.updateDeviceInfo(this.deviceInfo_);
  }
};

CardboardVRDisplay.prototype.updateBounds_ = function () {
  if (this.layer_ && this.distorter_ && (this.layer_.leftBounds || this.layer_.rightBounds)) {
    this.distorter_.setTextureBounds(this.layer_.leftBounds, this.layer_.rightBounds);
  }
};

CardboardVRDisplay.prototype.beginPresent_ = function() {
  var gl = this.layer_.source.getContext('webgl');
  if (!gl)
    gl = this.layer_.source.getContext('experimental-webgl');
  if (!gl)
    gl = this.layer_.source.getContext('webgl2');

  if (!gl)
    return; // Can't do distortion without a WebGL context.

  // Provides a way to opt out of distortion
  if (this.layer_.predistorted) {
    if (!WebVRConfig.CARDBOARD_UI_DISABLED) {
      gl.canvas.width = Util.getScreenWidth() * this.bufferScale_;
      gl.canvas.height = Util.getScreenHeight() * this.bufferScale_;
      this.cardboardUI_ = new CardboardUI(gl);
    }
  } else {
    // Create a new distorter for the target context
    this.distorter_ = new CardboardDistorter(gl);
    this.distorter_.updateDeviceInfo(this.deviceInfo_);
    this.cardboardUI_ = this.distorter_.cardboardUI;
  }

  if (this.cardboardUI_) {
    this.cardboardUI_.listen(function(e) {
      // Options clicked.
      this.viewerSelector_.show(this.layer_.source.parentElement);
      e.stopPropagation();
      e.preventDefault();
    }.bind(this), function(e) {
      // Back clicked.
      this.exitPresent();
      e.stopPropagation();
      e.preventDefault();
    }.bind(this));
  }

  if (this.rotateInstructions_) {
    if (Util.isLandscapeMode() && Util.isMobile()) {
      // In landscape mode, temporarily show the "put into Cardboard"
      // interstitial. Otherwise, do the default thing.
      this.rotateInstructions_.showTemporarily(3000, this.layer_.source.parentElement);
    } else {
      this.rotateInstructions_.update();
    }
  }

  // Listen for orientation change events in order to show interstitial.
  this.orientationHandler = this.onOrientationChange_.bind(this);
  window.addEventListener('orientationchange', this.orientationHandler);

  // Listen for present display change events in order to update distorter dimensions
  this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(this);
  window.addEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);

  // Fire this event initially, to give geometry-distortion clients the chance
  // to do something custom.
  this.fireVRDisplayDeviceParamsChange_();
};

CardboardVRDisplay.prototype.endPresent_ = function() {
  if (this.distorter_) {
    this.distorter_.destroy();
    this.distorter_ = null;
  }
  if (this.cardboardUI_) {
    this.cardboardUI_.destroy();
    this.cardboardUI_ = null;
  }

  if (this.rotateInstructions_) {
    this.rotateInstructions_.hide();
  }
  this.viewerSelector_.hide();

  window.removeEventListener('orientationchange', this.orientationHandler);
  window.removeEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);
};

CardboardVRDisplay.prototype.submitFrame = function(pose) {
  if (this.distorter_) {
    this.updateBounds_();
    this.distorter_.submitFrame();
  } else if (this.cardboardUI_ && this.layer_) {
    // Hack for predistorted: true.
    var canvas = this.layer_.source.getContext('webgl').canvas;
    if (canvas.width != this.lastWidth || canvas.height != this.lastHeight) {
      this.cardboardUI_.onResize();
    }
    this.lastWidth = canvas.width;
    this.lastHeight = canvas.height;

    // Render the Cardboard UI.
    this.cardboardUI_.render();
  }
};

CardboardVRDisplay.prototype.onOrientationChange_ = function(e) {
  // Hide the viewer selector.
  this.viewerSelector_.hide();

  // Update the rotate instructions.
  if (this.rotateInstructions_) {
    this.rotateInstructions_.update();
  }

  this.onResize_();
};

CardboardVRDisplay.prototype.onResize_ = function(e) {
  if (this.layer_) {
    var gl = this.layer_.source.getContext('webgl');
    // Size the CSS canvas.
    // Added padding on right and bottom because iPhone 5 will not
    // hide the URL bar unless content is bigger than the screen.
    // This will not be visible as long as the container element (e.g. body)
    // is set to 'overflow: hidden'.
    var cssProperties = [
      'position: absolute',
      'top: 0',
      'left: 0',
      'width: ' + Math.max(screen.width, screen.height) + 'px',
      'height: ' + Math.min(screen.height, screen.width) + 'px',
      'border: 0',
      'margin: 0',
      'padding: 0 10px 10px 0',
    ];
    gl.canvas.setAttribute('style', cssProperties.join('; ') + ';');

    Util.safariCssSizeWorkaround(gl.canvas);
  }
};

CardboardVRDisplay.prototype.onViewerChanged_ = function(viewer) {
  this.deviceInfo_.setViewer(viewer);

  if (this.distorter_) {
    // Update the distortion appropriately.
    this.distorter_.updateDeviceInfo(this.deviceInfo_);
  }

  // Fire a new event containing viewer and device parameters for clients that
  // want to implement their own geometry-based distortion.
  this.fireVRDisplayDeviceParamsChange_();
};

CardboardVRDisplay.prototype.fireVRDisplayDeviceParamsChange_ = function() {
  var event = new CustomEvent('vrdisplaydeviceparamschange', {
    detail: {
      vrdisplay: this,
      deviceInfo: this.deviceInfo_,
    }
  });
  window.dispatchEvent(event);
};

module.exports = CardboardVRDisplay;

},{"./base.js":3,"./cardboard-distorter.js":4,"./cardboard-ui.js":5,"./device-info.js":8,"./dpdb/dpdb.js":12,"./rotate-instructions.js":16,"./sensor-fusion/fusion-pose-sensor.js":18,"./util.js":22,"./viewer-selector.js":23}],7:[function(_dereq_,module,exports){
/*
Copyright (c) 2016, Brandon Jones.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*
Caches specified GL state, runs a callback, and restores the cached state when
done.

Example usage:

var savedState = [
  gl.ARRAY_BUFFER_BINDING,

  // TEXTURE_BINDING_2D or _CUBE_MAP must always be followed by the texure unit.
  gl.TEXTURE_BINDING_2D, gl.TEXTURE0,

  gl.CLEAR_COLOR,
];
// After this call the array buffer, texture unit 0, active texture, and clear
// color will be restored. The viewport will remain changed, however, because
// gl.VIEWPORT was not included in the savedState list.
WGLUPreserveGLState(gl, savedState, function(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, ....);

  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, ...);

  gl.clearColor(1, 0, 0, 1);
  gl.clear(gl.COLOR_BUFFER_BIT);
});

Note that this is not intended to be fast. Managing state in your own code to
avoid redundant state setting and querying will always be faster. This function
is most useful for cases where you may not have full control over the WebGL
calls being made, such as tooling or effect injectors.
*/

function WGLUPreserveGLState(gl, bindings, callback) {
  if (!bindings) {
    callback(gl);
    return;
  }

  var boundValues = [];

  var activeTexture = null;
  for (var i = 0; i < bindings.length; ++i) {
    var binding = bindings[i];
    switch (binding) {
      case gl.TEXTURE_BINDING_2D:
      case gl.TEXTURE_BINDING_CUBE_MAP:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31) {
          console.error("TEXTURE_BINDING_2D or TEXTURE_BINDING_CUBE_MAP must be followed by a valid texture unit");
          boundValues.push(null, null);
          break;
        }
        if (!activeTexture) {
          activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
        }
        gl.activeTexture(textureUnit);
        boundValues.push(gl.getParameter(binding), null);
        break;
      case gl.ACTIVE_TEXTURE:
        activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
        boundValues.push(null);
        break;
      default:
        boundValues.push(gl.getParameter(binding));
        break;
    }
  }

  callback(gl);

  for (var i = 0; i < bindings.length; ++i) {
    var binding = bindings[i];
    var boundValue = boundValues[i];
    switch (binding) {
      case gl.ACTIVE_TEXTURE:
        break; // Ignore this binding, since we special-case it to happen last.
      case gl.ARRAY_BUFFER_BINDING:
        gl.bindBuffer(gl.ARRAY_BUFFER, boundValue);
        break;
      case gl.COLOR_CLEAR_VALUE:
        gl.clearColor(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.COLOR_WRITEMASK:
        gl.colorMask(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.CURRENT_PROGRAM:
        gl.useProgram(boundValue);
        break;
      case gl.ELEMENT_ARRAY_BUFFER_BINDING:
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, boundValue);
        break;
      case gl.FRAMEBUFFER_BINDING:
        gl.bindFramebuffer(gl.FRAMEBUFFER, boundValue);
        break;
      case gl.RENDERBUFFER_BINDING:
        gl.bindRenderbuffer(gl.RENDERBUFFER, boundValue);
        break;
      case gl.TEXTURE_BINDING_2D:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
          break;
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_2D, boundValue);
        break;
      case gl.TEXTURE_BINDING_CUBE_MAP:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
          break;
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, boundValue);
        break;
      case gl.VIEWPORT:
        gl.viewport(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.BLEND:
      case gl.CULL_FACE:
      case gl.DEPTH_TEST:
      case gl.SCISSOR_TEST:
      case gl.STENCIL_TEST:
        if (boundValue) {
          gl.enable(binding);
        } else {
          gl.disable(binding);
        }
        break;
      default:
        console.log("No GL restore behavior for 0x" + binding.toString(16));
        break;
    }

    if (activeTexture) {
      gl.activeTexture(activeTexture);
    }
  }
}

module.exports = WGLUPreserveGLState;
},{}],8:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Distortion = _dereq_('./distortion/distortion.js');
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

function Device(params) {
  this.width = params.width || Util.getScreenWidth();
  this.height = params.height || Util.getScreenHeight();
  this.widthMeters = params.widthMeters;
  this.heightMeters = params.heightMeters;
  this.bevelMeters = params.bevelMeters;
}


// Fallback Android device (based on Nexus 5 measurements) for use when
// we can't recognize an Android device.
var DEFAULT_ANDROID = new Device({
  widthMeters: 0.110,
  heightMeters: 0.062,
  bevelMeters: 0.004
});

// Fallback iOS device (based on iPhone6) for use when
// we can't recognize an Android device.
var DEFAULT_IOS = new Device({
  widthMeters: 0.1038,
  heightMeters: 0.0584,
  bevelMeters: 0.004
});


var Viewers = {
  CardboardV1: new CardboardViewer({
    id: 'CardboardV1',
    label: 'Cardboard I/O 2014',
    fov: 40,
    interLensDistance: 0.060,
    baselineLensDistance: 0.035,
    screenLensDistance: 0.042,
    distortionCoefficients: [0.441, 0.156],
    inverseCoefficients: [-0.4410035, 0.42756155, -0.4804439, 0.5460139,
      -0.58821183, 0.5733938, -0.48303202, 0.33299083, -0.17573841,
      0.0651772, -0.01488963, 0.001559834]
  }),
  CardboardV2: new CardboardViewer({
    id: 'CardboardV2',
    label: 'Cardboard I/O 2015',
    fov: 60,
    interLensDistance: 0.064,
    baselineLensDistance: 0.035,
    screenLensDistance: 0.039,
    distortionCoefficients: [0.34, 0.55],
    inverseCoefficients: [-0.33836704, -0.18162185, 0.862655, -1.2462051,
      1.0560602, -0.58208317, 0.21609078, -0.05444823, 0.009177956,
      -9.904169E-4, 6.183535E-5, -1.6981803E-6]
  })
};


var DEFAULT_LEFT_CENTER = {x: 0.5, y: 0.5};
var DEFAULT_RIGHT_CENTER = {x: 0.5, y: 0.5};

/**
 * Manages information about the device and the viewer.
 *
 * deviceParams indicates the parameters of the device to use (generally
 * obtained from dpdb.getDeviceParams()). Can be null to mean no device
 * params were found.
 */
function DeviceInfo(deviceParams) {
  this.viewer = Viewers.CardboardV2;
  this.updateDeviceParams(deviceParams);
  this.distortion = new Distortion(this.viewer.distortionCoefficients);
}

DeviceInfo.prototype.updateDeviceParams = function(deviceParams) {
  this.device = this.determineDevice_(deviceParams) || this.device;
};

DeviceInfo.prototype.getDevice = function() {
  return this.device;
};

DeviceInfo.prototype.setViewer = function(viewer) {
  this.viewer = viewer;
  this.distortion = new Distortion(this.viewer.distortionCoefficients);
};

DeviceInfo.prototype.determineDevice_ = function(deviceParams) {
  if (!deviceParams) {
    // No parameters, so use a default.
    if (Util.isIOS()) {
      console.warn('Using fallback iOS device measurements.');
      return DEFAULT_IOS;
    } else {
      console.warn('Using fallback Android device measurements.');
      return DEFAULT_ANDROID;
    }
  }

  // Compute device screen dimensions based on deviceParams.
  var METERS_PER_INCH = 0.0254;
  var metersPerPixelX = METERS_PER_INCH / deviceParams.xdpi;
  var metersPerPixelY = METERS_PER_INCH / deviceParams.ydpi;
  var width = Util.getScreenWidth();
  var height = Util.getScreenHeight();
  return new Device({
    widthMeters: metersPerPixelX * width,
    heightMeters: metersPerPixelY * height,
    bevelMeters: deviceParams.bevelMm * 0.001,
  });
};

/**
 * Calculates field of view for the left eye.
 */
DeviceInfo.prototype.getDistortedFieldOfViewLeftEye = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Device.height and device.width for device in portrait mode, so transpose.
  var eyeToScreenDistance = viewer.screenLensDistance;

  var outerDist = (device.widthMeters - viewer.interLensDistance) / 2;
  var innerDist = viewer.interLensDistance / 2;
  var bottomDist = viewer.baselineLensDistance - device.bevelMeters;
  var topDist = device.heightMeters - bottomDist;

  var outerAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(outerDist / eyeToScreenDistance));
  var innerAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(innerDist / eyeToScreenDistance));
  var bottomAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(bottomDist / eyeToScreenDistance));
  var topAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(topDist / eyeToScreenDistance));

  return {
    leftDegrees: Math.min(outerAngle, viewer.fov),
    rightDegrees: Math.min(innerAngle, viewer.fov),
    downDegrees: Math.min(bottomAngle, viewer.fov),
    upDegrees: Math.min(topAngle, viewer.fov)
  };
};

/**
 * Calculates the tan-angles from the maximum FOV for the left eye for the
 * current device and screen parameters.
 */
DeviceInfo.prototype.getLeftEyeVisibleTanAngles = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Tan-angles from the max FOV.
  var fovLeft = Math.tan(-MathUtil.degToRad * viewer.fov);
  var fovTop = Math.tan(MathUtil.degToRad * viewer.fov);
  var fovRight = Math.tan(MathUtil.degToRad * viewer.fov);
  var fovBottom = Math.tan(-MathUtil.degToRad * viewer.fov);
  // Viewport size.
  var halfWidth = device.widthMeters / 4;
  var halfHeight = device.heightMeters / 2;
  // Viewport center, measured from left lens position.
  var verticalLensOffset = (viewer.baselineLensDistance - device.bevelMeters - halfHeight);
  var centerX = viewer.interLensDistance / 2 - halfWidth;
  var centerY = -verticalLensOffset;
  var centerZ = viewer.screenLensDistance;
  // Tan-angles of the viewport edges, as seen through the lens.
  var screenLeft = distortion.distort((centerX - halfWidth) / centerZ);
  var screenTop = distortion.distort((centerY + halfHeight) / centerZ);
  var screenRight = distortion.distort((centerX + halfWidth) / centerZ);
  var screenBottom = distortion.distort((centerY - halfHeight) / centerZ);
  // Compare the two sets of tan-angles and take the value closer to zero on each side.
  var result = new Float32Array(4);
  result[0] = Math.max(fovLeft, screenLeft);
  result[1] = Math.min(fovTop, screenTop);
  result[2] = Math.min(fovRight, screenRight);
  result[3] = Math.max(fovBottom, screenBottom);
  return result;
};

/**
 * Calculates the tan-angles from the maximum FOV for the left eye for the
 * current device and screen parameters, assuming no lenses.
 */
DeviceInfo.prototype.getLeftEyeNoLensTanAngles = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  var result = new Float32Array(4);
  // Tan-angles from the max FOV.
  var fovLeft = distortion.distortInverse(Math.tan(-MathUtil.degToRad * viewer.fov));
  var fovTop = distortion.distortInverse(Math.tan(MathUtil.degToRad * viewer.fov));
  var fovRight = distortion.distortInverse(Math.tan(MathUtil.degToRad * viewer.fov));
  var fovBottom = distortion.distortInverse(Math.tan(-MathUtil.degToRad * viewer.fov));
  // Viewport size.
  var halfWidth = device.widthMeters / 4;
  var halfHeight = device.heightMeters / 2;
  // Viewport center, measured from left lens position.
  var verticalLensOffset = (viewer.baselineLensDistance - device.bevelMeters - halfHeight);
  var centerX = viewer.interLensDistance / 2 - halfWidth;
  var centerY = -verticalLensOffset;
  var centerZ = viewer.screenLensDistance;
  // Tan-angles of the viewport edges, as seen through the lens.
  var screenLeft = (centerX - halfWidth) / centerZ;
  var screenTop = (centerY + halfHeight) / centerZ;
  var screenRight = (centerX + halfWidth) / centerZ;
  var screenBottom = (centerY - halfHeight) / centerZ;
  // Compare the two sets of tan-angles and take the value closer to zero on each side.
  result[0] = Math.max(fovLeft, screenLeft);
  result[1] = Math.min(fovTop, screenTop);
  result[2] = Math.min(fovRight, screenRight);
  result[3] = Math.max(fovBottom, screenBottom);
  return result;
};

/**
 * Calculates the screen rectangle visible from the left eye for the
 * current device and screen parameters.
 */
DeviceInfo.prototype.getLeftEyeVisibleScreenRect = function(undistortedFrustum) {
  var viewer = this.viewer;
  var device = this.device;

  var dist = viewer.screenLensDistance;
  var eyeX = (device.widthMeters - viewer.interLensDistance) / 2;
  var eyeY = viewer.baselineLensDistance - device.bevelMeters;
  var left = (undistortedFrustum[0] * dist + eyeX) / device.widthMeters;
  var top = (undistortedFrustum[1] * dist + eyeY) / device.heightMeters;
  var right = (undistortedFrustum[2] * dist + eyeX) / device.widthMeters;
  var bottom = (undistortedFrustum[3] * dist + eyeY) / device.heightMeters;
  return {
    x: left,
    y: bottom,
    width: right - left,
    height: top - bottom
  };
};

DeviceInfo.prototype.getFieldOfViewLeftEye = function(opt_isUndistorted) {
  return opt_isUndistorted ? this.getUndistortedFieldOfViewLeftEye() :
      this.getDistortedFieldOfViewLeftEye();
};

DeviceInfo.prototype.getFieldOfViewRightEye = function(opt_isUndistorted) {
  var fov = this.getFieldOfViewLeftEye(opt_isUndistorted);
  return {
    leftDegrees: fov.rightDegrees,
    rightDegrees: fov.leftDegrees,
    upDegrees: fov.upDegrees,
    downDegrees: fov.downDegrees
  };
};

/**
 * Calculates undistorted field of view for the left eye.
 */
DeviceInfo.prototype.getUndistortedFieldOfViewLeftEye = function() {
  var p = this.getUndistortedParams_();

  return {
    leftDegrees: MathUtil.radToDeg * Math.atan(p.outerDist),
    rightDegrees: MathUtil.radToDeg * Math.atan(p.innerDist),
    downDegrees: MathUtil.radToDeg * Math.atan(p.bottomDist),
    upDegrees: MathUtil.radToDeg * Math.atan(p.topDist)
  };
};

DeviceInfo.prototype.getUndistortedViewportLeftEye = function() {
  var p = this.getUndistortedParams_();
  var viewer = this.viewer;
  var device = this.device;

  // Distances stored in local variables are in tan-angle units unless otherwise
  // noted.
  var eyeToScreenDistance = viewer.screenLensDistance;
  var screenWidth = device.widthMeters / eyeToScreenDistance;
  var screenHeight = device.heightMeters / eyeToScreenDistance;
  var xPxPerTanAngle = device.width / screenWidth;
  var yPxPerTanAngle = device.height / screenHeight;

  var x = Math.round((p.eyePosX - p.outerDist) * xPxPerTanAngle);
  var y = Math.round((p.eyePosY - p.bottomDist) * yPxPerTanAngle);
  return {
    x: x,
    y: y,
    width: Math.round((p.eyePosX + p.innerDist) * xPxPerTanAngle) - x,
    height: Math.round((p.eyePosY + p.topDist) * yPxPerTanAngle) - y
  };
};

DeviceInfo.prototype.getUndistortedParams_ = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Most of these variables in tan-angle units.
  var eyeToScreenDistance = viewer.screenLensDistance;
  var halfLensDistance = viewer.interLensDistance / 2 / eyeToScreenDistance;
  var screenWidth = device.widthMeters / eyeToScreenDistance;
  var screenHeight = device.heightMeters / eyeToScreenDistance;

  var eyePosX = screenWidth / 2 - halfLensDistance;
  var eyePosY = (viewer.baselineLensDistance - device.bevelMeters) / eyeToScreenDistance;

  var maxFov = viewer.fov;
  var viewerMax = distortion.distortInverse(Math.tan(MathUtil.degToRad * maxFov));
  var outerDist = Math.min(eyePosX, viewerMax);
  var innerDist = Math.min(halfLensDistance, viewerMax);
  var bottomDist = Math.min(eyePosY, viewerMax);
  var topDist = Math.min(screenHeight - eyePosY, viewerMax);

  return {
    outerDist: outerDist,
    innerDist: innerDist,
    topDist: topDist,
    bottomDist: bottomDist,
    eyePosX: eyePosX,
    eyePosY: eyePosY
  };
};


function CardboardViewer(params) {
  // A machine readable ID.
  this.id = params.id;
  // A human readable label.
  this.label = params.label;

  // Field of view in degrees (per side).
  this.fov = params.fov;

  // Distance between lens centers in meters.
  this.interLensDistance = params.interLensDistance;
  // Distance between viewer baseline and lens center in meters.
  this.baselineLensDistance = params.baselineLensDistance;
  // Screen-to-lens distance in meters.
  this.screenLensDistance = params.screenLensDistance;

  // Distortion coefficients.
  this.distortionCoefficients = params.distortionCoefficients;
  // Inverse distortion coefficients.
  // TODO: Calculate these from distortionCoefficients in the future.
  this.inverseCoefficients = params.inverseCoefficients;
}

// Export viewer information.
DeviceInfo.Viewers = Viewers;
module.exports = DeviceInfo;

},{"./distortion/distortion.js":10,"./math-util.js":14,"./util.js":22}],9:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VRDisplay = _dereq_('./base.js').VRDisplay;
var HMDVRDevice = _dereq_('./base.js').HMDVRDevice;
var PositionSensorVRDevice = _dereq_('./base.js').PositionSensorVRDevice;

/**
 * Wraps a VRDisplay and exposes it as a HMDVRDevice
 */
function VRDisplayHMDDevice(display) {
  this.display = display;

  this.hardwareUnitId = display.displayId;
  this.deviceId = 'webvr-polyfill:HMD:' + display.displayId;
  this.deviceName = display.displayName + ' (HMD)';
}
VRDisplayHMDDevice.prototype = new HMDVRDevice();

VRDisplayHMDDevice.prototype.getEyeParameters = function(whichEye) {
  var eyeParameters = this.display.getEyeParameters(whichEye);

  return {
    currentFieldOfView: eyeParameters.fieldOfView,
    maximumFieldOfView: eyeParameters.fieldOfView,
    minimumFieldOfView: eyeParameters.fieldOfView,
    recommendedFieldOfView: eyeParameters.fieldOfView,
    eyeTranslation: { x: eyeParameters.offset[0], y: eyeParameters.offset[1], z: eyeParameters.offset[2] },
    renderRect: {
      x: (whichEye == 'right') ? eyeParameters.renderWidth : 0,
      y: 0,
      width: eyeParameters.renderWidth,
      height: eyeParameters.renderHeight
    }
  };
};

VRDisplayHMDDevice.prototype.setFieldOfView =
    function(opt_fovLeft, opt_fovRight, opt_zNear, opt_zFar) {
  // Not supported. getEyeParameters reports that the min, max, and recommended
  // FoV is all the same, so no adjustment can be made.
};

// TODO: Need to hook requestFullscreen to see if a wrapped VRDisplay was passed
// in as an option. If so we should prevent the default fullscreen behavior and
// call VRDisplay.requestPresent instead.

/**
 * Wraps a VRDisplay and exposes it as a PositionSensorVRDevice
 */
function VRDisplayPositionSensorDevice(display) {
  this.display = display;

  this.hardwareUnitId = display.displayId;
  this.deviceId = 'webvr-polyfill:PositionSensor: ' + display.displayId;
  this.deviceName = display.displayName + ' (PositionSensor)';
}
VRDisplayPositionSensorDevice.prototype = new PositionSensorVRDevice();

VRDisplayPositionSensorDevice.prototype.getState = function() {
  var pose = this.display.getPose();
  return {
    position: pose.position ? { x: pose.position[0], y: pose.position[1], z: pose.position[2] } : null,
    orientation: pose.orientation ? { x: pose.orientation[0], y: pose.orientation[1], z: pose.orientation[2], w: pose.orientation[3] } : null,
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

VRDisplayPositionSensorDevice.prototype.resetState = function() {
  return this.positionDevice.resetPose();
};


module.exports.VRDisplayHMDDevice = VRDisplayHMDDevice;
module.exports.VRDisplayPositionSensorDevice = VRDisplayPositionSensorDevice;


},{"./base.js":3}],10:[function(_dereq_,module,exports){
/**
 * TODO(smus): Implement coefficient inversion.
 */
function Distortion(coefficients) {
  this.coefficients = coefficients;
}

/**
 * Calculates the inverse distortion for a radius.
 * </p><p>
 * Allows to compute the original undistorted radius from a distorted one.
 * See also getApproximateInverseDistortion() for a faster but potentially
 * less accurate method.
 *
 * @param {Number} radius Distorted radius from the lens center in tan-angle units.
 * @return {Number} The undistorted radius in tan-angle units.
 */
Distortion.prototype.distortInverse = function(radius) {
  // Secant method.
  var r0 = 0;
  var r1 = 1;
  var dr0 = radius - this.distort(r0);
  while (Math.abs(r1 - r0) > 0.0001 /** 0.1mm */) {
    var dr1 = radius - this.distort(r1);
    var r2 = r1 - dr1 * ((r1 - r0) / (dr1 - dr0));
    r0 = r1;
    r1 = r2;
    dr0 = dr1;
  }
  return r1;
};

/**
 * Distorts a radius by its distortion factor from the center of the lenses.
 *
 * @param {Number} radius Radius from the lens center in tan-angle units.
 * @return {Number} The distorted radius in tan-angle units.
 */
Distortion.prototype.distort = function(radius) {
  var r2 = radius * radius;
  var ret = 0;
  for (var i = 0; i < this.coefficients.length; i++) {
    ret = r2 * (ret + this.coefficients[i]);
  }
  return (ret + 1) * radius;
};

// Functions below roughly ported from
// https://github.com/googlesamples/cardboard-unity/blob/master/Cardboard/Scripts/CardboardProfile.cs#L412

// Solves a small linear equation via destructive gaussian
// elimination and back substitution.  This isn't generic numeric
// code, it's just a quick hack to work with the generally
// well-behaved symmetric matrices for least-squares fitting.
// Not intended for reuse.
//
// @param a Input positive definite symmetrical matrix. Destroyed
//     during calculation.
// @param y Input right-hand-side values. Destroyed during calculation.
// @return Resulting x value vector.
//
Distortion.prototype.solveLinear_ = function(a, y) {
  var n = a.length;

  // Gaussian elimination (no row exchange) to triangular matrix.
  // The input matrix is a A^T A product which should be a positive
  // definite symmetrical matrix, and if I remember my linear
  // algebra right this implies that the pivots will be nonzero and
  // calculations sufficiently accurate without needing row
  // exchange.
  for (var j = 0; j < n - 1; ++j) {
    for (var k = j + 1; k < n; ++k) {
      var p = a[j][k] / a[j][j];
      for (var i = j + 1; i < n; ++i) {
        a[i][k] -= p * a[i][j];
      }
      y[k] -= p * y[j];
    }
  }
  // From this point on, only the matrix elements a[j][i] with i>=j are
  // valid. The elimination doesn't fill in eliminated 0 values.

  var x = new Array(n);

  // Back substitution.
  for (var j = n - 1; j >= 0; --j) {
    var v = y[j];
    for (var i = j + 1; i < n; ++i) {
      v -= a[i][j] * x[i];
    }
    x[j] = v / a[j][j];
  }

  return x;
};

// Solves a least-squares matrix equation.  Given the equation A * x = y, calculate the
// least-square fit x = inverse(A * transpose(A)) * transpose(A) * y.  The way this works
// is that, while A is typically not a square matrix (and hence not invertible), A * transpose(A)
// is always square.  That is:
//   A * x = y
//   transpose(A) * (A * x) = transpose(A) * y   <- multiply both sides by transpose(A)
//   (transpose(A) * A) * x = transpose(A) * y   <- associativity
//   x = inverse(transpose(A) * A) * transpose(A) * y  <- solve for x
// Matrix A's row count (first index) must match y's value count.  A's column count (second index)
// determines the length of the result vector x.
Distortion.prototype.solveLeastSquares_ = function(matA, vecY) {
  var i, j, k, sum;
  var numSamples = matA.length;
  var numCoefficients = matA[0].length;
  if (numSamples != vecY.Length) {
    throw new Error("Matrix / vector dimension mismatch");
  }

  // Calculate transpose(A) * A
  var matATA = new Array(numCoefficients);
  for (k = 0; k < numCoefficients; ++k) {
    matATA[k] = new Array(numCoefficients);
    for (j = 0; j < numCoefficients; ++j) {
      sum = 0;
      for (i = 0; i < numSamples; ++i) {
        sum += matA[j][i] * matA[k][i];
      }
      matATA[k][j] = sum;
    }
  }

  // Calculate transpose(A) * y
  var vecATY = new Array(numCoefficients);
  for (j = 0; j < numCoefficients; ++j) {
    sum = 0;
    for (i = 0; i < numSamples; ++i) {
      sum += matA[j][i] * vecY[i];
    }
    vecATY[j] = sum;
  }

  // Now solve (A * transpose(A)) * x = transpose(A) * y.
  return this.solveLinear_(matATA, vecATY);
};

/// Calculates an approximate inverse to the given radial distortion parameters.
Distortion.prototype.approximateInverse = function(maxRadius, numSamples) {
  maxRadius = maxRadius || 1;
  numSamples = numSamples || 100;
  var numCoefficients = 6;
  var i, j;

  // R + K1*R^3 + K2*R^5 = r, with R = rp = distort(r)
  // Repeating for numSamples:
  //   [ R0^3, R0^5 ] * [ K1 ] = [ r0 - R0 ]
  //   [ R1^3, R1^5 ]   [ K2 ]   [ r1 - R1 ]
  //   [ R2^3, R2^5 ]            [ r2 - R2 ]
  //   [ etc... ]                [ etc... ]
  // That is:
  //   matA * [K1, K2] = y
  // Solve:
  //   [K1, K2] = inverse(transpose(matA) * matA) * transpose(matA) * y
  var matA = new Array(numCoefficients);
  for (j = 0; j < numCoefficients; ++j) {
    matA[j] = new Array(numSamples);
  }
  var vecY = new Array(numSamples);

  for (i = 0; i < numSamples; ++i) {
    var r = maxRadius * (i + 1) / numSamples;
    var rp = this.distort(r);
    var v = rp;
    for (j = 0; j < numCoefficients; ++j) {
      v *= rp * rp;
      matA[j][i] = v;
    }
    vecY[i] = r - rp;
  }

  var inverseCoefficients = this.solveLeastSquares_(matA, vecY);

  return new Distortion(inverseCoefficients);
};

module.exports = Distortion;

},{}],11:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DPDB cache.
 */
var DPDB_CACHE = {
  "format": 1,
  "last_updated": "2016-01-20T00:18:35Z",
  "devices": [

  {
    "type": "android",
    "rules": [
      { "mdmh": "asus/*/Nexus 7/*" },
      { "ua": "Nexus 7" }
    ],
    "dpi": [ 320.8, 323.0 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "asus/*/ASUS_Z00AD/*" },
      { "ua": "ASUS_Z00AD" }
    ],
    "dpi": [ 403.0, 404.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Google//Pixel XL/" },
      { "ua": "Pixel XL" }
    ],
    "dpi": [537.9, 533],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Google//Pixel/" },
      { "ua": "Pixel" }
    ],
    "dpi": [432.6, 436.7],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC6435LVW/*" },
      { "ua": "HTC6435LVW" }
    ],
    "dpi": [ 449.7, 443.3 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One XL/*" },
      { "ua": "HTC One XL" }
    ],
    "dpi": [ 315.3, 314.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "htc/*/Nexus 9/*" },
      { "ua": "Nexus 9" }
    ],
    "dpi": 289.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One M9/*" },
      { "ua": "HTC One M9" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One_M8/*" },
      { "ua": "HTC One_M8" }
    ],
    "dpi": [ 449.7, 447.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One/*" },
      { "ua": "HTC One" }
    ],
    "dpi": 472.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Huawei/*/Nexus 6P/*" },
      { "ua": "Nexus 6P" }
    ],
    "dpi": [ 515.1, 518.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 5X/*" },
      { "ua": "Nexus 5X" }
    ],
    "dpi": [ 422.0, 419.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGMS345/*" },
      { "ua": "LGMS345" }
    ],
    "dpi": [ 221.7, 219.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-D800/*" },
      { "ua": "LG-D800" }
    ],
    "dpi": [ 422.0, 424.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-D850/*" },
      { "ua": "LG-D850" }
    ],
    "dpi": [ 537.9, 541.9 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/VS985 4G/*" },
      { "ua": "VS985 4G" }
    ],
    "dpi": [ 537.9, 535.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 5/*" },
      { "ua": "Nexus 5 " }
    ],
    "dpi": [ 442.4, 444.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 4/*" },
      { "ua": "Nexus 4" }
    ],
    "dpi": [ 319.8, 318.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-P769/*" },
      { "ua": "LG-P769" }
    ],
    "dpi": [ 240.6, 247.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGMS323/*" },
      { "ua": "LGMS323" }
    ],
    "dpi": [ 206.6, 204.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGLS996/*" },
      { "ua": "LGLS996" }
    ],
    "dpi": [ 403.4, 401.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/4560MMX/*" },
      { "ua": "4560MMX" }
    ],
    "dpi": [ 240.0, 219.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/A250/*" },
      { "ua": "Micromax A250" }
    ],
    "dpi": [ 480.0, 446.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/Micromax AQ4501/*" },
      { "ua": "Micromax AQ4501" }
    ],
    "dpi": 240.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/DROID RAZR/*" },
      { "ua": "DROID RAZR" }
    ],
    "dpi": [ 368.1, 256.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT830C/*" },
      { "ua": "XT830C" }
    ],
    "dpi": [ 254.0, 255.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1021/*" },
      { "ua": "XT1021" }
    ],
    "dpi": [ 254.0, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1023/*" },
      { "ua": "XT1023" }
    ],
    "dpi": [ 254.0, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1028/*" },
      { "ua": "XT1028" }
    ],
    "dpi": [ 326.6, 327.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1034/*" },
      { "ua": "XT1034" }
    ],
    "dpi": [ 326.6, 328.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1053/*" },
      { "ua": "XT1053" }
    ],
    "dpi": [ 315.3, 316.1 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1562/*" },
      { "ua": "XT1562" }
    ],
    "dpi": [ 403.4, 402.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/Nexus 6/*" },
      { "ua": "Nexus 6 " }
    ],
    "dpi": [ 494.3, 489.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1063/*" },
      { "ua": "XT1063" }
    ],
    "dpi": [ 295.0, 296.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1064/*" },
      { "ua": "XT1064" }
    ],
    "dpi": [ 295.0, 295.6 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1092/*" },
      { "ua": "XT1092" }
    ],
    "dpi": [ 422.0, 424.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1095/*" },
      { "ua": "XT1095" }
    ],
    "dpi": [ 422.0, 423.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/G4/*" },
      { "ua": "Moto G (4)" }
    ],
    "dpi": 401.0,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/A0001/*" },
      { "ua": "A0001" }
    ],
    "dpi": [ 403.4, 401.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/ONE E1005/*" },
      { "ua": "ONE E1005" }
    ],
    "dpi": [ 442.4, 441.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/ONE A2005/*" },
      { "ua": "ONE A2005" }
    ],
    "dpi": [ 391.9, 405.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OPPO/*/X909/*" },
      { "ua": "X909" }
    ],
    "dpi": [ 442.4, 444.1 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9082/*" },
      { "ua": "GT-I9082" }
    ],
    "dpi": [ 184.7, 185.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G360P/*" },
      { "ua": "SM-G360P" }
    ],
    "dpi": [ 196.7, 205.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/Nexus S/*" },
      { "ua": "Nexus S" }
    ],
    "dpi": [ 234.5, 229.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300/*" },
      { "ua": "GT-I9300" }
    ],
    "dpi": [ 304.8, 303.9 ],
    "bw": 5,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-T230NU/*" },
      { "ua": "SM-T230NU" }
    ],
    "dpi": 216.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SGH-T399/*" },
      { "ua": "SGH-T399" }
    ],
    "dpi": [ 217.7, 231.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N9005/*" },
      { "ua": "SM-N9005" }
    ],
    "dpi": [ 386.4, 387.0 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SAMSUNG-SM-N900A/*" },
      { "ua": "SAMSUNG-SM-N900A" }
    ],
    "dpi": [ 386.4, 387.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9500/*" },
      { "ua": "GT-I9500" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9505/*" },
      { "ua": "GT-I9505" }
    ],
    "dpi": 439.4,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G900F/*" },
      { "ua": "SM-G900F" }
    ],
    "dpi": [ 415.6, 431.6 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G900M/*" },
      { "ua": "SM-G900M" }
    ],
    "dpi": [ 415.6, 431.6 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G800F/*" },
      { "ua": "SM-G800F" }
    ],
    "dpi": 326.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G906S/*" },
      { "ua": "SM-G906S" }
    ],
    "dpi": [ 562.7, 572.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300/*" },
      { "ua": "GT-I9300" }
    ],
    "dpi": [ 306.7, 304.8 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-T535/*" },
      { "ua": "SM-T535" }
    ],
    "dpi": [ 142.6, 136.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N920C/*" },
      { "ua": "SM-N920C" }
    ],
    "dpi": [ 515.1, 518.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N920W8/*" },
      { "ua": "SM-N920W8" }
    ],
    "dpi": [ 515.1, 518.4 ],
    "bw": 3,
    "ac": 1000
  },
    
  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300I/*" },
      { "ua": "GT-I9300I" }
    ],
    "dpi": [ 304.8, 305.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9195/*" },
      { "ua": "GT-I9195" }
    ],
    "dpi": [ 249.4, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SPH-L520/*" },
      { "ua": "SPH-L520" }
    ],
    "dpi": [ 249.4, 255.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SAMSUNG-SGH-I717/*" },
      { "ua": "SAMSUNG-SGH-I717" }
    ],
    "dpi": 285.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SPH-D710/*" },
      { "ua": "SPH-D710" }
    ],
    "dpi": [ 217.7, 204.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-N7100/*" },
      { "ua": "GT-N7100" }
    ],
    "dpi": 265.1,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SCH-I605/*" },
      { "ua": "SCH-I605" }
    ],
    "dpi": 265.1,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/Galaxy Nexus/*" },
      { "ua": "Galaxy Nexus" }
    ],
    "dpi": [ 315.3, 314.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N910H/*" },
      { "ua": "SM-N910H" }
    ],
    "dpi": [ 515.1, 518.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N910C/*" },
      { "ua": "SM-N910C" }
    ],
    "dpi": [ 515.2, 520.2 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G130M/*" },
      { "ua": "SM-G130M" }
    ],
    "dpi": [ 165.9, 164.8 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G928I/*" },
      { "ua": "SM-G928I" }
    ],
    "dpi": [ 515.1, 518.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G920F/*" },
      { "ua": "SM-G920F" }
    ],
    "dpi": 580.6,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G920P/*" },
      { "ua": "SM-G920P" }
    ],
    "dpi": [ 522.5, 577.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G925F/*" },
      { "ua": "SM-G925F" }
    ],
    "dpi": 580.6,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G925V/*" },
      { "ua": "SM-G925V" }
    ],
    "dpi": [ 522.5, 576.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G935F/*" },
      { "ua": "SM-G935F" }
    ],
    "dpi": 534,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/C6903/*" },
      { "ua": "C6903" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/D6653/*" },
      { "ua": "D6653" }
    ],
    "dpi": [ 428.6, 427.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/E6653/*" },
      { "ua": "E6653" }
    ],
    "dpi": [ 428.6, 425.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/E6853/*" },
      { "ua": "E6853" }
    ],
    "dpi": [ 403.4, 401.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/SGP321/*" },
      { "ua": "SGP321" }
    ],
    "dpi": [ 224.7, 224.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "TCT/*/ALCATEL ONE TOUCH Fierce/*" },
      { "ua": "ALCATEL ONE TOUCH Fierce" }
    ],
    "dpi": [ 240.0, 247.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "THL/*/thl 5000/*" },
      { "ua": "thl 5000" }
    ],
    "dpi": [ 480.0, 443.3 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "ZTE/*/ZTE Blade L2/*" },
      { "ua": "ZTE Blade L2" }
    ],
    "dpi": 240.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 960 ] } ],
    "dpi": [ 325.1, 328.4 ],
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 1136 ] } ],
    "dpi": [ 317.1, 320.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 750, 1334 ] } ],
    "dpi": 326.4,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 1242, 2208 ] } ],
    "dpi": [ 453.6, 458.4 ],
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 1125, 2001 ] } ],
    "dpi": [ 410.9, 415.4 ],
    "bw": 4,
    "ac": 1000
  }
]};

module.exports = DPDB_CACHE;

},{}],12:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Offline cache of the DPDB, to be used until we load the online one (and
// as a fallback in case we can't load the online one).
var DPDB_CACHE = _dereq_('./dpdb-cache.js');
var Util = _dereq_('../util.js');

// Online DPDB URL.
var ONLINE_DPDB_URL = 'https://storage.googleapis.com/cardboard-dpdb/dpdb.json';

/**
 * Calculates device parameters based on the DPDB (Device Parameter Database).
 * Initially, uses the cached DPDB values.
 *
 * If fetchOnline == true, then this object tries to fetch the online version
 * of the DPDB and updates the device info if a better match is found.
 * Calls the onDeviceParamsUpdated callback when there is an update to the
 * device information.
 */
function Dpdb(fetchOnline, onDeviceParamsUpdated) {
  // Start with the offline DPDB cache while we are loading the real one.
  this.dpdb = DPDB_CACHE;

  // Calculate device params based on the offline version of the DPDB.
  this.recalculateDeviceParams_();

  // XHR to fetch online DPDB file, if requested.
  if (fetchOnline) {
    // Set the callback.
    this.onDeviceParamsUpdated = onDeviceParamsUpdated;

    var xhr = new XMLHttpRequest();
    var obj = this;
    xhr.open('GET', ONLINE_DPDB_URL, true);
    xhr.addEventListener('load', function() {
      obj.loading = false;
      if (xhr.status >= 200 && xhr.status <= 299) {
        // Success.
        obj.dpdb = JSON.parse(xhr.response);
        obj.recalculateDeviceParams_();
      } else {
        // Error loading the DPDB.
        console.error('Error loading online DPDB!');
      }
    });
    xhr.send();
  }
}

// Returns the current device parameters.
Dpdb.prototype.getDeviceParams = function() {
  return this.deviceParams;
};

// Recalculates this device's parameters based on the DPDB.
Dpdb.prototype.recalculateDeviceParams_ = function() {
  var newDeviceParams = this.calcDeviceParams_();
  if (newDeviceParams) {
    this.deviceParams = newDeviceParams;
    // Invoke callback, if it is set.
    if (this.onDeviceParamsUpdated) {
      this.onDeviceParamsUpdated(this.deviceParams);
    }
  } else {
    console.error('Failed to recalculate device parameters.');
  }
};

// Returns a DeviceParams object that represents the best guess as to this
// device's parameters. Can return null if the device does not match any
// known devices.
Dpdb.prototype.calcDeviceParams_ = function() {
  var db = this.dpdb; // shorthand
  if (!db) {
    console.error('DPDB not available.');
    return null;
  }
  if (db.format != 1) {
    console.error('DPDB has unexpected format version.');
    return null;
  }
  if (!db.devices || !db.devices.length) {
    console.error('DPDB does not have a devices section.');
    return null;
  }

  // Get the actual user agent and screen dimensions in pixels.
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  var width = Util.getScreenWidth();
  var height = Util.getScreenHeight();

  if (!db.devices) {
    console.error('DPDB has no devices section.');
    return null;
  }

  for (var i = 0; i < db.devices.length; i++) {
    var device = db.devices[i];
    if (!device.rules) {
      console.warn('Device[' + i + '] has no rules section.');
      continue;
    }

    if (device.type != 'ios' && device.type != 'android') {
      console.warn('Device[' + i + '] has invalid type.');
      continue;
    }

    // See if this device is of the appropriate type.
    if (Util.isIOS() != (device.type == 'ios')) continue;

    // See if this device matches any of the rules:
    var matched = false;
    for (var j = 0; j < device.rules.length; j++) {
      var rule = device.rules[j];
      if (this.matchRule_(rule, userAgent, width, height)) {
        matched = true;
        break;
      }
    }
    if (!matched) continue;

    // device.dpi might be an array of [ xdpi, ydpi] or just a scalar.
    var xdpi = device.dpi[0] || device.dpi;
    var ydpi = device.dpi[1] || device.dpi;

    return new DeviceParams({ xdpi: xdpi, ydpi: ydpi, bevelMm: device.bw });
  }

  console.warn('No DPDB device match.');
  return null;
};

Dpdb.prototype.matchRule_ = function(rule, ua, screenWidth, screenHeight) {
  // We can only match 'ua' and 'res' rules, not other types like 'mdmh'
  // (which are meant for native platforms).
  if (!rule.ua && !rule.res) return false;

  // If our user agent string doesn't contain the indicated user agent string,
  // the match fails.
  if (rule.ua && ua.indexOf(rule.ua) < 0) return false;

  // If the rule specifies screen dimensions that don't correspond to ours,
  // the match fails.
  if (rule.res) {
    if (!rule.res[0] || !rule.res[1]) return false;
    var resX = rule.res[0];
    var resY = rule.res[1];
    // Compare min and max so as to make the order not matter, i.e., it should
    // be true that 640x480 == 480x640.
    if (Math.min(screenWidth, screenHeight) != Math.min(resX, resY) ||
        (Math.max(screenWidth, screenHeight) != Math.max(resX, resY))) {
      return false;
    }
  }

  return true;
}

function DeviceParams(params) {
  this.xdpi = params.xdpi;
  this.ydpi = params.ydpi;
  this.bevelMm = params.bevelMm;
}

module.exports = Dpdb;

},{"../util.js":22,"./dpdb-cache.js":11}],13:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Util = _dereq_('./util.js');
var WebVRPolyfill = _dereq_('./webvr-polyfill.js').WebVRPolyfill;

// Initialize a WebVRConfig just in case.
window.WebVRConfig = Util.extend({
  // Forces availability of VR mode, even for non-mobile devices.
  FORCE_ENABLE_VR: false,

  // Complementary filter coefficient. 0 for accelerometer, 1 for gyro.
  K_FILTER: 0.98,

  // How far into the future to predict during fast motion (in seconds).
  PREDICTION_TIME_S: 0.040,

  // Flag to enable touch panner. In case you have your own touch controls.
  TOUCH_PANNER_DISABLED: true,

  // Flag to disabled the UI in VR Mode.
  CARDBOARD_UI_DISABLED: false, // Default: false

  // Flag to disable the instructions to rotate your device.
  ROTATE_INSTRUCTIONS_DISABLED: false, // Default: false.

  // Enable yaw panning only, disabling roll and pitch. This can be useful
  // for panoramas with nothing interesting above or below.
  YAW_ONLY: false,

  // To disable keyboard and mouse controls, if you want to use your own
  // implementation.
  MOUSE_KEYBOARD_CONTROLS_DISABLED: false,

  // Prevent the polyfill from initializing immediately. Requires the app
  // to call InitializeWebVRPolyfill() before it can be used.
  DEFER_INITIALIZATION: false,

  // Enable the deprecated version of the API (navigator.getVRDevices).
  ENABLE_DEPRECATED_API: false,

  // Scales the recommended buffer size reported by WebVR, which can improve
  // performance.
  // UPDATE(2016-05-03): Setting this to 0.5 by default since 1.0 does not
  // perform well on many mobile devices.
  BUFFER_SCALE: 0.5,

  // Allow VRDisplay.submitFrame to change gl bindings, which is more
  // efficient if the application code will re-bind its resources on the
  // next frame anyway. This has been seen to cause rendering glitches with
  // THREE.js.
  // Dirty bindings include: gl.FRAMEBUFFER_BINDING, gl.CURRENT_PROGRAM,
  // gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING,
  // and gl.TEXTURE_BINDING_2D for texture unit 0.
  DIRTY_SUBMIT_FRAME_BINDINGS: false,

  // When set to true, this will cause a polyfilled VRDisplay to always be
  // appended to the list returned by navigator.getVRDisplays(), even if that
  // list includes a native VRDisplay.
  ALWAYS_APPEND_POLYFILL_DISPLAY: false
}, window.WebVRConfig);

if (!window.WebVRConfig.DEFER_INITIALIZATION) {
  new WebVRPolyfill();
} else {
  window.InitializeWebVRPolyfill = function() {
    new WebVRPolyfill();
  }
}

},{"./util.js":22,"./webvr-polyfill.js":25}],14:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MathUtil = window.MathUtil || {};

MathUtil.degToRad = Math.PI / 180;
MathUtil.radToDeg = 180 / Math.PI;

// Some minimal math functionality borrowed from THREE.Math and stripped down
// for the purposes of this library.


MathUtil.Vector2 = function ( x, y ) {
  this.x = x || 0;
  this.y = y || 0;
};

MathUtil.Vector2.prototype = {
  constructor: MathUtil.Vector2,

  set: function ( x, y ) {
    this.x = x;
    this.y = y;

    return this;
  },

  copy: function ( v ) {
    this.x = v.x;
    this.y = v.y;

    return this;
  },

  subVectors: function ( a, b ) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;

    return this;
  },
};

MathUtil.Vector3 = function ( x, y, z ) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
};

MathUtil.Vector3.prototype = {
  constructor: MathUtil.Vector3,

  set: function ( x, y, z ) {
    this.x = x;
    this.y = y;
    this.z = z;

    return this;
  },

  copy: function ( v ) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;

    return this;
  },

  length: function () {
    return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
  },

  normalize: function () {
    var scalar = this.length();

    if ( scalar !== 0 ) {
      var invScalar = 1 / scalar;

      this.multiplyScalar(invScalar);
    } else {
      this.x = 0;
      this.y = 0;
      this.z = 0;
    }

    return this;
  },

  multiplyScalar: function ( scalar ) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
  },

  applyQuaternion: function ( q ) {
    var x = this.x;
    var y = this.y;
    var z = this.z;

    var qx = q.x;
    var qy = q.y;
    var qz = q.z;
    var qw = q.w;

    // calculate quat * vector
    var ix =  qw * x + qy * z - qz * y;
    var iy =  qw * y + qz * x - qx * z;
    var iz =  qw * z + qx * y - qy * x;
    var iw = - qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
    this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
    this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

    return this;
  },

  dot: function ( v ) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  },

  crossVectors: function ( a, b ) {
    var ax = a.x, ay = a.y, az = a.z;
    var bx = b.x, by = b.y, bz = b.z;

    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;

    return this;
  },
};

MathUtil.Quaternion = function ( x, y, z, w ) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = ( w !== undefined ) ? w : 1;
};

MathUtil.Quaternion.prototype = {
  constructor: MathUtil.Quaternion,

  set: function ( x, y, z, w ) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;

    return this;
  },

  copy: function ( quaternion ) {
    this.x = quaternion.x;
    this.y = quaternion.y;
    this.z = quaternion.z;
    this.w = quaternion.w;

    return this;
  },

  setFromEulerXYZ: function( x, y, z ) {
    var c1 = Math.cos( x / 2 );
    var c2 = Math.cos( y / 2 );
    var c3 = Math.cos( z / 2 );
    var s1 = Math.sin( x / 2 );
    var s2 = Math.sin( y / 2 );
    var s3 = Math.sin( z / 2 );

    this.x = s1 * c2 * c3 + c1 * s2 * s3;
    this.y = c1 * s2 * c3 - s1 * c2 * s3;
    this.z = c1 * c2 * s3 + s1 * s2 * c3;
    this.w = c1 * c2 * c3 - s1 * s2 * s3;

    return this;
  },

  setFromEulerYXZ: function( x, y, z ) {
    var c1 = Math.cos( x / 2 );
    var c2 = Math.cos( y / 2 );
    var c3 = Math.cos( z / 2 );
    var s1 = Math.sin( x / 2 );
    var s2 = Math.sin( y / 2 );
    var s3 = Math.sin( z / 2 );

    this.x = s1 * c2 * c3 + c1 * s2 * s3;
    this.y = c1 * s2 * c3 - s1 * c2 * s3;
    this.z = c1 * c2 * s3 - s1 * s2 * c3;
    this.w = c1 * c2 * c3 + s1 * s2 * s3;

    return this;
  },

  setFromAxisAngle: function ( axis, angle ) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
    // assumes axis is normalized

    var halfAngle = angle / 2, s = Math.sin( halfAngle );

    this.x = axis.x * s;
    this.y = axis.y * s;
    this.z = axis.z * s;
    this.w = Math.cos( halfAngle );

    return this;
  },

  multiply: function ( q ) {
    return this.multiplyQuaternions( this, q );
  },

  multiplyQuaternions: function ( a, b ) {
    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    var qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;
    var qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;

    this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    return this;
  },

  inverse: function () {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;

    this.normalize();

    return this;
  },

  normalize: function () {
    var l = Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

    if ( l === 0 ) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 1;
    } else {
      l = 1 / l;

      this.x = this.x * l;
      this.y = this.y * l;
      this.z = this.z * l;
      this.w = this.w * l;
    }

    return this;
  },

  slerp: function ( qb, t ) {
    if ( t === 0 ) return this;
    if ( t === 1 ) return this.copy( qb );

    var x = this.x, y = this.y, z = this.z, w = this.w;

    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;

    if ( cosHalfTheta < 0 ) {
      this.w = - qb.w;
      this.x = - qb.x;
      this.y = - qb.y;
      this.z = - qb.z;

      cosHalfTheta = - cosHalfTheta;
    } else {
      this.copy( qb );
    }

    if ( cosHalfTheta >= 1.0 ) {
      this.w = w;
      this.x = x;
      this.y = y;
      this.z = z;

      return this;
    }

    var halfTheta = Math.acos( cosHalfTheta );
    var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

    if ( Math.abs( sinHalfTheta ) < 0.001 ) {
      this.w = 0.5 * ( w + this.w );
      this.x = 0.5 * ( x + this.x );
      this.y = 0.5 * ( y + this.y );
      this.z = 0.5 * ( z + this.z );

      return this;
    }

    var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    this.w = ( w * ratioA + this.w * ratioB );
    this.x = ( x * ratioA + this.x * ratioB );
    this.y = ( y * ratioA + this.y * ratioB );
    this.z = ( z * ratioA + this.z * ratioB );

    return this;
  },

  setFromUnitVectors: function () {
    // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
    // assumes direction vectors vFrom and vTo are normalized

    var v1, r;
    var EPS = 0.000001;

    return function ( vFrom, vTo ) {
      if ( v1 === undefined ) v1 = new MathUtil.Vector3();

      r = vFrom.dot( vTo ) + 1;

      if ( r < EPS ) {
        r = 0;

        if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
          v1.set( - vFrom.y, vFrom.x, 0 );
        } else {
          v1.set( 0, - vFrom.z, vFrom.y );
        }
      } else {
        v1.crossVectors( vFrom, vTo );
      }

      this.x = v1.x;
      this.y = v1.y;
      this.z = v1.z;
      this.w = r;

      this.normalize();

      return this;
    }
  }(),
};

module.exports = MathUtil;

},{}],15:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var VRDisplay = _dereq_('./base.js').VRDisplay;
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

// How much to rotate per key stroke.
var KEY_SPEED = 0.15;
var KEY_ANIMATION_DURATION = 80;

// How much to rotate for mouse events.
var MOUSE_SPEED_X = 0.5;
var MOUSE_SPEED_Y = 0.3;

/**
 * VRDisplay based on mouse and keyboard input. Designed for desktops/laptops
 * where orientation events aren't supported. Cannot present.
 */
function MouseKeyboardVRDisplay() {
  this.displayName = 'Mouse and Keyboard VRDisplay (webvr-polyfill)';

  this.capabilities.hasOrientation = true;

  // Attach to mouse and keyboard events.
  window.addEventListener('keydown', this.onKeyDown_.bind(this));
  window.addEventListener('mousemove', this.onMouseMove_.bind(this));
  window.addEventListener('mousedown', this.onMouseDown_.bind(this));
  window.addEventListener('mouseup', this.onMouseUp_.bind(this));

  // "Private" members.
  this.phi_ = 0;
  this.theta_ = 0;

  // Variables for keyboard-based rotation animation.
  this.targetAngle_ = null;
  this.angleAnimation_ = null;

  // State variables for calculations.
  this.orientation_ = new MathUtil.Quaternion();

  // Variables for mouse-based rotation.
  this.rotateStart_ = new MathUtil.Vector2();
  this.rotateEnd_ = new MathUtil.Vector2();
  this.rotateDelta_ = new MathUtil.Vector2();
  this.isDragging_ = false;

  this.orientationOut_ = new Float32Array(4);
}
MouseKeyboardVRDisplay.prototype = new VRDisplay();

MouseKeyboardVRDisplay.prototype.getImmediatePose = function() {
  this.orientation_.setFromEulerYXZ(this.phi_, this.theta_, 0);

  this.orientationOut_[0] = this.orientation_.x;
  this.orientationOut_[1] = this.orientation_.y;
  this.orientationOut_[2] = this.orientation_.z;
  this.orientationOut_[3] = this.orientation_.w;

  return {
    position: null,
    orientation: this.orientationOut_,
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

MouseKeyboardVRDisplay.prototype.onKeyDown_ = function(e) {
  // Track WASD and arrow keys.
  if (e.keyCode == 38) { // Up key.
    this.animatePhi_(this.phi_ + KEY_SPEED);
  } else if (e.keyCode == 39) { // Right key.
    this.animateTheta_(this.theta_ - KEY_SPEED);
  } else if (e.keyCode == 40) { // Down key.
    this.animatePhi_(this.phi_ - KEY_SPEED);
  } else if (e.keyCode == 37) { // Left key.
    this.animateTheta_(this.theta_ + KEY_SPEED);
  }
};

MouseKeyboardVRDisplay.prototype.animateTheta_ = function(targetAngle) {
  this.animateKeyTransitions_('theta_', targetAngle);
};

MouseKeyboardVRDisplay.prototype.animatePhi_ = function(targetAngle) {
  // Prevent looking too far up or down.
  targetAngle = Util.clamp(targetAngle, -Math.PI/2, Math.PI/2);
  this.animateKeyTransitions_('phi_', targetAngle);
};

/**
 * Start an animation to transition an angle from one value to another.
 */
MouseKeyboardVRDisplay.prototype.animateKeyTransitions_ = function(angleName, targetAngle) {
  // If an animation is currently running, cancel it.
  if (this.angleAnimation_) {
    cancelAnimationFrame(this.angleAnimation_);
  }
  var startAngle = this[angleName];
  var startTime = new Date();
  // Set up an interval timer to perform the animation.
  this.angleAnimation_ = requestAnimationFrame(function animate() {
    // Once we're finished the animation, we're done.
    var elapsed = new Date() - startTime;
    if (elapsed >= KEY_ANIMATION_DURATION) {
      this[angleName] = targetAngle;
      cancelAnimationFrame(this.angleAnimation_);
      return;
    }
    // loop with requestAnimationFrame
    this.angleAnimation_ = requestAnimationFrame(animate.bind(this))
    // Linearly interpolate the angle some amount.
    var percent = elapsed / KEY_ANIMATION_DURATION;
    this[angleName] = startAngle + (targetAngle - startAngle) * percent;
  }.bind(this));
};

MouseKeyboardVRDisplay.prototype.onMouseDown_ = function(e) {
  this.rotateStart_.set(e.clientX, e.clientY);
  this.isDragging_ = true;
};

// Very similar to https://gist.github.com/mrflix/8351020
MouseKeyboardVRDisplay.prototype.onMouseMove_ = function(e) {
  if (!this.isDragging_ && !this.isPointerLocked_()) {
    return;
  }
  // Support pointer lock API.
  if (this.isPointerLocked_()) {
    var movementX = e.movementX || e.mozMovementX || 0;
    var movementY = e.movementY || e.mozMovementY || 0;
    this.rotateEnd_.set(this.rotateStart_.x - movementX, this.rotateStart_.y - movementY);
  } else {
    this.rotateEnd_.set(e.clientX, e.clientY);
  }
  // Calculate how much we moved in mouse space.
  this.rotateDelta_.subVectors(this.rotateEnd_, this.rotateStart_);
  this.rotateStart_.copy(this.rotateEnd_);

  // Keep track of the cumulative euler angles.
  this.phi_ += 2 * Math.PI * this.rotateDelta_.y / screen.height * MOUSE_SPEED_Y;
  this.theta_ += 2 * Math.PI * this.rotateDelta_.x / screen.width * MOUSE_SPEED_X;

  // Prevent looking too far up or down.
  this.phi_ = Util.clamp(this.phi_, -Math.PI/2, Math.PI/2);
};

MouseKeyboardVRDisplay.prototype.onMouseUp_ = function(e) {
  this.isDragging_ = false;
};

MouseKeyboardVRDisplay.prototype.isPointerLocked_ = function() {
  var el = document.pointerLockElement || document.mozPointerLockElement ||
      document.webkitPointerLockElement;
  return el !== undefined;
};

MouseKeyboardVRDisplay.prototype.resetPose = function() {
  this.phi_ = 0;
  this.theta_ = 0;
};

module.exports = MouseKeyboardVRDisplay;

},{"./base.js":3,"./math-util.js":14,"./util.js":22}],16:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');

function RotateInstructions() {
  this.loadIcon_();

  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.top = 0;
  s.right = 0;
  s.bottom = 0;
  s.left = 0;
  s.backgroundColor = 'gray';
  s.fontFamily = 'sans-serif';
  // Force this to be above the fullscreen canvas, which is at zIndex: 999999.
  s.zIndex = 1000000;

  var img = document.createElement('img');
  img.src = this.icon;
  var s = img.style;
  s.marginLeft = '25%';
  s.marginTop = '25%';
  s.width = '50%';
  overlay.appendChild(img);

  var text = document.createElement('div');
  var s = text.style;
  s.textAlign = 'center';
  s.fontSize = '16px';
  s.lineHeight = '24px';
  s.margin = '24px 25%';
  s.width = '50%';
  text.innerHTML = 'Place your phone into your Cardboard viewer.';
  overlay.appendChild(text);

  var snackbar = document.createElement('div');
  var s = snackbar.style;
  s.backgroundColor = '#CFD8DC';
  s.position = 'fixed';
  s.bottom = 0;
  s.width = '100%';
  s.height = '48px';
  s.padding = '14px 24px';
  s.boxSizing = 'border-box';
  s.color = '#656A6B';
  overlay.appendChild(snackbar);

  var snackbarText = document.createElement('div');
  snackbarText.style.float = 'left';
  snackbarText.innerHTML = 'No Cardboard viewer?';

  var snackbarButton = document.createElement('a');
  snackbarButton.href = 'https://www.google.com/get/cardboard/get-cardboard/';
  snackbarButton.innerHTML = 'get one';
  snackbarButton.target = '_blank';
  var s = snackbarButton.style;
  s.float = 'right';
  s.fontWeight = 600;
  s.textTransform = 'uppercase';
  s.borderLeft = '1px solid gray';
  s.paddingLeft = '24px';
  s.textDecoration = 'none';
  s.color = '#656A6B';

  snackbar.appendChild(snackbarText);
  snackbar.appendChild(snackbarButton);

  this.overlay = overlay;
  this.text = text;

  this.hide();
}

RotateInstructions.prototype.show = function(parent) {
  if (!parent && !this.overlay.parentElement) {
    document.body.appendChild(this.overlay);
  } else if (parent) {
    if (this.overlay.parentElement && this.overlay.parentElement != parent)
      this.overlay.parentElement.removeChild(this.overlay);

    parent.appendChild(this.overlay);
  }

  this.overlay.style.display = 'block';

  var img = this.overlay.querySelector('img');
  var s = img.style;

  if (Util.isLandscapeMode()) {
    s.width = '20%';
    s.marginLeft = '40%';
    s.marginTop = '3%';
  } else {
    s.width = '50%';
    s.marginLeft = '25%';
    s.marginTop = '25%';
  }
};

RotateInstructions.prototype.hide = function() {
  this.overlay.style.display = 'none';
};

RotateInstructions.prototype.showTemporarily = function(ms, parent) {
  this.show(parent);
  this.timer = setTimeout(this.hide.bind(this), ms);
};

RotateInstructions.prototype.disableShowTemporarily = function() {
  clearTimeout(this.timer);
};

RotateInstructions.prototype.update = function() {
  this.disableShowTemporarily();
  // In portrait VR mode, tell the user to rotate to landscape. Otherwise, hide
  // the instructions.
  if (!Util.isLandscapeMode() && Util.isMobile()) {
    this.show();
  } else {
    this.hide();
  }
};

RotateInstructions.prototype.loadIcon_ = function() {
  // Encoded asset_src/rotate-instructions.svg
  this.icon = Util.base64('image/svg+xml', '');
};

module.exports = RotateInstructions;

},{"./util.js":22}],17:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SensorSample = _dereq_('./sensor-sample.js');
var MathUtil = _dereq_('../math-util.js');
var Util = _dereq_('../util.js');

/**
 * An implementation of a simple complementary filter, which fuses gyroscope and
 * accelerometer data from the 'devicemotion' event.
 *
 * Accelerometer data is very noisy, but stable over the long term.
 * Gyroscope data is smooth, but tends to drift over the long term.
 *
 * This fusion is relatively simple:
 * 1. Get orientation estimates from accelerometer by applying a low-pass filter
 *    on that data.
 * 2. Get orientation estimates from gyroscope by integrating over time.
 * 3. Combine the two estimates, weighing (1) in the long term, but (2) for the
 *    short term.
 */
function ComplementaryFilter(kFilter) {
  this.kFilter = kFilter;

  // Raw sensor measurements.
  this.currentAccelMeasurement = new SensorSample();
  this.currentGyroMeasurement = new SensorSample();
  this.previousGyroMeasurement = new SensorSample();

  // Set default look direction to be in the correct direction.
  if (Util.isIOS()) {
    this.filterQ = new MathUtil.Quaternion(-1, 0, 0, 1);
  } else {
    this.filterQ = new MathUtil.Quaternion(1, 0, 0, 1);
  }
  this.previousFilterQ = new MathUtil.Quaternion();
  this.previousFilterQ.copy(this.filterQ);

  // Orientation based on the accelerometer.
  this.accelQ = new MathUtil.Quaternion();
  // Whether or not the orientation has been initialized.
  this.isOrientationInitialized = false;
  // Running estimate of gravity based on the current orientation.
  this.estimatedGravity = new MathUtil.Vector3();
  // Measured gravity based on accelerometer.
  this.measuredGravity = new MathUtil.Vector3();

  // Debug only quaternion of gyro-based orientation.
  this.gyroIntegralQ = new MathUtil.Quaternion();
}

ComplementaryFilter.prototype.addAccelMeasurement = function(vector, timestampS) {
  this.currentAccelMeasurement.set(vector, timestampS);
};

ComplementaryFilter.prototype.addGyroMeasurement = function(vector, timestampS) {
  this.currentGyroMeasurement.set(vector, timestampS);

  var deltaT = timestampS - this.previousGyroMeasurement.timestampS;
  if (Util.isTimestampDeltaValid(deltaT)) {
    this.run_();
  }

  this.previousGyroMeasurement.copy(this.currentGyroMeasurement);
};

ComplementaryFilter.prototype.run_ = function() {

  if (!this.isOrientationInitialized) {
    this.accelQ = this.accelToQuaternion_(this.currentAccelMeasurement.sample);
    this.previousFilterQ.copy(this.accelQ);
    this.isOrientationInitialized = true;
    return;
  }

  var deltaT = this.currentGyroMeasurement.timestampS -
      this.previousGyroMeasurement.timestampS;

  // Convert gyro rotation vector to a quaternion delta.
  var gyroDeltaQ = this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample, deltaT);
  this.gyroIntegralQ.multiply(gyroDeltaQ);

  // filter_1 = K * (filter_0 + gyro * dT) + (1 - K) * accel.
  this.filterQ.copy(this.previousFilterQ);
  this.filterQ.multiply(gyroDeltaQ);

  // Calculate the delta between the current estimated gravity and the real
  // gravity vector from accelerometer.
  var invFilterQ = new MathUtil.Quaternion();
  invFilterQ.copy(this.filterQ);
  invFilterQ.inverse();

  this.estimatedGravity.set(0, 0, -1);
  this.estimatedGravity.applyQuaternion(invFilterQ);
  this.estimatedGravity.normalize();

  this.measuredGravity.copy(this.currentAccelMeasurement.sample);
  this.measuredGravity.normalize();

  // Compare estimated gravity with measured gravity, get the delta quaternion
  // between the two.
  var deltaQ = new MathUtil.Quaternion();
  deltaQ.setFromUnitVectors(this.estimatedGravity, this.measuredGravity);
  deltaQ.inverse();

  if (Util.isDebug()) {
    console.log('Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)',
                MathUtil.radToDeg * Util.getQuaternionAngle(deltaQ),
                (this.estimatedGravity.x).toFixed(1),
                (this.estimatedGravity.y).toFixed(1),
                (this.estimatedGravity.z).toFixed(1),
                (this.measuredGravity.x).toFixed(1),
                (this.measuredGravity.y).toFixed(1),
                (this.measuredGravity.z).toFixed(1));
  }

  // Calculate the SLERP target: current orientation plus the measured-estimated
  // quaternion delta.
  var targetQ = new MathUtil.Quaternion();
  targetQ.copy(this.filterQ);
  targetQ.multiply(deltaQ);

  // SLERP factor: 0 is pure gyro, 1 is pure accel.
  this.filterQ.slerp(targetQ, 1 - this.kFilter);

  this.previousFilterQ.copy(this.filterQ);
};

ComplementaryFilter.prototype.getOrientation = function() {
  return this.filterQ;
};

ComplementaryFilter.prototype.accelToQuaternion_ = function(accel) {
  var normAccel = new MathUtil.Vector3();
  normAccel.copy(accel);
  normAccel.normalize();
  var quat = new MathUtil.Quaternion();
  quat.setFromUnitVectors(new MathUtil.Vector3(0, 0, -1), normAccel);
  quat.inverse();
  return quat;
};

ComplementaryFilter.prototype.gyroToQuaternionDelta_ = function(gyro, dt) {
  // Extract axis and angle from the gyroscope data.
  var quat = new MathUtil.Quaternion();
  var axis = new MathUtil.Vector3();
  axis.copy(gyro);
  axis.normalize();
  quat.setFromAxisAngle(axis, gyro.length() * dt);
  return quat;
};


module.exports = ComplementaryFilter;

},{"../math-util.js":14,"../util.js":22,"./sensor-sample.js":20}],18:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ComplementaryFilter = _dereq_('./complementary-filter.js');
var PosePredictor = _dereq_('./pose-predictor.js');
var TouchPanner = _dereq_('../touch-panner.js');
var MathUtil = _dereq_('../math-util.js');
var Util = _dereq_('../util.js');

/**
 * The pose sensor, implemented using DeviceMotion APIs.
 */
function FusionPoseSensor() {
  this.deviceId = 'webvr-polyfill:fused';
  this.deviceName = 'VR Position Device (webvr-polyfill:fused)';

  this.accelerometer = new MathUtil.Vector3();
  this.gyroscope = new MathUtil.Vector3();

  this.start();

  this.filter = new ComplementaryFilter(WebVRConfig.K_FILTER);
  this.posePredictor = new PosePredictor(WebVRConfig.PREDICTION_TIME_S);
  this.touchPanner = new TouchPanner();

  this.filterToWorldQ = new MathUtil.Quaternion();

  // Set the filter to world transform, depending on OS.
  if (Util.isIOS()) {
    this.filterToWorldQ.setFromAxisAngle(new MathUtil.Vector3(1, 0, 0), Math.PI / 2);
  } else {
    this.filterToWorldQ.setFromAxisAngle(new MathUtil.Vector3(1, 0, 0), -Math.PI / 2);
  }

  this.inverseWorldToScreenQ = new MathUtil.Quaternion();
  this.worldToScreenQ = new MathUtil.Quaternion();
  this.originalPoseAdjustQ = new MathUtil.Quaternion();
  this.originalPoseAdjustQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1),
                                           -window.orientation * Math.PI / 180);

  this.setScreenTransform_();
  // Adjust this filter for being in landscape mode.
  if (Util.isLandscapeMode()) {
    this.filterToWorldQ.multiply(this.inverseWorldToScreenQ);
  }

  // Keep track of a reset transform for resetSensor.
  this.resetQ = new MathUtil.Quaternion();

  this.isFirefoxAndroid = Util.isFirefoxAndroid();
  this.isIOS = Util.isIOS();

  this.orientationOut_ = new Float32Array(4);
}

FusionPoseSensor.prototype.getPosition = function() {
  // This PoseSensor doesn't support position
  return null;
};

FusionPoseSensor.prototype.getOrientation = function() {
  // Convert from filter space to the the same system used by the
  // deviceorientation event.
  var orientation = this.filter.getOrientation();

  // Predict orientation.
  this.predictedQ = this.posePredictor.getPrediction(orientation, this.gyroscope, this.previousTimestampS);

  // Convert to THREE coordinate system: -Z forward, Y up, X right.
  var out = new MathUtil.Quaternion();
  out.copy(this.filterToWorldQ);
  out.multiply(this.resetQ);
  if (!WebVRConfig.TOUCH_PANNER_DISABLED) {
    out.multiply(this.touchPanner.getOrientation());
  }
  out.multiply(this.predictedQ);
  out.multiply(this.worldToScreenQ);

  // Handle the yaw-only case.
  if (WebVRConfig.YAW_ONLY) {
    // Make a quaternion that only turns around the Y-axis.
    out.x = 0;
    out.z = 0;
    out.normalize();
  }

  this.orientationOut_[0] = out.x;
  this.orientationOut_[1] = out.y;
  this.orientationOut_[2] = out.z;
  this.orientationOut_[3] = out.w;
  return this.orientationOut_;
};

FusionPoseSensor.prototype.resetPose = function() {
  // Reduce to inverted yaw-only.
  this.resetQ.copy(this.filter.getOrientation());
  this.resetQ.x = 0;
  this.resetQ.y = 0;
  this.resetQ.z *= -1;
  this.resetQ.normalize();

  // Take into account extra transformations in landscape mode.
  if (Util.isLandscapeMode()) {
    this.resetQ.multiply(this.inverseWorldToScreenQ);
  }

  // Take into account original pose.
  this.resetQ.multiply(this.originalPoseAdjustQ);

  if (!WebVRConfig.TOUCH_PANNER_DISABLED) {
    this.touchPanner.resetSensor();
  }
};

FusionPoseSensor.prototype.onDeviceMotion_ = function(deviceMotion) {
  this.updateDeviceMotion_(deviceMotion);
};

FusionPoseSensor.prototype.updateDeviceMotion_ = function(deviceMotion) {
  var accGravity = deviceMotion.accelerationIncludingGravity;
  var rotRate = deviceMotion.rotationRate;
  var timestampS = deviceMotion.timeStamp / 1000;

  // Firefox Android timeStamp returns one thousandth of a millisecond.
  if (this.isFirefoxAndroid) {
    timestampS /= 1000;
  }

  var deltaS = timestampS - this.previousTimestampS;
  if (deltaS <= Util.MIN_TIMESTEP || deltaS > Util.MAX_TIMESTEP) {
    console.warn('Invalid timestamps detected. Time step between successive ' +
                 'gyroscope sensor samples is very small or not monotonic');
    this.previousTimestampS = timestampS;
    return;
  }
  this.accelerometer.set(-accGravity.x, -accGravity.y, -accGravity.z);
  this.gyroscope.set(rotRate.alpha, rotRate.beta, rotRate.gamma);

  // With iOS and Firefox Android, rotationRate is reported in degrees,
  // so we first convert to radians.
  if (this.isIOS || this.isFirefoxAndroid) {
    this.gyroscope.multiplyScalar(Math.PI / 180);
  }

  this.filter.addAccelMeasurement(this.accelerometer, timestampS);
  this.filter.addGyroMeasurement(this.gyroscope, timestampS);

  this.previousTimestampS = timestampS;
};

FusionPoseSensor.prototype.onOrientationChange_ = function(screenOrientation) {
  this.setScreenTransform_();
};

/**
 * This is only needed if we are in an cross origin iframe on iOS to work around
 * this issue: https://bugs.webkit.org/show_bug.cgi?id=152299.
 */
FusionPoseSensor.prototype.onMessage_ = function(event) {
  var message = event.data;

  // If there's no message type, ignore it.
  if (!message || !message.type) {
    return;
  }

  // Ignore all messages that aren't devicemotion.
  var type = message.type.toLowerCase();
  if (type !== 'devicemotion') {
    return;
  }

  // Update device motion.
  this.updateDeviceMotion_(message.deviceMotionEvent);
};

FusionPoseSensor.prototype.setScreenTransform_ = function() {
  this.worldToScreenQ.set(0, 0, 0, 1);
  switch (window.orientation) {
    case 0:
      break;
    case 90:
      this.worldToScreenQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1), -Math.PI / 2);
      break;
    case -90:
      this.worldToScreenQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1), Math.PI / 2);
      break;
    case 180:
      // TODO.
      break;
  }
  this.inverseWorldToScreenQ.copy(this.worldToScreenQ);
  this.inverseWorldToScreenQ.inverse();
};

FusionPoseSensor.prototype.start = function() {
  this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(this);
  this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(this);
  this.onMessageCallback_ = this.onMessage_.bind(this);

  // Only listen for postMessages if we're in an iOS and embedded inside a cross
  // domain IFrame. In this case, the polyfill can still work if the containing
  // page sends synthetic devicemotion events. For an example of this, see
  // iframe-message-sender.js in VR View: https://goo.gl/XDtvFZ
  if (Util.isIOS() && Util.isInsideCrossDomainIFrame()) {
    window.addEventListener('message', this.onMessageCallback_);
  }
  window.addEventListener('orientationchange', this.onOrientationChangeCallback_);
  window.addEventListener('devicemotion', this.onDeviceMotionCallback_);
};

FusionPoseSensor.prototype.stop = function() {
  window.removeEventListener('devicemotion', this.onDeviceMotionCallback_);
  window.removeEventListener('orientationchange', this.onOrientationChangeCallback_);
  window.removeEventListener('message', this.onMessageCallback_);
};

module.exports = FusionPoseSensor;

},{"../math-util.js":14,"../touch-panner.js":21,"../util.js":22,"./complementary-filter.js":17,"./pose-predictor.js":19}],19:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MathUtil = _dereq_('../math-util');
var Util = _dereq_('../util');

/**
 * Given an orientation and the gyroscope data, predicts the future orientation
 * of the head. This makes rendering appear faster.
 *
 * Also see: http://msl.cs.uiuc.edu/~lavalle/papers/LavYerKatAnt14.pdf
 *
 * @param {Number} predictionTimeS time from head movement to the appearance of
 * the corresponding image.
 */
function PosePredictor(predictionTimeS) {
  this.predictionTimeS = predictionTimeS;

  // The quaternion corresponding to the previous state.
  this.previousQ = new MathUtil.Quaternion();
  // Previous time a prediction occurred.
  this.previousTimestampS = null;

  // The delta quaternion that adjusts the current pose.
  this.deltaQ = new MathUtil.Quaternion();
  // The output quaternion.
  this.outQ = new MathUtil.Quaternion();
}

PosePredictor.prototype.getPrediction = function(currentQ, gyro, timestampS) {
  if (!this.previousTimestampS) {
    this.previousQ.copy(currentQ);
    this.previousTimestampS = timestampS;
    return currentQ;
  }

  // Calculate axis and angle based on gyroscope rotation rate data.
  var axis = new MathUtil.Vector3();
  axis.copy(gyro);
  axis.normalize();

  var angularSpeed = gyro.length();

  // If we're rotating slowly, don't do prediction.
  if (angularSpeed < MathUtil.degToRad * 20) {
    if (Util.isDebug()) {
      console.log('Moving slowly, at %s deg/s: no prediction',
                  (MathUtil.radToDeg * angularSpeed).toFixed(1));
    }
    this.outQ.copy(currentQ);
    this.previousQ.copy(currentQ);
    return this.outQ;
  }

  // Get the predicted angle based on the time delta and latency.
  var deltaT = timestampS - this.previousTimestampS;
  var predictAngle = angularSpeed * this.predictionTimeS;

  this.deltaQ.setFromAxisAngle(axis, predictAngle);
  this.outQ.copy(this.previousQ);
  this.outQ.multiply(this.deltaQ);

  this.previousQ.copy(currentQ);
  this.previousTimestampS = timestampS;

  return this.outQ;
};


module.exports = PosePredictor;

},{"../math-util":14,"../util":22}],20:[function(_dereq_,module,exports){
function SensorSample(sample, timestampS) {
  this.set(sample, timestampS);
};

SensorSample.prototype.set = function(sample, timestampS) {
  this.sample = sample;
  this.timestampS = timestampS;
};

SensorSample.prototype.copy = function(sensorSample) {
  this.set(sensorSample.sample, sensorSample.timestampS);
};

module.exports = SensorSample;

},{}],21:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

var ROTATE_SPEED = 0.5;
/**
 * Provides a quaternion responsible for pre-panning the scene before further
 * transformations due to device sensors.
 */
function TouchPanner() {
  window.addEventListener('touchstart', this.onTouchStart_.bind(this));
  window.addEventListener('touchmove', this.onTouchMove_.bind(this));
  window.addEventListener('touchend', this.onTouchEnd_.bind(this));

  this.isTouching = false;
  this.rotateStart = new MathUtil.Vector2();
  this.rotateEnd = new MathUtil.Vector2();
  this.rotateDelta = new MathUtil.Vector2();

  this.theta = 0;
  this.orientation = new MathUtil.Quaternion();
}

TouchPanner.prototype.getOrientation = function() {
  this.orientation.setFromEulerXYZ(0, 0, this.theta);
  return this.orientation;
};

TouchPanner.prototype.resetSensor = function() {
  this.theta = 0;
};

TouchPanner.prototype.onTouchStart_ = function(e) {
  // Only respond if there is exactly one touch.
  if (e.touches.length != 1) {
    return;
  }
  this.rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);
  this.isTouching = true;
};

TouchPanner.prototype.onTouchMove_ = function(e) {
  if (!this.isTouching) {
    return;
  }
  this.rotateEnd.set(e.touches[0].pageX, e.touches[0].pageY);
  this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart);
  this.rotateStart.copy(this.rotateEnd);

  // On iOS, direction is inverted.
  if (Util.isIOS()) {
    this.rotateDelta.x *= -1;
  }

  var element = document.body;
  this.theta += 2 * Math.PI * this.rotateDelta.x / element.clientWidth * ROTATE_SPEED;
};

TouchPanner.prototype.onTouchEnd_ = function(e) {
  this.isTouching = false;
};

module.exports = TouchPanner;

},{"./math-util.js":14,"./util.js":22}],22:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var objectAssign = _dereq_('object-assign');

var Util = window.Util || {};

Util.MIN_TIMESTEP = 0.001;
Util.MAX_TIMESTEP = 1;

Util.base64 = function(mimeType, base64) {
  return 'data:' + mimeType + ';base64,' + base64;
};

Util.clamp = function(value, min, max) {
  return Math.min(Math.max(min, value), max);
};

Util.lerp = function(a, b, t) {
  return a + ((b - a) * t);
};

Util.isIOS = (function() {
  var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);
  return function() {
    return isIOS;
  };
})();

Util.isSafari = (function() {
  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  return function() {
    return isSafari;
  };
})();

Util.isFirefoxAndroid = (function() {
  var isFirefoxAndroid = navigator.userAgent.indexOf('Firefox') !== -1 &&
      navigator.userAgent.indexOf('Android') !== -1;
  return function() {
    return isFirefoxAndroid;
  };
})();

Util.isLandscapeMode = function() {
  return (window.orientation == 90 || window.orientation == -90);
};

// Helper method to validate the time steps of sensor timestamps.
Util.isTimestampDeltaValid = function(timestampDeltaS) {
  if (isNaN(timestampDeltaS)) {
    return false;
  }
  if (timestampDeltaS <= Util.MIN_TIMESTEP) {
    return false;
  }
  if (timestampDeltaS > Util.MAX_TIMESTEP) {
    return false;
  }
  return true;
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.requestFullscreen = function(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else {
    return false;
  }

  return true;
};

Util.exitFullscreen = function() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else {
    return false;
  }

  return true;
};

Util.getFullscreenElement = function() {
  return document.fullscreenElement ||
      document.webkitFullscreenElement ||
      document.mozFullScreenElement ||
      document.msFullscreenElement;
};

Util.linkProgram = function(gl, vertexSource, fragmentSource, attribLocationMap) {
  // No error checking for brevity.
  var vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, vertexSource);
  gl.compileShader(vertexShader);

  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, fragmentSource);
  gl.compileShader(fragmentShader);

  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);

  for (var attribName in attribLocationMap)
    gl.bindAttribLocation(program, attribLocationMap[attribName], attribName);

  gl.linkProgram(program);

  gl.deleteShader(vertexShader);
  gl.deleteShader(fragmentShader);

  return program;
};

Util.getProgramUniforms = function(gl, program) {
  var uniforms = {};
  var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
  var uniformName = '';
  for (var i = 0; i < uniformCount; i++) {
    var uniformInfo = gl.getActiveUniform(program, i);
    uniformName = uniformInfo.name.replace('[0]', '');
    uniforms[uniformName] = gl.getUniformLocation(program, uniformName);
  }
  return uniforms;
};

Util.orthoMatrix = function (out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right),
      bt = 1 / (bottom - top),
      nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
};

Util.copyArray = function (source, dest) {
  for (var i = 0, n = source.length; i < n; i++) {
    dest[i] = source[i];
  }
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.extend = objectAssign;

Util.safariCssSizeWorkaround = function(canvas) {
  // TODO(smus): Remove this workaround when Safari for iOS is fixed.
  // iOS only workaround (for https://bugs.webkit.org/show_bug.cgi?id=152556).
  //
  // "To the last I grapple with thee;
  //  from hell's heart I stab at thee;
  //  for hate's sake I spit my last breath at thee."
  // -- Moby Dick, by Herman Melville
  if (Util.isIOS()) {
    var width = canvas.style.width;
    var height = canvas.style.height;
    canvas.style.width = (parseInt(width) + 1) + 'px';
    canvas.style.height = (parseInt(height)) + 'px';
    setTimeout(function() {
      canvas.style.width = width;
      canvas.style.height = height;
    }, 100);
  }

  // Debug only.
  window.Util = Util;
  window.canvas = canvas;
};

Util.isDebug = function() {
  return Util.getQueryParameter('debug');
};

Util.getQueryParameter = function(name) {
  var name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};

Util.frameDataFromPose = (function() {
  var piOver180 = Math.PI / 180.0;
  var rad45 = Math.PI * 0.25;

  // Borrowed from glMatrix.
  function mat4_perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov ? (fov.upDegrees * piOver180) : rad45),
    downTan = Math.tan(fov ? (fov.downDegrees * piOver180) : rad45),
    leftTan = Math.tan(fov ? (fov.leftDegrees * piOver180) : rad45),
    rightTan = Math.tan(fov ? (fov.rightDegrees * piOver180) : rad45),
    xScale = 2.0 / (leftTan + rightTan),
    yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
  }

  function mat4_fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
  };

  function mat4_translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
      a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
      a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

      out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
      out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
      out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
  };

  function mat4_invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      return null;
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
  };

  var defaultOrientation = new Float32Array([0, 0, 0, 1]);
  var defaultPosition = new Float32Array([0, 0, 0]);

  function updateEyeMatrices(projection, view, pose, parameters, vrDisplay) {
    mat4_perspectiveFromFieldOfView(projection, parameters ? parameters.fieldOfView : null, vrDisplay.depthNear, vrDisplay.depthFar);

    var orientation = pose.orientation || defaultOrientation;
    var position = pose.position || defaultPosition;

    mat4_fromRotationTranslation(view, orientation, position);
    if (parameters)
      mat4_translate(view, view, parameters.offset);
    mat4_invert(view, view);
  }

  return function(frameData, pose, vrDisplay) {
    if (!frameData || !pose)
      return false;

    frameData.pose = pose;
    frameData.timestamp = pose.timestamp;

    updateEyeMatrices(
        frameData.leftProjectionMatrix, frameData.leftViewMatrix,
        pose, vrDisplay.getEyeParameters("left"), vrDisplay);
    updateEyeMatrices(
        frameData.rightProjectionMatrix, frameData.rightViewMatrix,
        pose, vrDisplay.getEyeParameters("right"), vrDisplay);

    return true;
  };
})();

Util.isInsideCrossDomainIFrame = function() {
  var isFramed = (window.self !== window.top);
  var refDomain = Util.getDomainFromUrl(document.referrer);
  var thisDomain = Util.getDomainFromUrl(window.location.href);

  return isFramed && (refDomain !== thisDomain);
};

// From http://stackoverflow.com/a/23945027.
Util.getDomainFromUrl = function(url) {
  var domain;
  // Find & remove protocol (http, ftp, etc.) and get domain.
  if (url.indexOf("://") > -1) {
    domain = url.split('/')[2];
  }
  else {
    domain = url.split('/')[0];
  }

  //find & remove port number
  domain = domain.split(':')[0];

  return domain;
}

module.exports = Util;

},{"object-assign":2}],23:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DeviceInfo = _dereq_('./device-info.js');
var EventEmitter3 = _dereq_('eventemitter3');
var Util = _dereq_('./util.js');

var DEFAULT_VIEWER = 'CardboardV1';
var VIEWER_KEY = 'WEBVR_CARDBOARD_VIEWER';
var CLASS_NAME = 'webvr-polyfill-viewer-selector';

/**
 * Creates a viewer selector with the options specified. Supports being shown
 * and hidden. Generates events when viewer parameters change. Also supports
 * saving the currently selected index in localStorage.
 */
function ViewerSelector() {
  // Try to load the selected key from local storage. If none exists, use the
  // default key.
  try {
    this.selectedKey = localStorage.getItem(VIEWER_KEY) || DEFAULT_VIEWER;
  } catch (error) {
    console.error('Failed to load viewer profile: %s', error);
  }
  this.dialog = this.createDialog_(DeviceInfo.Viewers);
  this.root = null;
}
ViewerSelector.prototype = new EventEmitter3();

ViewerSelector.prototype.show = function(root) {
  this.root = root;

  root.appendChild(this.dialog);

  // Ensure the currently selected item is checked.
  var selected = this.dialog.querySelector('#' + this.selectedKey);
  selected.checked = true;

  // Show the UI.
  this.dialog.style.display = 'block';
};

ViewerSelector.prototype.hide = function() {
  if (this.root && this.root.contains(this.dialog)) {
    this.root.removeChild(this.dialog);
  }
  this.dialog.style.display = 'none';
};

ViewerSelector.prototype.getCurrentViewer = function() {
  return DeviceInfo.Viewers[this.selectedKey];
};

ViewerSelector.prototype.getSelectedKey_ = function() {
  var input = this.dialog.querySelector('input[name=field]:checked');
  if (input) {
    return input.id;
  }
  return null;
};

ViewerSelector.prototype.onSave_ = function() {
  this.selectedKey = this.getSelectedKey_();
  if (!this.selectedKey || !DeviceInfo.Viewers[this.selectedKey]) {
    console.error('ViewerSelector.onSave_: this should never happen!');
    return;
  }

  this.emit('change', DeviceInfo.Viewers[this.selectedKey]);

  // Attempt to save the viewer profile, but fails in private mode.
  try {
    localStorage.setItem(VIEWER_KEY, this.selectedKey);
  } catch(error) {
    console.error('Failed to save viewer profile: %s', error);
  }
  this.hide();
};

/**
 * Creates the dialog.
 */
ViewerSelector.prototype.createDialog_ = function(options) {
  var container = document.createElement('div');
  container.classList.add(CLASS_NAME);
  container.style.display = 'none';
  // Create an overlay that dims the background, and which goes away when you
  // tap it.
  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.left = 0;
  s.top = 0;
  s.width = '100%';
  s.height = '100%';
  s.background = 'rgba(0, 0, 0, 0.3)';
  overlay.addEventListener('click', this.hide.bind(this));

  var width = 280;
  var dialog = document.createElement('div');
  var s = dialog.style;
  s.boxSizing = 'border-box';
  s.position = 'fixed';
  s.top = '24px';
  s.left = '50%';
  s.marginLeft = (-width/2) + 'px';
  s.width = width + 'px';
  s.padding = '24px';
  s.overflow = 'hidden';
  s.background = '#fafafa';
  s.fontFamily = "'Roboto', sans-serif";
  s.boxShadow = '0px 5px 20px #666';

  dialog.appendChild(this.createH1_('Select your viewer'));
  for (var id in options) {
    dialog.appendChild(this.createChoice_(id, options[id].label));
  }
  dialog.appendChild(this.createButton_('Save', this.onSave_.bind(this)));

  container.appendChild(overlay);
  container.appendChild(dialog);

  return container;
};

ViewerSelector.prototype.createH1_ = function(name) {
  var h1 = document.createElement('h1');
  var s = h1.style;
  s.color = 'black';
  s.fontSize = '20px';
  s.fontWeight = 'bold';
  s.marginTop = 0;
  s.marginBottom = '24px';
  h1.innerHTML = name;
  return h1;
};

ViewerSelector.prototype.createChoice_ = function(id, name) {
  /*
  <div class="choice">
  <input id="v1" type="radio" name="field" value="v1">
  <label for="v1">Cardboard V1</label>
  </div>
  */
  var div = document.createElement('div');
  div.style.marginTop = '8px';
  div.style.color = 'black';

  var input = document.createElement('input');
  input.style.fontSize = '30px';
  input.setAttribute('id', id);
  input.setAttribute('type', 'radio');
  input.setAttribute('value', id);
  input.setAttribute('name', 'field');

  var label = document.createElement('label');
  label.style.marginLeft = '4px';
  label.setAttribute('for', id);
  label.innerHTML = name;

  div.appendChild(input);
  div.appendChild(label);

  return div;
};

ViewerSelector.prototype.createButton_ = function(label, onclick) {
  var button = document.createElement('button');
  button.innerHTML = label;
  var s = button.style;
  s.float = 'right';
  s.textTransform = 'uppercase';
  s.color = '#1094f7';
  s.fontSize = '14px';
  s.letterSpacing = 0;
  s.border = 0;
  s.background = 'none';
  s.marginTop = '16px';

  button.addEventListener('click', onclick);

  return button;
};

module.exports = ViewerSelector;

},{"./device-info.js":8,"./util.js":22,"eventemitter3":1}],24:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');

/**
 * Android and iOS compatible wakelock implementation.
 *
 * Refactored thanks to dkovalev@.
 */
function AndroidWakeLock() {
  var video = document.createElement('video');

  video.addEventListener('ended', function() {
    video.play();
  });

  this.request = function() {
    if (video.paused) {
      // Base64 version of videos_src/no-sleep-120s.mp4.
      video.src = Util.base64('video/mp4', 'AAAAGGZ0eXBpc29tAAAAAG1wNDFhdmMxAAAIA21vb3YAAABsbXZoZAAAAADSa9v60mvb+gABX5AAlw/gAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAdkdHJhawAAAFx0a2hkAAAAAdJr2/rSa9v6AAAAAQAAAAAAlw/gAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAQAAAAHAAAAAAAJGVkdHMAAAAcZWxzdAAAAAAAAAABAJcP4AAAAAAAAQAAAAAG3G1kaWEAAAAgbWRoZAAAAADSa9v60mvb+gAPQkAGjneAFccAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAABodtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAZHc3RibAAAAJdzdHNkAAAAAAAAAAEAAACHYXZjMQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAMABwASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAADFhdmNDAWQAC//hABlnZAALrNlfllw4QAAAAwBAAAADAKPFCmWAAQAFaOvssiwAAAAYc3R0cwAAAAAAAAABAAAAbgAPQkAAAAAUc3RzcwAAAAAAAAABAAAAAQAAA4BjdHRzAAAAAAAAAG4AAAABAD0JAAAAAAEAehIAAAAAAQA9CQAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEALcbAAAAAHHN0c2MAAAAAAAAAAQAAAAEAAABuAAAAAQAAAcxzdHN6AAAAAAAAAAAAAABuAAADCQAAABgAAAAOAAAADgAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABMAAAAUc3RjbwAAAAAAAAABAAAIKwAAACt1ZHRhAAAAI6llbmMAFwAAdmxjIDIuMi4xIHN0cmVhbSBvdXRwdXQAAAAId2lkZQAACRRtZGF0AAACrgX//6vcRem95tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQyIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVmPTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9MTIgbG9va2FoZWFkX3RocmVhZHM9MSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHlyYW1pZD0yIGJfYWRhcHQ9MSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3ZWlnaHRwPTIga2V5aW50PTI1MCBrZXlpbnRfbWluPTEgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD00MCByYz1hYnIgbWJ0cmVlPTEgYml0cmF0ZT0xMDAgcmF0ZXRvbD0xLjAgcWNvbXA9MC42MCBxcG1pbj0xMCBxcG1heD01MSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAU2WIhAAQ/8ltlOe+cTZuGkKg+aRtuivcDZ0pBsfsEi9p/i1yU9DxS2lq4dXTinViF1URBKXgnzKBd/Uh1bkhHtMrwrRcOJslD01UB+fyaL6ef+DBAAAAFEGaJGxBD5B+v+a+4QqF3MgBXz9MAAAACkGeQniH/+94r6EAAAAKAZ5hdEN/8QytwAAAAAgBnmNqQ3/EgQAAAA5BmmhJqEFomUwIIf/+4QAAAApBnoZFESw//76BAAAACAGepXRDf8SBAAAACAGep2pDf8SAAAAADkGarEmoQWyZTAgh//7gAAAACkGeykUVLD//voEAAAAIAZ7pdEN/xIAAAAAIAZ7rakN/xIAAAAAOQZrwSahBbJlMCCH//uEAAAAKQZ8ORRUsP/++gQAAAAgBny10Q3/EgQAAAAgBny9qQ3/EgAAAAA5BmzRJqEFsmUwIIf/+4AAAAApBn1JFFSw//76BAAAACAGfcXRDf8SAAAAACAGfc2pDf8SAAAAADkGbeEmoQWyZTAgh//7hAAAACkGflkUVLD//voAAAAAIAZ+1dEN/xIEAAAAIAZ+3akN/xIEAAAAOQZu8SahBbJlMCCH//uAAAAAKQZ/aRRUsP/++gQAAAAgBn/l0Q3/EgAAAAAgBn/tqQ3/EgQAAAA5Bm+BJqEFsmUwIIf/+4QAAAApBnh5FFSw//76AAAAACAGePXRDf8SAAAAACAGeP2pDf8SBAAAADkGaJEmoQWyZTAgh//7gAAAACkGeQkUVLD//voEAAAAIAZ5hdEN/xIAAAAAIAZ5jakN/xIEAAAAOQZpoSahBbJlMCCH//uEAAAAKQZ6GRRUsP/++gQAAAAgBnqV0Q3/EgQAAAAgBnqdqQ3/EgAAAAA5BmqxJqEFsmUwIIf/+4AAAAApBnspFFSw//76BAAAACAGe6XRDf8SAAAAACAGe62pDf8SAAAAADkGa8EmoQWyZTAgh//7hAAAACkGfDkUVLD//voEAAAAIAZ8tdEN/xIEAAAAIAZ8vakN/xIAAAAAOQZs0SahBbJlMCCH//uAAAAAKQZ9SRRUsP/++gQAAAAgBn3F0Q3/EgAAAAAgBn3NqQ3/EgAAAAA5Bm3hJqEFsmUwIIf/+4QAAAApBn5ZFFSw//76AAAAACAGftXRDf8SBAAAACAGft2pDf8SBAAAADkGbvEmoQWyZTAgh//7gAAAACkGf2kUVLD//voEAAAAIAZ/5dEN/xIAAAAAIAZ/7akN/xIEAAAAOQZvgSahBbJlMCCH//uEAAAAKQZ4eRRUsP/++gAAAAAgBnj10Q3/EgAAAAAgBnj9qQ3/EgQAAAA5BmiRJqEFsmUwIIf/+4AAAAApBnkJFFSw//76BAAAACAGeYXRDf8SAAAAACAGeY2pDf8SBAAAADkGaaEmoQWyZTAgh//7hAAAACkGehkUVLD//voEAAAAIAZ6ldEN/xIEAAAAIAZ6nakN/xIAAAAAOQZqsSahBbJlMCCH//uAAAAAKQZ7KRRUsP/++gQAAAAgBnul0Q3/EgAAAAAgBnutqQ3/EgAAAAA5BmvBJqEFsmUwIIf/+4QAAAApBnw5FFSw//76BAAAACAGfLXRDf8SBAAAACAGfL2pDf8SAAAAADkGbNEmoQWyZTAgh//7gAAAACkGfUkUVLD//voEAAAAIAZ9xdEN/xIAAAAAIAZ9zakN/xIAAAAAOQZt4SahBbJlMCCH//uEAAAAKQZ+WRRUsP/++gAAAAAgBn7V0Q3/EgQAAAAgBn7dqQ3/EgQAAAA5Bm7xJqEFsmUwIIf/+4AAAAApBn9pFFSw//76BAAAACAGf+XRDf8SAAAAACAGf+2pDf8SBAAAADkGb4EmoQWyZTAgh//7hAAAACkGeHkUVLD//voAAAAAIAZ49dEN/xIAAAAAIAZ4/akN/xIEAAAAOQZokSahBbJlMCCH//uAAAAAKQZ5CRRUsP/++gQAAAAgBnmF0Q3/EgAAAAAgBnmNqQ3/EgQAAAA5BmmhJqEFsmUwIIf/+4QAAAApBnoZFFSw//76BAAAACAGepXRDf8SBAAAACAGep2pDf8SAAAAADkGarEmoQWyZTAgh//7gAAAACkGeykUVLD//voEAAAAIAZ7pdEN/xIAAAAAIAZ7rakN/xIAAAAAPQZruSahBbJlMFEw3//7B');
      video.play();
    }
  };

  this.release = function() {
    video.pause();
    video.src = '';
  };
}

function iOSWakeLock() {
  var timer = null;

  this.request = function() {
    if (!timer) {
      timer = setInterval(function() {
        window.location = window.location;
        setTimeout(window.stop, 0);
      }, 30000);
    }
  }

  this.release = function() {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
  }
}


function getWakeLock() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  if (userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) {
    return iOSWakeLock;
  } else {
    return AndroidWakeLock;
  }
}

module.exports = getWakeLock();
},{"./util.js":22}],25:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');
var CardboardVRDisplay = _dereq_('./cardboard-vr-display.js');
var MouseKeyboardVRDisplay = _dereq_('./mouse-keyboard-vr-display.js');
// Uncomment to add positional tracking via webcam.
//var WebcamPositionSensorVRDevice = require('./webcam-position-sensor-vr-device.js');
var VRDisplay = _dereq_('./base.js').VRDisplay;
var VRFrameData = _dereq_('./base.js').VRFrameData;
var HMDVRDevice = _dereq_('./base.js').HMDVRDevice;
var PositionSensorVRDevice = _dereq_('./base.js').PositionSensorVRDevice;
var VRDisplayHMDDevice = _dereq_('./display-wrappers.js').VRDisplayHMDDevice;
var VRDisplayPositionSensorDevice = _dereq_('./display-wrappers.js').VRDisplayPositionSensorDevice;

function WebVRPolyfill() {
  this.displays = [];
  this.devices = []; // For deprecated objects
  this.devicesPopulated = false;
  this.nativeWebVRAvailable = this.isWebVRAvailable();
  this.nativeLegacyWebVRAvailable = this.isDeprecatedWebVRAvailable();
  this.nativeGetVRDisplaysFunc = this.nativeWebVRAvailable ?
                                 navigator.getVRDisplays :
                                 null;

  if (!this.nativeLegacyWebVRAvailable) {
    this.enablePolyfill();
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.enableDeprecatedPolyfill();
    }
  }

  // Put a shim in place to update the API to 1.1 if needed.
  InstallWebVRSpecShim();
}

WebVRPolyfill.prototype.isWebVRAvailable = function() {
  return ('getVRDisplays' in navigator);
};

WebVRPolyfill.prototype.isDeprecatedWebVRAvailable = function() {
  return ('getVRDevices' in navigator) || ('mozGetVRDevices' in navigator);
};

WebVRPolyfill.prototype.populateDevices = function() {
  if (this.devicesPopulated) {
    return;
  }

  // Initialize our virtual VR devices.
  var vrDisplay = null;

  // Add a Cardboard VRDisplay on compatible mobile devices
  if (this.isCardboardCompatible()) {
    vrDisplay = new CardboardVRDisplay();
    this.displays.push(vrDisplay);

    // For backwards compatibility
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.devices.push(new VRDisplayHMDDevice(vrDisplay));
      this.devices.push(new VRDisplayPositionSensorDevice(vrDisplay));
    }
  }

  // Add a Mouse and Keyboard driven VRDisplay for desktops/laptops
  if (!this.isMobile() && !WebVRConfig.MOUSE_KEYBOARD_CONTROLS_DISABLED) {
    vrDisplay = new MouseKeyboardVRDisplay();
    this.displays.push(vrDisplay);

    // For backwards compatibility
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.devices.push(new VRDisplayHMDDevice(vrDisplay));
      this.devices.push(new VRDisplayPositionSensorDevice(vrDisplay));
    }
  }

  // Uncomment to add positional tracking via webcam.
  //if (!this.isMobile() && WebVRConfig.ENABLE_DEPRECATED_API) {
  //  positionDevice = new WebcamPositionSensorVRDevice();
  //  this.devices.push(positionDevice);
  //}

  this.devicesPopulated = true;
};

WebVRPolyfill.prototype.enablePolyfill = function() {
  // Provide navigator.getVRDisplays.
  navigator.getVRDisplays = this.getVRDisplays.bind(this);

  // Polyfill native VRDisplay.getFrameData
  if (this.nativeWebVRAvailable && this.isCardboardCompatible() && window.VRFrameData) {
    var nativeFrameData = new window.VRFrameData();
    var nativeGetFrameData = window.VRDisplay.prototype.getFrameData;
    window.VRFrameData = VRFrameData;

    window.VRDisplay.prototype.getFrameData = function(frameData) {
      /*
      Copy frame data from native object into polyfilled object
      */

      nativeGetFrameData.call(this, nativeFrameData);
      frameData.pose = nativeFrameData.pose;
      Util.copyArray(nativeFrameData.leftProjectionMatrix, frameData.leftProjectionMatrix);
      Util.copyArray(nativeFrameData.rightProjectionMatrix, frameData.rightProjectionMatrix);
      Util.copyArray(nativeFrameData.leftViewMatrix, frameData.leftViewMatrix);
      Util.copyArray(nativeFrameData.rightViewMatrix, frameData.rightViewMatrix);
      //todo: copy
    };
  }

  // Provide the VRDisplay object.
  window.VRDisplay = VRDisplay;

  // Provide navigator.vrEnabled.
  var self = this;
  Object.defineProperty(navigator, 'vrEnabled', {
    get: function () {
      return self.isCardboardCompatible() &&
          (self.isFullScreenAvailable() || Util.isIOS());
    }
  });

  if (!'VRFrameData' in window) {
    // Provide the VRFrameData object.
    window.VRFrameData = VRFrameData;
  }
};

WebVRPolyfill.prototype.enableDeprecatedPolyfill = function() {
  // Provide navigator.getVRDevices.
  navigator.getVRDevices = this.getVRDevices.bind(this);

  // Provide the CardboardHMDVRDevice and PositionSensorVRDevice objects.
  window.HMDVRDevice = HMDVRDevice;
  window.PositionSensorVRDevice = PositionSensorVRDevice;
};

WebVRPolyfill.prototype.getVRDisplays = function() {
  this.populateDevices();
  var polyfillDisplays = this.displays;

  if (this.nativeWebVRAvailable) {
    return this.nativeGetVRDisplaysFunc.call(navigator).then(function(nativeDisplays) {
      if (WebVRConfig.ALWAYS_APPEND_POLYFILL_DISPLAY) {
        return nativeDisplays.concat(polyfillDisplays);
      } else {
        return nativeDisplays.length > 0 ? nativeDisplays : polyfillDisplays;
      }
    });
  } else {
    return new Promise(function(resolve, reject) {
      try {
        resolve(polyfillDisplays);
      } catch (e) {
        reject(e);
      }
    });
  }
};

WebVRPolyfill.prototype.getVRDevices = function() {
  console.warn('getVRDevices is deprecated. Please update your code to use getVRDisplays instead.');
  var self = this;
  return new Promise(function(resolve, reject) {
    try {
      if (!self.devicesPopulated) {
        if (self.nativeWebVRAvailable) {
          return navigator.getVRDisplays(function(displays) {
            for (var i = 0; i < displays.length; ++i) {
              self.devices.push(new VRDisplayHMDDevice(displays[i]));
              self.devices.push(new VRDisplayPositionSensorDevice(displays[i]));
            }
            self.devicesPopulated = true;
            resolve(self.devices);
          }, reject);
        }

        if (self.nativeLegacyWebVRAvailable) {
          return (navigator.getVRDDevices || navigator.mozGetVRDevices)(function(devices) {
            for (var i = 0; i < devices.length; ++i) {
              if (devices[i] instanceof HMDVRDevice) {
                self.devices.push(devices[i]);
              }
              if (devices[i] instanceof PositionSensorVRDevice) {
                self.devices.push(devices[i]);
              }
            }
            self.devicesPopulated = true;
            resolve(self.devices);
          }, reject);
        }
      }

      self.populateDevices();
      resolve(self.devices);
    } catch (e) {
      reject(e);
    }
  });
};

/**
 * Determine if a device is mobile.
 */
WebVRPolyfill.prototype.isMobile = function() {
  return /Android/i.test(navigator.userAgent) ||
      /iPhone|iPad|iPod/i.test(navigator.userAgent);
};

WebVRPolyfill.prototype.isCardboardCompatible = function() {
  // For now, support all iOS and Android devices.
  // Also enable the WebVRConfig.FORCE_VR flag for debugging.
  return this.isMobile() || WebVRConfig.FORCE_ENABLE_VR;
};

WebVRPolyfill.prototype.isFullScreenAvailable = function() {
  return (document.fullscreenEnabled ||
          document.mozFullScreenEnabled ||
          document.webkitFullscreenEnabled ||
          false);
};

// Installs a shim that updates a WebVR 1.0 spec implementation to WebVR 1.1
function InstallWebVRSpecShim() {
  if ('VRDisplay' in window && !('VRFrameData' in window)) {
    // Provide the VRFrameData object.
    window.VRFrameData = VRFrameData;

    // A lot of Chrome builds don't have depthNear and depthFar, even
    // though they're in the WebVR 1.0 spec. Patch them in if they're not present.
    if(!('depthNear' in window.VRDisplay.prototype)) {
      window.VRDisplay.prototype.depthNear = 0.01;
    }

    if(!('depthFar' in window.VRDisplay.prototype)) {
      window.VRDisplay.prototype.depthFar = 10000.0;
    }

    window.VRDisplay.prototype.getFrameData = function(frameData) {
      return Util.frameDataFromPose(frameData, this.getPose(), this);
    }
  }
};

module.exports.WebVRPolyfill = WebVRPolyfill;

},{"./base.js":3,"./cardboard-vr-display.js":6,"./display-wrappers.js":9,"./mouse-keyboard-vr-display.js":15,"./util.js":22}]},{},[13])(13)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],9:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var EventEmitter = require('eventemitter3');
var shaka = require('shaka-player');

var Types = {
    HLS: 1,
    DASH: 2,
    VIDEO: 3
};

var DEFAULT_BITS_PER_SECOND = 1000000;

/**
 * Supports regular video URLs (eg. mp4), as well as adaptive manifests like
 * DASH (.mpd) and soon HLS (.m3u8).
 *
 * Events:
 *   load(video): When the video is loaded.
 *   error(message): If an error occurs.
 *
 * To play/pause/seek/etc, please use the underlying video element.
 */
function AdaptivePlayer(loop) {
    this.video = document.createElement('video');
    // Loop by default.
    if (loop) {
        this.video.setAttribute('loop', true);
    }
    // For FF, make sure we enable preload.
    this.video.setAttribute('preload', 'auto');
    // Enable inline video playback in iOS 10+.
    this.video.setAttribute('playsinline', true);
    this.video.setAttribute('crossorigin', 'anonymous');
}
AdaptivePlayer.prototype = new EventEmitter();

AdaptivePlayer.prototype.load = function (url) {
    var self = this;
    // TODO(smus): Investigate whether or not differentiation is best done by
    // mimeType after all. Cursory research suggests that adaptive streaming
    // manifest mime types aren't properly supported.
    //
    // For now, make determination based on extension.
    var extension = Util.getExtension(url);
    switch (extension) {
        case 'm3u8': // HLS
            this.type = Types.HLS;
            if (Util.isSafari()) {
                this.loadVideo_(url).then(function () {
                    self.emit('load', self.video);
                }).catch(this.onError_.bind(this));
            } else {
                self.onError_('HLS is only supported on Safari.');
            }
            break;
        case 'mpd': // MPEG-DASH
            this.type = Types.DASH;
            this.loadShakaVideo_(url).then(function () {
                console.log('The video has now been loaded!');
                self.emit('load', self.video);
            }).catch(this.onError_.bind(this));
            break;
        default: // A regular video, not an adaptive manifest.
            this.type = Types.VIDEO;
            this.loadVideo_(url).then(function () {
                self.emit('load', self.video);
            }).catch(this.onError_.bind(this));
            break;
    }
};

AdaptivePlayer.prototype.destroy = function () {
    this.video.pause();
    this.video.src = '';
    this.video = null;
};

/*** PRIVATE API ***/

AdaptivePlayer.prototype.onError_ = function (e) {
    console.error(e);
    this.emit('error', e);
};

AdaptivePlayer.prototype.loadVideo_ = function (url) {
    var self = this, video = self.video;
    return new Promise(function (resolve, reject) {
        video.src = url;
        video.addEventListener('canplaythrough', resolve);
        video.addEventListener('loadedmetadata', function () {
            self.emit('timeupdate', {
                currentTime: video.currentTime,
                duration: video.duration
            });
        });
        video.addEventListener('error', reject);
        video.load();
    });
};

AdaptivePlayer.prototype.initShaka_ = function () {
    this.player = new shaka.Player(this.video);

    this.player.configure({
        abr: {defaultBandwidthEstimate: DEFAULT_BITS_PER_SECOND}
    });

    // Listen for error events.
    this.player.addEventListener('error', this.onError_);
};

AdaptivePlayer.prototype.loadShakaVideo_ = function (url) {
    // Install built-in polyfills to patch browser incompatibilities.
    shaka.polyfill.installAll();

    if (!shaka.Player.isBrowserSupported()) {
        console.error('Shaka is not supported on this browser.');
        return;
    }

    this.initShaka_();
    return this.player.load(url);
};

module.exports = AdaptivePlayer;

},{"eventemitter3":2,"shaka-player":4}],10:[function(require,module,exports){
"use strict";

var EventEmitter = require('eventemitter3');
var TWEEN = require('tween.js');
var Util = require('../util');

// Constants for the active/inactive animation.
var INACTIVE_COLOR = new THREE.Color(1, 1, 1);
var ACTIVE_COLOR = new THREE.Color(0.8, 0, 0);
var ACTIVE_DURATION = 100;

function EditorRenderer(worldRenderer) {

    this.worldRenderer = worldRenderer;
    this.scene = worldRenderer.scene;

    // if player is in editor mode
    this.editorMode = true;
    // if draw shape tool is active
    this.toolActive = false;
    // if user is currently drawing a shape
    this.drawingShape = false;
    // geometry of the currently drawing shape
    this.currentShapeGeometry = null;
    // handles of the currently drawing shape
    this.currentShapeHandles = [];
    // shapes drawn
    this.shapes = {};
    // shapes keyframes (position of vertices during video time)
    this.shapesKeyframes = {};
    // currently selected shape
    this.selectedShape = null;
    // currently selected shape handle
    this.selectedShapeHandle = null;
    // flag for track dragging
    this.isDragging = false;
    // video time
    this.videoTime = 0;

    var body = document.body;
    if (!Util.isMobile()) {
        // Only enable mouse events on desktop.
        body.addEventListener('mousedown', this.onMouseDown_.bind(this), false);
        body.addEventListener('mousemove', this.onMouseMove_.bind(this), false);
        body.addEventListener('mouseup', this.onMouseUp_.bind(this), false);
    }

    // Add a placeholder for shapes.
    this.shapesRoot = new THREE.Object3D();
    this.scene.add(this.shapesRoot);

    // Add a placeholder for temp shapes borders.
    this.shapesTempRoot = new THREE.Object3D();
    this.scene.add(this.shapesTempRoot);

    // For raycasting. Initialize mouse to be off screen initially.
    this.pointer = new THREE.Vector2(1, 1);
    this.raycaster = new THREE.Raycaster();
}

EditorRenderer.prototype = new EventEmitter();

EditorRenderer.prototype.update = function (time, videoTime) {

    // on each video frame
    if(videoTime && this.videoTime !== videoTime.currentTime) {
        this.videoTime = videoTime.currentTime;

        var shape,
            shapePoints,
            shapePointVector,
            shapePointTransitionQuaternion,
            temp,
            shapesKeyframesIndex,
            percentage;

        for(var shape_id in this.shapesKeyframes) {

            temp = this.getShapeAnimationPercentage_(shape_id, videoTime.currentTime);

            if(!temp) {
                return;
            }

            shapesKeyframesIndex = temp[0]; // initial keyframe index
            percentage = temp[1];           // percentage [0, 1] of the transformation

            shape = this.shapes[shape_id];
            shapePoints = this.shapesKeyframes[shape_id][shapesKeyframesIndex].vertices;

            // translate all shape point using Quaternion.slerp
            for(var i = 0, l = shapePoints.length; i < l; i++) {
                shapePointVector = new THREE.Vector3(shapePoints[i].x, shapePoints[i].y, shapePoints[i].z);
                shapePointTransitionQuaternion = (new THREE.Quaternion()).slerp(shapePoints[i].quaternion, percentage);

                if(shape.children[i].name === 'handle') {
                    shape.children[i].position.copy(shapePointVector.applyQuaternion(shapePointTransitionQuaternion));
                }
            }

            this.updateShapeFill_(shape, false);
        }

    }

};

EditorRenderer.prototype.getShapeAnimationPercentage_ = function(shape_id, frame) {

    var shapeKeyframes = this.shapesKeyframes[shape_id],
        startFrame, endFrame,
        Q1, Q2;

    if(!shapeKeyframes) {
        return false;
    }

    if(shapeKeyframes.length < 2) {
        // don't trasform if there is only 1 keyframe
        return false;
    }

    if(shapeKeyframes[shapeKeyframes.length-1].frame < frame) {
        // don't trasform after last keyframe
        return false;
    }

    // get rotation quaternions
    for(var i = 0, l = shapeKeyframes.length-1; i < l; i++) {
        startFrame = shapeKeyframes[i].frame;
        endFrame = shapeKeyframes[i+1].frame;

        if(startFrame <= frame && frame <= endFrame) {

            if(typeof shapeKeyframes[i].quaternions === 'undefined') {

                // calculate shape transformations
                for(var j = 0, ll = shapeKeyframes[i].vertices.length; j < ll; j++) {

                    if(typeof shapeKeyframes[i].vertices[j].quaternion === 'undefined') {

                        Q1 = shapeKeyframes[i].vertices[j];
                        Q2 = shapeKeyframes[i+1].vertices[j];

                        shapeKeyframes[i].vertices[j].quaternion = (new THREE.Quaternion()).setFromUnitVectors(Q1.normalize(), Q2.normalize());
                    }

                }
            }

            // return animation percentage [0, 1]
            return [i, (frame - startFrame) / (endFrame - startFrame)];
        }
    }

    console.warn('Frame outside shape time frame, TODO hide shape...', startFrame, frame, endFrame);
    return false;

};

/**
 * Returns true if draw tool is active or if a shape is selected
 * @returns {boolean}
 */
EditorRenderer.prototype.isDrawing = function () {
    return !!(this.toolActive || this.selectedShape || this.selectedShapeHandle);
};

/**
 * Activate draw shape tool
 */
EditorRenderer.prototype.startDraw = function () {
    this.toolActive = true;
};
/**
 * Deactivate draw shape tool
 */
EditorRenderer.prototype.endDraw = function () {
    this.toolActive = false;
    this.clearDrawnSegments_();
};

/**
 * On mouse down
 * @param e
 * @private
 */
EditorRenderer.prototype.onMouseDown_ = function (e) {
    var intersectingShape;
    var handle;
    var isHandle;
    this.updateMouse_(e);
    this.wasShapeTransformed = false;
    this.wasShapeHandleTransformed = false;

    // check if click intersects with some shapes...
    intersectingShape = this.getIntersectingShapeOrHandles_();
    isHandle = intersectingShape && intersectingShape.name === 'handle';

    // shape handle selected
    if(isHandle) {
        handle = intersectingShape;
        intersectingShape = handle.parent;
        this.selectedShapeHandle = handle;
        console.log('handle!', handle)
    } else {
        this.selectedShapeHandle = null;
    }

    // check if current shape has to be unselected
    if(this.selectedShape && (!intersectingShape || this.selectedShape !== intersectingShape)) {
        // if a shape was selected but now it's not, deselect it
        if(this.editorMode) {
            this.blurShape_(this.selectedShape.name);
        }

        this.deselectShape();
    }

    // check if a shape has to be selected
    if(!this.selectedShape) {
        // if shape not already selected, select it
        if(intersectingShape) {
            this.selectShape(intersectingShape);

            if(this.editorMode) {
                this.focusShape_(intersectingShape.name);
            }
        }
    }

    if(this.editorMode) {
        this.isDragging = true;

        if(this.selectedShape) {

        }

        if (this.toolActive) {
            var pointOnSphere = this.getClickPositionOnSphere_();
            this.addPointToShape_(pointOnSphere);
        }
    }

};

/**
 * On mouse move
 * @param e
 * @private
 */
EditorRenderer.prototype.onMouseMove_ = function (e) {
    if(this.isDrawing()) {
        // prevent camera rotation
        e.stopPropagation();

        if(this.isDragging) {
            this.updateMouse_(e);
            var pointOnSphere = this.getClickPositionOnSphere_();

            if(this.selectedShapeHandle) {
                // translate shape handle
                this.wasShapeHandleTransformed = true;
                this.selectedShapeHandle.position.copy(pointOnSphere);
                this.updateShapeFill_(this.selectedShapeHandle.parent, true);
            }
            else if(this.selectedShape) {
                // translate entire shape
                if(this.prevPointerPosition) {
                    this.wasShapeTransformed = true;
                    this.translateShape_(this.selectedShape, this.prevPointerPosition, pointOnSphere);
                }

                this.prevPointerPosition = pointOnSphere;
            }
        }

    }
};

/**
 * On Mouse up
 * @param e
 * @private
 */
EditorRenderer.prototype.onMouseUp_ = function (e) {
    if(this.isDrawing()) {
        e.stopPropagation();
    }

    this.isDragging = false;

    if(this.selectedShapeHandle && this.wasShapeHandleTransformed) {
        this.emit('transformed', this.selectedShapeHandle.parent);
        this.selectedShapeHandle = null;
    }

    else if(this.selectedShape && this.wasShapeTransformed) {
        this.emit('transformed', this.selectedShape);
        this.prevPointerPosition = null;
    }
};

/**
 * Select a shape
 * @param shape
 */
EditorRenderer.prototype.selectShape = function(shape) {
    this.selectedShape = shape;
    this.emit('shapeselected', this.selectedShape);
};
/**
 * Deselect current shape
 */
EditorRenderer.prototype.deselectShape = function() {
    this.selectedShape = null;
    this.emit('shapeunselected');
};

/**
 * Focus a shape
 * @param shape_id
 * @private
 */
EditorRenderer.prototype.focusShape_ = function(shape_id) {
    var shape = this.shapes[shape_id];
    var outer = shape.getObjectByName('fill');

    this.tween = new TWEEN.Tween(outer.material.color).to(ACTIVE_COLOR, ACTIVE_DURATION)
        .start();
};

/**
 * Blur a shape
 * @param shape_id
 * @private
 */
EditorRenderer.prototype.blurShape_ = function(shape_id) {
    var shape = this.shapes[shape_id];
    var outer = shape.getObjectByName('fill');

    this.tween = new TWEEN.Tween(outer.material.color).to(INACTIVE_COLOR, ACTIVE_DURATION)
        .start();
};

/**
 * Add a point to the current drawing shape
 * Called on mousedown
 * @param point
 * @returns {boolean}
 * @private
 */
EditorRenderer.prototype.addPointToShape_ = function (point) {

    if(!point) {
        return false;
    }

    var closeShape = false;

    // check if current point can close the geometry object
    if(this.currentShapeGeometry && this.drawingShape && this.currentShapeGeometry.vertices.length > 2) {
        closeShape = this.isPointNearTo_(point, this.currentShapeGeometry.vertices[0]);
    }

    // create a new geometry object
    if(!this.drawingShape) {
        this.drawingShape = true;
        this.currentShapeGeometry = new THREE.Geometry();
    }

    // add currrent point to geometry object
    if(!this.drawingShape || !closeShape) {

        this.currentShapeGeometry.vertices.push(
            new THREE.Vector3(point.x, point.y, point.z)
        );

        // draw temp segment
        this.renderDrawnSegment_();
    }

    // close the geometry object and render the shape
    if(closeShape) {

        // add last vertex (same as first) to close the shape
        this.currentShapeGeometry.vertices.push(
            new THREE.Vector3(this.currentShapeGeometry.vertices[0].x, this.currentShapeGeometry.vertices[0].y, this.currentShapeGeometry.vertices[0].z)
        );

        var shape = this.createShape(this.currentShapeGeometry.vertices);

        // reset shape drawing helpers (temp handles and segments)
        this.clearDrawnSegments_();

        // deactivate tool
        this.endDraw();
        this.emit('drawn', shape);
    }

};


/**
 * Creates a shape
 * @param vertices
 * @param id
 * @returns {SEA3D.Object3D|THREE.SEA3D.Object3D|*|Object3D|W|x}
 */
EditorRenderer.prototype.createShape = function (vertices, id) {

    var shape = this.createShape_(vertices);
    shape.name = id || shape.uuid;

    // add vertices to shapes keyframes
    this.shapesKeyframes[shape.name] = [{
        frame: 0,
        vertices: vertices
    }];

    // add shape to scene
    this.shapes[shape.name] = shape;
    this.shapesRoot.add(shape);

    return shape;
};

EditorRenderer.prototype.addShapeKeyframe = function (shape_id, frame, vertices) {

    var shape,
        shapeKeyframes;

    if(typeof this.shapes[shape_id] === 'undefined') {
        console.warn('Cannot add keyframe to shape with id ' + shape_id + ', it doesn\'t exists.');
        return false;
    }

    shape = this.shapes[shape_id];
    shapeKeyframes = this.shapesKeyframes[shape_id];

    if(!(vertices instanceof Array && shape.children.length-1 === vertices.length)) {
        console.warn('Cannot add keyframe to shape with id ' + shape_id + ', different number of vertices.');
        return false;
    }

    // add to shapesKeyframes object
    this.shapesKeyframes[shape_id].push({
        frame: frame,
        vertices: vertices
    });

    // order frames ascending
    shapeKeyframes.sort(function(a,b) {return (a.frame > b.frame) ? 1 : ((b.frame > a.frame) ? -1 : 0);} );

};

EditorRenderer.prototype.editShapeKeyframe = function (shape_id, keyframe, vertices) {

    if(typeof this.shapesKeyframes[shape_id] === 'undefined') {
        console.warn('Cannot update shape, no shape found:' + shape_id);
        return;
    }

    for(var i = 0; i < this.shapesKeyframes[id].length; i++) {
        if(this.shapesKeyframes[id][i].frame === keyframe) {
            console.log('Updating shape ' + shape_id + ' at keyframe ' + keyframe + ' was ', this.shapesKeyframes[id][i].vertices, 'now', vertices);
            this.shapesKeyframes[id][i].vertices.length = 0;
            this.shapesKeyframes[id][i].vertices = vertices;
            return;
        }
    }

    console.warn('Cannot update shape, no keyframe or shape found at ' + keyframe + ' for shape with id ' + shape_id);
};

EditorRenderer.prototype.removeShapeKeyframe = function (shape_id, keyframe) {

    if(typeof this.shapesKeyframes[shape_id] === 'undefined') {
        console.warn('Cannot update shape, no shape found:' + shape_id);
        return;
    }

    for(var i = 0; i < this.shapesKeyframes[id].length; i++) {
        if(this.shapesKeyframes[id][i].frame === keyframe) {
            console.log('Deleting keyframe ' + keyframe + ' for shape ' + shape_id);
            this.shapesKeyframes[id].splice(i, 1);
            return;
        }
    }

};

/**
 * Creates a shape form a set of vertices (points)
 * @param vertices
 * @returns {SEA3D.Object3D|THREE.SEA3D.Object3D|*|Object3D|W|x}
 */
EditorRenderer.prototype.createShape_ = function (vertices) {

    //var shapeGeometry = new THREE.Geometry();
    //shapeGeometry.vertices = points;

    // draw borders of the shape
    //var borders = new THREE.Line(shapeGeometry, new THREE.LineBasicMaterial({color: "red"}));
    //borders.name = 'borders';

    // draw fill
    var fill = this.createShapeFill_(vertices);

    // handles wrapper object
    //var handles = new THREE.Object3D();
    //handles.name = 'handles';

    // wrapper object
    var shape = new THREE.Object3D();
    shape.name = 'shape';
    shape.add(fill);

    // draw handles
    for(var i = 0; i < vertices.length; i++) {
        var handle = this.createHandle_(vertices[i]);
        shape.add(handle);
    }

    //shape.add(handles);
    //shape.add(borders);

    console.log('Created shape with ' + vertices.length + ' vertices!', shape);

    return shape;
};

/**
 * edit a shape at a specified frame
 * @param id
 * @param params
 */
EditorRenderer.prototype.editShape = function (id, params) {
    console.warn('editShape: TODO not implemented yet', id, params);
};

EditorRenderer.prototype.removeShape = function (id) {
    // If there's no shape with this ID, fail.
    if (!this.shapes[id]) {
        // TODO: Proper error reporting.
        console.error('Attempt to remove non-existing shape with id %s.', id);
        return;
    }
    // Remove the mesh from the scene.
    this.shapesRoot.remove(this.shapes[id]);

    delete this.shapes[id];
    delete this.shapesKeyframes[id];

    // If this shape was selected, make sure it gets unselected.
    this.selectedShape = null;
};

EditorRenderer.prototype.clearShapes = function () {
    for(var id in this.shapes) {
        this.removeShape(id);
    }
};

/**
 * Updates a shape Mesh after an handle drag
 * @private
 */
EditorRenderer.prototype.updateShapeFill_ = function(shape, isShapeSelected) {
    var vertices = [];

    for(var i = 0; i < shape.children.length; i++) {
        var obj = shape.children[i];
        if(obj.name === 'handle') {
            vertices.push(obj.position);
        }
    }

    var newFill = this.createShapeFill_(vertices, isShapeSelected);

    shape.remove(shape.getObjectByName('fill'));
    shape.add(newFill);
};

/**
 * Creates a Mesh between given points
 * @param vertices
 * @param isShapeSelected
 * @returns {THREE.SEA3D.Mesh|Raycaster.params.Mesh|{}|SEA3D.Mesh|Jb.params.Mesh|pe.params.Mesh|*}
 * @private
 */
EditorRenderer.prototype.createShapeFill_ = function(vertices, isShapeSelected) {

    var fillGeometry = new THREE.Geometry();
    var fillMaterial = new THREE.MeshBasicMaterial({ color: isShapeSelected ? ACTIVE_COLOR : 0xffffff, side: THREE.DoubleSide, transparent: true, opacity: 0.6});
    var faces = [];
    var triangles = THREE.ShapeUtils.triangulateShape (vertices, []);
    for(var i = 0; i < triangles.length; i++){
        faces.push(new THREE.Face3( triangles[i][0], triangles[i][1], triangles[i][2] ));
    }
    fillGeometry.faces = faces;
    fillGeometry.vertices = vertices;
    var fill = new THREE.Mesh(fillGeometry, fillMaterial);
    fill.name = 'fill';

    return fill;
};

/**
 * Render the current drawn segment with temp handles
 * @private
 */
EditorRenderer.prototype.renderDrawnSegment_ = function () {

    var vertices = this.currentShapeGeometry.vertices.slice();
    var currentVertex = vertices[vertices.length-1];

    // segment
    if(vertices.length > 1) {
        var lastVertex = vertices[vertices.length-2];
        var tempGeometry = new THREE.Geometry();
        tempGeometry.vertices = [
            new THREE.Vector3(lastVertex.x, lastVertex.y, lastVertex.z),
            new THREE.Vector3(currentVertex.x, currentVertex.y, currentVertex.z)
        ];
        var tempLine = new THREE.Line(tempGeometry, new THREE.LineBasicMaterial({color: "red"}));
        this.shapesTempRoot.add(tempLine);
    }

    // handle
    var handle = this.createHandle_(currentVertex);
    this.shapesTempRoot.add(handle);
    this.currentShapeHandles.push(handle);

};

/**
 * Remove temp drawn segments
 * @private
 */
EditorRenderer.prototype.clearDrawnSegments_ = function () {
    if(!this.drawingShape) { return; }

    this.drawingShape = false;
    this.currentShapeGeometry = null;
    for( var i = this.shapesTempRoot.children.length - 1; i >= 0; i--) {
        this.shapesTempRoot.remove(this.shapesTempRoot.children[i]);
    }
    this.currentShapeHandles.length = 0;
};

/**
 * Creates an handle
 * @param point
 * @returns {THREE.SEA3D.Mesh|Raycaster.params.Mesh|{}|SEA3D.Mesh|Jb.params.Mesh|pe.params.Mesh|*}
 * @private
 */
EditorRenderer.prototype.createHandle_ = function (point) {
    var handleMaterial = new THREE.MeshBasicMaterial({ color: "blue" });
    var handleGeometry = new THREE.SphereGeometry(0.02, 32, 32);
    var handle = new THREE.Mesh(handleGeometry, handleMaterial);
    handle.position.set(point.x, point.y, point.z);
    handle.name = 'handle';
    return handle;
};

/**
 * Return the shape selected by a mouse click
 * @returns {*}
 * @private
 */
EditorRenderer.prototype.getIntersectingShapeOrHandles_ = function () {

    // create a Ray with origin at the mouse position
    //   and direction into the scene (camera direction)
    var camera = this.worldRenderer.camera;
    var vector = new THREE.Vector3(this.pointer.x, this.pointer.y, 1);
    vector.unproject(camera);
    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());

    // create an array containing all objects in the scene with which the ray intersects
    var targetList = this.shapesRoot.children;
    var intersectingHandles = [];
    var intersectingShapes = [];
    for (var i = 0; i < targetList.length; i++) {
        var shape = targetList[i];
        var intersects = ray.intersectObjects(shape.children);

        // if there is one (or more) intersections
        if (intersects.length) {
            for(var j = 0; j < intersects.length; j++) {
                if(intersects[j].object.name === 'handle') {
                    intersectingHandles.push(intersects[j]);
                }
                else if(intersects[j].object.name === 'fill') {
                    intersectingShapes.push(intersects[j]);
                }
            }
        }
    }

    var sorted;

    if(intersectingHandles.length) {
        sorted = intersectingHandles.sort(function(a, b){ return a.distance - b.distance; });
        console.log(sorted);
        return sorted[0].object;
    }
    else if(intersectingShapes.length) {
        sorted = intersectingShapes.sort(function(a, b){ return a.distance - b.distance; });
        console.log(sorted);
        return sorted[0].object.parent;
    }
};

/**
 * Return the pointer (click) position relative to the sphere
 * @returns {*}
 * @private
 */
EditorRenderer.prototype.getClickPositionOnSphere_ = function () {

    // create a Ray with origin at the mouse position
    //   and direction into the scene (camera direction)
    var camera = this.worldRenderer.camera;
    var vector = new THREE.Vector3(this.pointer.x, this.pointer.y, 1);
    vector.unproject(camera);
    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());

    // create an array containing all objects in the scene with which the ray intersects
    var targetList = this.scene.getObjectByName('photo').children;
    var intersects = ray.intersectObjects(targetList);

    // if there is one (or more) intersections
    if (intersects.length > 0) {
        return intersects[0].point;
    }

};


EditorRenderer.prototype.translateShape_ = function (shape, fromPoint, toPoint) {

    var quaternion = new THREE.Quaternion().setFromUnitVectors(fromPoint.normalize(), toPoint.normalize());

    for(var i = 0; i < shape.children.length; i++) {
        if(shape.children[i].name === 'handle') {
            shape.children[i].position.applyQuaternion(quaternion);
        }
    }

    this.updateShapeFill_(shape, true);
};

EditorRenderer.prototype.getPointPositionOnSphere_ = function (point) {

    // create a Ray with origin at the mouse position
    //   and direction into the scene (camera direction)
    var camera = this.worldRenderer.camera;
    var vector = new THREE.Vector3(point.x, point.y, point.z);
    vector.unproject(camera);
    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());

    // create an array containing all objects in the scene with which the ray intersects
    var targetList = this.scene.getObjectByName('photo').children;
    var intersects = ray.intersectObjects(targetList);

    // if there is one (or more) intersections
    if (intersects.length > 0) {
        //var h = this.createHandle_(intersects[0].point);
        //this.selectedShape.add(h);
        return intersects[0].point;
    }

};

/**
 * Update mouse position
 * @param e
 * @private
 */
EditorRenderer.prototype.updateMouse_ = function (e) {
    var size = this.getSize_();
    this.pointer.x = (e.clientX / size.width) * 2 - 1;
    this.pointer.y = -(e.clientY / size.height) * 2 + 1;
};

/**
 * Get viewport size
 * @returns {*}
 * @private
 */
EditorRenderer.prototype.getSize_ = function () {
    return this.worldRenderer.renderer.getSize();
};

/**
 * Check if a point is near to another
 * @param p1
 * @param p2
 * @returns {boolean}
 * @private
 */
EditorRenderer.prototype.isPointNearTo_ = function (p1, p2) {
    var gutter = 0.05;

    //console.log((Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y-p2.y, 2) + Math.pow(p1.z-p2.z, 2)), Math.pow(gutter, 2));

    return (Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y-p2.y, 2) + Math.pow(p1.z-p2.z, 2)) < Math.pow(gutter, 2)
};

module.exports = EditorRenderer;
},{"../util":22,"eventemitter3":2,"tween.js":6}],11:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Eyes = {
  LEFT: 1,
  RIGHT: 2
};

module.exports = Eyes;

},{}],12:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EventEmitter = require('eventemitter3');
var TWEEN = require('tween.js');

// Constants for the focus/blur animation.
var NORMAL_SCALE = new THREE.Vector3(1, 1, 1);
var FOCUS_SCALE = new THREE.Vector3(1.2, 1.2, 1.2);
var FOCUS_DURATION = 200;

// Constants for the active/inactive animation.
var INACTIVE_COLOR = new THREE.Color(1, 1, 1);
var ACTIVE_COLOR = new THREE.Color(0.8, 0, 0);
var ACTIVE_DURATION = 100;

// Constants for opacity.
var MAX_INNER_OPACITY = 0.8;
var MAX_OUTER_OPACITY = 0.5;
var FADE_START_ANGLE_DEG = 35;
var FADE_END_ANGLE_DEG = 60;
/**
 * Responsible for rectangular hot spots that the user can interact with.
 *
 * Specific duties:
 *   Adding and removing hotspots.
 *   Rendering the hotspots (debug mode only).
 *   Notifying when hotspots are interacted with.
 *
 * Emits the following events:
 *   click (id): a hotspot is clicked.
 *   focus (id): a hotspot is focused.
 *   blur (id): a hotspot is no longer hovered over.
 */
function HotspotRenderer(worldRenderer) {
  this.worldRenderer = worldRenderer;
  this.scene = worldRenderer.scene;

  // Note: this event must be added to document.body and not to window for it to
  // work inside iOS iframes.
  var body = document.body;
  // Bind events for hotspot interaction.
  if (!Util.isMobile()) {
    // Only enable mouse events on desktop.
    body.addEventListener('mousedown', this.onMouseDown_.bind(this), false);
    body.addEventListener('mousemove', this.onMouseMove_.bind(this), false);
    body.addEventListener('mouseup', this.onMouseUp_.bind(this), false);
  }
  body.addEventListener('touchstart', this.onTouchStart_.bind(this), false);
  body.addEventListener('touchend', this.onTouchEnd_.bind(this), false);

  // Add a placeholder for hotspots.
  this.hotspotRoot = new THREE.Object3D();
  // Align the center with the center of the camera too.
  this.hotspotRoot.rotation.y = Math.PI / 2;
  this.scene.add(this.hotspotRoot);

  // All hotspot IDs.
  this.hotspots = {};

  // Currently selected hotspots.
  this.selectedHotspots = {};

  // Hotspots that the last touchstart / mousedown event happened for.
  this.downHotspots = {};

  // For raycasting. Initialize mouse to be off screen initially.
  this.pointer = new THREE.Vector2(1, 1);
  this.raycaster = new THREE.Raycaster();
}
HotspotRenderer.prototype = new EventEmitter();

/**
 * @param pitch {Number} The latitude of center, specified in degrees, between
 * -90 and 90, with 0 at the horizon.
 * @param yaw {Number} The longitude of center, specified in degrees, between
 * -180 and 180, with 0 at the image center.
 * @param radius {Number} The radius of the hotspot, specified in meters.
 * @param distance {Number} The distance of the hotspot from camera, specified
 * in meters.
 * @param hotspotId {String} The ID of the hotspot.
 */
HotspotRenderer.prototype.add = function(pitch, yaw, radius, distance, id, customShape) {
  // If a hotspot already exists with this ID, stop.
  if (this.hotspots[id]) {
    // TODO: Proper error reporting.
    console.error('Attempt to add hotspot with existing id %s.', id);
    return;
  }

  var hotspot;
  if(customShape) {

      hotspot = this.createCustomHotspot_(customShape, distance);
      hotspot.name = id;

      // Position the hotspot based on the pitch and yaw specified.
      //var quat = new THREE.Quaternion();
      //quat.setFromEuler(new THREE.Euler(THREE.Math.degToRad(pitch), THREE.Math.degToRad(yaw), 0));
      //hotspot.position.applyQuaternion(quat);
      //hotspot.lookAt(new THREE.Vector3());

      var r = 1;
      var theta = 2 * Math.PI * yaw;
      var phi = Math.PI * pitch;

      var _x = Math.cos(theta) * Math.sin(phi) * r;
      var _y = Math.sin(theta) * Math.sin(phi) * r;
      var _z = -Math.cos(phi) * r;

      hotspot.position.z = _z;
      hotspot.position.x = _x;
      hotspot.position.y = _y;
      hotspot.lookAt(new THREE.Vector3());

      this.hotspotRoot.add(hotspot);
      this.hotspots[id] = hotspot;

  } else {
      hotspot = this.createHotspot_(radius, distance);
      hotspot.name = id;

      // Position the hotspot based on the pitch and yaw specified.
      var quat = new THREE.Quaternion();
      quat.setFromEuler(new THREE.Euler(THREE.Math.degToRad(pitch), THREE.Math.degToRad(yaw), 0));
      hotspot.position.applyQuaternion(quat);
      hotspot.lookAt(new THREE.Vector3());

      this.hotspotRoot.add(hotspot);
      this.hotspots[id] = hotspot;
  }

}

/**
 * Removes a hotspot based on the ID.
 *
 * @param ID {String} Identifier of the hotspot to be removed.
 */
HotspotRenderer.prototype.remove = function(id) {
  // If there's no hotspot with this ID, fail.
  if (!this.hotspots[id]) { 
    // TODO: Proper error reporting.
    console.error('Attempt to remove non-existing hotspot with id %s.', id);
    return;
  }
  // Remove the mesh from the scene.
  this.hotspotRoot.remove(this.hotspots[id]);

  // If this hotspot was selected, make sure it gets unselected.
  delete this.selectedHotspots[id];
  delete this.downHotspots[id];
  delete this.hotspots[id];
  this.emit('blur', id);
};

/**
 * Clears all hotspots from the pano. Often called when changing panos.
 */
HotspotRenderer.prototype.clearAll = function() {
  for (var id in this.hotspots) {
    this.remove(id);
  }
};

HotspotRenderer.prototype.getCount = function() {
  var count = 0;
  for (var id in this.hotspots) {
    count += 1;
  }
  return count;
};

HotspotRenderer.prototype.update = function(camera) {
  if (this.worldRenderer.isVRMode()) {
    this.pointer.set(0, 0);
  }
  // Update the picking ray with the camera and mouse position.
  this.raycaster.setFromCamera(this.pointer, camera);	

  // Fade hotspots out if they are really far from center to avoid overly
  // distorted visuals.
  this.fadeOffCenterHotspots_(camera);

  var hotspots = this.hotspotRoot.children;

  // Go through all hotspots to see if they are currently selected.
  for (var i = 0; i < hotspots.length; i++) {
    var hotspot = hotspots[i];
    //hotspot.lookAt(camera.position);
    var id = hotspot.name;
    // Check if hotspot is intersected with the picking ray.
    var intersects = this.raycaster.intersectObjects(hotspot.children);
    var isIntersected = (intersects.length > 0);

    // If newly selected, emit a focus event.
    if (isIntersected && !this.selectedHotspots[id]) {
      this.emit('focus', id);
      this.focus_(id);
    }
    // If no longer selected, emit a blur event.
    if (!isIntersected && this.selectedHotspots[id]) {
      this.emit('blur', id);
      this.blur_(id);
    }
    // Update the set of selected hotspots.
    if (isIntersected) {
      this.selectedHotspots[id] = true;
    } else {
      delete this.selectedHotspots[id];
    }
  }
};

/**
 * Toggle whether or not hotspots are visible.
 */
HotspotRenderer.prototype.setVisibility = function(isVisible) {
  this.hotspotRoot.visible = isVisible;
};

HotspotRenderer.prototype.onTouchStart_ = function(e) {
  // In VR mode, don't touch the pointer position.
  if (!this.worldRenderer.isVRMode()) {
    this.updateTouch_(e);
  }

  // Force a camera update to see if any hotspots were selected.
  this.update(this.worldRenderer.camera);

  this.downHotspots = {};
  for (var id in this.selectedHotspots) {
    this.downHotspots[id] = true;
    this.down_(id);
  }
  return false;
};

HotspotRenderer.prototype.onTouchEnd_ = function(e) {
  // If no hotspots are pressed, emit an empty click event.
  if (Util.isEmptyObject(this.downHotspots)) {
    this.emit('click');
    return;
  }

  // Only emit a click if the finger was down on the same hotspot before.
  for (var id in this.downHotspots) {
    this.emit('click', id);
    this.up_(id);
    e.preventDefault();
  }
};

HotspotRenderer.prototype.updateTouch_ = function(e) {
  var size = this.getSize_();
  var touch = e.touches[0];
	this.pointer.x = (touch.clientX / size.width) * 2 - 1;
	this.pointer.y = - (touch.clientY / size.height) * 2 + 1;	
};

HotspotRenderer.prototype.onMouseDown_ = function(e) {
  this.updateMouse_(e);

  this.downHotspots = {};
  for (var id in this.selectedHotspots) {
    this.downHotspots[id] = true;
    this.down_(id);
  }
};

HotspotRenderer.prototype.onMouseMove_ = function(e) {
  this.updateMouse_(e);
};

HotspotRenderer.prototype.onMouseUp_ = function(e) {
  this.updateMouse_(e);

  // If no hotspots are pressed, emit an empty click event.
  if (Util.isEmptyObject(this.downHotspots)) {
    this.emit('click', null, this.pointer.x, this.pointer.y);
    return;
  }

  // Only emit a click if the mouse was down on the same hotspot before.
  for (var id in this.selectedHotspots) {
    if (id in this.downHotspots) {
      this.emit('click', id, this.pointer.x, this.pointer.y);
      this.up_(id);
    }
  }
};

HotspotRenderer.prototype.updateMouse_ = function(e) {
  var size = this.getSize_();
	this.pointer.x = (e.clientX / size.width) * 2 - 1;
	this.pointer.y = - (e.clientY / size.height) * 2 + 1;	
};

HotspotRenderer.prototype.getSize_ = function() {
  var canvas = this.worldRenderer.renderer.domElement;
  return this.worldRenderer.renderer.getSize();
};

HotspotRenderer.prototype.createHotspot_ = function(radius, distance) {
  var innerGeometry = new THREE.CircleGeometry(radius, 32);

  var innerMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff, side: THREE.DoubleSide, transparent: true,
    opacity: MAX_INNER_OPACITY, depthTest: false
  });

  var inner = new THREE.Mesh(innerGeometry, innerMaterial);
  inner.name = 'inner';

  var outerMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff, side: THREE.DoubleSide, transparent: true,
    opacity: MAX_OUTER_OPACITY, depthTest: false
  });
  var outerGeometry = new THREE.RingGeometry(radius * 0.85, radius, 32);
  var outer = new THREE.Mesh(outerGeometry, outerMaterial);
  outer.name = 'outer';

  // Position at the extreme end of the sphere.
  var hotspot = new THREE.Object3D();
  hotspot.position.z = -distance;
  hotspot.scale.set(NORMAL_SCALE);

  hotspot.add(inner);
  hotspot.add(outer);

  return hotspot;
};

HotspotRenderer.prototype.createCustomHotspot_ = function(points, distance) {
    if(points.length < 3) {
        return false;
    }

    // shape
    var shapeBounds = new THREE.Shape();
    shapeBounds.moveTo(points[0].x, points[0].y); // start point
    for (var i = 1; i < points.length; i++) {
        shapeBounds.lineTo(points[i].x, points[i].y); // line to next point
    }

    // inner shape
    var innerGeometry = new THREE.ShapeGeometry(shapeBounds);
    var innerMaterial = new THREE.MeshBasicMaterial({
        color: 0xffffff, side: THREE.DoubleSide, transparent: true,
        opacity: MAX_INNER_OPACITY, depthTest: false
    });

    var inner = new THREE.Mesh(innerGeometry, innerMaterial);
    inner.name = 'inner';

    // outer shape
    var outerGeometry = shapeBounds.createPointsGeometry();
    var outerMaterial = new THREE.LineBasicMaterial( {
        color: 0xffffff, side: THREE.DoubleSide, transparent: true,
        opacity: MAX_OUTER_OPACITY, depthTest: false
    });

    var outer = new THREE.Line( outerGeometry, outerMaterial );
    outer.name = 'outer';

    // Position at the extreme end of the sphere.
    var hotspot = new THREE.Object3D();
    hotspot.position.z = -distance;
    hotspot.scale.set(NORMAL_SCALE);

    hotspot.add(inner);
    hotspot.add(outer);

    console.log('CircleHotspot', hotspot);

    return hotspot;
};

/**
 * Large aspect ratios tend to cause visually jarring distortions on the sides.
 * Here we fade hotspots out to avoid them.
 */
HotspotRenderer.prototype.fadeOffCenterHotspots_ = function(camera) {
  var lookAt = new THREE.Vector3(1, 0, 0);
  lookAt.applyQuaternion(camera.quaternion);
  // Take into account the camera parent too.
  lookAt.applyQuaternion(camera.parent.quaternion);

  // Go through each hotspot. Calculate how far off center it is.
  for (var id in this.hotspots) {
    var hotspot = this.hotspots[id];
    var angle = hotspot.position.angleTo(lookAt);
    var angleDeg = THREE.Math.radToDeg(angle);
    var isVisible = angleDeg < 45;
    var opacity;
    if (angleDeg < FADE_START_ANGLE_DEG) {
      opacity = 1;
    } else if (angleDeg > FADE_END_ANGLE_DEG) {
      opacity = 0;
    } else {
      // We are in the case START < angle < END. Linearly interpolate.
      var range = FADE_END_ANGLE_DEG - FADE_START_ANGLE_DEG;
      var value = FADE_END_ANGLE_DEG - angleDeg;
      opacity = value / range;
    }

    // Opacity a function of angle. If angle is large, opacity is zero. At some
    // point, ramp opacity down.
    this.setOpacity_(id, opacity);
  }
};

HotspotRenderer.prototype.focus_ = function(id) {
  var hotspot = this.hotspots[id];

  // Tween scale of hotspot.
  this.tween = new TWEEN.Tween(hotspot.scale).to(FOCUS_SCALE, FOCUS_DURATION)
      .easing(TWEEN.Easing.Quadratic.InOut)
      .start();
};

HotspotRenderer.prototype.blur_ = function(id) {
  var hotspot = this.hotspots[id];

  this.tween = new TWEEN.Tween(hotspot.scale).to(NORMAL_SCALE, FOCUS_DURATION)
      .easing(TWEEN.Easing.Quadratic.InOut)
      .start();
};

HotspotRenderer.prototype.down_ = function(id) {
  // Become active.
  var hotspot = this.hotspots[id];
  var outer = hotspot.getObjectByName('inner');

  this.tween = new TWEEN.Tween(outer.material.color).to(ACTIVE_COLOR, ACTIVE_DURATION)
      .start();
};

HotspotRenderer.prototype.up_ = function(id) {
  // Become inactive.
  var hotspot = this.hotspots[id];
  var outer = hotspot.getObjectByName('inner');

  this.tween = new TWEEN.Tween(outer.material.color).to(INACTIVE_COLOR, ACTIVE_DURATION)
      .start();
};

HotspotRenderer.prototype.setOpacity_ = function(id, opacity) {
  var hotspot = this.hotspots[id];
  var outer = hotspot.getObjectByName('outer');
  var inner = hotspot.getObjectByName('inner');

  outer.material.opacity = opacity * MAX_OUTER_OPACITY;
  inner.material.opacity = opacity * MAX_INNER_OPACITY;
};

module.exports = HotspotRenderer;

},{"eventemitter3":2,"tween.js":6}],13:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EventEmitter = require('eventemitter3');
var Message = require('../message');
var Util = require('../util');


/**
 * Sits in an embedded iframe, receiving messages from a containing
 * iFrame. This facilitates an API which provides the following features:
 *
 *    Playing and pausing content.
 *    Adding hotspots.
 *    Sending messages back to the containing iframe when hotspot is clicked
 *    Sending analytics events to containing iframe.
 *
 * Note: this script used to also respond to synthetic devicemotion events, but
 * no longer does so. This is because as of iOS 9.2, Safari disallows listening
 * for devicemotion events within cross-device iframes. To work around this, the
 * webvr-polyfill responds to the postMessage event containing devicemotion
 * information (sent by the iframe-message-sender in the VR View API).
 */
function IFrameMessageReceiver() {
  window.addEventListener('message', this.onMessage_.bind(this), false);
}
IFrameMessageReceiver.prototype = new EventEmitter();

IFrameMessageReceiver.prototype.onMessage_ = function(event) {
  if (Util.isDebug()) {
    console.log('onMessage_', event);
  }

  var message = event.data;
  var type = message.type.toLowerCase();
  var data = message.data;

  switch (type) {
    case Message.SET_CONTENT:
    case Message.SET_VOLUME:
    case Message.ADD_HOTSPOT:
    case Message.PLAY:
    case Message.PAUSE:
    case Message.GET_POSITION:
    case Message.START_DRAW:
    case Message.END_DRAW:
    case Message.ADD_SHAPE:
    case Message.EDIT_SHAPE:
    case Message.REMOVE_SHAPE:
    case Message.ADD_SHAPE_KEYFRAME:
    case Message.EDIT_SHAPE_KEYFRAME:
    case Message.REMOVE_SHAPE_KEYFRAME:
    case Message.SET_CURRENT_TIME:
    case Message.SEEK:
      this.emit(type, data);
      break;
    default:
      if (Util.isDebug()) {
        console.warn('Got unknown message of type %s from %s', message.type, message.origin);
      }
  }
};

module.exports = IFrameMessageReceiver;

},{"../message":21,"../util":22,"eventemitter3":2}],14:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shows a 2D loading indicator while various pieces of EmbedVR load.
 */
function LoadingIndicator() {
  this.el = this.build_();
  document.body.appendChild(this.el);
  this.show();
}

LoadingIndicator.prototype.build_ = function() {
  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.top = 0;
  s.left = 0;
  s.width = '100%';
  s.height = '100%';
  s.background = '#eee';
  var img = document.createElement('img');
  img.src = 'images/loading.gif';
  var s = img.style;
  s.position = 'absolute';
  s.top = '50%';
  s.left = '50%';
  s.transform = 'translate(-50%, -50%)';

  overlay.appendChild(img);
  return overlay;
};

LoadingIndicator.prototype.hide = function() {
  this.el.style.display = 'none';
};

LoadingIndicator.prototype.show = function() {
  this.el.style.display = 'block';
};

module.exports = LoadingIndicator;

},{}],15:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Initialize the loading indicator as quickly as possible to give the user
// immediate feedback.
var LoadingIndicator = require('./loading-indicator');
var loadIndicator = new LoadingIndicator();

var ES6Promise = require('es6-promise');
// Polyfill ES6 promises for IE.
ES6Promise.polyfill();

var IFrameMessageReceiver = require('./iframe-message-receiver');
var Message = require('../message');
var SceneInfo = require('./scene-info');
var Stats = require('../../node_modules/stats-js/build/stats.min');
var Util = require('../util');
var WebVRPolyfill = require('webvr-polyfill');
var WorldRenderer = require('./world-renderer');

var receiver = new IFrameMessageReceiver();
receiver.on(Message.PLAY, onPlayRequest);
receiver.on(Message.PAUSE, onPauseRequest);
receiver.on(Message.ADD_HOTSPOT, onAddHotspot);
receiver.on(Message.SET_CONTENT, onSetContent);
receiver.on(Message.SET_VOLUME, onSetVolume);
receiver.on(Message.GET_POSITION, onGetPosition);
receiver.on(Message.START_DRAW, onStartDraw);
receiver.on(Message.END_DRAW, onEndDraw);
receiver.on(Message.ADD_SHAPE, onAddShape);
receiver.on(Message.ADD_SHAPE_KEYFRAME, onAddShapeKeyframe);
receiver.on(Message.EDIT_SHAPE_KEYFRAME, onEditShapeKeyframe);
receiver.on(Message.REMOVE_SHAPE_KEYFRAME, onRemoveShapeKeyframe);
receiver.on(Message.EDIT_SHAPE, onEditShape);
receiver.on(Message.REMOVE_SHAPE, onRemoveShape);
receiver.on(Message.CLEAR_SHAPES, onClearShapes);
receiver.on(Message.SET_CURRENT_TIME, onUpdateTime);

window.addEventListener('load', onLoad);

var stats = new Stats();

var worldRenderer = new WorldRenderer();
worldRenderer.on('error', onRenderError);
worldRenderer.on('load', onRenderLoad);
worldRenderer.on('modechange', onModeChange);
worldRenderer.hotspotRenderer.on('click', onHotspotClick);
worldRenderer.editorRenderer.on('drawn', onEditorShapeDrawn);
worldRenderer.editorRenderer.on('transformed', onEditorShapeTransformed);
worldRenderer.editorRenderer.on('shapeselected', onEditorShapeSelected);
worldRenderer.editorRenderer.on('shapeunselected', onEditorShapeUnselected);
worldRenderer.on('ended', onEnded);
worldRenderer.on('play', onPlay);

window.worldRenderer = worldRenderer;

var isReadySent = false;
var volume = 0;

function onLoad() {
    if (!Util.isWebGLEnabled()) {
        showError('WebGL not supported.');
        return;
    }

    // Load the scene.
    var scene = SceneInfo.loadFromGetParams();
    worldRenderer.setScene(scene);

    if (scene.isDebug) {
        // Show stats.
        showStats();
    }

    if (scene.isYawOnly) {
        WebVRConfig = window.WebVRConfig || {};
        WebVRConfig.YAW_ONLY = true;
    }

    requestAnimationFrame(loop);
}


function onVideoTap() {
    worldRenderer.videoProxy.play();
    hidePlayButton();

    // Prevent multiple play() calls on the video element.
    document.body.removeEventListener('touchend', onVideoTap);
}

function onRenderLoad(event) {
    if (event.videoElement) {
        var scene = SceneInfo.loadFromGetParams();
        // On mobile, tell the user they need to tap to start. Otherwise, autoplay.
        if (Util.isMobile()) {
            // Tell user to tap to start.
            showPlayButton();
            document.body.addEventListener('touchend', onVideoTap);
        } else if(scene.autoplay) {
            event.videoElement.play();
        } else if(!scene.autoplay) {
            onPause();
        }

        // Attach to pause and play events, to notify the API.
        event.videoElement.addEventListener('pause', onPause);
        event.videoElement.addEventListener('play', onPlay);
        event.videoElement.addEventListener('timeupdate', onGetCurrentTime);
        event.videoElement.addEventListener('ended', onEnded);
    }
    // Hide loading indicator.
    loadIndicator.hide();

    // Autopan only on desktop, for photos only, and only if autopan is enabled.
    if (!Util.isMobile() && !worldRenderer.sceneInfo.video && !worldRenderer.sceneInfo.isAutopanOff) {
        worldRenderer.autopan();
    }

    // Notify the API that we are ready, but only do this once.
    if (!isReadySent) {
        Util.sendParentMessage({
            type: 'ready',
            data: {
                duration: worldRenderer.sceneInfo.video ? event.videoElement.duration : 0
            }
        });
        isReadySent = true;
    }
}

function onPlayRequest() {
    if (!worldRenderer.videoProxy) {
        onApiError('Attempt to pause, but no video found.');
        return;
    }
    worldRenderer.videoProxy.play();
}

function onPauseRequest() {
    if (!worldRenderer.videoProxy) {
        onApiError('Attempt to pause, but no video found.');
        return;
    }
    worldRenderer.videoProxy.pause();
}

function onAddHotspot(e) {
    if (Util.isDebug()) {
        console.log('onAddHotspot', e);
    }
    // TODO: Implement some validation?

    var pitch = parseFloat(e.pitch);
    var yaw = parseFloat(e.yaw);
    var radius = parseFloat(e.radius);
    var distance = parseFloat(e.distance);
    var customShape = e.custom;
    var id = e.id;
    worldRenderer.hotspotRenderer.add(pitch, yaw, radius, distance, id, customShape);
}

function onSetContent(e) {
    if (Util.isDebug()) {
        console.log('onSetContent', e);
    }
    // Remove all of the shapes.
    worldRenderer.editorRenderer.clearShapes();
    // Remove all of the hotspots.
    worldRenderer.hotspotRenderer.clearAll();
    // Fade to black.
    worldRenderer.sphereRenderer.setOpacity(0, 500).then(function () {
        // Then load the new scene.
        var scene = SceneInfo.loadFromAPIParams(e.contentInfo);
        worldRenderer.destroy();

        // Update the URL to reflect the new scene. This is important particularily
        // on iOS where we use a fake fullscreen mode.
        var url = scene.getCurrentUrl();
        //console.log('Updating url to be %s', url);
        window.history.pushState(null, 'VR View', url);

        // And set the new scene.
        return worldRenderer.setScene(scene);
    }).then(function () {
        // Then fade the scene back in.
        worldRenderer.sphereRenderer.setOpacity(1, 500);
    });
}

function onSetVolume(e) {
    // Only work for video. If there's no video, send back an error.
    if (!worldRenderer.videoProxy) {
        onApiError('Attempt to set volume, but no video found.');
        return;
    }
    worldRenderer.videoProxy.setVolume(e.volumeLevel);
    volume = e.volumeLevel;
    Util.sendParentMessage({
        type: 'volumechange',
        data: e.volumeLevel
    });
}

function onUpdateTime(time) {

    if (!worldRenderer.videoProxy) {
        onApiError('Attempt to pause, but no video found.');
        return;
    }

    worldRenderer.videoProxy.setCurrentTime(time);
    worldRenderer.editorRenderer.update(null, time);
    onGetCurrentTime();
}

function onGetCurrentTime() {
    var time = worldRenderer.videoProxy.getCurrentTime();
    Util.sendParentMessage({
        type: 'timeupdate',
        data: time
    });
}

function onEnded() {
    Util.sendParentMessage({
        type: 'ended',
        data: true
    });
}

function onApiError(message) {
    console.error(message);
    Util.sendParentMessage({
        type: 'error',
        data: {message: message}
    });
}

function onModeChange(mode) {
    Util.sendParentMessage({
        type: 'modechange',
        data: {mode: mode}
    });
}

function onHotspotClick(id) {
    Util.sendParentMessage({
        type: 'click',
        data: {id: id}
    });
}

function onPlay() {
    Util.sendParentMessage({
        type: 'paused',
        data: false
    });
}

function onPause() {
    Util.sendParentMessage({
        type: 'paused',
        data: true
    });
}

function onSceneError(message) {
    showError('Loader: ' + message);
}

function onRenderError(message) {
    showError('Render: ' + message);
}

function showError(message, opt_title) {
    // Hide loading indicator.
    loadIndicator.hide();

    var error = document.querySelector('#error');
    error.classList.add('visible');
    error.querySelector('.message').innerHTML = message;

    var title = (opt_title !== undefined ? opt_title : 'Error');
    error.querySelector('.title').innerHTML = title;
}

function hideError() {
    var error = document.querySelector('#error');
    error.classList.remove('visible');
}

function showPlayButton() {
    var playButton = document.querySelector('#play-overlay');
    playButton.classList.add('visible');
}

function hidePlayButton() {
    var playButton = document.querySelector('#play-overlay');
    playButton.classList.remove('visible');
}

function showStats() {
    stats.setMode(0); // 0: fps, 1: ms

    // Align bottom-left.
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.left = '0px';
    stats.domElement.style.bottom = '0px';
    document.body.appendChild(stats.domElement);
}

function loop(time) {
    // Use the VRDisplay RAF if it is present.
    if (worldRenderer.vrDisplay) {
        worldRenderer.vrDisplay.requestAnimationFrame(loop);
    } else {
        requestAnimationFrame(loop);
    }

    stats.begin();
    // Update the video if needed.
    if (worldRenderer.videoProxy) {
        worldRenderer.videoProxy.update(time);
    }
    worldRenderer.render(time);
    worldRenderer.submitFrame();
    stats.end();
}

function onGetPosition() {
    Util.sendParentMessage({
        type: Message.GET_POSITION,
        data: {
            Yaw: worldRenderer.camera.rotation.y * 180 / Math.PI,
            Pitch: worldRenderer.camera.rotation.x * 180 / Math.PI
        }
    });
}

function onStartDraw() {
    // activate draw tool
    worldRenderer.editorRenderer.startDraw();
}
function onEndDraw() {
    // deactivate draw tool
    worldRenderer.editorRenderer.endDraw();
}
function onEditorShapeDrawn(shape) {
    // on shape drawn
    Util.sendParentMessage({
        type: Message.END_DRAW,
        data: {
            id: shape.name,
            vertices: shape.children.filter(function (el) {
                return el.name === 'handle';
            }).map(function (el) {
                return el.position;
            })
        }
    });
}
function onEditorShapeTransformed(shape) {
    // on shape drawn
    Util.sendParentMessage({
        type: Message.SHAPE_TRANSFORMED,
        data: {
            id: shape.name,
            vertices: shape.children.filter(function (el) {
                return el.name === 'handle';
            }).map(function (el) {
                return el.position;
            })
        }
    });
}


function onEditorShapeSelected(shape) {
    // on shape selected
    Util.sendParentMessage({
        type: Message.SHAPE_SELECTED,
        data: {
            id: shape.name
        }
    });
}

function onEditorShapeUnselected() {
    // on shape selected
    Util.sendParentMessage({
        type: Message.SHAPE_UNSELECTED,
        data: false
    });
}

function onAddShape(data) {
    // on external shape add

    var vertices = data.params.vertices;

    if (vertices.length && !(vertices[0] instanceof THREE.Vector3)) {
        vertices = vertices.map(function (p) {
            return new THREE.Vector3(p.x, p.y, p.z);
        })
    }

    worldRenderer.editorRenderer.createShape(vertices, data.id);
}

function onAddShapeKeyframe(data) {

    var vertices = data.params.vertices;
    var frame = data.params.frame;

    if (vertices.length && !(vertices[0] instanceof THREE.Vector3)) {
        vertices = vertices.map(function (p) {
            return new THREE.Vector3(p.x, p.y, p.z);
        })
    }

    console.log('Adding shape ' + data.id, frame, vertices)

    worldRenderer.editorRenderer.addShapeKeyframe(data.id, frame, vertices);

}

function onEditShapeKeyframe(data) {

    var vertices = data.params.vertices;
    var frame = data.params.frame;

    if (vertices.length && !(vertices[0] instanceof THREE.Vector3)) {
        vertices = vertices.map(function (p) {
            return new THREE.Vector3(p.x, p.y, p.z);
        })
    }

    console.log('Updating shape ' + data.id, frame, vertices);

    worldRenderer.editorRenderer.editShapeKeyframe(data.id, frame, vertices);
}


function onRemoveShapeKeyframe(data) {
    var frame = data.params.frame;
    worldRenderer.editorRenderer.removeShapeKeyframe(data.id, frame);
}

function onEditShape(data) {
    worldRenderer.editorRenderer.editShape(data.id);
}

function onRemoveShape(data) {
    worldRenderer.editorRenderer.removeShape(data.id);
}

function onClearShapes() {
    worldRenderer.editorRenderer.clearShapes();
}

function onSeek(data) {
    if (!worldRenderer.videoProxy) {
        onApiError('Attempt to seek, but no video found.');
        return;
    }
    worldRenderer.videoProxy.seek(); // data.frame
}
},{"../../node_modules/stats-js/build/stats.min":5,"../message":21,"../util":22,"./iframe-message-receiver":13,"./loading-indicator":14,"./scene-info":17,"./world-renderer":20,"es6-promise":1,"webvr-polyfill":8}],16:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function ReticleRenderer(camera) {
  this.camera = camera;

  this.reticle = this.createReticle_();
  // In front of the hotspot itself, which is at r=0.99.
  this.reticle.position.z = -0.97;
  camera.add(this.reticle);

  this.setVisibility(false);
}

ReticleRenderer.prototype.setVisibility = function(isVisible) {
  // TODO: Tween the transition.
  this.reticle.visible = isVisible;
};

ReticleRenderer.prototype.createReticle_ = function() {
  // Make a torus.
  var geometry = new THREE.TorusGeometry(0.02, 0.005, 10, 20);
  var material = new THREE.MeshBasicMaterial({color: 0x000000});
  var torus = new THREE.Mesh(geometry, material);

  return torus;
};

module.exports = ReticleRenderer;

},{}],17:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CAMEL_TO_UNDERSCORE = {
    video: 'video',
    image: 'image',
    preview: 'preview',
    loop: 'loop',
    autoplay: 'autoplay',
    isStereo: 'is_stereo',
    defaultYaw: 'default_yaw',
    isYawOnly: 'is_yaw_only',
    isDebug: 'is_debug',
    isVROff: 'is_vr_off',
    isAutopanOff: 'is_autopan_off',
};

/**
 * Contains all information about a given scene.
 */
function SceneInfo(opt_params) {
    var params = opt_params || {};

    this.image = params.image;
    this.preview = params.preview;
    this.video = params.video;
    this.defaultYaw = THREE.Math.degToRad(params.defaultYaw || 0);

    this.isStereo = Util.parseBoolean(params.isStereo);
    this.isYawOnly = Util.parseBoolean(params.isYawOnly);
    this.isDebug = Util.parseBoolean(params.isDebug);
    this.isVROff = Util.parseBoolean(params.isVROff);
    this.isAutopanOff = Util.parseBoolean(params.isAutopanOff);
    this.loop = Util.parseBoolean(params.loop);
    this.autoplay = Util.parseBoolean(params.autoplay);
}

SceneInfo.loadFromGetParams = function () {
    var params = {};
    for (var camelCase in CAMEL_TO_UNDERSCORE) {
        var underscore = CAMEL_TO_UNDERSCORE[camelCase];
        params[camelCase] = Util.getQueryParameter(underscore);
    }
    var scene = new SceneInfo(params);
    if (!scene.isValid()) {
        console.warn('Invalid scene: %s', scene.errorMessage);
    }
    return scene;
};

SceneInfo.loadFromAPIParams = function (underscoreParams) {
    var params = {};
    for (var camelCase in CAMEL_TO_UNDERSCORE) {
        var underscore = CAMEL_TO_UNDERSCORE[camelCase];
        if (underscoreParams[underscore]) {
            params[camelCase] = underscoreParams[underscore];
        }
    }
    var scene = new SceneInfo(params);
    if (!scene.isValid()) {
        console.warn('Invalid scene: %s', scene.errorMessage);
    }
    return scene;
};

SceneInfo.prototype.isValid = function () {
    // Either it's an image or a video.
    if (!this.image && !this.video) {
        this.errorMessage = 'Either image or video URL must be specified.';
        return false;
    }
    if (this.image && this.video) {
        this.errorMessage = 'Both image and video URL can\'t be specified.';
        return false;
    }
    if (this.image && !this.isValidImage_(this.image)) {
        this.errorMessage = 'Invalid image URL: ' + this.image;
        return false;
    }
    this.errorMessage = null;
    return true;
};

/**
 * Generates a URL to reflect this scene.
 */
SceneInfo.prototype.getCurrentUrl = function () {
    var url = location.protocol + '//' + location.host + location.pathname + '?';
    for (var camelCase in CAMEL_TO_UNDERSCORE) {
        var underscore = CAMEL_TO_UNDERSCORE[camelCase];
        var value = this[camelCase];
        if (value !== undefined) {
            url += underscore + '=' + value + '&';
        }
    }
    // Chop off the trailing ampersand.
    return url.substring(0, url.length - 1);
};

SceneInfo.prototype.isValidImage_ = function (imageUrl) {
    return true;
};

module.exports = SceneInfo;

},{}],18:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Eyes = require('./eyes');
var TWEEN = require('tween.js');
var Util = require('../util');

function SphereRenderer(scene) {
  this.scene = scene;

  // Create a transparent mask.
  this.createOpacityMask_();
}

/**
 * Sets the photosphere based on the image in the source. Supports stereo and
 * mono photospheres.
 *
 * @return {Promise}
 */
SphereRenderer.prototype.setPhotosphere = function(src, opt_params) {
  return new Promise(function(resolve, reject) {
    this.resolve = resolve;
    this.reject = reject;

    var params = opt_params || {};

    this.isStereo = !!params.isStereo;
    this.src = src;

    // Load texture.
    var loader = new THREE.TextureLoader();
    loader.crossOrigin = 'anonymous';
    loader.load(src, this.onTextureLoaded_.bind(this), undefined,
                this.onTextureError_.bind(this));
  }.bind(this));
};

/**
 * @return {Promise} Yeah.
 */
SphereRenderer.prototype.set360Video = function(videoElement, opt_params) {
  return new Promise(function(resolve, reject) {
    this.resolve = resolve;
    this.reject = reject;

    var params = opt_params || {};

    this.isStereo = !!params.isStereo;

    // Load the video texture.
    var videoTexture = new THREE.VideoTexture(videoElement);
    videoTexture.minFilter = THREE.LinearFilter;
    videoTexture.magFilter = THREE.LinearFilter;
    videoTexture.format = THREE.RGBFormat;
    videoTexture.generateMipmaps = false;
    videoTexture.needsUpdate = true;

    this.onTextureLoaded_(videoTexture);
  }.bind(this));
};

/**
 * Set the opacity of the panorama.
 *
 * @param {Number} opacity How opaque we want the panorama to be. 0 means black,
 * 1 means full color.
 * @param {Number} duration Number of milliseconds the transition should take.
 *
 * @return {Promise} When the opacity change is complete.
 */
SphereRenderer.prototype.setOpacity = function(opacity, duration) {
  var scene = this.scene;
  // If we want the opacity
  var overlayOpacity = 1 - opacity;
  return new Promise(function(resolve, reject) {
    var mask = scene.getObjectByName('opacityMask');
    var tween = new TWEEN.Tween({opacity: mask.material.opacity})
        .to({opacity: overlayOpacity}, duration)
        .easing(TWEEN.Easing.Quadratic.InOut);
    tween.onUpdate(function(e) {
      mask.material.opacity = this.opacity;
    });
    tween.onComplete(resolve).start();
  });
};

SphereRenderer.prototype.onTextureLoaded_ = function(texture) {
  var sphereLeft;
  var sphereRight;
  if (this.isStereo) {
    sphereLeft = this.createPhotosphere_(texture, {offsetY: 0.5, scaleY: 0.5});
    sphereRight = this.createPhotosphere_(texture, {offsetY: 0, scaleY: 0.5});
  } else {
    sphereLeft = this.createPhotosphere_(texture);
    sphereRight = this.createPhotosphere_(texture);
  }

  // Display in left and right eye respectively.
  sphereLeft.layers.set(Eyes.LEFT);
  sphereLeft.eye = Eyes.LEFT;
  sphereRight.layers.set(Eyes.RIGHT);
  sphereRight.eye = Eyes.RIGHT;

  this.scene.getObjectByName('photo').children = [sphereLeft, sphereRight];

  this.resolve();
};

SphereRenderer.prototype.onTextureError_ = function(error) {
  this.reject('Unable to load texture from "' + this.src + '"');
};


SphereRenderer.prototype.createPhotosphere_ = function(texture, opt_params) {
  var p = opt_params || {};
  p.scaleX = p.scaleX || 1;
  p.scaleY = p.scaleY || 1;
  p.offsetX = p.offsetX || 0;
  p.offsetY = p.offsetY || 0;
  p.phiStart = p.phiStart || 0;
  p.phiLength = p.phiLength || Math.PI * 2;
  p.thetaStart = p.thetaStart || 0;
  p.thetaLength = p.thetaLength || Math.PI;

  var geometry = new THREE.SphereGeometry(1, 48, 48,
      p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);
  geometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));
  var uvs = geometry.faceVertexUvs[0];
  for (var i = 0; i < uvs.length; i ++) {
    for (var j = 0; j < 3; j ++) {
      uvs[i][j].x *= p.scaleX;
      uvs[i][j].x += p.offsetX;
      uvs[i][j].y *= p.scaleY;
      uvs[i][j].y += p.offsetY;
    }
  }

  var material = new THREE.MeshBasicMaterial({ map: texture });
  var out = new THREE.Mesh(geometry, material);
  //out.visible = false;
  out.renderOrder = -1;
  return out;
};

SphereRenderer.prototype.createOpacityMask_ = function() {
  var geometry = new THREE.SphereGeometry(0.49, 48, 48);
  var material = new THREE.MeshBasicMaterial({
    color: 0x000000, side: THREE.DoubleSide, opacity: 0, transparent: true});
  var opacityMask = new THREE.Mesh(geometry, material);
  opacityMask.name = 'opacityMask';
  opacityMask.renderOrder = 1;

  this.scene.add(opacityMask);
  return opacityMask;
};

module.exports = SphereRenderer;

},{"../util":22,"./eyes":11,"tween.js":6}],19:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = require('../util');

/**
 * A proxy class for working around the fact that as soon as a video is play()ed
 * on iOS, Safari auto-fullscreens the video.
 *
 * TODO(smus): The entire raison d'etre for this class is to work around this
 * issue. Once Safari implements some way to suppress this fullscreen player, we
 * can remove this code.
 */
function VideoProxy(videoElement) {
    this.videoElement = videoElement;
    // True if we're currently manually advancing the playhead (only on iOS).
    this.isFakePlayback = false;

    // When the video started playing.
    this.startTime = null;
}

VideoProxy.prototype.play = function () {
    if (Util.isIOS9OrLess()) {
        this.startTime = performance.now();
        this.isFakePlayback = true;

        // Make an audio element to playback just the audio part.
        this.audioElement = new Audio();
        this.audioElement.src = this.videoElement.src;
        this.audioElement.play();
    } else {
        this.videoElement.play().then(function (e) {
            console.log('Playing video.', e);
        });
    }
};

VideoProxy.prototype.pause = function () {
    if (Util.isIOS9OrLess() && this.isFakePlayback) {
        this.isFakePlayback = true;

        this.audioElement.pause();
    } else {
        this.videoElement.pause();
    }
};

VideoProxy.prototype.seek = function (frame) {
    if (Util.isIOS9OrLess() && this.isFakePlayback) {
        this.isFakePlayback = true;

        this.audioElement.seek(frame);
    } else {
        this.videoElement.seek(frame);
    }
};

VideoProxy.prototype.setVolume = function (volumeLevel) {
    if (this.videoElement) {
        // On iOS 10, the VideoElement.volume property is read-only. So we special
        // case muting and unmuting.
        if (Util.isIOS()) {
            this.videoElement.muted = (volumeLevel === 0);
        } else {
            this.videoElement.volume = volumeLevel;
        }
    }
    if (this.audioElement) {
        this.audioElement.volume = volumeLevel;
    }
};

VideoProxy.prototype.getCurrentTime = function () {
    return {
        currentTime: Util.isIOS9OrLess() ? this.audioElement.currentTime : this.videoElement.currentTime,
        duration: Util.isIOS9OrLess() ? this.audioElement.duration : this.videoElement.duration
    }
};

/**
 + *
 + * @param {Object} time
 + */
VideoProxy.prototype.setCurrentTime = function (time) {
    if (this.videoElement) {
        this.videoElement.currentTime = time.currentTime;
    }
    if (this.audioElement) {
        this.audioElement.currentTime = time.currentTime;
    }
};

/**
 * Called on RAF to progress playback.
 */
VideoProxy.prototype.update = function () {
    // Fakes playback for iOS only.
    if (!this.isFakePlayback) {
        return;
    }
    var duration = this.videoElement.duration;
    var now = performance.now();
    var delta = now - this.startTime;
    var deltaS = delta / 1000;
    this.videoElement.currentTime = deltaS;

    // Loop through the video
    if (deltaS > duration) {
        this.startTime = now;
        this.videoElement.currentTime = 0;
        // Also restart the audio.
        this.audioElement.currentTime = 0;
    }
};

module.exports = VideoProxy;

},{"../util":22}],20:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AdaptivePlayer = require('./adaptive-player');
var EventEmitter = require('eventemitter3');
var Eyes = require('./eyes');
var HotspotRenderer = require('./hotspot-renderer');
var ReticleRenderer = require('./reticle-renderer');
var SphereRenderer = require('./sphere-renderer');
var EditorRenderer = require('./editor-renderer');
var TWEEN = require('tween.js');
var Util = require('../util');
var VideoProxy = require('./video-proxy');
var WebVRManager = require('webvr-boilerplate');

var AUTOPAN_DURATION = 3000;
var AUTOPAN_ANGLE = 0.4;

/**
 * The main WebGL rendering entry point. Manages the scene, camera, VR-related
 * rendering updates. Interacts with the WebVRManager.
 *
 * Coordinates the other renderers: SphereRenderer, HotspotRenderer,
 * ReticleRenderer.
 *
 * Also manages the AdaptivePlayer and VideoProxy.
 *
 * Emits the following events:
 *   load: when the scene is loaded.
 *   error: if there is an error loading the scene.
 *   modechange(Boolean isVR): if the mode (eg. VR, fullscreen, etc) changes.
 */
function WorldRenderer() {
    this.init_();

    this.sphereRenderer = new SphereRenderer(this.scene, this);
    this.hotspotRenderer = new HotspotRenderer(this);
    this.hotspotRenderer.on('focus', this.onHotspotFocus_.bind(this));
    this.hotspotRenderer.on('blur', this.onHotspotBlur_.bind(this));
    this.reticleRenderer = new ReticleRenderer(this.camera);
    this.editorRenderer = new EditorRenderer(this);
    this.currentVideoTime = null;

    // Get the VR Display as soon as we initialize.
    navigator.getVRDisplays().then(function (displays) {
        if (displays.length > 0) {
            this.vrDisplay = displays[0];
        }
    }.bind(this));

}
WorldRenderer.prototype = new EventEmitter();

WorldRenderer.prototype.render = function (time) {
    if (!this.editorRenderer.isDrawing()) {
        this.controls.update();
    }
    this.hotspotRenderer.update(this.camera);
    TWEEN.update(time);
    this.effect.render(this.scene, this.camera);
    if(this.videoProxy) {
        this.currentVideoTime = this.videoProxy.getCurrentTime();
        this.emit('timeupdate', this.currentVideoTime);
    }
    this.editorRenderer.update(time, this.currentVideoTime);
    this.dispose();
};

/**
 * @return {Promise} When the scene is fully loaded.
 */
WorldRenderer.prototype.setScene = function (scene) {
    var self = this;
    var promise = new Promise(function (resolve, reject) {
        self.sceneResolve = resolve;
        self.sceneReject = reject;
    });

    if (!scene || !scene.isValid()) {
        this.didLoadFail_(scene.errorMessage);
        return;
    }

    var params = {
        isStereo: scene.isStereo,
        loop: scene.loop
    };
    this.setDefaultYaw_(scene.defaultYaw || 0);

    // Disable VR mode if explicitly disabled, or if we're loading a video on iOS
    // 9 or earlier.
    if (scene.isVROff || (scene.video && Util.isIOS9OrLess())) {
        this.manager.setVRCompatibleOverride(false);
    }

    // Set various callback overrides in iOS.
    if (Util.isIOS()) {
        this.manager.setFullscreenCallback(function () {
            Util.sendParentMessage({type: 'enter-fullscreen'});
        });
        this.manager.setExitFullscreenCallback(function () {
            Util.sendParentMessage({type: 'exit-fullscreen'});
        });
        this.manager.setVRCallback(function () {
            Util.sendParentMessage({type: 'enter-vr'});
        });
    }

    // If we're dealing with an image, and not a video.
    if (scene.image && !scene.video) {
        if (scene.preview) {
            // First load the preview.
            this.sphereRenderer.setPhotosphere(scene.preview, params).then(function () {
                // As soon as something is loaded, emit the load event to hide the
                // loading progress bar.
                self.didLoad_();
                // Then load the full resolution image.
                self.sphereRenderer.setPhotosphere(scene.image, params);
            }).catch(self.didLoadFail_.bind(self));
        } else {
            // No preview -- go straight to rendering the full image.
            this.sphereRenderer.setPhotosphere(scene.image, params).then(function () {
                self.didLoad_();
            }).catch(self.didLoadFail_.bind(self));
        }
    } else if (scene.video) {
        if (Util.isIE11()) {
            // On IE 11, if an 'image' param is provided, load it instead of showing
            // an error.
            //
            // TODO(smus): Once video textures are supported, remove this fallback.
            if (scene.image) {
                this.sphereRenderer.setPhotosphere(scene.image, params).then(function () {
                    self.didLoad_();
                }).catch(self.didLoadFail_.bind(self));
            } else {
                this.didLoadFail_('Video is not supported on IE11.');
            }
        } else {
            this.player = new AdaptivePlayer(params.loop);
            this.player.on('load', function (videoElement) {
                self.sphereRenderer.set360Video(videoElement, params).then(function () {
                    self.didLoad_({videoElement: videoElement});
                }).catch(self.didLoadFail_.bind(self));
            });
            this.player.on('error', function (error) {
                self.didLoadFail_('Video load error: ' + error);
            });
            this.player.load(scene.video);

            this.videoProxy = new VideoProxy(this.player.video);
        }
    }

    this.sceneInfo = scene;
    if (Util.isDebug()) {
        console.log('Loaded scene', scene);
    }

    return promise;
};

WorldRenderer.prototype.isVRMode = function () {
    return !!this.vrDisplay && this.vrDisplay.isPresenting;
};

WorldRenderer.prototype.submitFrame = function () {
    if (this.isVRMode()) {
        this.vrDisplay.submitFrame();
    }
};

WorldRenderer.prototype.dispose = function () {
    var eyeLeft = this.scene.getObjectByName('eyeLeft'),
        eyeRight = this.scene.getObjectByName('eyeRight');
    if (!eyeLeft || !eyeRight) return
    if (eyeLeft.material.map) eyeLeft.material.map.dispose();
    eyeLeft.geometry.dispose();

    if (eyeRight.material.map) eyeRight.material.map.dispose();
    eyeRight.geometry.dispose();
}

WorldRenderer.prototype.destroy = function () {
    if (this.player) {
        this.player.removeAllListeners();
        this.player.destroy();
        this.player = null;
    }
}

WorldRenderer.prototype.didLoad_ = function (opt_event) {
    var event = opt_event || {};
    this.emit('load', event);
    if (this.sceneResolve) {
        this.sceneResolve();
    }
};

WorldRenderer.prototype.didLoadFail_ = function (message) {
    this.emit('error', message);
    if (this.sceneReject) {
        this.sceneReject(message);
    }
};

/**
 * Sets the default yaw.
 * @param {Number} angleRad The yaw in radians.
 */
WorldRenderer.prototype.setDefaultYaw_ = function (angleRad) {
    // Rotate the camera parent to take into account the scene's rotation.
    // By default, it should be at the center of the image.
    this.camera.parent.rotation.y = (Math.PI / 2.0) + angleRad;
};

/**
 * Do the initial camera tween to rotate the camera, giving an indication that
 * there is live content there (on desktop only).
 */
WorldRenderer.prototype.autopan = function (duration) {
    var targetY = this.camera.parent.rotation.y - AUTOPAN_ANGLE;
    var tween = new TWEEN.Tween(this.camera.parent.rotation)
        .to({y: targetY}, AUTOPAN_DURATION)
        .easing(TWEEN.Easing.Quadratic.Out)
        .start();
};

WorldRenderer.prototype.init_ = function () {
    var container = document.querySelector('body');
    var aspect = window.innerWidth / window.innerHeight;
    var camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 100);
    camera.layers.enable(1);

    var cameraDummy = new THREE.Object3D();
    cameraDummy.add(camera);

    // Antialiasing disabled to improve performance.
    var renderer = new THREE.WebGLRenderer({antialias: false});
    renderer.setClearColor(0x000000, 0);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    container.appendChild(renderer.domElement);

    var controls = new THREE.VRControls(camera);
    var effect = new THREE.VREffect(renderer);

    // Disable eye separation.
    effect.scale = 0;
    effect.setSize(window.innerWidth, window.innerHeight);

    // Present submission of frames automatically. This is done manually in
    // submitFrame().
    effect.autoSubmitFrame = false;

    this.camera = camera;
    this.renderer = renderer;
    this.effect = effect;
    this.controls = controls;
    this.manager = new WebVRManager(renderer, effect, {predistorted: false});

    this.scene = this.createScene_();
    this.scene.add(this.camera.parent);


    // Watch the resize event.
    window.addEventListener('resize', this.onResize_.bind(this));

    // Prevent context menu.
    window.addEventListener('contextmenu', this.onContextMenu_.bind(this));

    window.addEventListener('vrdisplaypresentchange',
        this.onVRDisplayPresentChange_.bind(this));
};

WorldRenderer.prototype.onResize_ = function () {
    this.effect.setSize(window.innerWidth, window.innerHeight);
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
};

WorldRenderer.prototype.onVRDisplayPresentChange_ = function (e) {
    if (Util.isDebug()) {
        console.log('onVRDisplayPresentChange_');
    }
    var isVR = this.isVRMode();

    // If the mode changed to VR and there is at least one hotspot, show reticle.
    var isReticleVisible = isVR && this.hotspotRenderer.getCount() > 0;
    //this.reticleRenderer.setVisibility(isReticleVisible);

    // Resize the renderer for good measure.
    this.onResize_();

    // Analytics.
    if (window.analytics) {
        analytics.logModeChanged(isVR);
    }

    // When exiting VR mode from iOS, make sure we emit back an exit-fullscreen event.
    if (!isVR && Util.isIOS()) {
        Util.sendParentMessage({type: 'exit-fullscreen'});
    }

    // Emit a mode change event back to any listeners.
    this.emit('modechange', isVR);
};

WorldRenderer.prototype.createScene_ = function (opt_params) {
    var scene = new THREE.Scene();

    // Add a group for the photosphere.
    var photoGroup = new THREE.Object3D();
    photoGroup.name = 'photo';
    scene.add(photoGroup);

    return scene;
};

WorldRenderer.prototype.onHotspotFocus_ = function (id) {
    // Set the default cursor to be a pointer.
    this.setCursor_('pointer');
};

WorldRenderer.prototype.onHotspotBlur_ = function (id) {
    // Reset the default cursor to be the default one.
    this.setCursor_('');
};

WorldRenderer.prototype.setCursor_ = function (cursor) {
    this.renderer.domElement.style.cursor = cursor;
};

WorldRenderer.prototype.onContextMenu_ = function (e) {
    e.preventDefault();
    e.stopPropagation();
    return false;
};


module.exports = WorldRenderer;

},{"../util":22,"./adaptive-player":9,"./editor-renderer":10,"./eyes":11,"./hotspot-renderer":12,"./reticle-renderer":16,"./sphere-renderer":18,"./video-proxy":19,"eventemitter3":2,"tween.js":6,"webvr-boilerplate":7}],21:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Messages from the API to the embed.
 */
var Message = {
    PLAY: 'play',
    PAUSE: 'pause',
    ADD_HOTSPOT: 'addhotspot',
    SET_CONTENT: 'setimage',
    SET_VOLUME: 'setvolume',
    SET_AUTOPLAY: 'setautoplay',
    TIMEUPDATE: 'timeupdate',
    SET_CURRENT_TIME: 'setcurrenttime',
    SEEK: 'seek',
    DEVICE_MOTION: 'devicemotion',
    GET_POSITION: 'getposition',
    START_DRAW: 'startdraw',
    END_DRAW: 'enddraw',
    ADD_SHAPE: 'addshape',
    ADD_SHAPE_KEYFRAME: 'addshapekeyframe',
    EDIT_SHAPE_KEYFRAME: 'editshapekeyframe',
    REMOVE_SHAPE_KEYFRAME: 'removeshapekeyframe',
    EDIT_SHAPE: 'editshape',
    REMOVE_SHAPE: 'removeshape',
    CLEAR_SHAPES: 'clearshapes',
    SHAPE_TRANSFORMED: 'shapetransformed',
    SHAPE_SELECTED: 'shapeselected',
    SHAPE_UNSELECTED: 'shapeunselected'
};

module.exports = Message;

},{}],22:[function(require,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Util = window.Util || {};

Util.isDataURI = function(src) {
  return src && src.indexOf('data:') == 0;
};

Util.generateUUID = function() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
    .toString(16)
    .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
    s4() + '-' + s4() + s4() + s4();
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.isIOS = function() {
  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
};

Util.isSafari = function() {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
};

Util.cloneObject = function(obj) {
  var out = {};
  for (key in obj) {
    out[key] = obj[key];
  }
  return out;
};

Util.hashCode = function(s) {
  return s.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
};

Util.loadTrackSrc = function(context, src, callback, opt_progressCallback) {
  var request = new XMLHttpRequest();
  request.open('GET', src, true);
  request.responseType = 'arraybuffer';

  // Decode asynchronously.
  request.onload = function() {
    context.decodeAudioData(request.response, function(buffer) {
      callback(buffer);
    }, function(e) {
      console.error(e);
    });
  };
  if (opt_progressCallback) {
    request.onprogress = function(e) {
      var percent = e.loaded / e.total;
      opt_progressCallback(percent);
    };
  }
  request.send();
};

Util.isPow2 = function(n) {
  return (n & (n - 1)) == 0;
};

Util.capitalize = function(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
};

Util.isIFrame = function() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
};

// From http://goo.gl/4WX3tg
Util.getQueryParameter = function(name) {
  name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};


// From http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support.
Util.isWebGLEnabled = function() {
  var canvas = document.createElement('canvas');
  try { gl = canvas.getContext("webgl"); }
  catch (x) { gl = null; }

  if (gl == null) {
    try { gl = canvas.getContext("experimental-webgl"); experimental = true; }
    catch (x) { gl = null; }
  }
  return !!gl;
};

Util.clone = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

// From http://stackoverflow.com/questions/10140604/fastest-hypotenuse-in-javascript
Util.hypot = Math.hypot || function(x, y) {
  return Math.sqrt(x*x + y*y);
};

// From http://stackoverflow.com/a/17447718/693934
Util.isIE11 = function() {
  return navigator.userAgent.match(/Trident/);
};

Util.getRectCenter = function(rect) {
  return new THREE.Vector2(rect.x + rect.width/2, rect.y + rect.height/2);
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.isIOS9OrLess = function() {
  if (!Util.isIOS()) {
    return false;
  }
  var re = /(iPhone|iPad|iPod) OS ([\d_]+)/;
  var iOSVersion = navigator.userAgent.match(re);
  if (!iOSVersion) {
    return false;
  }
  // Get the last group.
  var versionString = iOSVersion[iOSVersion.length - 1];
  var majorVersion = parseFloat(versionString);
  return majorVersion <= 9;
};

Util.getExtension = function(url) {
  return url.split('.').pop();
};

Util.createGetParams = function(params) {
  var out = '?';
  for (var k in params) {
    var paramString = k + '=' + params[k] + '&';
    out += paramString;
  }
  // Remove the trailing ampersand.
  out.substring(0, params.length - 2);
  return out;
};

Util.sendParentMessage = function(message) {
  if (window.parent) {
    parent.postMessage(message, '*');
  }
};

Util.parseBoolean = function(value) {
  if (value == 'false' || value == 0) {
    return false;
  } else if (value == 'true' || value == 1) {
    return true;
  } else {
    return !!value;
  }
};

/**
 * @param base {String} An absolute directory root.
 * @param relative {String} A relative path.
 *
 * @returns {String} An absolute path corresponding to the rootPath.
 *
 * From http://stackoverflow.com/a/14780463/693934.
 */
Util.relativeToAbsolutePath = function(base, relative) {
  var stack = base.split('/');
  var parts = relative.split('/');
  for (var i = 0; i < parts.length; i++) {
    if (parts[i] == '.') {
      continue;
    }
    if (parts[i] == '..') {
      stack.pop();
    } else {
      stack.push(parts[i]);
    }
  }
  return stack.join('/');
};

/**
 * @return {Boolean} True iff the specified path is an absolute path.
 */
Util.isPathAbsolute = function(path) {
  return ! /^(?:\/|[a-z]+:\/\/)/.test(path);
}

Util.isEmptyObject = function(obj) {
  return Object.getOwnPropertyNames(obj).length == 0;
};

Util.isDebug = function() {
  return Util.parseBoolean(Util.getQueryParameter('debug'));
};

Util.getCurrentScript = function() {
  // Note: in IE11, document.currentScript doesn't work, so we fall back to this
  // hack, taken from https://goo.gl/TpExuH.
  if (!document.currentScript) {
    console.warn('This browser does not support document.currentScript. Trying fallback.');
  }
  return document.currentScript || document.scripts[document.scripts.length - 1];
}


module.exports = Util;

},{}]},{},[15])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9zaGFrYS1wbGF5ZXIvZGlzdC9zaGFrYS1wbGF5ZXIuY29tcGlsZWQuanMiLCJub2RlX21vZHVsZXMvc3RhdHMtanMvYnVpbGQvc3RhdHMubWluLmpzIiwibm9kZV9tb2R1bGVzL3R3ZWVuLmpzL3NyYy9Ud2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC93ZWJ2ci1tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3dlYnZyLXBvbHlmaWxsL2J1aWxkL3dlYnZyLXBvbHlmaWxsLmpzIiwic3JjL2VtYmVkL2FkYXB0aXZlLXBsYXllci5qcyIsInNyYy9lbWJlZC9lZGl0b3ItcmVuZGVyZXIuanMiLCJzcmMvZW1iZWQvZXllcy5qcyIsInNyYy9lbWJlZC9ob3RzcG90LXJlbmRlcmVyLmpzIiwic3JjL2VtYmVkL2lmcmFtZS1tZXNzYWdlLXJlY2VpdmVyLmpzIiwic3JjL2VtYmVkL2xvYWRpbmctaW5kaWNhdG9yLmpzIiwic3JjL2VtYmVkL21haW4uanMiLCJzcmMvZW1iZWQvcmV0aWNsZS1yZW5kZXJlci5qcyIsInNyYy9lbWJlZC9zY2VuZS1pbmZvLmpzIiwic3JjL2VtYmVkL3NwaGVyZS1yZW5kZXJlci5qcyIsInNyYy9lbWJlZC92aWRlby1wcm94eS5qcyIsInNyYy9lbWJlZC93b3JsZC1yZW5kZXJlci5qcyIsInNyYy9tZXNzYWdlLmpzIiwic3JjL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3QyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM5akJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDanVNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzN5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaldBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgMy4zLjFcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuRVM2UHJvbWlzZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxudmFyIF9pc0FycmF5ID0gdW5kZWZpbmVkO1xuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG52YXIgY3VzdG9tU2NoZWR1bGVyRm4gPSB1bmRlZmluZWQ7XG5cbnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlW2xlbl0gPSBjYWxsYmFjaztcbiAgcXVldWVbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIGlmIChjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG59XG5cbmZ1bmN0aW9uIHNldEFzYXAoYXNhcEZuKSB7XG4gIGFzYXAgPSBhc2FwRm47XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgfTtcbn1cblxuLy8gd2ViIHdvcmtlclxuZnVuY3Rpb24gdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gIC8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIGVzNi1wcm9taXNlIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbiAgdmFyIGdsb2JhbFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTtcbiAgfTtcbn1cblxudmFyIHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZVtpXTtcbiAgICB2YXIgYXJnID0gcXVldWVbaSArIDFdO1xuXG4gICAgY2FsbGJhY2soYXJnKTtcblxuICAgIHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgIHF1ZXVlW2kgKyAxXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRWZXJ0eCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdW5kZWZpbmVkO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gIGlmIChfc3RhdGUpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlQ2FsbGJhY2soX3N0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHBhcmVudC5fcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJCA9PT0gR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJCkpIHtcbiAgICAgIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIGdldFRoZW4odmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX29uZXJyb3IpIHtcbiAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gIH1cblxuICBwdWJsaXNoKHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDtcblxuICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hpbGQgPSB1bmRlZmluZWQsXG4gICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZCxcbiAgICAgIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIEVycm9yT2JqZWN0KCkge1xuICB0aGlzLmVycm9yID0gbnVsbDtcbn1cblxudmFyIFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkLFxuICAgICAgZXJyb3IgPSB1bmRlZmluZWQsXG4gICAgICBzdWNjZWVkZWQgPSB1bmRlZmluZWQsXG4gICAgICBmYWlsZWQgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgdmFsdWUgPSB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgIHZhbHVlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZmFpbGVkKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxudmFyIGlkID0gMDtcbmZ1bmN0aW9uIG5leHRJZCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHtcbiAgcHJvbWlzZVtQUk9NSVNFX0lEXSA9IGlkKys7XG4gIHByb21pc2UuX3N0YXRlID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG59XG5cbmZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgbWFrZVByb21pc2UodGhpcy5wcm9taXNlKTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZSgpO1xuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX3JlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgX2lucHV0ID0gdGhpcy5faW5wdXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2VhY2hFbnRyeShfaW5wdXRbaV0sIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgdmFyIHJlc29sdmUkJCA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSQkID09PSByZXNvbHZlKSB7XG4gICAgdmFyIF90aGVuID0gZ2V0VGhlbihlbnRyeSk7XG5cbiAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCBfdGhlbik7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlJCQoZW50cnkpO1xuICAgICAgfSksIGkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkKGVudHJ5KSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiAoc3RhdGUsIGksIHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORykge1xuICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgaSkge1xuICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICB0aGlzLl9yZXN1bHQgPSB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicgJiYgbmVlZHNSZXNvbHZlcigpO1xuICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgfVxufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcblByb21pc2UucmFjZSA9IHJhY2U7XG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5Qcm9taXNlLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG5Qcm9taXNlLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UuX2FzYXAgPSBhc2FwO1xuXG5Qcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFByb21pc2UsXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgfSk7XG4gICAgYGBgXG4gICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFzc2ltaWxhdGlvblxuICAgIC0tLS0tLS0tLS0tLVxuICBcbiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBTaW1wbGUgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCByZXN1bHQ7XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBhdXRob3IsIGJvb2tzO1xuICBcbiAgICB0cnkge1xuICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gIFxuICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICBcbiAgICB9XG4gIFxuICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZEF1dGhvcigpLlxuICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCB0aGVuXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gIHRoZW46IHRoZW4sXG5cbiAgLyoqXG4gICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIFxuICAgIGBgYGpzXG4gICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIHZhciBsb2NhbCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICAgIGlmIChQKSB7XG4gICAgICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2lsZW50bHkgaWdub3JlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvY2FsLlByb21pc2UgPSBQcm9taXNlO1xufVxuXG5wb2x5ZmlsbCgpO1xuLy8gU3RyYW5nZSBjb21wYXQuLlxuUHJvbWlzZS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZS5Qcm9taXNlID0gUHJvbWlzZTtcblxucmV0dXJuIFByb21pc2U7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lczYtcHJvbWlzZS5tYXAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vL1xuLy8gV2Ugc3RvcmUgb3VyIEVFIG9iamVjdHMgaW4gYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gYH5gIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90IG92ZXJyaWRkZW4gb3Jcbi8vIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vIFdlIGFsc28gYXNzdW1lIHRoYXQgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIGF2YWlsYWJsZSB3aGVuIHRoZSBldmVudCBuYW1lXG4vLyBpcyBhbiBFUzYgU3ltYm9sLlxuLy9cbnZhciBwcmVmaXggPSB0eXBlb2YgT2JqZWN0LmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJyA/ICd+JyA6IGZhbHNlO1xuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIEV2ZW50RW1pdHRlciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBFdmVudCBoYW5kbGVyIHRvIGJlIGNhbGxlZC5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgQ29udGV4dCBmb3IgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gT25seSBlbWl0IG9uY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogTWluaW1hbCBFdmVudEVtaXR0ZXIgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7IC8qIE5vdGhpbmcgdG8gc2V0ICovIH1cblxuLyoqXG4gKiBIb2xkIHRoZSBhc3NpZ25lZCBFdmVudEVtaXR0ZXJzIGJ5IG5hbWUuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNcbiAgICAsIG5hbWVzID0gW11cbiAgICAsIG5hbWU7XG5cbiAgaWYgKCFldmVudHMpIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGxpc3Qgb2YgYXNzaWduZWQgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnRzIHRoYXQgc2hvdWxkIGJlIGxpc3RlZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXhpc3RzIFdlIG9ubHkgbmVlZCB0byBrbm93IGlmIHRoZXJlIGFyZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7QXJyYXl8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50LCBleGlzdHMpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGF2YWlsYWJsZSA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoZXhpc3RzKSByZXR1cm4gISFhdmFpbGFibGU7XG4gIGlmICghYXZhaWxhYmxlKSByZXR1cm4gW107XG4gIGlmIChhdmFpbGFibGUuZm4pIHJldHVybiBbYXZhaWxhYmxlLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGF2YWlsYWJsZS5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBhdmFpbGFibGVbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIEVtaXQgYW4gZXZlbnQgdG8gYWxsIHJlZ2lzdGVyZWQgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSW5kaWNhdGlvbiBpZiB3ZSd2ZSBlbWl0dGVkIGFuIGV2ZW50LlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIG5ldyBFdmVudExpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IE5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0gcHJlZml4ID8ge30gOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyO1xuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW1xuICAgICAgdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYW4gRXZlbnRMaXN0ZW5lciB0aGF0J3Mgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IG9mIHRoZSBmdW5jdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzLCB0cnVlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0gcHJlZml4ID8ge30gOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyO1xuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW1xuICAgICAgdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2Ugd2FudCB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgdGhhdCB3ZSBuZWVkIHRvIGZpbmQuXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IE9ubHkgcmVtb3ZlIGxpc3RlbmVycyBtYXRjaGluZyB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25jZSBsaXN0ZW5lcnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBldmVudHMgPSBbXTtcblxuICBpZiAoZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgICBpZiAoXG4gICAgICAgICAgIGxpc3RlbmVycy5mbiAhPT0gZm5cbiAgICAgICAgfHwgKG9uY2UgJiYgIWxpc3RlbmVycy5vbmNlKVxuICAgICAgICB8fCAoY29udGV4dCAmJiBsaXN0ZW5lcnMuY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuXG4gICAgICAgICAgfHwgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKVxuICAgICAgICAgIHx8IChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgICApIHtcbiAgICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAvL1xuICBpZiAoZXZlbnRzLmxlbmd0aCkge1xuICAgIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb3Igb25seSB0aGUgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2FudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKGV2ZW50KSBkZWxldGUgdGhpcy5fZXZlbnRzW3ByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRdO1xuICBlbHNlIHRoaXMuX2V2ZW50cyA9IHByZWZpeCA/IHt9IDogT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gVGhpcyBmdW5jdGlvbiBkb2Vzbid0IGFwcGx5IGFueW1vcmUuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24oKXt2YXIgZz17fTtcbihmdW5jdGlvbih3aW5kb3cpe3ZhciBrLGFhPXRoaXM7YWEubWQ9ITA7ZnVuY3Rpb24gbShhLGIpe3ZhciBjPWEuc3BsaXQoXCIuXCIpLGQ9YWE7Y1swXWluIGR8fCFkLmV4ZWNTY3JpcHR8fGQuZXhlY1NjcmlwdChcInZhciBcIitjWzBdKTtmb3IodmFyIGU7Yy5sZW5ndGgmJihlPWMuc2hpZnQoKSk7KWMubGVuZ3RofHx2b2lkIDA9PT1iP2RbZV0/ZD1kW2VdOmQ9ZFtlXT17fTpkW2VdPWJ9ZnVuY3Rpb24gYmEoYSl7dmFyIGI9cDtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWIucHJvdG90eXBlO2EucWQ9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLm5kPWZ1bmN0aW9uKGEsYyxmKXtyZXR1cm4gYi5wcm90b3R5cGVbY10uYXBwbHkoYSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpfX07LypcblxuIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIGNhKGEpe3RoaXMuYz1NYXRoLmV4cChNYXRoLmxvZyguNSkvYSk7dGhpcy5iPXRoaXMuYT0wfWZ1bmN0aW9uIGRhKGEsYixjKXt2YXIgZD1NYXRoLnBvdyhhLmMsYik7Yz1jKigxLWQpK2QqYS5hO2lzTmFOKGMpfHwoYS5hPWMsYS5iKz1iKX1mdW5jdGlvbiBlYShhKXtyZXR1cm4gYS5hLygxLU1hdGgucG93KGEuYyxhLmIpKX07ZnVuY3Rpb24gZmEoKXt0aGlzLmM9bmV3IGNhKDIpO3RoaXMuZj1uZXcgY2EoNSk7dGhpcy5hPTA7dGhpcy5iPTVFNX1mYS5wcm90b3R5cGUuc2V0RGVmYXVsdEVzdGltYXRlPWZ1bmN0aW9uKGEpe3RoaXMuYj1hfTtmYS5wcm90b3R5cGUuZ2V0QmFuZHdpZHRoRXN0aW1hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gMTI4RTM+dGhpcy5hP3RoaXMuYjpNYXRoLm1pbihlYSh0aGlzLmMpLGVhKHRoaXMuZikpfTtmdW5jdGlvbiBnYSgpe31mdW5jdGlvbiBoYSgpe307ZnVuY3Rpb24gcSgpe3RoaXMuaD1udWxsO3RoaXMuZj0hMTt0aGlzLmI9bmV3IGZhO3RoaXMuZz17fTt0aGlzLmE9e307dGhpcy5pPSExO3RoaXMuYz1udWxsfW0oXCJzaGFrYS5hYnIuU2ltcGxlQWJyTWFuYWdlclwiLHEpO3EucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLmg9bnVsbDt0aGlzLmY9ITE7dGhpcy5nPXt9O3RoaXMuYT17fTt0aGlzLmM9bnVsbH07cS5wcm90b3R5cGUuc3RvcD1xLnByb3RvdHlwZS5zdG9wO3EucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYSl7dGhpcy5oPWF9O3EucHJvdG90eXBlLmluaXQ9cS5wcm90b3R5cGUuaW5pdDtcbnEucHJvdG90eXBlLmNob29zZVN0cmVhbXM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpdGhpcy5nW2JdPWFbYl07Yj17fTtpZihcImF1ZGlvXCJpbiBhKXt2YXIgYz1pYSh0aGlzKTtjPyhiLmF1ZGlvPWMsdGhpcy5hLmF1ZGlvPWMpOmRlbGV0ZSB0aGlzLmEuYXVkaW99XCJ2aWRlb1wiaW4gYSYmKChjPWphKHRoaXMpKT8oYi52aWRlbz1jLHRoaXMuYS52aWRlbz1jKTpkZWxldGUgdGhpcy5hLnZpZGVvKTtcInRleHRcImluIGEmJihiLnRleHQ9YS50ZXh0LnN0cmVhbXNbMF0pO3RoaXMuYz1EYXRlLm5vdygpO3JldHVybiBifTtxLnByb3RvdHlwZS5jaG9vc2VTdHJlYW1zPXEucHJvdG90eXBlLmNob29zZVN0cmVhbXM7cS5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5mPSEwfTtxLnByb3RvdHlwZS5lbmFibGU9cS5wcm90b3R5cGUuZW5hYmxlO3EucHJvdG90eXBlLmRpc2FibGU9ZnVuY3Rpb24oKXt0aGlzLmY9ITF9O3EucHJvdG90eXBlLmRpc2FibGU9cS5wcm90b3R5cGUuZGlzYWJsZTtcbnEucHJvdG90eXBlLnNlZ21lbnREb3dubG9hZGVkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLmI7Yi09YTsxNkUzPmN8fChhPThFMypjL2IsYi89MUUzLGQuYSs9YyxkYShkLmMsYixhKSxkYShkLmYsYixhKSk7aWYobnVsbCE9dGhpcy5jJiZ0aGlzLmYpYTp7aWYoIXRoaXMuaSl7aWYoISgxMjhFMzw9dGhpcy5iLmEpKWJyZWFrIGE7dGhpcy5pPSEwfWVsc2UgaWYoOEUzPkRhdGUubm93KCktdGhpcy5jKWJyZWFrIGE7Yz17fTtpZihkPWlhKHRoaXMpKWMuYXVkaW89ZCx0aGlzLmEuYXVkaW89ZDtpZihkPWphKHRoaXMpKWMudmlkZW89ZCx0aGlzLmEudmlkZW89ZDt0aGlzLmM9RGF0ZS5ub3coKTt0aGlzLmIuZ2V0QmFuZHdpZHRoRXN0aW1hdGUoKTt0aGlzLmgoYyl9fTtxLnByb3RvdHlwZS5zZWdtZW50RG93bmxvYWRlZD1xLnByb3RvdHlwZS5zZWdtZW50RG93bmxvYWRlZDtxLnByb3RvdHlwZS5nZXRCYW5kd2lkdGhFc3RpbWF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmIuZ2V0QmFuZHdpZHRoRXN0aW1hdGUoKX07XG5xLnByb3RvdHlwZS5nZXRCYW5kd2lkdGhFc3RpbWF0ZT1xLnByb3RvdHlwZS5nZXRCYW5kd2lkdGhFc3RpbWF0ZTtxLnByb3RvdHlwZS5zZXREZWZhdWx0RXN0aW1hdGU9ZnVuY3Rpb24oYSl7dGhpcy5iLnNldERlZmF1bHRFc3RpbWF0ZShhKX07cS5wcm90b3R5cGUuc2V0RGVmYXVsdEVzdGltYXRlPXEucHJvdG90eXBlLnNldERlZmF1bHRFc3RpbWF0ZTtmdW5jdGlvbiBpYShhKXthPWEuZy5hdWRpbztpZighYSlyZXR1cm4gbnVsbDthPWthKGEpO3JldHVybiBhW01hdGguZmxvb3IoYS5sZW5ndGgvMildfVxuZnVuY3Rpb24gamEoYSl7dmFyIGI9YS5nLnZpZGVvO2lmKCFiKXJldHVybiBudWxsO3ZhciBiPWthKGIpLGM9YS5hLmF1ZGlvLGM9YyYmYy5iYW5kd2lkdGh8fDA7YT1hLmIuZ2V0QmFuZHdpZHRoRXN0aW1hdGUoKTtmb3IodmFyIGQ9YlswXSxlPTA7ZTxiLmxlbmd0aDsrK2Upe3ZhciBmPWJbZV07aWYoZi5iYW5kd2lkdGgpe3ZhciBnPSgoZSsxPGIubGVuZ3RoP2JbZSsxXTp7YmFuZHdpZHRoOkluZmluaXR5fSkuYmFuZHdpZHRoK2MpLy44NTthPj0oZi5iYW5kd2lkdGgrYykvLjk1JiZhPD1nJiYoZD1mKX19cmV0dXJuIGR9ZnVuY3Rpb24ga2EoYSl7cmV0dXJuIGEuc3RyZWFtcy5zbGljZSgwKS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYWxsb3dlZEJ5QXBwbGljYXRpb24mJmEuYWxsb3dlZEJ5S2V5U3lzdGVtfSkuc29ydChmdW5jdGlvbihhLGMpe3JldHVybiBhLmJhbmR3aWR0aC1jLmJhbmR3aWR0aH0pfTtmdW5jdGlvbiB0KGEsYil7dmFyIGM9Ynx8e30sZDtmb3IoZCBpbiBjKXRoaXNbZF09Y1tkXTt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9dGhpcy5jYW5jZWxhYmxlPXRoaXMuYnViYmxlcz0hMTt0aGlzLnRpbWVTdGFtcD13aW5kb3cucGVyZm9ybWFuY2UmJndpbmRvdy5wZXJmb3JtYW5jZS5ub3c/d2luZG93LnBlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCk7dGhpcy50eXBlPWE7dGhpcy5pc1RydXN0ZWQ9ITE7dGhpcy50YXJnZXQ9dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7dGhpcy5hPSExfXQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7fTt0LnByb3RvdHlwZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXt0aGlzLmE9ITB9O3QucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe307dmFyIGxhPVwiZW5kZWQgcGxheSBwbGF5aW5nIHBhdXNlIHBhdXNpbmcgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZVwiLnNwbGl0KFwiIFwiKSxtYT1cImJ1ZmZlcmVkIGN1cnJlbnRUaW1lIGR1cmF0aW9uIGVuZGVkIGxvb3AgbXV0ZWQgcGF1c2VkIHBsYXliYWNrUmF0ZSBzZWVraW5nIHZpZGVvSGVpZ2h0IHZpZGVvV2lkdGggdm9sdW1lXCIuc3BsaXQoXCIgXCIpLG5hPVtcImxvb3BcIixcInBsYXliYWNrUmF0ZVwiXSxvYT1bXCJwYXVzZVwiLFwicGxheVwiXSxwYT1cImFkYXB0YXRpb24gYnVmZmVyaW5nIGVtc2cgZXJyb3IgbG9hZGluZyB1bmxvYWRpbmcgdGV4dHRyYWNrdmlzaWJpbGl0eSB0cmFja3NjaGFuZ2VkXCIuc3BsaXQoXCIgXCIpLHFhPVwiZHJtSW5mbyBnZXRDb25maWd1cmF0aW9uIGdldE1hbmlmZXN0VXJpIGdldFBsYXliYWNrUmF0ZSBnZXRUcmFja3MgZ2V0U3RhdHMgaXNCdWZmZXJpbmcgaXNJblByb2dyZXNzIGlzTGl2ZSBpc1RleHRUcmFja1Zpc2libGUga2V5U3lzdGVtIHNlZWtSYW5nZVwiLnNwbGl0KFwiIFwiKSxcbnJhPVtbXCJnZXRDb25maWd1cmF0aW9uXCIsXCJjb25maWd1cmVcIl1dLHNhPVtbXCJpc1RleHRUcmFja1Zpc2libGVcIixcInNldFRleHRUcmFja1Zpc2liaWxpdHlcIl1dLHRhPVwiYWRkVGV4dFRyYWNrIGNhbmNlbFRyaWNrUGxheSBjb25maWd1cmUgcmVzZXRDb25maWd1cmF0aW9uIHNlbGVjdFRyYWNrIHNldFRleHRUcmFja1Zpc2liaWxpdHkgdHJpY2tQbGF5XCIuc3BsaXQoXCIgXCIpLHVhPVtcImxvYWRcIixcInVubG9hZFwiXTtcbmZ1bmN0aW9uIHZhKGEpe3JldHVybiBKU09OLnN0cmluZ2lmeShhLGZ1bmN0aW9uKGEsYyl7aWYoXCJtYW5hZ2VyXCIhPWEmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGMpe2lmKGMgaW5zdGFuY2VvZiBFdmVudHx8YyBpbnN0YW5jZW9mIHQpe3ZhciBiPXt9LGU7Zm9yKGUgaW4gYyl7dmFyIGY9Y1tlXTtmJiZcIm9iamVjdFwiPT10eXBlb2YgZnx8ZSBpbiBFdmVudHx8KGJbZV09Zil9cmV0dXJuIGJ9aWYoYyBpbnN0YW5jZW9mIFRpbWVSYW5nZXMpZm9yKGI9e19fdHlwZV9fOlwiVGltZVJhbmdlc1wiLGxlbmd0aDpjLmxlbmd0aCxzdGFydDpbXSxlbmQ6W119LGU9MDtlPGMubGVuZ3RoOysrZSliLnN0YXJ0LnB1c2goYy5zdGFydChlKSksYi5lbmQucHVzaChjLmVuZChlKSk7ZWxzZSBiPVwibnVtYmVyXCI9PXR5cGVvZiBjP2lzTmFOKGMpP1wiTmFOXCI6aXNGaW5pdGUoYyk/YzowPmM/XCItSW5maW5pdHlcIjpcIkluZmluaXR5XCI6YztyZXR1cm4gYn19KX1cbmZ1bmN0aW9uIHdhKGEpe3JldHVybiBKU09OLnBhcnNlKGEsZnVuY3Rpb24oYSxjKXtyZXR1cm5cIk5hTlwiPT1jP05hTjpcIi1JbmZpbml0eVwiPT1jPy1JbmZpbml0eTpcIkluZmluaXR5XCI9PWM/SW5maW5pdHk6YyYmXCJvYmplY3RcIj09dHlwZW9mIGMmJlwiVGltZVJhbmdlc1wiPT1jLl9fdHlwZV9fP3hhKGMpOmN9KX1mdW5jdGlvbiB4YShhKXtyZXR1cm57bGVuZ3RoOmEubGVuZ3RoLHN0YXJ0OmZ1bmN0aW9uKGIpe3JldHVybiBhLnN0YXJ0W2JdfSxlbmQ6ZnVuY3Rpb24oYil7cmV0dXJuIGEuZW5kW2JdfX19O2Z1bmN0aW9uIHYoYSxiLGMpe3RoaXMuY2F0ZWdvcnk9YTt0aGlzLmNvZGU9Yjt0aGlzLmRhdGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpfW0oXCJzaGFrYS51dGlsLkVycm9yXCIsdik7di5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cInNoYWthLnV0aWwuRXJyb3IgXCIrSlNPTi5zdHJpbmdpZnkodGhpcyxudWxsLFwiICBcIil9O3YuQ2F0ZWdvcnk9e05FVFdPUks6MSxURVhUOjIsTUVESUE6MyxNQU5JRkVTVDo0LFNUUkVBTUlORzo1LERSTTo2LFBMQVlFUjo3LENBU1Q6OCxTVE9SQUdFOjl9O1xudi5Db2RlPXtVTlNVUFBPUlRFRF9TQ0hFTUU6MUUzLEJBRF9IVFRQX1NUQVRVUzoxMDAxLEhUVFBfRVJST1I6MTAwMixUSU1FT1VUOjEwMDMsTUFMRk9STUVEX0RBVEFfVVJJOjEwMDQsVU5LTk9XTl9EQVRBX1VSSV9FTkNPRElORzoxMDA1LElOVkFMSURfVEVYVF9IRUFERVI6MkUzLElOVkFMSURfVEVYVF9DVUU6MjAwMSxVTkFCTEVfVE9fREVURUNUX0VOQ09ESU5HOjIwMDMsQkFEX0VOQ09ESU5HOjIwMDQsSU5WQUxJRF9YTUw6MjAwNSxJTlZBTElEX1RUTUw6MjAwNixJTlZBTElEX01QNF9UVE1MOjIwMDcsSU5WQUxJRF9NUDRfVlRUOjIwMDgsQlVGRkVSX1JFQURfT1VUX09GX0JPVU5EUzozRTMsSlNfSU5URUdFUl9PVkVSRkxPVzozMDAxLEVCTUxfT1ZFUkZMT1c6MzAwMixFQk1MX0JBRF9GTE9BVElOR19QT0lOVF9TSVpFOjMwMDMsTVA0X1NJRFhfV1JPTkdfQk9YX1RZUEU6MzAwNCxNUDRfU0lEWF9JTlZBTElEX1RJTUVTQ0FMRTozMDA1LE1QNF9TSURYX1RZUEVfTk9UX1NVUFBPUlRFRDozMDA2LFxuV0VCTV9DVUVTX0VMRU1FTlRfTUlTU0lORzozMDA3LFdFQk1fRUJNTF9IRUFERVJfRUxFTUVOVF9NSVNTSU5HOjMwMDgsV0VCTV9TRUdNRU5UX0VMRU1FTlRfTUlTU0lORzozMDA5LFdFQk1fSU5GT19FTEVNRU5UX01JU1NJTkc6MzAxMCxXRUJNX0RVUkFUSU9OX0VMRU1FTlRfTUlTU0lORzozMDExLFdFQk1fQ1VFX1RSQUNLX1BPU0lUSU9OU19FTEVNRU5UX01JU1NJTkc6MzAxMixXRUJNX0NVRV9USU1FX0VMRU1FTlRfTUlTU0lORzozMDEzLE1FRElBX1NPVVJDRV9PUEVSQVRJT05fRkFJTEVEOjMwMTQsTUVESUFfU09VUkNFX09QRVJBVElPTl9USFJFVzozMDE1LFZJREVPX0VSUk9SOjMwMTYsUVVPVEFfRVhDRUVERURfRVJST1I6MzAxNyxVTkFCTEVfVE9fR1VFU1NfTUFOSUZFU1RfVFlQRTo0RTMsREFTSF9JTlZBTElEX1hNTDo0MDAxLERBU0hfTk9fU0VHTUVOVF9JTkZPOjQwMDIsREFTSF9FTVBUWV9BREFQVEFUSU9OX1NFVDo0MDAzLERBU0hfRU1QVFlfUEVSSU9EOjQwMDQsREFTSF9XRUJNX01JU1NJTkdfSU5JVDo0MDA1LFxuREFTSF9VTlNVUFBPUlRFRF9DT05UQUlORVI6NDAwNixEQVNIX1BTU0hfQkFEX0VOQ09ESU5HOjQwMDcsREFTSF9OT19DT01NT05fS0VZX1NZU1RFTTo0MDA4LERBU0hfTVVMVElQTEVfS0VZX0lEU19OT1RfU1VQUE9SVEVEOjQwMDksREFTSF9DT05GTElDVElOR19LRVlfSURTOjQwMTAsVU5QTEFZQUJMRV9QRVJJT0Q6NDAxMSxSRVNUUklDVElPTlNfQ0FOTk9UX0JFX01FVDo0MDEyLE5PX1BFUklPRFM6NDAxNCxEQVNIX0RVUExJQ0FURV9SRVBSRVNFTlRBVElPTl9JRDo0MDE4LElOVkFMSURfU1RSRUFNU19DSE9TRU46NTAwNSxOT19SRUNPR05JWkVEX0tFWV9TWVNURU1TOjZFMyxSRVFVRVNURURfS0VZX1NZU1RFTV9DT05GSUdfVU5BVkFJTEFCTEU6NjAwMSxGQUlMRURfVE9fQ1JFQVRFX0NETTo2MDAyLEZBSUxFRF9UT19BVFRBQ0hfVE9fVklERU86NjAwMyxJTlZBTElEX1NFUlZFUl9DRVJUSUZJQ0FURTo2MDA0LEZBSUxFRF9UT19DUkVBVEVfU0VTU0lPTjo2MDA1LEZBSUxFRF9UT19HRU5FUkFURV9MSUNFTlNFX1JFUVVFU1Q6NjAwNixcbkxJQ0VOU0VfUkVRVUVTVF9GQUlMRUQ6NjAwNyxMSUNFTlNFX1JFU1BPTlNFX1JFSkVDVEVEOjYwMDgsRU5DUllQVEVEX0NPTlRFTlRfV0lUSE9VVF9EUk1fSU5GTzo2MDEwLE5PX0xJQ0VOU0VfU0VSVkVSX0dJVkVOOjYwMTIsT0ZGTElORV9TRVNTSU9OX1JFTU9WRUQ6NjAxMyxFWFBJUkVEOjYwMTQsTE9BRF9JTlRFUlJVUFRFRDo3RTMsQ0FTVF9BUElfVU5BVkFJTEFCTEU6OEUzLE5PX0NBU1RfUkVDRUlWRVJTOjgwMDEsQUxSRUFEWV9DQVNUSU5HOjgwMDIsVU5FWFBFQ1RFRF9DQVNUX0VSUk9SOjgwMDMsQ0FTVF9DQU5DRUxFRF9CWV9VU0VSOjgwMDQsQ0FTVF9DT05ORUNUSU9OX1RJTUVEX09VVDo4MDA1LENBU1RfUkVDRUlWRVJfQVBQX1VOQVZBSUxBQkxFOjgwMDYsSU5ERVhFRF9EQl9OT1RfU1VQUE9SVEVEOjlFMyxJTkRFWEVEX0RCX0VSUk9SOjkwMDEsT1BFUkFUSU9OX0FCT1JURUQ6OTAwMixSRVFVRVNURURfSVRFTV9OT1RfRk9VTkQ6OTAwMyxNQUxGT1JNRURfT0ZGTElORV9VUkk6OTAwNCxcbkNBTk5PVF9TVE9SRV9MSVZFX09GRkxJTkU6OTAwNSxTVE9SRV9BTFJFQURZX0lOX1BST0dSRVNTOjkwMDYsTk9fSU5JVF9EQVRBX0ZPUl9PRkZMSU5FOjkwMDd9O2Z1bmN0aW9uIHcoKXt2YXIgYSxiLGM9bmV3IFByb21pc2UoZnVuY3Rpb24oYyxlKXthPWM7Yj1lfSk7Yy5yZXNvbHZlPWE7Yy5yZWplY3Q9YjtyZXR1cm4gY307ZnVuY3Rpb24geWEoYSxiLGMsZCxlKXt0aGlzLkM9YTt0aGlzLmw9Yjt0aGlzLkE9Yzt0aGlzLkI9ZDt0aGlzLnM9ZTt0aGlzLmY9dGhpcy5qPXRoaXMuaD0hMTt0aGlzLnY9XCJcIjt0aGlzLmE9dGhpcy5pPW51bGw7dGhpcy5iPXt2aWRlbzp7fSxwbGF5ZXI6e319O3RoaXMubT0wO3RoaXMuYz17fTt0aGlzLmc9bnVsbH1rPXlhLnByb3RvdHlwZTtrLm89ZnVuY3Rpb24oKXt6YSh0aGlzKTt0aGlzLmEmJih0aGlzLmEuc3RvcChmdW5jdGlvbigpe30sZnVuY3Rpb24oKXt9KSx0aGlzLmE9bnVsbCk7dGhpcy5CPXRoaXMuQT10aGlzLmw9bnVsbDt0aGlzLmY9dGhpcy5qPXRoaXMuaD0hMTt0aGlzLmc9dGhpcy5jPXRoaXMuYj10aGlzLmE9dGhpcy5pPW51bGw7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtrLk89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mfTtrLmNiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudn07XG5rLmluaXQ9ZnVuY3Rpb24oKXtpZih3aW5kb3cuY2hyb21lJiZjaHJvbWUuY2FzdCYmY2hyb21lLmNhc3QuaXNBdmFpbGFibGUpe2RlbGV0ZSB3aW5kb3cuX19vbkdDYXN0QXBpQXZhaWxhYmxlO3RoaXMuaD0hMDt0aGlzLmwoKTt2YXIgYT1uZXcgY2hyb21lLmNhc3QuU2Vzc2lvblJlcXVlc3QodGhpcy5DKSxhPW5ldyBjaHJvbWUuY2FzdC5BcGlDb25maWcoYSx0aGlzLmtjLmJpbmQodGhpcyksdGhpcy5yYy5iaW5kKHRoaXMpLFwib3JpZ2luX3Njb3BlZFwiKTtjaHJvbWUuY2FzdC5pbml0aWFsaXplKGEsZnVuY3Rpb24oKXt9LGZ1bmN0aW9uKCl7fSl9ZWxzZSB3aW5kb3cuX19vbkdDYXN0QXBpQXZhaWxhYmxlPWZ1bmN0aW9uKGEpe2EmJnRoaXMuaW5pdCgpfS5iaW5kKHRoaXMpfTtrLmZiPWZ1bmN0aW9uKGEpe3RoaXMuaT1hO3RoaXMuZiYmQWEodGhpcyx7dHlwZTpcImFwcERhdGFcIixhcHBEYXRhOnRoaXMuaX0pfTtcbmsuY2FzdD1mdW5jdGlvbihhKXtpZighdGhpcy5oKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig4LDhFMykpO2lmKCF0aGlzLmopcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB2KDgsODAwMSkpO2lmKHRoaXMuZilyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IHYoOCw4MDAyKSk7dGhpcy5nPW5ldyB3O2Nocm9tZS5jYXN0LnJlcXVlc3RTZXNzaW9uKHRoaXMuYWIuYmluZCh0aGlzLGEpLHRoaXMudWIuYmluZCh0aGlzKSk7cmV0dXJuIHRoaXMuZ307XG5rLmdldD1mdW5jdGlvbihhLGIpe2lmKFwidmlkZW9cIj09YSl7aWYoMDw9b2EuaW5kZXhPZihiKSlyZXR1cm4gdGhpcy5GYi5iaW5kKHRoaXMsYSxiKX1lbHNlIGlmKFwicGxheWVyXCI9PWEpe2lmKDA8PXRhLmluZGV4T2YoYikpcmV0dXJuIHRoaXMuRmIuYmluZCh0aGlzLGEsYik7aWYoMDw9dWEuaW5kZXhPZihiKSlyZXR1cm4gdGhpcy5HYy5iaW5kKHRoaXMsYSxiKTtpZigwPD1xYS5pbmRleE9mKGIpKXJldHVybiB0aGlzLkNiLmJpbmQodGhpcyxhLGIpfXJldHVybiB0aGlzLkNiKGEsYil9O2suc2V0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLmJbYV1bYl09YztBYSh0aGlzLHt0eXBlOlwic2V0XCIsdGFyZ2V0TmFtZTphLHByb3BlcnR5OmIsdmFsdWU6Y30pfTtcbmsuYWI9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9Yjt0aGlzLmEuYWRkVXBkYXRlTGlzdGVuZXIodGhpcy52Yi5iaW5kKHRoaXMpKTt0aGlzLmEuYWRkTWVzc2FnZUxpc3RlbmVyKFwidXJuOngtY2FzdDpjb20uZ29vZ2xlLnNoYWthLnYyXCIsdGhpcy5sYy5iaW5kKHRoaXMpKTt0aGlzLnZiKCk7QWEodGhpcyx7dHlwZTpcImluaXRcIixpbml0U3RhdGU6YSxhcHBEYXRhOnRoaXMuaX0pO3RoaXMuZy5yZXNvbHZlKCl9O2sudWI9ZnVuY3Rpb24oYSl7dmFyIGI9ODAwMztzd2l0Y2goYS5jb2RlKXtjYXNlIFwiY2FuY2VsXCI6Yj04MDA0O2JyZWFrO2Nhc2UgXCJ0aW1lb3V0XCI6Yj04MDA1O2JyZWFrO2Nhc2UgXCJyZWNlaXZlcl91bmF2YWlsYWJsZVwiOmI9ODAwNn10aGlzLmcucmVqZWN0KG5ldyB2KDgsYixhKSl9O2suQ2I9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5iW2FdW2JdfTtcbmsuRmI9ZnVuY3Rpb24oYSxiKXtBYSh0aGlzLHt0eXBlOlwiY2FsbFwiLHRhcmdldE5hbWU6YSxtZXRob2ROYW1lOmIsYXJnczpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMil9KX07ay5HYz1mdW5jdGlvbihhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSxkPW5ldyB3LGU9dGhpcy5tLnRvU3RyaW5nKCk7dGhpcy5tKys7dGhpcy5jW2VdPWQ7QWEodGhpcyx7dHlwZTpcImFzeW5jQ2FsbFwiLHRhcmdldE5hbWU6YSxtZXRob2ROYW1lOmIsYXJnczpjLGlkOmV9KTtyZXR1cm4gZH07ay5rYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLnMoKTt0aGlzLmc9bmV3IHc7dGhpcy5hYihiLGEpfTtrLnJjPWZ1bmN0aW9uKGEpe3RoaXMuaj1cImF2YWlsYWJsZVwiPT1hO3RoaXMubCgpfTtcbmsudmI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmE/XCJjb25uZWN0ZWRcIj09dGhpcy5hLnN0YXR1czohMTtpZih0aGlzLmYmJiFhKXt0aGlzLkIoKTtmb3IodmFyIGIgaW4gdGhpcy5iKXRoaXMuYltiXT17fTt6YSh0aGlzKX10aGlzLnY9KHRoaXMuZj1hKT90aGlzLmEucmVjZWl2ZXIuZnJpZW5kbHlOYW1lOlwiXCI7dGhpcy5sKCl9O2Z1bmN0aW9uIHphKGEpe2Zvcih2YXIgYiBpbiBhLmMpe3ZhciBjPWEuY1tiXTtkZWxldGUgYS5jW2JdO2MucmVqZWN0KG5ldyB2KDcsN0UzKSl9fVxuay5sYz1mdW5jdGlvbihhLGIpe3ZhciBjPXdhKGIpO3N3aXRjaChjLnR5cGUpe2Nhc2UgXCJldmVudFwiOnZhciBkPWMudGFyZ2V0TmFtZSxlPWMuZXZlbnQ7dGhpcy5BKGQsbmV3IHQoZS50eXBlLGUpKTticmVhaztjYXNlIFwidXBkYXRlXCI6ZT1jLnVwZGF0ZTtmb3IoZCBpbiBlKXt2YXIgYz10aGlzLmJbZF18fHt9LGY7Zm9yKGYgaW4gZVtkXSljW2ZdPWVbZF1bZl19YnJlYWs7Y2FzZSBcImFzeW5jQ29tcGxldGVcIjppZihkPWMuaWQsZj1jLmVycm9yLGM9dGhpcy5jW2RdLGRlbGV0ZSB0aGlzLmNbZF0sYylpZihmKXtkPW5ldyB2KGYuY2F0ZWdvcnksZi5jb2RlKTtmb3IoZSBpbiBmKWRbZV09ZltlXTtjLnJlamVjdChkKX1lbHNlIGMucmVzb2x2ZSgpfX07ZnVuY3Rpb24gQWEoYSxiKXt2YXIgYz12YShiKTthLmEuc2VuZE1lc3NhZ2UoXCJ1cm46eC1jYXN0OmNvbS5nb29nbGUuc2hha2EudjJcIixjLGZ1bmN0aW9uKCl7fSxnYSl9O2Z1bmN0aW9uIEJhKCl7dGhpcy5hPXt9fWs9QmEucHJvdG90eXBlO2sucHVzaD1mdW5jdGlvbihhLGIpe3RoaXMuYS5oYXNPd25Qcm9wZXJ0eShhKT90aGlzLmFbYV0ucHVzaChiKTp0aGlzLmFbYV09W2JdfTtrLnNldD1mdW5jdGlvbihhLGIpe3RoaXMuYVthXT1ifTtrLmhhcz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hLmhhc093blByb3BlcnR5KGEpfTtrLmdldD1mdW5jdGlvbihhKXtyZXR1cm4oYT10aGlzLmFbYV0pP2Euc2xpY2UoKTpudWxsfTtrLnJlbW92ZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYVthXTtpZihjKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7KytkKWNbZF09PWImJihjLnNwbGljZShkLDEpLC0tZCl9O2sua2V5cz1mdW5jdGlvbigpe3ZhciBhPVtdLGI7Zm9yKGIgaW4gdGhpcy5hKWEucHVzaChiKTtyZXR1cm4gYX07ZnVuY3Rpb24geCgpe3RoaXMuYT1uZXcgQmF9eC5wcm90b3R5cGUubz1mdW5jdGlvbigpe0NhKHRoaXMpO3RoaXMuYT1udWxsO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX07ZnVuY3Rpb24geShhLGIsYyxkKXtiPW5ldyBEYShiLGMsZCk7YS5hLnB1c2goYyxiKX14LnByb3RvdHlwZS5sYT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLmEuZ2V0KGIpfHxbXSxkPTA7ZDxjLmxlbmd0aDsrK2Qpe3ZhciBlPWNbZF07ZS50YXJnZXQ9PWEmJihlLmxhKCksdGhpcy5hLnJlbW92ZShiLGUpKX19O2Z1bmN0aW9uIENhKGEpe3ZhciBiPWEuYSxjPVtdLGQ7Zm9yKGQgaW4gYi5hKWMucHVzaC5hcHBseShjLGIuYVtkXSk7Zm9yKGI9MDtiPGMubGVuZ3RoOysrYiljW2JdLmxhKCk7YS5hLmE9e319ZnVuY3Rpb24gRGEoYSxiLGMpe3RoaXMudGFyZ2V0PWE7dGhpcy50eXBlPWI7dGhpcy5hPWM7dGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuRGEucHJvdG90eXBlLmxhPWZ1bmN0aW9uKCl7dGhpcy50YXJnZXQmJih0aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudHlwZSx0aGlzLmEsITEpLHRoaXMuYT10aGlzLnRhcmdldD1udWxsKX07ZnVuY3Rpb24gcCgpe3RoaXMuQmE9bmV3IEJhO3RoaXMuVT10aGlzfXAucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLkJhLnB1c2goYSxiKX07cC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIpe3RoaXMuQmEucmVtb3ZlKGEsYil9O3AucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuQmEuZ2V0KGEudHlwZSl8fFtdLGM9MDtjPGIubGVuZ3RoOysrYyl7YS50YXJnZXQ9dGhpcy5VO2EuY3VycmVudFRhcmdldD10aGlzLlU7dmFyIGQ9YltjXTt0cnl7ZC5oYW5kbGVFdmVudD9kLmhhbmRsZUV2ZW50KGEpOmQuY2FsbCh0aGlzLGEpfWNhdGNoKGUpe31pZihhLmEpYnJlYWt9cmV0dXJuIGEuZGVmYXVsdFByZXZlbnRlZH07ZnVuY3Rpb24geihhLGIsYyl7cC5jYWxsKHRoaXMpO3RoaXMuYz1hO3RoaXMuYj1iO3RoaXMuaD10aGlzLmY9dGhpcy5nPXRoaXMuaT10aGlzLmo9bnVsbDt0aGlzLmE9bmV3IHlhKGMsdGhpcy5WYy5iaW5kKHRoaXMpLHRoaXMuV2MuYmluZCh0aGlzKSx0aGlzLlhjLmJpbmQodGhpcyksdGhpcy5xYi5iaW5kKHRoaXMpKTtFYSh0aGlzKX1iYSh6KTttKFwic2hha2EuY2FzdC5DYXN0UHJveHlcIix6KTt6LnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dmFyIGE9W3RoaXMuaD90aGlzLmgubygpOm51bGwsdGhpcy5iP3RoaXMuYi5vKCk6bnVsbCx0aGlzLmE/dGhpcy5hLm8oKTpudWxsXTt0aGlzLmE9dGhpcy5oPXRoaXMuaT10aGlzLmo9dGhpcy5iPXRoaXMuYz1udWxsO3JldHVybiBQcm9taXNlLmFsbChhKX07ei5wcm90b3R5cGUuZGVzdHJveT16LnByb3RvdHlwZS5vO3oucHJvdG90eXBlLmNjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuan07ei5wcm90b3R5cGUuZ2V0VmlkZW89ei5wcm90b3R5cGUuY2M7XG56LnByb3RvdHlwZS5hYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLml9O3oucHJvdG90eXBlLmdldFBsYXllcj16LnByb3RvdHlwZS5hYzt6LnByb3RvdHlwZS5RYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmE/dGhpcy5hLmgmJnRoaXMuYS5qOiExfTt6LnByb3RvdHlwZS5jYW5DYXN0PXoucHJvdG90eXBlLlFiO3oucHJvdG90eXBlLk89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hP3RoaXMuYS5PKCk6ITF9O3oucHJvdG90eXBlLmlzQ2FzdGluZz16LnByb3RvdHlwZS5PO3oucHJvdG90eXBlLmNiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYT90aGlzLmEuY2IoKTpcIlwifTt6LnByb3RvdHlwZS5yZWNlaXZlck5hbWU9ei5wcm90b3R5cGUuY2I7ei5wcm90b3R5cGUuY2FzdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMucWIoKTtyZXR1cm4gdGhpcy5hLmNhc3QoYSkudGhlbihmdW5jdGlvbigpe3JldHVybiB0aGlzLmIua2IoKX0uYmluZCh0aGlzKSl9O3oucHJvdG90eXBlLmNhc3Q9ei5wcm90b3R5cGUuY2FzdDtcbnoucHJvdG90eXBlLmZiPWZ1bmN0aW9uKGEpe3RoaXMuYS5mYihhKX07ei5wcm90b3R5cGUuc2V0QXBwRGF0YT16LnByb3RvdHlwZS5mYjt6LnByb3RvdHlwZS5jZD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYTtpZihhLmYpe3ZhciBiPWEucygpO2Nocm9tZS5jYXN0LnJlcXVlc3RTZXNzaW9uKGEuYWIuYmluZChhLGIpLGEudWIuYmluZChhKSl9fTt6LnByb3RvdHlwZS5zdWdnZXN0RGlzY29ubmVjdD16LnByb3RvdHlwZS5jZDtcbmZ1bmN0aW9uIEVhKGEpe2EuYS5pbml0KCk7YS5oPW5ldyB4O2xhLmZvckVhY2goZnVuY3Rpb24oYSl7eSh0aGlzLmgsdGhpcy5jLGEsdGhpcy5rZC5iaW5kKHRoaXMpKX0uYmluZChhKSk7cGEuZm9yRWFjaChmdW5jdGlvbihhKXt5KHRoaXMuaCx0aGlzLmIsYSx0aGlzLkNjLmJpbmQodGhpcykpfS5iaW5kKGEpKTthLmo9e307Zm9yKHZhciBiIGluIGEuYylPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5qLGIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDphLmpkLmJpbmQoYSxiKSxzZXQ6YS5sZC5iaW5kKGEsYil9KTthLmk9e307Zm9yKGIgaW4gYS5iKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLmksYix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OmEuQmMuYmluZChhLGIpfSk7YS5nPW5ldyBwO2EuZy5VPWEuajthLmY9bmV3IHA7YS5mLlU9YS5pfWs9ei5wcm90b3R5cGU7XG5rLnFiPWZ1bmN0aW9uKCl7dmFyIGE9e3ZpZGVvOnt9LHBsYXllcjp7fSxwbGF5ZXJBZnRlckxvYWQ6e30sbWFuaWZlc3Q6dGhpcy5iLnBhLHN0YXJ0VGltZTpudWxsfTt0aGlzLmMucGF1c2UoKTtuYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2EudmlkZW9bYl09dGhpcy5jW2JdfS5iaW5kKHRoaXMpKTt0aGlzLmMuZW5kZWR8fChhLnN0YXJ0VGltZT10aGlzLmMuY3VycmVudFRpbWUpO3JhLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGM9YlsxXTtiPXRoaXMuYltiWzBdXSgpO2EucGxheWVyW2NdPWJ9LmJpbmQodGhpcykpO3NhLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGM9YlsxXTtiPXRoaXMuYltiWzBdXSgpO2EucGxheWVyQWZ0ZXJMb2FkW2NdPWJ9LmJpbmQodGhpcykpO3JldHVybiBhfTtrLlZjPWZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB0KFwiY2FzdHN0YXR1c2NoYW5nZWRcIikpfTtcbmsuWGM9ZnVuY3Rpb24oKXtyYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMV07YT10aGlzLmEuZ2V0KFwicGxheWVyXCIsYVswXSkoKTt0aGlzLmJbYl0oYSl9LmJpbmQodGhpcykpO3ZhciBhPXRoaXMuYS5nZXQoXCJwbGF5ZXJcIixcImdldE1hbmlmZXN0VXJpXCIpKCksYj10aGlzLmEuZ2V0KFwidmlkZW9cIixcImVuZGVkXCIpLGM9UHJvbWlzZS5yZXNvbHZlKCksZD10aGlzLmMuYXV0b3BsYXksZT1udWxsO2J8fChlPXRoaXMuYS5nZXQoXCJ2aWRlb1wiLFwiY3VycmVudFRpbWVcIikpO2EmJih0aGlzLmMuYXV0b3BsYXk9ITEsYz10aGlzLmIubG9hZChhLGUpLGNbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt0aGlzLmIuZGlzcGF0Y2hFdmVudChuZXcgdChcImVycm9yXCIse2RldGFpbDphfSkpfS5iaW5kKHRoaXMpKSk7dmFyIGY9e307bmEuZm9yRWFjaChmdW5jdGlvbihhKXtmW2FdPXRoaXMuYS5nZXQoXCJ2aWRlb1wiLGEpfS5iaW5kKHRoaXMpKTtjLnRoZW4oZnVuY3Rpb24oKXtuYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3RoaXMuY1thXT1cbmZbYV19LmJpbmQodGhpcykpO3NhLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVsxXTthPXRoaXMuYS5nZXQoXCJwbGF5ZXJcIixhWzBdKSgpO3RoaXMuYltiXShhKX0uYmluZCh0aGlzKSk7dGhpcy5jLmF1dG9wbGF5PWQ7YSYmdGhpcy5jLnBsYXkoKX0uYmluZCh0aGlzKSl9O1xuay5qZD1mdW5jdGlvbihhKXtpZihcImFkZEV2ZW50TGlzdGVuZXJcIj09YSlyZXR1cm4gdGhpcy5nLmFkZEV2ZW50TGlzdGVuZXIuYmluZCh0aGlzLmcpO2lmKFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiPT1hKXJldHVybiB0aGlzLmcucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMuZyk7aWYodGhpcy5hLk8oKSYmIU9iamVjdC5rZXlzKHRoaXMuYS5iLnZpZGVvKS5sZW5ndGgpe3ZhciBiPXRoaXMuY1thXTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBiKXJldHVybiBifXJldHVybiB0aGlzLmEuTygpP3RoaXMuYS5nZXQoXCJ2aWRlb1wiLGEpOihiPXRoaXMuY1thXSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiYoYj1iLmJpbmQodGhpcy5jKSksYil9O2subGQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmEuTygpP3RoaXMuYS5zZXQoXCJ2aWRlb1wiLGEsYik6dGhpcy5jW2FdPWJ9O2sua2Q9ZnVuY3Rpb24oYSl7dGhpcy5hLk8oKXx8dGhpcy5nLmRpc3BhdGNoRXZlbnQobmV3IHQoYS50eXBlLGEpKX07XG5rLkJjPWZ1bmN0aW9uKGEpe3JldHVyblwiYWRkRXZlbnRMaXN0ZW5lclwiPT1hP3RoaXMuZi5hZGRFdmVudExpc3RlbmVyLmJpbmQodGhpcy5mKTpcInJlbW92ZUV2ZW50TGlzdGVuZXJcIj09YT90aGlzLmYucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMuZik6XCJnZXROZXR3b3JraW5nRW5naW5lXCI9PWE/dGhpcy5iLnJiLmJpbmQodGhpcy5iKTp0aGlzLmEuTygpJiYhT2JqZWN0LmtleXModGhpcy5hLmIudmlkZW8pLmxlbmd0aCYmMDw9cWEuaW5kZXhPZihhKXx8IXRoaXMuYS5PKCk/KGE9dGhpcy5iW2FdLGEuYmluZCh0aGlzLmIpKTp0aGlzLmEuZ2V0KFwicGxheWVyXCIsYSl9O2suQ2M9ZnVuY3Rpb24oYSl7dGhpcy5hLk8oKXx8dGhpcy5mLmRpc3BhdGNoRXZlbnQoYSl9O2suV2M9ZnVuY3Rpb24oYSxiKXt0aGlzLmEuTygpJiYoXCJ2aWRlb1wiPT1hP3RoaXMuZy5kaXNwYXRjaEV2ZW50KGIpOlwicGxheWVyXCI9PWEmJnRoaXMuZi5kaXNwYXRjaEV2ZW50KGIpKX07ZnVuY3Rpb24gQShhLGIsYyl7cC5jYWxsKHRoaXMpO3RoaXMuYj1hO3RoaXMuYT1iO3RoaXMuaT17dmlkZW86YSxwbGF5ZXI6Yn07dGhpcy5qPWN8fGZ1bmN0aW9uKCl7fTt0aGlzLmg9ITE7dGhpcy5jPSEwO3RoaXMuZj10aGlzLmc9bnVsbDtGYSh0aGlzKX1iYShBKTttKFwic2hha2EuY2FzdC5DYXN0UmVjZWl2ZXJcIixBKTtBLnByb3RvdHlwZS5lYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O0EucHJvdG90eXBlLmlzQ29ubmVjdGVkPUEucHJvdG90eXBlLmVjO0EucHJvdG90eXBlLmZjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY307QS5wcm90b3R5cGUuaXNJZGxlPUEucHJvdG90eXBlLmZjO1xuQS5wcm90b3R5cGUubz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYT90aGlzLmEubygpOlByb21pc2UucmVzb2x2ZSgpO251bGwhPXRoaXMuZiYmd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmYpO3RoaXMuaj10aGlzLmk9dGhpcy5hPXRoaXMuYj1udWxsO3RoaXMuaD0hMTt0aGlzLmM9ITA7dGhpcy5mPXRoaXMuZz1udWxsO3JldHVybiBhLnRoZW4oZnVuY3Rpb24oKXtjYXN0LnJlY2VpdmVyLkNhc3RSZWNlaXZlck1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5zdG9wKCl9KX07QS5wcm90b3R5cGUuZGVzdHJveT1BLnByb3RvdHlwZS5vO1xuZnVuY3Rpb24gRmEoYSl7dmFyIGI9Y2FzdC5yZWNlaXZlci5DYXN0UmVjZWl2ZXJNYW5hZ2VyLmdldEluc3RhbmNlKCk7Yi5vblNlbmRlckNvbm5lY3RlZD1hLkFiLmJpbmQoYSk7Yi5vblNlbmRlckRpc2Nvbm5lY3RlZD1hLkFiLmJpbmQoYSk7Yi5vblN5c3RlbVZvbHVtZUNoYW5nZWQ9YS5YYi5iaW5kKGEpO2EuZz1iLmdldENhc3RNZXNzYWdlQnVzKFwidXJuOngtY2FzdDpjb20uZ29vZ2xlLnNoYWthLnYyXCIpO2EuZy5vbk1lc3NhZ2U9YS5tYy5iaW5kKGEpO2Iuc3RhcnQoKTtsYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3RoaXMuYi5hZGRFdmVudExpc3RlbmVyKGEsdGhpcy5EYi5iaW5kKHRoaXMsXCJ2aWRlb1wiKSl9LmJpbmQoYSkpO3BhLmZvckVhY2goZnVuY3Rpb24oYSl7dGhpcy5hLmFkZEV2ZW50TGlzdGVuZXIoYSx0aGlzLkRiLmJpbmQodGhpcyxcInBsYXllclwiKSl9LmJpbmQoYSkpO2Nhc3QuX19wbGF0Zm9ybV9fJiZjYXN0Ll9fcGxhdGZvcm1fXy5jYW5EaXNwbGF5VHlwZSgndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjY0MDAyOFwiOyB3aWR0aD0zODQwOyBoZWlnaHQ9MjE2MCcpP1xuYS5hLmdiKDM4NDAsMjE2MCk6YS5hLmdiKDE5MjAsMTA4MCk7YS5hLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkaW5nXCIsZnVuY3Rpb24oKXt0aGlzLmM9ITE7R2EodGhpcyl9LmJpbmQoYSkpO2EuYi5hZGRFdmVudExpc3RlbmVyKFwicGxheWluZ1wiLGZ1bmN0aW9uKCl7dGhpcy5jPSExO0dhKHRoaXMpfS5iaW5kKGEpKTthLmEuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZGluZ1wiLGZ1bmN0aW9uKCl7dGhpcy5jPSEwO0dhKHRoaXMpfS5iaW5kKGEpKTthLmIuYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsZnVuY3Rpb24oKXt3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3RoaXMuYiYmdGhpcy5iLmVuZGVkJiYodGhpcy5jPSEwLEdhKHRoaXMpKX0uYmluZCh0aGlzKSw1RTMpfS5iaW5kKGEpKX1rPUEucHJvdG90eXBlO2suQWI9ZnVuY3Rpb24oKXt0aGlzLmg9ISFjYXN0LnJlY2VpdmVyLkNhc3RSZWNlaXZlck1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nZXRTZW5kZXJzKCkubGVuZ3RoO0dhKHRoaXMpfTtcbmZ1bmN0aW9uIEdhKGEpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHQoXCJjYXN0c3RhdHVzY2hhbmdlZFwiKSl9LmJpbmQoYSkpfVxuZnVuY3Rpb24gSGEoYSxiLGMpe2Zvcih2YXIgZCBpbiBiLnBsYXllcilhLmFbZF0oYi5wbGF5ZXJbZF0pO2EuaihjKTtjPVByb21pc2UucmVzb2x2ZSgpO3ZhciBlPWEuYi5hdXRvcGxheTtiLm1hbmlmZXN0JiYoYS5iLmF1dG9wbGF5PSExLGM9YS5hLmxvYWQoYi5tYW5pZmVzdCxiLnN0YXJ0VGltZSksY1tcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3RoaXMuYS5kaXNwYXRjaEV2ZW50KG5ldyB0KFwiZXJyb3JcIix7ZGV0YWlsOmF9KSl9LmJpbmQoYSkpKTtjLnRoZW4oZnVuY3Rpb24oKXtmb3IodmFyIGEgaW4gYi52aWRlbyl7dmFyIGM9Yi52aWRlb1thXTt0aGlzLmJbYV09Y31mb3IoYSBpbiBiLnBsYXllckFmdGVyTG9hZCljPWIucGxheWVyQWZ0ZXJMb2FkW2FdLHRoaXMuYVthXShjKTt0aGlzLmIuYXV0b3BsYXk9ZTtiLm1hbmlmZXN0JiZ0aGlzLmIucGxheSgpfS5iaW5kKGEpKX1cbmsuRGI9ZnVuY3Rpb24oYSxiKXt0aGlzLmJiKCk7SWEodGhpcyx7dHlwZTpcImV2ZW50XCIsdGFyZ2V0TmFtZTphLGV2ZW50OmJ9KX07ay5iYj1mdW5jdGlvbigpe251bGwhPXRoaXMuZiYmd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmYpO3RoaXMuZj13aW5kb3cuc2V0VGltZW91dCh0aGlzLmJiLmJpbmQodGhpcyksNTAwKTt2YXIgYT17dmlkZW86e30scGxheWVyOnt9fTttYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2EudmlkZW9bYl09dGhpcy5iW2JdfS5iaW5kKHRoaXMpKTtxYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2EucGxheWVyW2JdPXRoaXMuYVtiXSgpfS5iaW5kKHRoaXMpKTt2YXIgYj1jYXN0LnJlY2VpdmVyLkNhc3RSZWNlaXZlck1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nZXRTeXN0ZW1Wb2x1bWUoKTtiJiYoYS52aWRlby52b2x1bWU9Yi5sZXZlbCxhLnZpZGVvLm11dGVkPWIubXV0ZWQpO0lhKHRoaXMse3R5cGU6XCJ1cGRhdGVcIix1cGRhdGU6YX0pfTtcbmsuWGI9ZnVuY3Rpb24oKXt2YXIgYT1jYXN0LnJlY2VpdmVyLkNhc3RSZWNlaXZlck1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nZXRTeXN0ZW1Wb2x1bWUoKTthJiZJYSh0aGlzLHt0eXBlOlwidXBkYXRlXCIsdXBkYXRlOnt2aWRlbzp7dm9sdW1lOmEubGV2ZWwsbXV0ZWQ6YS5tdXRlZH19fSk7SWEodGhpcyx7dHlwZTpcImV2ZW50XCIsdGFyZ2V0TmFtZTpcInZpZGVvXCIsZXZlbnQ6e3R5cGU6XCJ2b2x1bWVjaGFuZ2VcIn19KX07XG5rLm1jPWZ1bmN0aW9uKGEpe3ZhciBiPXdhKGEuZGF0YSk7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImluaXRcIjpIYSh0aGlzLGIuaW5pdFN0YXRlLGIuYXBwRGF0YSk7dGhpcy5iYigpO2JyZWFrO2Nhc2UgXCJhcHBEYXRhXCI6dGhpcy5qKGIuYXBwRGF0YSk7YnJlYWs7Y2FzZSBcInNldFwiOnZhciBjPWIudGFyZ2V0TmFtZSxkPWIucHJvcGVydHksZT1iLnZhbHVlO2lmKFwidmlkZW9cIj09YylpZihiPWNhc3QucmVjZWl2ZXIuQ2FzdFJlY2VpdmVyTWFuYWdlci5nZXRJbnN0YW5jZSgpLFwidm9sdW1lXCI9PWQpe2Iuc2V0U3lzdGVtVm9sdW1lTGV2ZWwoZSk7YnJlYWt9ZWxzZSBpZihcIm11dGVkXCI9PWQpe2Iuc2V0U3lzdGVtVm9sdW1lTXV0ZWQoZSk7YnJlYWt9dGhpcy5pW2NdW2RdPWU7YnJlYWs7Y2FzZSBcImNhbGxcIjpjPWIudGFyZ2V0TmFtZTtkPWIubWV0aG9kTmFtZTtlPWIuYXJncztjPXRoaXMuaVtjXTtjW2RdLmFwcGx5KGMsZSk7YnJlYWs7Y2FzZSBcImFzeW5jQ2FsbFwiOmM9Yi50YXJnZXROYW1lLFxuZD1iLm1ldGhvZE5hbWUsZT1iLmFyZ3MsYj1iLmlkLGE9YS5zZW5kZXJJZCxjPXRoaXMuaVtjXSxjW2RdLmFwcGx5KGMsZSkudGhlbih0aGlzLkpiLmJpbmQodGhpcyxhLGIsbnVsbCksdGhpcy5KYi5iaW5kKHRoaXMsYSxiKSl9fTtrLkpiPWZ1bmN0aW9uKGEsYixjKXtJYSh0aGlzLHt0eXBlOlwiYXN5bmNDb21wbGV0ZVwiLGlkOmIsZXJyb3I6Y30sYSl9O2Z1bmN0aW9uIElhKGEsYixjKXthLmgmJihiPXZhKGIpLGM/YS5nLmdldENhc3RDaGFubmVsKGMpLnNlbmQoYik6YS5nLmJyb2FkY2FzdChiKSl9O2Z1bmN0aW9uIEphKGEsYil7cmV0dXJuIGEucmVkdWNlKGZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gYltcImNhdGNoXCJdKGEuYmluZChudWxsLGUpKX0uYmluZChudWxsLGIpLFByb21pc2UucmVqZWN0KCkpfWZ1bmN0aW9uIEIoYSxiKXtyZXR1cm4gYS5jb25jYXQoYil9ZnVuY3Rpb24gQygpe31mdW5jdGlvbiBLYShhKXtyZXR1cm4gbnVsbCE9YX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIhPWF9fWZ1bmN0aW9uIE1hKGEsYixjKXtyZXR1cm4gYy5pbmRleE9mKGEpPT1ifTtmdW5jdGlvbiBOYShhKXtyZXR1cm4hYXx8IU9iamVjdC5rZXlzKGEpLmxlbmd0aH1mdW5jdGlvbiBGKGEpe3JldHVybiBPYmplY3Qua2V5cyhhKS5tYXAoZnVuY3Rpb24oYil7cmV0dXJuIGFbYl19KX1mdW5jdGlvbiBPYShhLGIpe3JldHVybiBPYmplY3Qua2V5cyhhKS5yZWR1Y2UoZnVuY3Rpb24oYyxkKXtjW2RdPWIoYVtkXSxkKTtyZXR1cm4gY30se30pfWZ1bmN0aW9uIFBhKGEsYil7cmV0dXJuIE9iamVjdC5rZXlzKGEpLmV2ZXJ5KGZ1bmN0aW9uKGMpe3JldHVybiBiKGMsYVtjXSl9KX07ZnVuY3Rpb24gUWEoYSl7cmV0dXJuIHdpbmRvdy5idG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxhKSkucmVwbGFjZSgvXFwrL2csXCItXCIpLnJlcGxhY2UoL1xcLy9nLFwiX1wiKS5yZXBsYWNlKC89KiQvLFwiXCIpfWZ1bmN0aW9uIFJhKGEpe2E9d2luZG93LmF0b2IoYS5yZXBsYWNlKC8tL2csXCIrXCIpLnJlcGxhY2UoL18vZyxcIi9cIikpO2Zvcih2YXIgYj1uZXcgVWludDhBcnJheShhLmxlbmd0aCksYz0wO2M8YS5sZW5ndGg7KytjKWJbY109YS5jaGFyQ29kZUF0KGMpO3JldHVybiBifWZ1bmN0aW9uIFNhKGEpe2Zvcih2YXIgYj1uZXcgVWludDhBcnJheShhLmxlbmd0aC8yKSxjPTA7YzxhLmxlbmd0aDtjKz0yKWJbYy8yXT13aW5kb3cucGFyc2VJbnQoYS5zdWJzdHIoYywyKSwxNik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBUYShhKXtmb3IodmFyIGI9XCJcIixjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWFbY10udG9TdHJpbmcoMTYpOzE9PWQubGVuZ3RoJiYoZD1cIjBcIitkKTtiKz1kfXJldHVybiBifWZ1bmN0aW9uIFVhKGEsYil7aWYoIWEmJiFiKXJldHVybiEwO2lmKCFhfHwhYnx8YS5sZW5ndGghPWIubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7KytjKWlmKGFbY10hPWJbY10pcmV0dXJuITE7cmV0dXJuITB9O2Z1bmN0aW9uIFZhKGEsYil7dmFyIGM9RyhhLGIpO3JldHVybiAxIT1jLmxlbmd0aD9udWxsOmNbMF19ZnVuY3Rpb24gRyhhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYS5jaGlsZE5vZGVzLGZ1bmN0aW9uKGEpe3JldHVybiBhLnRhZ05hbWU9PWJ9KX1mdW5jdGlvbiBXYShhKXt2YXIgYj1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGImJmIubm9kZVR5cGU9PU5vZGUuVEVYVF9OT0RFP2EudGV4dENvbnRlbnQudHJpbSgpOm51bGx9ZnVuY3Rpb24gSChhLGIsYyxkKXt2YXIgZT1udWxsO2E9YS5nZXRBdHRyaWJ1dGUoYik7bnVsbCE9YSYmKGU9YyhhKSk7cmV0dXJuIG51bGw9PWU/dm9pZCAwIT09ZD9kOm51bGw6ZX1mdW5jdGlvbiBYYShhKXtpZighYSlyZXR1cm4gbnVsbDthPURhdGUucGFyc2UoYSk7cmV0dXJuIGlzTmFOKGEpP251bGw6TWF0aC5mbG9vcihhLzFFMyl9XG5mdW5jdGlvbiBJKGEpe2lmKCFhKXJldHVybiBudWxsO2E9L15QKD86KFswLTldKilZKT8oPzooWzAtOV0qKU0pPyg/OihbMC05XSopRCk/KD86VCg/OihbMC05XSopSCk/KD86KFswLTldKilNKT8oPzooWzAtOS5dKilTKT8pPyQvLmV4ZWMoYSk7aWYoIWEpcmV0dXJuIG51bGw7YT0zMTUzNkUzKk51bWJlcihhWzFdfHxudWxsKSsyNTkyRTMqTnVtYmVyKGFbMl18fG51bGwpKzg2NDAwKk51bWJlcihhWzNdfHxudWxsKSszNjAwKk51bWJlcihhWzRdfHxudWxsKSs2MCpOdW1iZXIoYVs1XXx8bnVsbCkrTnVtYmVyKGFbNl18fG51bGwpO3JldHVybiBpc0Zpbml0ZShhKT9hOm51bGx9ZnVuY3Rpb24gWWEoYSl7dmFyIGI9LyhbMC05XSspLShbMC05XSspLy5leGVjKGEpO2lmKCFiKXJldHVybiBudWxsO2E9TnVtYmVyKGJbMV0pO2lmKCFpc0Zpbml0ZShhKSlyZXR1cm4gbnVsbDtiPU51bWJlcihiWzJdKTtyZXR1cm4gaXNGaW5pdGUoYik/e3N0YXJ0OmEsZW5kOmJ9Om51bGx9XG5mdW5jdGlvbiBaYShhKXthPU51bWJlcihhKTtyZXR1cm4gYSUxP251bGw6YX1mdW5jdGlvbiAkYShhKXthPU51bWJlcihhKTtyZXR1cm4hKGElMSkmJjA8YT9hOm51bGx9ZnVuY3Rpb24gYmIoYSl7YT1OdW1iZXIoYSk7cmV0dXJuIShhJTEpJiYwPD1hP2E6bnVsbH1mdW5jdGlvbiBjYihhKXt2YXIgYjthPShiPWEubWF0Y2goL14oXFxkKylcXC8oXFxkKykkLykpP051bWJlcihiWzFdL2JbMl0pOk51bWJlcihhKTtyZXR1cm4gaXNOYU4oYSk/bnVsbDphfTt2YXIgZGI9e1widXJuOnV1aWQ6MTA3N2VmZWMtYzBiMi00ZDAyLWFjZTMtM2MxZTUyZTJmYjRiXCI6XCJvcmcudzMuY2xlYXJrZXlcIixcInVybjp1dWlkOmVkZWY4YmE5LTc5ZDYtNGFjZS1hM2M4LTI3ZGNkNTFkMjFlZFwiOlwiY29tLndpZGV2aW5lLmFscGhhXCIsXCJ1cm46dXVpZDo5YTA0ZjA3OS05ODQwLTQyODYtYWI5Mi1lNjViZTA4ODVmOTVcIjpcImNvbS5taWNyb3NvZnQucGxheXJlYWR5XCIsXCJ1cm46dXVpZDpmMjM5ZTc2OS1lZmEzLTQ4NTAtOWMxNi1hOTAzYzY5MzJlZmJcIjpcImNvbS5hZG9iZS5wcmltZXRpbWVcIn07XG5mdW5jdGlvbiBlYihhLGIpe3ZhciBjPWZiKGEpLGQ9bnVsbCxlPWMuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVyblwidXJuOm1wZWc6ZGFzaDptcDRwcm90ZWN0aW9uOjIwMTFcIj09YS5JYj8oZD1hLmluaXR8fGQsITEpOiEwfSksZj1jLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5rZXlJZH0pLmZpbHRlcihLYSksZz1udWxsO2lmKDA8Zi5sZW5ndGgmJihnPWZbMF0sZi5zb21lKExhKGcpKSkpdGhyb3cgbmV3IHYoNCw0MDEwKTtmPVtdOzA8ZS5sZW5ndGg/KGY9Z2IoZCxiLGUpLGYubGVuZ3RofHwoZj1baGIoXCJcIixkKV0pKTowPGMubGVuZ3RoJiYoZj1GKGRiKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGhiKGEsZCl9KSk7cmV0dXJue25iOmcsb2Q6ZCxkcm1JbmZvczpmLHBiOiEwfX1cbmZ1bmN0aW9uIGliKGEsYixjKXt2YXIgZD1lYihhLGIpO2lmKGMucGIpe2E9MT09Yy5kcm1JbmZvcy5sZW5ndGgmJiFjLmRybUluZm9zWzBdLmtleVN5c3RlbTtiPSFkLmRybUluZm9zLmxlbmd0aDtpZighYy5kcm1JbmZvcy5sZW5ndGh8fGEmJiFiKWMuZHJtSW5mb3M9ZC5kcm1JbmZvcztjLnBiPSExfWVsc2UgaWYoMDxkLmRybUluZm9zLmxlbmd0aCYmKGMuZHJtSW5mb3M9Yy5kcm1JbmZvcy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGQuZHJtSW5mb3Muc29tZShmdW5jdGlvbihiKXtyZXR1cm4gYi5rZXlTeXN0ZW09PWEua2V5U3lzdGVtfSl9KSwhYy5kcm1JbmZvcy5sZW5ndGgpKXRocm93IG5ldyB2KDQsNDAwOCk7cmV0dXJuIGQubmJ8fGMubmJ9XG5mdW5jdGlvbiBoYihhLGIpe3JldHVybntrZXlTeXN0ZW06YSxsaWNlbnNlU2VydmVyVXJpOlwiXCIsZGlzdGluY3RpdmVJZGVudGlmaWVyUmVxdWlyZWQ6ITEscGVyc2lzdGVudFN0YXRlUmVxdWlyZWQ6ITEsYXVkaW9Sb2J1c3RuZXNzOlwiXCIsdmlkZW9Sb2J1c3RuZXNzOlwiXCIsc2VydmVyQ2VydGlmaWNhdGU6bnVsbCxpbml0RGF0YTpifHxbXSxrZXlJZHM6W119fWZ1bmN0aW9uIGdiKGEsYixjKXtyZXR1cm4gYy5tYXAoZnVuY3Rpb24oYyl7dmFyIGQ9ZGJbYy5JYl07cmV0dXJuIGQ/W2hiKGQsYy5pbml0fHxhKV06YihjLm5vZGUpfHxbXX0pLnJlZHVjZShCLFtdKX1cbmZ1bmN0aW9uIGZiKGEpe3JldHVybiBhLm1hcChmdW5jdGlvbihhKXt2YXIgYj1hLmdldEF0dHJpYnV0ZShcInNjaGVtZUlkVXJpXCIpLGQ9YS5nZXRBdHRyaWJ1dGUoXCJjZW5jOmRlZmF1bHRfS0lEXCIpLGU9RyhhLFwiY2VuYzpwc3NoXCIpLm1hcChXYSk7aWYoIWIpcmV0dXJuIG51bGw7Yj1iLnRvTG93ZXJDYXNlKCk7aWYoZCYmKGQ9ZC5yZXBsYWNlKC8tL2csXCJcIikudG9Mb3dlckNhc2UoKSwwPD1kLmluZGV4T2YoXCIgXCIpKSl0aHJvdyBuZXcgdig0LDQwMDkpO3ZhciBmPVtdO3RyeXtmPWUubWFwKGZ1bmN0aW9uKGEpe3JldHVybntpbml0RGF0YVR5cGU6XCJjZW5jXCIsaW5pdERhdGE6UmEoYSl9fSl9Y2F0Y2goZyl7dGhyb3cgbmV3IHYoNCw0MDA3KTt9cmV0dXJue25vZGU6YSxJYjpiLGtleUlkOmQsaW5pdDowPGYubGVuZ3RoP2Y6bnVsbH19KS5maWx0ZXIoS2EpfTt2YXIgamI9L14oPzooW146Lz8jLl0rKTopPyg/OlxcL1xcLyg/OihbXi8/I10qKUApPyhbXi8jP10qPykoPzo6KFswLTldKykpPyg/PVsvIz9dfCQpKT8oW14/I10rKT8oPzpcXD8oW14jXSopKT8oPzojKC4qKSk/JC87ZnVuY3Rpb24ga2IoYSl7dmFyIGI7YSBpbnN0YW5jZW9mIGtiPyhsYih0aGlzLGEuVCksdGhpcy5tYT1hLm1hLHRoaXMuVj1hLlYsbWIodGhpcyxhLnlhKSx0aGlzLlA9YS5QLG5iKHRoaXMsb2IoYS5hKSksdGhpcy5kYT1hLmRhKTphJiYoYj1TdHJpbmcoYSkubWF0Y2goamIpKT8obGIodGhpcyxiWzFdfHxcIlwiLCEwKSx0aGlzLm1hPXBiKGJbMl18fFwiXCIpLHRoaXMuVj1wYihiWzNdfHxcIlwiLCEwKSxtYih0aGlzLGJbNF0pLHRoaXMuUD1wYihiWzVdfHxcIlwiLCEwKSxuYih0aGlzLGJbNl18fFwiXCIsITApLHRoaXMuZGE9cGIoYls3XXx8XCJcIikpOnRoaXMuYT1uZXcgcWIobnVsbCl9az1rYi5wcm90b3R5cGU7ay5UPVwiXCI7ay5tYT1cIlwiO2suVj1cIlwiO2sueWE9bnVsbDtrLlA9XCJcIjtrLmRhPVwiXCI7XG5rLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLlQ7YiYmYS5wdXNoKHJiKGIsc2IsITApLFwiOlwiKTtpZihiPXRoaXMuVil7YS5wdXNoKFwiLy9cIik7dmFyIGM9dGhpcy5tYTtjJiZhLnB1c2gocmIoYyxzYiwhMCksXCJAXCIpO2EucHVzaChlbmNvZGVVUklDb21wb25lbnQoYikucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKTtiPXRoaXMueWE7bnVsbCE9YiYmYS5wdXNoKFwiOlwiLFN0cmluZyhiKSl9aWYoYj10aGlzLlApdGhpcy5WJiZcIi9cIiE9Yi5jaGFyQXQoMCkmJmEucHVzaChcIi9cIiksYS5wdXNoKHJiKGIsXCIvXCI9PWIuY2hhckF0KDApP3RiOnViLCEwKSk7KGI9dGhpcy5hLnRvU3RyaW5nKCkpJiZhLnB1c2goXCI/XCIsYik7KGI9dGhpcy5kYSkmJmEucHVzaChcIiNcIixyYihiLHZiKSk7cmV0dXJuIGEuam9pbihcIlwiKX07XG5rLnJlc29sdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IGtiKHRoaXMpO1wiZGF0YVwiPT09Yi5UJiYoYj1uZXcga2IpO3ZhciBjPSEhYS5UO2M/bGIoYixhLlQpOmM9ISFhLm1hO2M/Yi5tYT1hLm1hOmM9ISFhLlY7Yz9iLlY9YS5WOmM9bnVsbCE9YS55YTt2YXIgZD1hLlA7aWYoYyltYihiLGEueWEpO2Vsc2UgaWYoYz0hIWEuUCl7aWYoXCIvXCIhPWQuY2hhckF0KDApKWlmKHRoaXMuViYmIXRoaXMuUClkPVwiL1wiK2Q7ZWxzZXt2YXIgZT1iLlAubGFzdEluZGV4T2YoXCIvXCIpOy0xIT1lJiYoZD1iLlAuc3Vic3RyKDAsZSsxKStkKX1pZihcIi4uXCI9PWR8fFwiLlwiPT1kKWQ9XCJcIjtlbHNlIGlmKC0xIT1kLmluZGV4T2YoXCIuL1wiKXx8LTEhPWQuaW5kZXhPZihcIi8uXCIpKXtmb3IodmFyIGU9IWQubGFzdEluZGV4T2YoXCIvXCIsMCksZD1kLnNwbGl0KFwiL1wiKSxmPVtdLGc9MDtnPGQubGVuZ3RoOyl7dmFyIGg9ZFtnKytdO1wiLlwiPT1oP2UmJmc9PWQubGVuZ3RoJiZmLnB1c2goXCJcIik6XCIuLlwiPT1oPygoMTxmLmxlbmd0aHx8XG4xPT1mLmxlbmd0aCYmXCJcIiE9ZlswXSkmJmYucG9wKCksZSYmZz09ZC5sZW5ndGgmJmYucHVzaChcIlwiKSk6KGYucHVzaChoKSxlPSEwKX1kPWYuam9pbihcIi9cIil9fWM/Yi5QPWQ6Yz1cIlwiIT09YS5hLnRvU3RyaW5nKCk7Yz9uYihiLG9iKGEuYSkpOmM9ISFhLmRhO2MmJihiLmRhPWEuZGEpO3JldHVybiBifTtmdW5jdGlvbiBsYihhLGIsYyl7YS5UPWM/cGIoYiwhMCk6YjthLlQmJihhLlQ9YS5ULnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gbWIoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EueWE9Yn1lbHNlIGEueWE9bnVsbH1mdW5jdGlvbiBuYihhLGIsYyl7YiBpbnN0YW5jZW9mIHFiP2EuYT1iOihjfHwoYj1yYihiLHdiKSksYS5hPW5ldyBxYihiKSl9ZnVuY3Rpb24gcGIoYSxiKXtyZXR1cm4gYT9iP2RlY29kZVVSSShhKTpkZWNvZGVVUklDb21wb25lbnQoYSk6XCJcIn1cbmZ1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLHhiKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiB4YihhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9dmFyIHNiPS9bI1xcL1xcP0BdL2csdWI9L1tcXCNcXD86XS9nLHRiPS9bXFwjXFw/XS9nLHdiPS9bXFwjXFw/QF0vZyx2Yj0vIy9nO2Z1bmN0aW9uIHFiKGEpe3RoaXMuYj1hfHxudWxsfXFiLnByb3RvdHlwZS5hPW51bGw7cWIucHJvdG90eXBlLmM9bnVsbDtcbnFiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuYilyZXR1cm4gdGhpcy5iO2lmKCF0aGlzLmEpcmV0dXJuXCJcIjt2YXIgYT1bXSxiO2ZvcihiIGluIHRoaXMuYSlmb3IodmFyIGM9ZW5jb2RlVVJJQ29tcG9uZW50KGIpLGQ9dGhpcy5hW2JdLGU9MDtlPGQubGVuZ3RoO2UrKyl7dmFyIGY9YztcIlwiIT09ZFtlXSYmKGYrPVwiPVwiK2VuY29kZVVSSUNvbXBvbmVudChkW2VdKSk7YS5wdXNoKGYpfXJldHVybiB0aGlzLmI9YS5qb2luKFwiJlwiKX07ZnVuY3Rpb24gb2IoYSl7dmFyIGI9bmV3IHFiO2IuYj1hLmI7aWYoYS5hKXt2YXIgYz17fSxkO2ZvcihkIGluIGEuYSljW2RdPWEuYVtkXS5jb25jYXQoKTtiLmE9YztiLmM9YS5jfXJldHVybiBifTtmdW5jdGlvbiB5YihhLGIsYyl7dGhpcy5hPWE7dGhpcy5NPWI7dGhpcy5EPWN9bShcInNoYWthLm1lZGlhLkluaXRTZWdtZW50UmVmZXJlbmNlXCIseWIpO2Z1bmN0aW9uIEooYSxiLGMsZCxlLGYpe3RoaXMucG9zaXRpb249YTt0aGlzLnN0YXJ0VGltZT1iO3RoaXMuZW5kVGltZT1jO3RoaXMuYT1kO3RoaXMuTT1lO3RoaXMuRD1mfW0oXCJzaGFrYS5tZWRpYS5TZWdtZW50UmVmZXJlbmNlXCIsSik7dmFyIHpiPTEvMTU7ZnVuY3Rpb24gQWIoYSxiLGMsZCxlKXtudWxsIT09ZSYmKGU9TWF0aC5yb3VuZChlKSk7dmFyIGY9e1JlcHJlc2VudGF0aW9uSUQ6YixOdW1iZXI6YyxCYW5kd2lkdGg6ZCxUaW1lOmV9O3JldHVybiBhLnJlcGxhY2UoL1xcJChSZXByZXNlbnRhdGlvbklEfE51bWJlcnxCYW5kd2lkdGh8VGltZSk/KD86JTAoWzAtOV0rKWQpP1xcJC9nLGZ1bmN0aW9uKGEsYixjKXtpZihcIiQkXCI9PWEpcmV0dXJuXCIkXCI7dmFyIGQ9ZltiXTtpZihudWxsPT1kKXJldHVybiBhO1wiUmVwcmVzZW50YXRpb25JRFwiPT1iJiZjJiYoYz12b2lkIDApO2E9ZC50b1N0cmluZygpO2M9d2luZG93LnBhcnNlSW50KGMsMTApfHwxO3JldHVybiBBcnJheShNYXRoLm1heCgwLGMtYS5sZW5ndGgpKzEpLmpvaW4oXCIwXCIpK2F9KX1cbmZ1bmN0aW9uIEJiKGEsYixjKXtpZihjLmxlbmd0aCl7dmFyIGQ9Y1swXTtkLnN0YXJ0VGltZTw9emImJihjWzBdPW5ldyBKKGQucG9zaXRpb24sMCxkLmVuZFRpbWUsZC5hLGQuTSxkLkQpKTthfHwoYT1jW2MubGVuZ3RoLTFdLGEuc3RhcnRUaW1lPmJ8fChjW2MubGVuZ3RoLTFdPW5ldyBKKGEucG9zaXRpb24sYS5zdGFydFRpbWUsYixhLmEsYS5NLGEuRCkpKX19ZnVuY3Rpb24gSyhhLGIpe2lmKCFiLmxlbmd0aClyZXR1cm4gYTt2YXIgYz1iLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGtiKGEpfSk7cmV0dXJuIGEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcga2IoYSl9KS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGMubWFwKGEucmVzb2x2ZS5iaW5kKGEpKX0pLnJlZHVjZShCLFtdKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudG9TdHJpbmcoKX0pfVxuZnVuY3Rpb24gQ2IoYSxiKXt2YXIgYz1MKGEsYixcInRpbWVzY2FsZVwiKSxkPTE7YyYmKGQ9JGEoYyl8fDEpO2M9TChhLGIsXCJkdXJhdGlvblwiKTsoYz0kYShjfHxcIlwiKSkmJihjLz1kKTt2YXIgZT1MKGEsYixcInN0YXJ0TnVtYmVyXCIpLGY9TChhLGIsXCJwcmVzZW50YXRpb25UaW1lT2Zmc2V0XCIpLGc9YmIoZXx8XCJcIik7aWYobnVsbD09ZXx8bnVsbD09ZylnPTE7dmFyIGg9RGIoYSxiLFwiU2VnbWVudFRpbWVsaW5lXCIpLGU9bnVsbDtpZihoKXtmb3IodmFyIGU9ZCxsPU51bWJlcihmKSxuPWEuSS5kdXJhdGlvbnx8SW5maW5pdHksaD1HKGgsXCJTXCIpLHI9W10sdT0wLFg9MDtYPGgubGVuZ3RoOysrWCl7dmFyIEQ9aFtYXSxFPUgoRCxcInRcIixiYiksYWI9SChELFwiZFwiLGJiKSxEPUgoRCxcInJcIixaYSk7bnVsbCE9RSYmKEUtPWwpO2lmKCFhYilicmVhaztFPW51bGwhPUU/RTp1O0Q9RHx8MDtpZigwPkQpaWYoWCsxPGgubGVuZ3RoKXtEPUgoaFtYKzFdLFwidFwiLGJiKTtpZihudWxsPT1EKWJyZWFrO2Vsc2UgaWYoRT49XG5EKWJyZWFrO0Q9TWF0aC5jZWlsKChELUUpL2FiKS0xfWVsc2V7aWYoSW5maW5pdHk9PW4pYnJlYWs7ZWxzZSBpZihFL2U+PW4pYnJlYWs7RD1NYXRoLmNlaWwoKG4qZS1FKS9hYiktMX0wPHIubGVuZ3RoJiZFIT11JiYocltyLmxlbmd0aC0xXS5lbmQ9RS9lKTtmb3IodmFyIFljPTA7WWM8PUQ7KytZYyl1PUUrYWIsci5wdXNoKHtzdGFydDpFL2UsZW5kOnUvZSxnZDpFfSksRT11fWU9cn1yZXR1cm57dGltZXNjYWxlOmQsRzpjLGphOmcscHJlc2VudGF0aW9uVGltZU9mZnNldDpOdW1iZXIoZikvZHx8MCxsYjpOdW1iZXIoZiksdzplfX1mdW5jdGlvbiBMKGEsYixjKXtyZXR1cm5bYihhLnUpLGIoYS5SKSxiKGEuTCldLmZpbHRlcihLYSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShjKX0pLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBhfHxifSl9XG5mdW5jdGlvbiBEYihhLGIsYyl7cmV0dXJuW2IoYS51KSxiKGEuUiksYihhLkwpXS5maWx0ZXIoS2EpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gVmEoYSxjKX0pLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBhfHxifSl9O2Z1bmN0aW9uIEViKGEpe2lmKCFhKXJldHVyblwiXCI7YT1uZXcgVWludDhBcnJheShhKTsyMzk9PWFbMF0mJjE4Nz09YVsxXSYmMTkxPT1hWzJdJiYoYT1hLnN1YmFycmF5KDMpKTthPWVzY2FwZShGYihhKSk7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoYSl9Y2F0Y2goYil7dGhyb3cgbmV3IHYoMiwyMDA0KTt9fWZ1bmN0aW9uIEdiKGEsYil7aWYoIWEpcmV0dXJuXCJcIjtpZihhLmJ5dGVMZW5ndGglMil0aHJvdyBuZXcgdigyLDIwMDQpO3ZhciBjO2lmKGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciljPWE7ZWxzZXt2YXIgZD1uZXcgVWludDhBcnJheShhLmJ5dGVMZW5ndGgpO2Quc2V0KG5ldyBVaW50OEFycmF5KGEpKTtjPWQuYnVmZmVyfXZhciBkPWEuYnl0ZUxlbmd0aC8yLGU9bmV3IFVpbnQxNkFycmF5KGQpO2M9bmV3IERhdGFWaWV3KGMpO2Zvcih2YXIgZj0wO2Y8ZDtmKyspZVtmXT1jLmdldFVpbnQxNigyKmYsYik7cmV0dXJuIEZiKGUpfVxuZnVuY3Rpb24gSGIoYSl7dmFyIGI9bmV3IFVpbnQ4QXJyYXkoYSk7aWYoMjM5PT1iWzBdJiYxODc9PWJbMV0mJjE5MT09YlsyXSlyZXR1cm4gRWIoYik7aWYoMjU0PT1iWzBdJiYyNTU9PWJbMV0pcmV0dXJuIEdiKGIuc3ViYXJyYXkoMiksITEpO2lmKDI1NT09YlswXSYmMjU0PT1iWzFdKXJldHVybiBHYihiLnN1YmFycmF5KDIpLCEwKTt2YXIgYz1mdW5jdGlvbihhLGIpe3JldHVybiBhLmJ5dGVMZW5ndGg8PWJ8fDMyPD1hW2JdJiYxMjY+PWFbYl19LmJpbmQobnVsbCxiKTtpZihiWzBdfHxiWzJdKXtpZighYlsxXSYmIWJbM10pcmV0dXJuIEdiKGEsITApO2lmKGMoMCkmJmMoMSkmJmMoMikmJmMoMykpcmV0dXJuIEViKGEpfWVsc2UgcmV0dXJuIEdiKGEsITEpO3Rocm93IG5ldyB2KDIsMjAwMyk7fVxuZnVuY3Rpb24gSWIoYSl7YT11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpO2Zvcih2YXIgYj1uZXcgVWludDhBcnJheShhLmxlbmd0aCksYz0wO2M8YS5sZW5ndGg7KytjKWJbY109YS5jaGFyQ29kZUF0KGMpO3JldHVybiBiLmJ1ZmZlcn1mdW5jdGlvbiBGYihhKXtmb3IodmFyIGI9XCJcIixjPTA7YzxhLmxlbmd0aDtjKz0xNkUzKWIrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxhLnN1YmFycmF5KGMsYysxNkUzKSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIEpiKGEpe3RoaXMuYj1hO3RoaXMuYz0wPT1LYjt0aGlzLmE9MH12YXIgS2I9MTtmdW5jdGlvbiBMYihhKXtyZXR1cm4gYS5hPGEuYi5ieXRlTGVuZ3RofWZ1bmN0aW9uIE1iKGEpe3RyeXt2YXIgYj1hLmIuZ2V0VWludDgoYS5hKX1jYXRjaChjKXtOYigpfWEuYSs9MTtyZXR1cm4gYn1mdW5jdGlvbiBPYihhKXt0cnl7dmFyIGI9YS5iLmdldFVpbnQxNihhLmEsYS5jKX1jYXRjaChjKXtOYigpfWEuYSs9MjtyZXR1cm4gYn1mdW5jdGlvbiBNKGEpe3RyeXt2YXIgYj1hLmIuZ2V0VWludDMyKGEuYSxhLmMpfWNhdGNoKGMpe05iKCl9YS5hKz00O3JldHVybiBifVxuZnVuY3Rpb24gUGIoYSl7dmFyIGIsYzt0cnl7YS5jPyhiPWEuYi5nZXRVaW50MzIoYS5hLCEwKSxjPWEuYi5nZXRVaW50MzIoYS5hKzQsITApKTooYz1hLmIuZ2V0VWludDMyKGEuYSwhMSksYj1hLmIuZ2V0VWludDMyKGEuYSs0LCExKSl9Y2F0Y2goZCl7TmIoKX1pZigyMDk3MTUxPGMpdGhyb3cgbmV3IHYoMywzMDAxKTthLmErPTg7cmV0dXJuIGMqTWF0aC5wb3coMiwzMikrYn1mdW5jdGlvbiBRYihhLGIpe2EuYStiPmEuYi5ieXRlTGVuZ3RoJiZOYigpO3ZhciBjPWEuYi5idWZmZXIuc2xpY2UoYS5hLGEuYStiKTthLmErPWI7cmV0dXJuIG5ldyBVaW50OEFycmF5KGMpfWZ1bmN0aW9uIE4oYSxiKXthLmErYj5hLmIuYnl0ZUxlbmd0aCYmTmIoKTthLmErPWJ9XG5mdW5jdGlvbiBSYihhKXt2YXIgYj1hLmE7dHJ5e2Zvcig7TGIoYSkmJmEuYi5nZXRVaW50OChhLmEpOylhLmErPTF9Y2F0Y2goYyl7TmIoKX1iPWEuYi5idWZmZXIuc2xpY2UoYixhLmEpO2EuYSs9MTtyZXR1cm4gRWIoYil9ZnVuY3Rpb24gTmIoKXt0aHJvdyBuZXcgdigzLDNFMyk7fTtmdW5jdGlvbiBTYihhLGIpe2Zvcig7TGIoYik7KXt2YXIgYz1iLmEsZD1NKGIpLGU9TShiKTsxPT1kP2Q9UGIoYik6ZHx8KGQ9Yi5iLmJ5dGVMZW5ndGgtYyk7aWYoZT09YSlyZXR1cm4gZDtOKGIsZC0oYi5hLWMpKX1yZXR1cm4tMX1mdW5jdGlvbiBUYihhLGIpe2Zvcih2YXIgYz1uZXcgSmIobmV3IERhdGFWaWV3KGEpKSxkPVtbMTgzNjAxOTU3NCwwXSxbMTk1MzY1MzA5OSwwXSxbMTgzNTI5NzEyMSwwXSxbMTgzNTYyNjA4NiwwXSxbMTkzNzAwNzIxMiwwXSxbMTkzNzAxMTU1Niw4XSxbYiwwXV0sZT0tMSxmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBnPWRbZl1bMV0sZT1TYihkW2ZdWzBdLGMpO2lmKC0xPT1lKXJldHVybi0xO04oYyxnKX1yZXR1cm4gZX07ZnVuY3Rpb24gVWIoYSxiLGMsZCl7dmFyIGU9W107YT1uZXcgSmIobmV3IERhdGFWaWV3KGEpKTt2YXIgZj1TYigxOTM2Mjg2ODQwLGEpO2lmKC0xPT1mKXRocm93IG5ldyB2KDMsMzAwNCk7dmFyIGc9TWIoYSk7TihhLDMpO04oYSw0KTt2YXIgaD1NKGEpO2lmKCFoKXRocm93IG5ldyB2KDMsMzAwNSk7dmFyIGwsbjtnPyhsPVBiKGEpLG49UGIoYSkpOihsPU0oYSksbj1NKGEpKTtOKGEsMik7Zz1PYihhKTtkPWwtZDtiPWIrZituO2ZvcihmPTA7ZjxnO2YrKyl7bD1NKGEpO249KGwmMjE0NzQ4MzY0OCk+Pj4zMTtsJj0yMTQ3NDgzNjQ3O3ZhciByPU0oYSk7TihhLDQpO2lmKDE9PW4pdGhyb3cgbmV3IHYoMywzMDA2KTtlLnB1c2gobmV3IEooZS5sZW5ndGgsZC9oLChkK3IpL2gsZnVuY3Rpb24oKXtyZXR1cm4gY30sYixiK2wtMSkpO2QrPXI7Yis9bH1yZXR1cm4gZX07ZnVuY3Rpb24gTyhhKXt0aGlzLmE9YX1tKFwic2hha2EubWVkaWEuU2VnbWVudEluZGV4XCIsTyk7Ty5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMuYT1udWxsO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX07Ty5wcm90b3R5cGUuZGVzdHJveT1PLnByb3RvdHlwZS5vO08ucHJvdG90eXBlLmZpbmQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuYS5sZW5ndGgtMTswPD1iOy0tYil7dmFyIGM9dGhpcy5hW2JdO2lmKGE+PWMuc3RhcnRUaW1lJiZhPGMuZW5kVGltZSlyZXR1cm4gYy5wb3NpdGlvbn1yZXR1cm4gbnVsbH07Ty5wcm90b3R5cGUuZmluZD1PLnByb3RvdHlwZS5maW5kO08ucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXtpZighdGhpcy5hLmxlbmd0aClyZXR1cm4gbnVsbDthLT10aGlzLmFbMF0ucG9zaXRpb247cmV0dXJuIDA+YXx8YT49dGhpcy5hLmxlbmd0aD9udWxsOnRoaXMuYVthXX07Ty5wcm90b3R5cGUuZ2V0PU8ucHJvdG90eXBlLmdldDtcbk8ucHJvdG90eXBlLlphPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTAsZD0wO2M8dGhpcy5hLmxlbmd0aCYmZDxhLmxlbmd0aDspe3ZhciBlPXRoaXMuYVtjXSxmPWFbZF07ZS5zdGFydFRpbWU8Zi5zdGFydFRpbWU/KGIucHVzaChlKSxjKyspOihlLnN0YXJ0VGltZT5mLnN0YXJ0VGltZXx8KC4xPE1hdGguYWJzKGUuZW5kVGltZS1mLmVuZFRpbWUpP2IucHVzaChmKTpiLnB1c2goZSksYysrKSxkKyspfWZvcig7Yzx0aGlzLmEubGVuZ3RoOyliLnB1c2godGhpcy5hW2MrK10pO2lmKGIubGVuZ3RoKWZvcihjPWJbYi5sZW5ndGgtMV0ucG9zaXRpb24rMTtkPGEubGVuZ3RoOylmPWFbZCsrXSxmPW5ldyBKKGMrKyxmLnN0YXJ0VGltZSxmLmVuZFRpbWUsZi5hLGYuTSxmLkQpLGIucHVzaChmKTtlbHNlIGI9YTt0aGlzLmE9Yn07Ty5wcm90b3R5cGUubWVyZ2U9Ty5wcm90b3R5cGUuWmE7XG5PLnByb3RvdHlwZS5UYT1mdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPHRoaXMuYS5sZW5ndGgmJiEodGhpcy5hW2JdLmVuZFRpbWU+YSk7KytiKTt0aGlzLmEuc3BsaWNlKDAsYil9O08ucHJvdG90eXBlLmV2aWN0PU8ucHJvdG90eXBlLlRhO2Z1bmN0aW9uIFZiKGEpe3RoaXMuYj1hO3RoaXMuYT1uZXcgSmIoYSk7V2J8fChXYj1bbmV3IFVpbnQ4QXJyYXkoWzI1NV0pLG5ldyBVaW50OEFycmF5KFsxMjcsMjU1XSksbmV3IFVpbnQ4QXJyYXkoWzYzLDI1NSwyNTVdKSxuZXcgVWludDhBcnJheShbMzEsMjU1LDI1NSwyNTVdKSxuZXcgVWludDhBcnJheShbMTUsMjU1LDI1NSwyNTUsMjU1XSksbmV3IFVpbnQ4QXJyYXkoWzcsMjU1LDI1NSwyNTUsMjU1LDI1NV0pLG5ldyBVaW50OEFycmF5KFszLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSksbmV3IFVpbnQ4QXJyYXkoWzEsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSldKX12YXIgV2I7XG5mdW5jdGlvbiBYYihhKXt2YXIgYjtiPVliKGEpO2lmKDc8Yi5sZW5ndGgpdGhyb3cgbmV3IHYoMywzMDAyKTtmb3IodmFyIGM9MCxkPTA7ZDxiLmxlbmd0aDtkKyspYz0yNTYqYytiW2RdO2I9YztjPVliKGEpO2E6e2ZvcihkPTA7ZDxXYi5sZW5ndGg7ZCsrKWlmKFVhKGMsV2JbZF0pKXtkPSEwO2JyZWFrIGF9ZD0hMX1pZihkKWM9YS5iLmJ5dGVMZW5ndGgtYS5hLmE7ZWxzZXtpZig4PT1jLmxlbmd0aCYmY1sxXSYyMjQpdGhyb3cgbmV3IHYoMywzMDAxKTtmb3IodmFyIGQ9Y1swXSYoMTw8OC1jLmxlbmd0aCktMSxlPTE7ZTxjLmxlbmd0aDtlKyspZD0yNTYqZCtjW2VdO2M9ZH1jPWEuYS5hK2M8PWEuYi5ieXRlTGVuZ3RoP2M6YS5iLmJ5dGVMZW5ndGgtYS5hLmE7ZD1uZXcgRGF0YVZpZXcoYS5iLmJ1ZmZlcixhLmIuYnl0ZU9mZnNldCthLmEuYSxjKTtOKGEuYSxjKTtyZXR1cm4gbmV3IFpiKGIsZCl9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1NYihhLmEpLGM7Zm9yKGM9MTs4Pj1jJiYhKGImMTw8OC1jKTtjKyspO2lmKDg8Yyl0aHJvdyBuZXcgdigzLDMwMDIpO3ZhciBkPW5ldyBVaW50OEFycmF5KGMpO2RbMF09Yjtmb3IoYj0xO2I8YztiKyspZFtiXT1NYihhLmEpO3JldHVybiBkfWZ1bmN0aW9uIFpiKGEsYil7dGhpcy5pZD1hO3RoaXMuYT1ifWZ1bmN0aW9uICRiKGEpe2lmKDg8YS5hLmJ5dGVMZW5ndGgpdGhyb3cgbmV3IHYoMywzMDAyKTtpZig4PT1hLmEuYnl0ZUxlbmd0aCYmYS5hLmdldFVpbnQ4KDApJjIyNCl0aHJvdyBuZXcgdigzLDMwMDEpO2Zvcih2YXIgYj0wLGM9MDtjPGEuYS5ieXRlTGVuZ3RoO2MrKyl2YXIgZD1hLmEuZ2V0VWludDgoYyksYj0yNTYqYitkO3JldHVybiBifTtmdW5jdGlvbiBhYyhhLGIsYyxkLGUsZil7ZnVuY3Rpb24gZygpe3JldHVybiBlfXZhciBoPVtdO2E9bmV3IFZiKGEuYSk7Zm9yKHZhciBsPS0xLG49LTE7TGIoYS5hKTspe3ZhciByPVhiKGEpO2lmKDE4Nz09ci5pZCl7dmFyIHU9YmMocik7dSYmKHI9YyoodS5oZC1mKSx1PWIrdS5GYywwPD1sJiZoLnB1c2gobmV3IEooaC5sZW5ndGgsbCxyLGcsbix1LTEpKSxsPXIsbj11KX19MDw9bCYmaC5wdXNoKG5ldyBKKGgubGVuZ3RoLGwsZCxnLG4sbnVsbCkpO3JldHVybiBofWZ1bmN0aW9uIGJjKGEpe3ZhciBiPW5ldyBWYihhLmEpO2E9WGIoYik7aWYoMTc5IT1hLmlkKXRocm93IG5ldyB2KDMsMzAxMyk7YT0kYihhKTtiPVhiKGIpO2lmKDE4MyE9Yi5pZCl0aHJvdyBuZXcgdigzLDMwMTIpO2Zvcih2YXIgYj1uZXcgVmIoYi5hKSxjPTA7TGIoYi5hKTspe3ZhciBkPVhiKGIpO2lmKDI0MT09ZC5pZCl7Yz0kYihkKTticmVha319cmV0dXJue2hkOmEsRmM6Y319O2Z1bmN0aW9uIGNjKGEsYil7dmFyIGM9RGIoYSxiLFwiSW5pdGlhbGl6YXRpb25cIik7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9YS51Lk4sZT1jLmdldEF0dHJpYnV0ZShcInNvdXJjZVVSTFwiKTtlJiYoZD1LKGEudS5OLFtlXSkpO3ZhciBlPTAsZj1udWxsO2lmKGM9SChjLFwicmFuZ2VcIixZYSkpZT1jLnN0YXJ0LGY9Yy5lbmQ7cmV0dXJuIG5ldyB5YihmdW5jdGlvbigpe3JldHVybiBkfSxlLGYpfVxuZnVuY3Rpb24gZGMoYSxiKXt2YXIgYz1MKGEsZWMsXCJwcmVzZW50YXRpb25UaW1lT2Zmc2V0XCIpLGQ9Y2MoYSxlYyksZTtlPU51bWJlcihjKTt2YXIgZj1hLnUuY29udGVudFR5cGUsZz1hLnUubWltZVR5cGUuc3BsaXQoXCIvXCIpWzFdO2lmKFwidGV4dFwiIT1mJiZcIm1wNFwiIT1nJiZcIndlYm1cIiE9Zyl0aHJvdyBuZXcgdig0LDQwMDYpO2lmKFwid2VibVwiPT1nJiYhZCl0aHJvdyBuZXcgdig0LDQwMDUpO3ZhciBmPURiKGEsZWMsXCJSZXByZXNlbnRhdGlvbkluZGV4XCIpLGg9TChhLGVjLFwiaW5kZXhSYW5nZVwiKSxsPWEudS5OLGg9WWEoaHx8XCJcIik7aWYoZil7dmFyIG49Zi5nZXRBdHRyaWJ1dGUoXCJzb3VyY2VVUkxcIik7biYmKGw9SyhhLnUuTixbbl0pKTtoPUgoZixcInJhbmdlXCIsWWEsaCl9aWYoIWgpdGhyb3cgbmV3IHYoNCw0MDAyKTtlPWZjKGEsYixkLGwsaC5zdGFydCxoLmVuZCxnLGUpO3JldHVybntjcmVhdGVTZWdtZW50SW5kZXg6ZS5jcmVhdGVTZWdtZW50SW5kZXgsZmluZFNlZ21lbnRQb3NpdGlvbjplLmZpbmRTZWdtZW50UG9zaXRpb24sXG5nZXRTZWdtZW50UmVmZXJlbmNlOmUuZ2V0U2VnbWVudFJlZmVyZW5jZSxpbml0U2VnbWVudFJlZmVyZW5jZTpkLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6TnVtYmVyKGMpfHwwfX1cbmZ1bmN0aW9uIGZjKGEsYixjLGQsZSxmLGcsaCl7dmFyIGw9YS5wcmVzZW50YXRpb25UaW1lbGluZSxuPWEuSS5zdGFydCxyPWEuSS5kdXJhdGlvbix1PWIsWD1udWxsO3JldHVybntjcmVhdGVTZWdtZW50SW5kZXg6ZnVuY3Rpb24oKXt2YXIgYj1bdShkLGUsZiksXCJ3ZWJtXCI9PWc/dShjLmEoKSxjLk0sYy5EKTpudWxsXTt1PW51bGw7cmV0dXJuIFByb21pc2UuYWxsKGIpLnRoZW4oZnVuY3Rpb24oYil7dmFyIGMsZix1PWJbMF07Yj1iWzFdfHxudWxsO2lmKFwibXA0XCI9PWcpdT1VYih1LGUsZCxoKTtlbHNle2I9bmV3IFZiKG5ldyBEYXRhVmlldyhiKSk7aWYoNDQwNzg2ODUxIT1YYihiKS5pZCl0aHJvdyBuZXcgdigzLDMwMDgpO2Y9WGIoYik7aWYoNDA4MTI1NTQzIT1mLmlkKXRocm93IG5ldyB2KDMsMzAwOSk7Yj1mLmEuYnl0ZU9mZnNldDtmPW5ldyBWYihmLmEpO2ZvcihjPW51bGw7TGIoZi5hKTspe3ZhciBEPVhiKGYpO2lmKDM1NzE0OTAzMD09RC5pZCl7Yz1EO2JyZWFrfX1pZighYyl0aHJvdyBuZXcgdigzLFxuMzAxMCk7Yz1uZXcgVmIoYy5hKTtEPTFFNjtmb3IoZj1udWxsO0xiKGMuYSk7KXt2YXIgRT1YYihjKTtpZigyODA3NzI5PT1FLmlkKUQ9JGIoRSk7ZWxzZSBpZigxNzU0NT09RS5pZClpZihmPUUsND09Zi5hLmJ5dGVMZW5ndGgpZj1mLmEuZ2V0RmxvYXQzMigwKTtlbHNlIGlmKDg9PWYuYS5ieXRlTGVuZ3RoKWY9Zi5hLmdldEZsb2F0NjQoMCk7ZWxzZSB0aHJvdyBuZXcgdigzLDMwMDMpO31pZihudWxsPT1mKXRocm93IG5ldyB2KDMsMzAxMSk7Yz1ELz0xRTk7Zio9RDt1PVhiKG5ldyBWYihuZXcgRGF0YVZpZXcodSkpKTtpZig0NzUyNDk1MTUhPXUuaWQpdGhyb3cgbmV3IHYoMywzMDA3KTt1PWFjKHUsYixjLGYsZCxoKX1CYihhLlNhLHIsdSk7bC5IYShuLHUpO1g9bmV3IE8odSl9KX0sZmluZFNlZ21lbnRQb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gWC5maW5kKGEpfSxnZXRTZWdtZW50UmVmZXJlbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBYLmdldChhKX19fVxuZnVuY3Rpb24gZWMoYSl7cmV0dXJuIGEuSWF9O2Z1bmN0aW9uIGdjKGEsYil7dmFyIGM9Y2MoYSxoYyksZDtkPWljKGEpO3ZhciBlPUNiKGEsaGMpLGY9ZS5qYTtmfHwoZj0xKTt2YXIgZz0wO2UuRz9nPWUuRyooZi0xKTplLncmJjA8ZS53Lmxlbmd0aCYmKGc9ZS53WzBdLnN0YXJ0KTtkPXtHOmUuRyxzdGFydFRpbWU6ZyxqYTpmLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6ZS5wcmVzZW50YXRpb25UaW1lT2Zmc2V0LHc6ZS53LHdhOmR9O2lmKCFkLkcmJiFkLncmJjE8ZC53YS5sZW5ndGgpdGhyb3cgbmV3IHYoNCw0MDAyKTtpZighZC5HJiYhYS5JLmR1cmF0aW9uJiYhZC53JiYxPT1kLndhLmxlbmd0aCl0aHJvdyBuZXcgdig0LDQwMDIpO2lmKGQudyYmIWQudy5sZW5ndGgpdGhyb3cgbmV3IHYoNCw0MDAyKTtmPWU9bnVsbDthLkwuaWQmJmEudS5pZCYmKGY9YS5MLmlkK1wiLFwiK2EudS5pZCxlPWJbZl0pO2c9amMoYS5JLmR1cmF0aW9uLGQuamEsYS51Lk4sZCk7QmIoYS5TYSxhLkkuZHVyYXRpb24sZyk7ZT8oZS5aYShnKSxlLlRhKGEucHJlc2VudGF0aW9uVGltZWxpbmUudWEoKS1cbmEuSS5zdGFydCkpOihhLnByZXNlbnRhdGlvblRpbWVsaW5lLkhhKGEuSS5zdGFydCxnKSxlPW5ldyBPKGcpLGYmJihiW2ZdPWUpKTtyZXR1cm57Y3JlYXRlU2VnbWVudEluZGV4OlByb21pc2UucmVzb2x2ZS5iaW5kKFByb21pc2UpLGZpbmRTZWdtZW50UG9zaXRpb246ZS5maW5kLmJpbmQoZSksZ2V0U2VnbWVudFJlZmVyZW5jZTplLmdldC5iaW5kKGUpLGluaXRTZWdtZW50UmVmZXJlbmNlOmMscHJlc2VudGF0aW9uVGltZU9mZnNldDpkLnByZXNlbnRhdGlvblRpbWVPZmZzZXR9fWZ1bmN0aW9uIGhjKGEpe3JldHVybiBhLiR9XG5mdW5jdGlvbiBqYyhhLGIsYyxkKXt2YXIgZT1kLndhLmxlbmd0aDtkLncmJmQudy5sZW5ndGghPWQud2EubGVuZ3RoJiYoZT1NYXRoLm1pbihkLncubGVuZ3RoLGQud2EubGVuZ3RoKSk7Zm9yKHZhciBmPVtdLGc9ZC5zdGFydFRpbWUsaD0wO2g8ZTtoKyspe3ZhciBsPWQud2FbaF0sbj1LKGMsW2wuaWNdKSxyO3I9bnVsbCE9ZC5HP2crZC5HOmQudz9kLndbaF0uZW5kOmcrYTtmLnB1c2gobmV3IEooaCtiLGcscixmdW5jdGlvbihhKXtyZXR1cm4gYX0uYmluZChudWxsLG4pLGwuc3RhcnQsbC5lbmQpKTtnPXJ9cmV0dXJuIGZ9XG5mdW5jdGlvbiBpYyhhKXtyZXR1cm5bYS51LiQsYS5SLiQsYS5MLiRdLmZpbHRlcihLYSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBHKGEsXCJTZWdtZW50VVJMXCIpfSkucmVkdWNlKGZ1bmN0aW9uKGEsYyl7cmV0dXJuIDA8YS5sZW5ndGg/YTpjfSkubWFwKGZ1bmN0aW9uKGIpe2IuZ2V0QXR0cmlidXRlKFwiaW5kZXhSYW5nZVwiKSYmIWEudGImJihhLnRiPSEwKTt2YXIgYz1iLmdldEF0dHJpYnV0ZShcIm1lZGlhXCIpO2I9SChiLFwibWVkaWFSYW5nZVwiLFlhLHtzdGFydDowLGVuZDpudWxsfSk7cmV0dXJue2ljOmMsc3RhcnQ6Yi5zdGFydCxlbmQ6Yi5lbmR9fSl9O2Z1bmN0aW9uIGtjKGEsYixjLGQpe3ZhciBlPWxjKGEpLGY7Zj1DYihhLG1jKTt2YXIgZz1MKGEsbWMsXCJtZWRpYVwiKSxoPUwoYSxtYyxcImluZGV4XCIpO2Y9e0c6Zi5HLHRpbWVzY2FsZTpmLnRpbWVzY2FsZSxqYTpmLmphLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6Zi5wcmVzZW50YXRpb25UaW1lT2Zmc2V0LGxiOmYubGIsdzpmLncsWWE6ZyxGYTpofTtnPTArKGYuRmE/MTowKTtnKz1mLnc/MTowO2crPWYuRz8xOjA7aWYoIWcpdGhyb3cgbmV3IHYoNCw0MDAyKTsxIT1nJiYoZi5GYSYmKGYudz1udWxsKSxmLkc9bnVsbCk7aWYoIWYuRmEmJiFmLllhKXRocm93IG5ldyB2KDQsNDAwMik7aWYoZi5GYSl7Yz1hLnUubWltZVR5cGUuc3BsaXQoXCIvXCIpWzFdO2lmKFwibXA0XCIhPWMmJlwid2VibVwiIT1jKXRocm93IG5ldyB2KDQsNDAwNik7aWYoXCJ3ZWJtXCI9PWMmJiFlKXRocm93IG5ldyB2KDQsNDAwNSk7ZD1BYihmLkZhLGEudS5pZCxudWxsLGEuYmFuZHdpZHRofHxudWxsLG51bGwpO2Q9SyhhLnUuTixcbltkXSk7YT1mYyhhLGIsZSxkLDAsbnVsbCxjLGYucHJlc2VudGF0aW9uVGltZU9mZnNldCl9ZWxzZSBmLkc/KGR8fGEucHJlc2VudGF0aW9uVGltZWxpbmUuJGEoZi5HKSxhPW5jKGEsZikpOihkPWI9bnVsbCxhLkwuaWQmJmEudS5pZCYmKGQ9YS5MLmlkK1wiLFwiK2EudS5pZCxiPWNbZF0pLGc9b2MoYSxmKSxCYihhLlNhLGEuSS5kdXJhdGlvbixnKSxiPyhiLlphKGcpLGIuVGEoYS5wcmVzZW50YXRpb25UaW1lbGluZS51YSgpLWEuSS5zdGFydCkpOihhLnByZXNlbnRhdGlvblRpbWVsaW5lLkhhKGEuSS5zdGFydCxnKSxiPW5ldyBPKGcpLGQmJihjW2RdPWIpKSxhPXtjcmVhdGVTZWdtZW50SW5kZXg6UHJvbWlzZS5yZXNvbHZlLmJpbmQoUHJvbWlzZSksZmluZFNlZ21lbnRQb3NpdGlvbjpiLmZpbmQuYmluZChiKSxnZXRTZWdtZW50UmVmZXJlbmNlOmIuZ2V0LmJpbmQoYil9KTtyZXR1cm57Y3JlYXRlU2VnbWVudEluZGV4OmEuY3JlYXRlU2VnbWVudEluZGV4LGZpbmRTZWdtZW50UG9zaXRpb246YS5maW5kU2VnbWVudFBvc2l0aW9uLFxuZ2V0U2VnbWVudFJlZmVyZW5jZTphLmdldFNlZ21lbnRSZWZlcmVuY2UsaW5pdFNlZ21lbnRSZWZlcmVuY2U6ZSxwcmVzZW50YXRpb25UaW1lT2Zmc2V0OmYucHJlc2VudGF0aW9uVGltZU9mZnNldH19ZnVuY3Rpb24gbWMoYSl7cmV0dXJuIGEuSmF9XG5mdW5jdGlvbiBuYyhhLGIpe3ZhciBjPWEuSS5kdXJhdGlvbixkPWIuRyxlPWIuamEsZj1iLnRpbWVzY2FsZSxnPWIuWWEsaD1hLmJhbmR3aWR0aHx8bnVsbCxsPWEudS5pZCxuPWEudS5OO3JldHVybntjcmVhdGVTZWdtZW50SW5kZXg6UHJvbWlzZS5yZXNvbHZlLmJpbmQoUHJvbWlzZSksZmluZFNlZ21lbnRQb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gMD5hfHxjJiZhPj1jP251bGw6TWF0aC5mbG9vcihhL2QpfSxnZXRTZWdtZW50UmVmZXJlbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEqZDtyZXR1cm4gMD5ifHxjJiZiPj1jP251bGw6bmV3IEooYSxiLGIrZCxmdW5jdGlvbigpe3ZhciBjPUFiKGcsbCxhK2UsaCxiKmYpO3JldHVybiBLKG4sW2NdKX0sMCxudWxsKX19fVxuZnVuY3Rpb24gb2MoYSxiKXtmb3IodmFyIGM9W10sZD0wO2Q8Yi53Lmxlbmd0aDtkKyspe3ZhciBlPWQrYi5qYTtjLnB1c2gobmV3IEooZSxiLndbZF0uc3RhcnQsYi53W2RdLmVuZCxmdW5jdGlvbihhLGIsYyxkLGUscil7YT1BYihhLGIsZSxjLHIpO3JldHVybiBLKGQsW2FdKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudG9TdHJpbmcoKX0pfS5iaW5kKG51bGwsYi5ZYSxhLnUuaWQsYS5iYW5kd2lkdGh8fG51bGwsYS51Lk4sZSxiLndbZF0uZ2QrYi5sYiksMCxudWxsKSl9cmV0dXJuIGN9ZnVuY3Rpb24gbGMoYSl7dmFyIGI9TChhLG1jLFwiaW5pdGlhbGl6YXRpb25cIik7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9YS51LmlkLGQ9YS5iYW5kd2lkdGh8fG51bGwsZT1hLnUuTjtyZXR1cm4gbmV3IHliKGZ1bmN0aW9uKCl7dmFyIGE9QWIoYixjLG51bGwsZCxudWxsKTtyZXR1cm4gSyhlLFthXSl9LDAsbnVsbCl9O2Z1bmN0aW9uIFAoYSl7dGhpcy5mPSExO3RoaXMuYT1bXTt0aGlzLmI9W107dGhpcy5jPVtdO3RoaXMuaD1hfHxudWxsfW0oXCJzaGFrYS5uZXQuTmV0d29ya2luZ0VuZ2luZVwiLFApO1AuUmVxdWVzdFR5cGU9e01BTklGRVNUOjAsU0VHTUVOVDoxLExJQ0VOU0U6Mn07dmFyIHBjPXt9O1AucmVnaXN0ZXJTY2hlbWU9ZnVuY3Rpb24oYSxiKXtwY1thXT1ifTtQLnVucmVnaXN0ZXJTY2hlbWU9ZnVuY3Rpb24oYSl7ZGVsZXRlIHBjW2FdfTtQLnByb3RvdHlwZS5FYz1mdW5jdGlvbihhKXt0aGlzLmIucHVzaChhKX07UC5wcm90b3R5cGUucmVnaXN0ZXJSZXF1ZXN0RmlsdGVyPVAucHJvdG90eXBlLkVjO1AucHJvdG90eXBlLmZkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYjthPWIuaW5kZXhPZihhKTswPD1hJiZiLnNwbGljZShhLDEpfTtQLnByb3RvdHlwZS51bnJlZ2lzdGVyUmVxdWVzdEZpbHRlcj1QLnByb3RvdHlwZS5mZDtQLnByb3RvdHlwZS5UYj1mdW5jdGlvbigpe3RoaXMuYj1bXX07XG5QLnByb3RvdHlwZS5jbGVhckFsbFJlcXVlc3RGaWx0ZXJzPVAucHJvdG90eXBlLlRiO1AucHJvdG90eXBlLkViPWZ1bmN0aW9uKGEpe3RoaXMuYy5wdXNoKGEpfTtQLnByb3RvdHlwZS5yZWdpc3RlclJlc3BvbnNlRmlsdGVyPVAucHJvdG90eXBlLkViO1AucHJvdG90eXBlLk9iPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYzthPWIuaW5kZXhPZihhKTswPD1hJiZiLnNwbGljZShhLDEpfTtQLnByb3RvdHlwZS51bnJlZ2lzdGVyUmVzcG9uc2VGaWx0ZXI9UC5wcm90b3R5cGUuT2I7UC5wcm90b3R5cGUuVWI9ZnVuY3Rpb24oKXt0aGlzLmM9W119O1AucHJvdG90eXBlLmNsZWFyQWxsUmVzcG9uc2VGaWx0ZXJzPVAucHJvdG90eXBlLlViO2Z1bmN0aW9uIHFjKCl7cmV0dXJue21heEF0dGVtcHRzOjIsYmFzZURlbGF5OjFFMyxiYWNrb2ZmRmFjdG9yOjIsZnV6ekZhY3RvcjouNSx0aW1lb3V0OjB9fVxuZnVuY3Rpb24gcmMoYSxiKXtyZXR1cm57dXJpczphLG1ldGhvZDpcIkdFVFwiLGJvZHk6bnVsbCxoZWFkZXJzOnt9LGFsbG93Q3Jvc3NTaXRlQ3JlZGVudGlhbHM6ITEscmV0cnlQYXJhbWV0ZXJzOmJ9fVAucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmY9ITA7dGhpcy5iPVtdO3RoaXMuYz1bXTtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5hLmxlbmd0aDsrK2IpYS5wdXNoKHRoaXMuYVtiXVtcImNhdGNoXCJdKEMpKTtyZXR1cm4gUHJvbWlzZS5hbGwoYSl9O1AucHJvdG90eXBlLmRlc3Ryb3k9UC5wcm90b3R5cGUubztcblAucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLmYpcmV0dXJuIFByb21pc2UucmVqZWN0KCk7Zm9yKHZhciBjPURhdGUubm93KCksZD10aGlzLmIsZT0wO2U8ZC5sZW5ndGg7ZSsrKXRyeXtkW2VdKGEsYil9Y2F0Y2gobCl7cmV0dXJuIFByb21pc2UucmVqZWN0KGwpfWZvcih2YXIgZT1iLnJldHJ5UGFyYW1ldGVyc3x8e30sZD1lLm1heEF0dGVtcHRzfHwxLGY9ZS5iYWNrb2ZmRmFjdG9yfHwyLGc9bnVsbD09ZS5iYXNlRGVsYXk/MUUzOmUuYmFzZURlbGF5LGg9dGhpcy5nKGEsYiwwKSxlPTE7ZTxkO2UrKyloPWhbXCJjYXRjaFwiXSh0aGlzLmkuYmluZCh0aGlzLGEsYixnLGUlYi51cmlzLmxlbmd0aCkpLGcqPWY7dGhpcy5hLnB1c2goaCk7cmV0dXJuIGgudGhlbihmdW5jdGlvbihiKXswPD10aGlzLmEuaW5kZXhPZihoKSYmdGhpcy5hLnNwbGljZSh0aGlzLmEuaW5kZXhPZihoKSwxKTt2YXIgZD1EYXRlLm5vdygpO3RoaXMuaCYmMT09YSYmdGhpcy5oKGMsZCxiLmRhdGEuYnl0ZUxlbmd0aCk7XG5yZXR1cm4gYn0uYmluZCh0aGlzKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXswPD10aGlzLmEuaW5kZXhPZihoKSYmdGhpcy5hLnNwbGljZSh0aGlzLmEuaW5kZXhPZihoKSwxKTtyZXR1cm4gUHJvbWlzZS5yZWplY3QoYSl9LmJpbmQodGhpcykpfTtQLnByb3RvdHlwZS5yZXF1ZXN0PVAucHJvdG90eXBlLnJlcXVlc3Q7UC5wcm90b3R5cGUuZz1mdW5jdGlvbihhLGIsYyl7aWYodGhpcy5mKXJldHVybiBQcm9taXNlLnJlamVjdCgpO3ZhciBkPW5ldyBrYihiLnVyaXNbY10pLGU9ZC5UO2V8fChlPWxvY2F0aW9uLnByb3RvY29sLGU9ZS5zbGljZSgwLC0xKSxsYihkLGUpLGIudXJpc1tjXT1kLnRvU3RyaW5nKCkpO3JldHVybihlPXBjW2VdKT9lKGIudXJpc1tjXSxiKS50aGVuKGZ1bmN0aW9uKGIpe2Zvcih2YXIgYz10aGlzLmMsZD0wO2Q8Yy5sZW5ndGg7ZCsrKWNbZF0oYSxiKTtyZXR1cm4gYn0uYmluZCh0aGlzKSk6UHJvbWlzZS5yZWplY3QobmV3IHYoMSwxRTMsZCkpfTtcblAucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IHcsZj1iLnJldHJ5UGFyYW1ldGVyc3x8e307d2luZG93LnNldFRpbWVvdXQoZS5yZXNvbHZlLGMqKDErKDIqTWF0aC5yYW5kb20oKS0xKSoobnVsbD09Zi5mdXp6RmFjdG9yPy41OmYuZnV6ekZhY3RvcikpKTtyZXR1cm4gZS50aGVuKHRoaXMuZy5iaW5kKHRoaXMsYSxiLGQpKX07dmFyIHNjPXt9LHRjPXt9O20oXCJzaGFrYS5tZWRpYS5NYW5pZmVzdFBhcnNlci5yZWdpc3RlclBhcnNlckJ5RXh0ZW5zaW9uXCIsZnVuY3Rpb24oYSxiKXt0Y1thXT1ifSk7bShcInNoYWthLm1lZGlhLk1hbmlmZXN0UGFyc2VyLnJlZ2lzdGVyUGFyc2VyQnlNaW1lXCIsZnVuY3Rpb24oYSxiKXtzY1thXT1ifSk7ZnVuY3Rpb24gdWMoKXt2YXIgYT17fSxiO2ZvcihiIGluIHNjKWFbYl09ITA7Zm9yKGIgaW4gdGMpYVtiXT0hMDtbXCJhcHBsaWNhdGlvbi9kYXNoK3htbFwiLFwiYXBwbGljYXRpb24veC1tcGVndXJsXCIsXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybFwiLFwiYXBwbGljYXRpb24vdm5kLm1zLXNzdHIreG1sXCJdLmZvckVhY2goZnVuY3Rpb24oYil7YVtiXT0hIXNjW2JdfSk7W1wibXBkXCIsXCJtM3U4XCIsXCJpc21cIl0uZm9yRWFjaChmdW5jdGlvbihiKXthW2JdPSEhdGNbYl19KTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHZjKGEsYixjLGQpe3ZhciBlPWQ7ZXx8KGQ9KG5ldyBrYihhKSkuUC5zcGxpdChcIi9cIikucG9wKCkuc3BsaXQoXCIuXCIpLDE8ZC5sZW5ndGgmJihkPWQucG9wKCkudG9Mb3dlckNhc2UoKSxlPXRjW2RdKSk7aWYoZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGUpO2M9cmMoW2FdLGMpO2MubWV0aG9kPVwiSEVBRFwiO3JldHVybiBiLnJlcXVlc3QoMCxjKS50aGVuKGZ1bmN0aW9uKGIpeyhiPWIuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkmJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuKGU9c2NbYl0pP2U6UHJvbWlzZS5yZWplY3QobmV3IHYoNCw0RTMsYSkpfSxmdW5jdGlvbihhKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoYSl9KX07ZnVuY3Rpb24gUShhLGIpe3RoaXMuaj1hO3RoaXMuaT1iO3RoaXMuYz10aGlzLmE9SW5maW5pdHk7dGhpcy5iPTE7dGhpcy5oPXRoaXMuZj0wO3RoaXMuZz0hMH1tKFwic2hha2EubWVkaWEuUHJlc2VudGF0aW9uVGltZWxpbmVcIixRKTtRLnByb3RvdHlwZS5lYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O1EucHJvdG90eXBlLmdldER1cmF0aW9uPVEucHJvdG90eXBlLmVhO1EucHJvdG90eXBlLkFhPWZ1bmN0aW9uKGEpe3RoaXMuYT1hfTtRLnByb3RvdHlwZS5zZXREdXJhdGlvbj1RLnByb3RvdHlwZS5BYTtRLnByb3RvdHlwZS5LYj1mdW5jdGlvbihhKXt0aGlzLmg9YX07US5wcm90b3R5cGUuc2V0Q2xvY2tPZmZzZXQ9US5wcm90b3R5cGUuS2I7US5wcm90b3R5cGUuTWI9ZnVuY3Rpb24oYSl7dGhpcy5nPWF9O1EucHJvdG90eXBlLnNldFN0YXRpYz1RLnByb3RvdHlwZS5NYjtRLnByb3RvdHlwZS5iYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN9O1xuUS5wcm90b3R5cGUuZ2V0U2VnbWVudEF2YWlsYWJpbGl0eUR1cmF0aW9uPVEucHJvdG90eXBlLmJjO1EucHJvdG90eXBlLkxiPWZ1bmN0aW9uKGEpe3RoaXMuYz1hfTtRLnByb3RvdHlwZS5zZXRTZWdtZW50QXZhaWxhYmlsaXR5RHVyYXRpb249US5wcm90b3R5cGUuTGI7US5wcm90b3R5cGUuSGE9ZnVuY3Rpb24oYSxiKXtiLmxlbmd0aCYmKHRoaXMuYj1iLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChhLGIuZW5kVGltZS1iLnN0YXJ0VGltZSl9LHRoaXMuYiksYXx8KHRoaXMuZj1NYXRoLm1heCh0aGlzLmYsYlswXS5zdGFydFRpbWUpKSl9O1EucHJvdG90eXBlLm5vdGlmeVNlZ21lbnRzPVEucHJvdG90eXBlLkhhO1EucHJvdG90eXBlLiRhPWZ1bmN0aW9uKGEpe3RoaXMuYj1NYXRoLm1heCh0aGlzLmIsYSl9O1EucHJvdG90eXBlLm5vdGlmeU1heFNlZ21lbnREdXJhdGlvbj1RLnByb3RvdHlwZS4kYTtcblEucHJvdG90eXBlLlM9ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHk9PXRoaXMuYSYmIXRoaXMuZ307US5wcm90b3R5cGUuaXNMaXZlPVEucHJvdG90eXBlLlM7US5wcm90b3R5cGUuZmE9ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHkhPXRoaXMuYSYmIXRoaXMuZ307US5wcm90b3R5cGUuaXNJblByb2dyZXNzPVEucHJvdG90eXBlLmZhO1EucHJvdG90eXBlLnRhPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHRoaXMuZix0aGlzLlooKSksdGhpcy51YSgpKX07US5wcm90b3R5cGUuZ2V0RWFybGllc3RTdGFydD1RLnByb3RvdHlwZS50YTtRLnByb3RvdHlwZS51YT1mdW5jdGlvbigpe3JldHVybiBJbmZpbml0eT09dGhpcy5jPzA6TWF0aC5tYXgoMCx0aGlzLlooKS10aGlzLmMpfTtRLnByb3RvdHlwZS5nZXRTZWdtZW50QXZhaWxhYmlsaXR5U3RhcnQ9US5wcm90b3R5cGUudWE7XG5RLnByb3RvdHlwZS5aPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuUygpfHx0aGlzLmZhKCk/TWF0aC5taW4oTWF0aC5tYXgoMCwoRGF0ZS5ub3coKSt0aGlzLmgpLzFFMy10aGlzLmItdGhpcy5qKSx0aGlzLmEpOnRoaXMuYX07US5wcm90b3R5cGUuZ2V0U2VnbWVudEF2YWlsYWJpbGl0eUVuZD1RLnByb3RvdHlwZS5aO1EucHJvdG90eXBlLlZhPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWF4KDAsdGhpcy5aKCktKHRoaXMuUygpfHx0aGlzLmZhKCk/dGhpcy5pOjApKX07US5wcm90b3R5cGUuZ2V0U2Vla1JhbmdlRW5kPVEucHJvdG90eXBlLlZhO2Z1bmN0aW9uIHdjKGEsYixjKXt0aGlzLmc9UltiXTt0aGlzLmM9YTt0aGlzLmg9MDt0aGlzLmY9SW5maW5pdHk7dGhpcy5hPXRoaXMuYj1udWxsO3RoaXMuaT1jfXZhciBSPXt9O20oXCJzaGFrYS5tZWRpYS5UZXh0RW5naW5lLnJlZ2lzdGVyUGFyc2VyXCIsZnVuY3Rpb24oYSxiKXtSW2FdPWJ9KTttKFwic2hha2EubWVkaWEuVGV4dEVuZ2luZS51bnJlZ2lzdGVyUGFyc2VyXCIsZnVuY3Rpb24oYSl7ZGVsZXRlIFJbYV19KTtmdW5jdGlvbiB4YyhhLGIsYyl7cmV0dXJuIGE+PWI/bnVsbDpuZXcgVlRUQ3VlKGEsYixjKX1tKFwic2hha2EubWVkaWEuVGV4dEVuZ2luZS5tYWtlQ3VlXCIseGMpO3djLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5jJiZ5Yyh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuITB9KTt0aGlzLmM9dGhpcy5nPW51bGw7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtcbmZ1bmN0aW9uIHpjKGEsYixjLGQpe3ZhciBlPWEuaDtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2lmKHRoaXMuYyl7dmFyIGE9dGhpcy5nKGIsZSxjLGQsdGhpcy5pKTtpZihudWxsIT1jJiZudWxsIT1kKXtmb3IodmFyIGc9MDtnPGEubGVuZ3RoJiYhKGFbZ10uc3RhcnRUaW1lPj10aGlzLmYpOysrZyl0aGlzLmMuYWRkQ3VlKGFbZ10pO251bGw9PXRoaXMuYiYmKHRoaXMuYj1jKTt0aGlzLmE9TWF0aC5taW4oZCx0aGlzLmYpfX19LmJpbmQoYSkpfVxud2MucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbihhLGIpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5jJiYoeWModGhpcyxmdW5jdGlvbihjKXtyZXR1cm4gYy5zdGFydFRpbWU+PWJ8fGMuZW5kVGltZTw9YT8hMTohMH0pLG51bGw9PXRoaXMuYnx8Yjw9dGhpcy5ifHxhPj10aGlzLmF8fChhPD10aGlzLmImJmI+PXRoaXMuYT90aGlzLmI9dGhpcy5hPW51bGw6YTw9dGhpcy5iJiZiPHRoaXMuYT90aGlzLmI9YjphPnRoaXMuYiYmYj49dGhpcy5hJiYodGhpcy5hPWEpKSl9LmJpbmQodGhpcykpfTtmdW5jdGlvbiBBYyhhLGIpe3JldHVybiBudWxsPT1hLmF8fGEuYTxifHxiPGEuYj8wOmEuYS1ifWZ1bmN0aW9uIHljKGEsYil7Zm9yKHZhciBjPWEuYy5jdWVzLGQ9W10sZT0wO2U8Yy5sZW5ndGg7KytlKWIoY1tlXSkmJmQucHVzaChjW2VdKTtmb3IoZT0wO2U8ZC5sZW5ndGg7KytlKWEuYy5yZW1vdmVDdWUoZFtlXSl9O2Z1bmN0aW9uIEJjKGEsYixjKXtyZXR1cm4gYz09Ynx8YT49Q2MmJmM9PWIuc3BsaXQoXCItXCIpWzBdfHxhPj1EYyYmYy5zcGxpdChcIi1cIilbMF09PWIuc3BsaXQoXCItXCIpWzBdPyEwOiExfXZhciBDYz0xLERjPTI7ZnVuY3Rpb24gRWMoYSl7YT1hLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCItXCIpO3ZhciBiPUZjW2FbMF1dO2ImJihhWzBdPWIpO3JldHVybiBhLmpvaW4oXCItXCIpfVxudmFyIEZjPXthYXI6XCJhYVwiLGFiazpcImFiXCIsYWZyOlwiYWZcIixha2E6XCJha1wiLGFsYjpcInNxXCIsYW1oOlwiYW1cIixhcmE6XCJhclwiLGFyZzpcImFuXCIsYXJtOlwiaHlcIixhc206XCJhc1wiLGF2YTpcImF2XCIsYXZlOlwiYWVcIixheW06XCJheVwiLGF6ZTpcImF6XCIsYmFrOlwiYmFcIixiYW06XCJibVwiLGJhcTpcImV1XCIsYmVsOlwiYmVcIixiZW46XCJiblwiLGJpaDpcImJoXCIsYmlzOlwiYmlcIixib2Q6XCJib1wiLGJvczpcImJzXCIsYnJlOlwiYnJcIixidWw6XCJiZ1wiLGJ1cjpcIm15XCIsY2F0OlwiY2FcIixjZXM6XCJjc1wiLGNoYTpcImNoXCIsY2hlOlwiY2VcIixjaGk6XCJ6aFwiLGNodTpcImN1XCIsY2h2OlwiY3ZcIixjb3I6XCJrd1wiLGNvczpcImNvXCIsY3JlOlwiY3JcIixjeW06XCJjeVwiLGN6ZTpcImNzXCIsZGFuOlwiZGFcIixkZXU6XCJkZVwiLGRpdjpcImR2XCIsZHV0OlwibmxcIixkem86XCJkelwiLGVsbDpcImVsXCIsZW5nOlwiZW5cIixlcG86XCJlb1wiLGVzdDpcImV0XCIsZXVzOlwiZXVcIixld2U6XCJlZVwiLGZhbzpcImZvXCIsZmFzOlwiZmFcIixmaWo6XCJmalwiLGZpbjpcImZpXCIsZnJhOlwiZnJcIixmcmU6XCJmclwiLFxuZnJ5OlwiZnlcIixmdWw6XCJmZlwiLGdlbzpcImthXCIsZ2VyOlwiZGVcIixnbGE6XCJnZFwiLGdsZTpcImdhXCIsZ2xnOlwiZ2xcIixnbHY6XCJndlwiLGdyZTpcImVsXCIsZ3JuOlwiZ25cIixndWo6XCJndVwiLGhhdDpcImh0XCIsaGF1OlwiaGFcIixoZWI6XCJoZVwiLGhlcjpcImh6XCIsaGluOlwiaGlcIixobW86XCJob1wiLGhydjpcImhyXCIsaHVuOlwiaHVcIixoeWU6XCJoeVwiLGlibzpcImlnXCIsaWNlOlwiaXNcIixpZG86XCJpb1wiLGlpaTpcImlpXCIsaWt1OlwiaXVcIixpbGU6XCJpZVwiLGluYTpcImlhXCIsaW5kOlwiaWRcIixpcGs6XCJpa1wiLGlzbDpcImlzXCIsaXRhOlwiaXRcIixqYXY6XCJqdlwiLGpwbjpcImphXCIsa2FsOlwia2xcIixrYW46XCJrblwiLGthczpcImtzXCIsa2F0Olwia2FcIixrYXU6XCJrclwiLGthejpcImtrXCIsa2htOlwia21cIixraWs6XCJraVwiLGtpbjpcInJ3XCIsa2lyOlwia3lcIixrb206XCJrdlwiLGtvbjpcImtnXCIsa29yOlwia29cIixrdWE6XCJralwiLGt1cjpcImt1XCIsbGFvOlwibG9cIixsYXQ6XCJsYVwiLGxhdjpcImx2XCIsbGltOlwibGlcIixsaW46XCJsblwiLGxpdDpcImx0XCIsbHR6OlwibGJcIixsdWI6XCJsdVwiLFxubHVnOlwibGdcIixtYWM6XCJta1wiLG1haDpcIm1oXCIsbWFsOlwibWxcIixtYW86XCJtaVwiLG1hcjpcIm1yXCIsbWF5OlwibXNcIixta2Q6XCJta1wiLG1sZzpcIm1nXCIsbWx0OlwibXRcIixtb246XCJtblwiLG1yaTpcIm1pXCIsbXNhOlwibXNcIixteWE6XCJteVwiLG5hdTpcIm5hXCIsbmF2OlwibnZcIixuYmw6XCJuclwiLG5kZTpcIm5kXCIsbmRvOlwibmdcIixuZXA6XCJuZVwiLG5sZDpcIm5sXCIsbm5vOlwibm5cIixub2I6XCJuYlwiLG5vcjpcIm5vXCIsbnlhOlwibnlcIixvY2k6XCJvY1wiLG9qaTpcIm9qXCIsb3JpOlwib3JcIixvcm06XCJvbVwiLG9zczpcIm9zXCIscGFuOlwicGFcIixwZXI6XCJmYVwiLHBsaTpcInBpXCIscG9sOlwicGxcIixwb3I6XCJwdFwiLHB1czpcInBzXCIscXVlOlwicXVcIixyb2g6XCJybVwiLHJvbjpcInJvXCIscnVtOlwicm9cIixydW46XCJyblwiLHJ1czpcInJ1XCIsc2FnOlwic2dcIixzYW46XCJzYVwiLHNpbjpcInNpXCIsc2xrOlwic2tcIixzbG86XCJza1wiLHNsdjpcInNsXCIsc21lOlwic2VcIixzbW86XCJzbVwiLHNuYTpcInNuXCIsc25kOlwic2RcIixzb206XCJzb1wiLHNvdDpcInN0XCIsc3BhOlwiZXNcIixzcWk6XCJzcVwiLFxuc3JkOlwic2NcIixzcnA6XCJzclwiLHNzdzpcInNzXCIsc3VuOlwic3VcIixzd2E6XCJzd1wiLHN3ZTpcInN2XCIsdGFoOlwidHlcIix0YW06XCJ0YVwiLHRhdDpcInR0XCIsdGVsOlwidGVcIix0Z2s6XCJ0Z1wiLHRnbDpcInRsXCIsdGhhOlwidGhcIix0aWI6XCJib1wiLHRpcjpcInRpXCIsdG9uOlwidG9cIix0c246XCJ0blwiLHRzbzpcInRzXCIsdHVrOlwidGtcIix0dXI6XCJ0clwiLHR3aTpcInR3XCIsdWlnOlwidWdcIix1a3I6XCJ1a1wiLHVyZDpcInVyXCIsdXpiOlwidXpcIix2ZW46XCJ2ZVwiLHZpZTpcInZpXCIsdm9sOlwidm9cIix3ZWw6XCJjeVwiLHdsbjpcIndhXCIsd29sOlwid29cIix4aG86XCJ4aFwiLHlpZDpcInlpXCIseW9yOlwieW9cIix6aGE6XCJ6YVwiLHpobzpcInpoXCIsenVsOlwienVcIn07ZnVuY3Rpb24gR2MoYSxiLGMpe2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7KytkKWlmKGMoYVtkXSxiKSlyZXR1cm4gZDtyZXR1cm4tMX07ZnVuY3Rpb24gSGMoYSl7dGhpcy5hPW51bGw7dGhpcy5iPWZ1bmN0aW9uKCl7dGhpcy5hPW51bGw7YSgpfS5iaW5kKHRoaXMpfUhjLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXtudWxsIT10aGlzLmEmJihjbGVhclRpbWVvdXQodGhpcy5hKSx0aGlzLmE9bnVsbCl9O2Z1bmN0aW9uIEljKGEpe2EuY2FuY2VsKCk7YS5hPXNldFRpbWVvdXQoYS5iLDEwMCl9O2Z1bmN0aW9uIEpjKGEsYixjKXt0aGlzLmw9dGhpcy5oPXRoaXMucz1udWxsO3RoaXMuQj0hMTt0aGlzLmI9bnVsbDt0aGlzLmY9bmV3IHg7dGhpcy5hPVtdO3RoaXMubT1bXTt0aGlzLmo9bmV3IHc7dGhpcy5IPWE7dGhpcy5pPW51bGw7dGhpcy5nPWZ1bmN0aW9uKGEpe3RoaXMuai5yZWplY3QoYSk7YihhKX0uYmluZCh0aGlzKTt0aGlzLkE9e307dGhpcy5LPWM7dGhpcy52PW5ldyBIYyh0aGlzLkRjLmJpbmQodGhpcykpO3RoaXMuQz10aGlzLmM9ITE7dGhpcy5qW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXt9KX1rPUpjLnByb3RvdHlwZTtcbmsubz1mdW5jdGlvbigpe3RoaXMuYz0hMDt2YXIgYT10aGlzLmEubWFwKGZ1bmN0aW9uKGEpe3JldHVybihhLmhhLmNsb3NlKCl8fFByb21pc2UucmVzb2x2ZSgpKVtcImNhdGNoXCJdKEMpfSk7dGhpcy5qLnJlamVjdCgpO3RoaXMuZiYmYS5wdXNoKHRoaXMuZi5vKCkpO3RoaXMubCYmYS5wdXNoKHRoaXMubC5zZXRNZWRpYUtleXMobnVsbClbXCJjYXRjaFwiXShDKSk7dGhpcy52JiZ0aGlzLnYuY2FuY2VsKCk7dGhpcy5mPXRoaXMubD10aGlzLmg9dGhpcy5zPXRoaXMuYj10aGlzLnY9bnVsbDt0aGlzLmE9W107dGhpcy5tPVtdO3RoaXMuZz10aGlzLmk9dGhpcy5IPW51bGw7cmV0dXJuIFByb21pc2UuYWxsKGEpfTtrLmNvbmZpZ3VyZT1mdW5jdGlvbihhKXt0aGlzLmk9YX07XG5rLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz17fSxkPVtdO3RoaXMuQz1iO3RoaXMubT1hLm9mZmxpbmVTZXNzaW9uSWRzO0tjKHRoaXMsYSxifHwwPGEub2ZmbGluZVNlc3Npb25JZHMubGVuZ3RoLGMsZCk7cmV0dXJuIGQubGVuZ3RoP0xjKHRoaXMsYyxkKToodGhpcy5CPSEwLFByb21pc2UucmVzb2x2ZSgpKX07XG5mdW5jdGlvbiBNYyhhLGIpe2lmKCFhLmgpcmV0dXJuIHkoYS5mLGIsXCJlbmNyeXB0ZWRcIixmdW5jdGlvbigpe3RoaXMuZi5sYShiLFwiZW5jcnlwdGVkXCIpO3RoaXMuZyhuZXcgdig2LDYwMTApKX0uYmluZChhKSksUHJvbWlzZS5yZXNvbHZlKCk7YS5sPWI7dmFyIGM9YS5sLnNldE1lZGlhS2V5cyhhLmgpLGM9Y1tcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3JldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig2LDYwMDMsYS5tZXNzYWdlKSl9KSxkPW51bGw7YS5iLnNlcnZlckNlcnRpZmljYXRlJiYoZD1hLmguc2V0U2VydmVyQ2VydGlmaWNhdGUoYS5iLnNlcnZlckNlcnRpZmljYXRlKSxkPWRbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IHYoNiw2MDA0LGEubWVzc2FnZSkpfSkpO3JldHVybiBQcm9taXNlLmFsbChbYyxkXSkudGhlbihmdW5jdGlvbigpe2lmKHRoaXMuYylyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtOYyh0aGlzKTt0aGlzLmIuaW5pdERhdGEubGVuZ3RofHxcbnRoaXMubS5sZW5ndGh8fHkodGhpcy5mLHRoaXMubCxcImVuY3J5cHRlZFwiLHRoaXMuamMuYmluZCh0aGlzKSl9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYz9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlamVjdChhKX0uYmluZChhKSl9ZnVuY3Rpb24gT2MoYSxiKXtyZXR1cm4gUHJvbWlzZS5hbGwoYi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIFBjKHRoaXMsYSkudGhlbihmdW5jdGlvbihhKXtpZihhKXtmb3IodmFyIGI9bmV3IHcsYz0wO2M8dGhpcy5hLmxlbmd0aDtjKyspaWYodGhpcy5hW2NdLmhhPT1hKXt0aGlzLmFbY10uT2E9YjticmVha31yZXR1cm4gUHJvbWlzZS5hbGwoW2EucmVtb3ZlKCksYl0pfX0uYmluZCh0aGlzKSl9LmJpbmQoYSkpKX1cbmZ1bmN0aW9uIE5jKGEpe3ZhciBiPWEuYj9hLmIuaW5pdERhdGE6W107Yi5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FjKHRoaXMsYS5pbml0RGF0YVR5cGUsYS5pbml0RGF0YSl9LmJpbmQoYSkpO2EubS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1BjKHRoaXMsYSl9LmJpbmQoYSkpO2IubGVuZ3RofHxhLm0ubGVuZ3RofHxhLmoucmVzb2x2ZSgpO3JldHVybiBhLmp9ay5rZXlTeXN0ZW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iP3RoaXMuYi5rZXlTeXN0ZW06XCJcIn07ZnVuY3Rpb24gUmMoYSl7cmV0dXJuIGEuYS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaGEuc2Vzc2lvbklkfSl9XG5mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3ZhciBmPVNjKGEpO2IucGVyaW9kcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2Euc3RyZWFtU2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGEpe1widGV4dFwiIT1hLnR5cGUmJihmJiYoYS5kcm1JbmZvcz1bZl0pLGEuZHJtSW5mb3MuZm9yRWFjaChmdW5jdGlvbihiKXtUYyh0aGlzLGIpO3ZhciBmPWRbYi5rZXlTeXN0ZW1dO2Z8fChmPXthdWRpb0NhcGFiaWxpdGllczpbXSx2aWRlb0NhcGFiaWxpdGllczpbXSxkaXN0aW5jdGl2ZUlkZW50aWZpZXI6XCJvcHRpb25hbFwiLHBlcnNpc3RlbnRTdGF0ZTpjP1wicmVxdWlyZWRcIjpcIm9wdGlvbmFsXCIsc2Vzc2lvblR5cGVzOltjP1wicGVyc2lzdGVudC1saWNlbnNlXCI6XCJ0ZW1wb3JhcnlcIl0sbGFiZWw6Yi5rZXlTeXN0ZW0sZHJtSW5mb3M6W119LGRbYi5rZXlTeXN0ZW1dPWYsZS5wdXNoKGIua2V5U3lzdGVtKSk7Zi5kcm1JbmZvcy5wdXNoKGIpO2IuZGlzdGluY3RpdmVJZGVudGlmaWVyUmVxdWlyZWQmJihmLmRpc3RpbmN0aXZlSWRlbnRpZmllcj1cblwicmVxdWlyZWRcIik7Yi5wZXJzaXN0ZW50U3RhdGVSZXF1aXJlZCYmKGYucGVyc2lzdGVudFN0YXRlPVwicmVxdWlyZWRcIik7dmFyIGc9XCJ2aWRlb1wiPT1hLnR5cGU/Zi52aWRlb0NhcGFiaWxpdGllczpmLmF1ZGlvQ2FwYWJpbGl0aWVzLGg9KFwidmlkZW9cIj09YS50eXBlP2IudmlkZW9Sb2J1c3RuZXNzOmIuYXVkaW9Sb2J1c3RuZXNzKXx8XCJcIjthLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1hLm1pbWVUeXBlO2EuY29kZWNzJiYoYys9JzsgY29kZWNzPVwiJythLmNvZGVjcysnXCInKTthLmtleUlkJiZiLmtleUlkcy5wdXNoKGEua2V5SWQpO2cucHVzaCh7cm9idXN0bmVzczpoLGNvbnRlbnRUeXBlOmN9KX0uYmluZCh0aGlzKSl9LmJpbmQodGhpcykpKX0uYmluZCh0aGlzKSl9LmJpbmQoYSkpfVxuZnVuY3Rpb24gTGMoYSxiLGMpe2lmKDE9PWMubGVuZ3RoJiZcIlwiPT1jWzBdKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig2LDZFMykpO3ZhciBkPW5ldyB3LGU9ZDtbITAsITFdLmZvckVhY2goZnVuY3Rpb24oYSl7Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ZhciBkPWJbY107ZC5kcm1JbmZvcy5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5saWNlbnNlU2VydmVyVXJpfSk9PWEmJihkLmF1ZGlvQ2FwYWJpbGl0aWVzLmxlbmd0aHx8ZGVsZXRlIGQuYXVkaW9DYXBhYmlsaXRpZXMsZC52aWRlb0NhcGFiaWxpdGllcy5sZW5ndGh8fGRlbGV0ZSBkLnZpZGVvQ2FwYWJpbGl0aWVzLGU9ZVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYz9Qcm9taXNlLnJlamVjdCgpOm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MoYyxbZF0pfS5iaW5kKHRoaXMpKSl9LmJpbmQodGhpcykpfS5iaW5kKGEpKTtlPWVbXCJjYXRjaFwiXShmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig2LFxuNjAwMSkpfSk7ZT1lLnRoZW4oZnVuY3Rpb24oYSl7aWYodGhpcy5jKXJldHVybiBQcm9taXNlLnJlamVjdCgpO3ZhciBjPTA8PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkVkZ2UvXCIpLGQ9YS5nZXRDb25maWd1cmF0aW9uKCk7dGhpcy5zPShkLmF1ZGlvQ2FwYWJpbGl0aWVzfHxbXSkuY29uY2F0KGQudmlkZW9DYXBhYmlsaXRpZXN8fFtdKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY29udGVudFR5cGV9KTtjJiYodGhpcy5zPW51bGwpO2M9YlthLmtleVN5c3RlbV07VWModGhpcyxhLmtleVN5c3RlbSxjLGMuZHJtSW5mb3MpO3JldHVybiB0aGlzLmIubGljZW5zZVNlcnZlclVyaT9hLmNyZWF0ZU1lZGlhS2V5cygpOlByb21pc2UucmVqZWN0KG5ldyB2KDYsNjAxMikpfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKGEpe2lmKHRoaXMuYylyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTt0aGlzLmg9YTt0aGlzLkI9ITB9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7aWYodGhpcy5jKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbnRoaXMucz10aGlzLmI9bnVsbDtyZXR1cm4gYSBpbnN0YW5jZW9mIHY/UHJvbWlzZS5yZWplY3QoYSk6UHJvbWlzZS5yZWplY3QobmV3IHYoNiw2MDAyLGEubWVzc2FnZSkpfS5iaW5kKGEpKTtkLnJlamVjdCgpO3JldHVybiBlfVxuZnVuY3Rpb24gVGMoYSxiKXt2YXIgYz1iLmtleVN5c3RlbTtpZihjKXtpZighYi5saWNlbnNlU2VydmVyVXJpKXt2YXIgZD1hLmkuc2VydmVyc1tjXTtkJiYoYi5saWNlbnNlU2VydmVyVXJpPWQpfWIua2V5SWRzfHwoYi5rZXlJZHM9W10pO2lmKGM9YS5pLmFkdmFuY2VkW2NdKWIuZGlzdGluY3RpdmVJZGVudGlmaWVyUmVxdWlyZWR8fChiLmRpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkPWMuZGlzdGluY3RpdmVJZGVudGlmaWVyUmVxdWlyZWQpLGIucGVyc2lzdGVudFN0YXRlUmVxdWlyZWR8fChiLnBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkPWMucGVyc2lzdGVudFN0YXRlUmVxdWlyZWQpLGIudmlkZW9Sb2J1c3RuZXNzfHwoYi52aWRlb1JvYnVzdG5lc3M9Yy52aWRlb1JvYnVzdG5lc3MpLGIuYXVkaW9Sb2J1c3RuZXNzfHwoYi5hdWRpb1JvYnVzdG5lc3M9Yy5hdWRpb1JvYnVzdG5lc3MpLGIuc2VydmVyQ2VydGlmaWNhdGV8fChiLnNlcnZlckNlcnRpZmljYXRlPWMuc2VydmVyQ2VydGlmaWNhdGUpfX1cbmZ1bmN0aW9uIFNjKGEpe2lmKE5hKGEuaS5jbGVhcktleXMpKXJldHVybiBudWxsO3ZhciBiPVtdLGM9W10sZDtmb3IoZCBpbiBhLmkuY2xlYXJLZXlzKXt2YXIgZT1hLmkuY2xlYXJLZXlzW2RdLGY9U2EoZCksZT1TYShlKSxmPXtrdHk6XCJvY3RcIixraWQ6UWEoZiksazpRYShlKX07Yi5wdXNoKGYpO2MucHVzaChmLmtpZCl9YT1KU09OLnN0cmluZ2lmeSh7a2V5czpifSk7Yz1KU09OLnN0cmluZ2lmeSh7a2lkczpjfSk7Yz1be2luaXREYXRhOm5ldyBVaW50OEFycmF5KEliKGMpKSxpbml0RGF0YVR5cGU6XCJrZXlpZHNcIn1dO3JldHVybntrZXlTeXN0ZW06XCJvcmcudzMuY2xlYXJrZXlcIixsaWNlbnNlU2VydmVyVXJpOlwiZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIit3aW5kb3cuYnRvYShhKSxkaXN0aW5jdGl2ZUlkZW50aWZpZXJSZXF1aXJlZDohMSxwZXJzaXN0ZW50U3RhdGVSZXF1aXJlZDohMSxhdWRpb1JvYnVzdG5lc3M6XCJcIix2aWRlb1JvYnVzdG5lc3M6XCJcIixzZXJ2ZXJDZXJ0aWZpY2F0ZTpudWxsLFxuaW5pdERhdGE6YyxrZXlJZHM6W119fWZ1bmN0aW9uIFVjKGEsYixjLGQpe3ZhciBlPVtdLGY9W10sZz1bXSxoPVtdO1ZjKGQsZSxmLGcsaCk7YS5iPXtrZXlTeXN0ZW06YixsaWNlbnNlU2VydmVyVXJpOmVbMF0sZGlzdGluY3RpdmVJZGVudGlmaWVyUmVxdWlyZWQ6XCJyZXF1aXJlZFwiPT1jLmRpc3RpbmN0aXZlSWRlbnRpZmllcixwZXJzaXN0ZW50U3RhdGVSZXF1aXJlZDpcInJlcXVpcmVkXCI9PWMucGVyc2lzdGVudFN0YXRlLGF1ZGlvUm9idXN0bmVzczpjLmF1ZGlvQ2FwYWJpbGl0aWVzP2MuYXVkaW9DYXBhYmlsaXRpZXNbMF0ucm9idXN0bmVzczpcIlwiLHZpZGVvUm9idXN0bmVzczpjLnZpZGVvQ2FwYWJpbGl0aWVzP2MudmlkZW9DYXBhYmlsaXRpZXNbMF0ucm9idXN0bmVzczpcIlwiLHNlcnZlckNlcnRpZmljYXRlOmZbMF0saW5pdERhdGE6ZyxrZXlJZHM6aH19XG5mdW5jdGlvbiBWYyhhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiKXtyZXR1cm4gYS5pbml0RGF0YVR5cGU9PWIuaW5pdERhdGFUeXBlJiZVYShhLmluaXREYXRhLGIuaW5pdERhdGEpfWEuZm9yRWFjaChmdW5jdGlvbihhKXstMT09Yi5pbmRleE9mKGEubGljZW5zZVNlcnZlclVyaSkmJmIucHVzaChhLmxpY2Vuc2VTZXJ2ZXJVcmkpO2Euc2VydmVyQ2VydGlmaWNhdGUmJi0xPT1HYyhjLGEuc2VydmVyQ2VydGlmaWNhdGUsVWEpJiZjLnB1c2goYS5zZXJ2ZXJDZXJ0aWZpY2F0ZSk7YS5pbml0RGF0YSYmYS5pbml0RGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGEpey0xPT1HYyhkLGEsZikmJmQucHVzaChhKX0pO2lmKGEua2V5SWRzKWZvcih2YXIgZz0wO2c8YS5rZXlJZHMubGVuZ3RoOysrZyktMT09ZS5pbmRleE9mKGEua2V5SWRzW2ddKSYmZS5wdXNoKGEua2V5SWRzW2ddKX0pfVxuay5qYz1mdW5jdGlvbihhKXtmb3IodmFyIGI9bmV3IFVpbnQ4QXJyYXkoYS5pbml0RGF0YSksYz0wO2M8dGhpcy5hLmxlbmd0aDsrK2MpaWYoVWEoYix0aGlzLmFbY10uaW5pdERhdGEpKXJldHVybjtRYyh0aGlzLGEuaW5pdERhdGFUeXBlLGIpfTtcbmZ1bmN0aW9uIFBjKGEsYil7dmFyIGM7dHJ5e2M9YS5oLmNyZWF0ZVNlc3Npb24oXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIil9Y2F0Y2goZil7dmFyIGQ9bmV3IHYoNiw2MDA1LGYubWVzc2FnZSk7YS5nKGQpO3JldHVybiBQcm9taXNlLnJlamVjdChkKX15KGEuZixjLFwibWVzc2FnZVwiLGEuQmIuYmluZChhKSk7eShhLmYsYyxcImtleXN0YXR1c2VzY2hhbmdlXCIsYS53Yi5iaW5kKGEpKTt2YXIgZT17aW5pdERhdGE6bnVsbCxoYTpjLGxvYWRlZDohMSxPYTpudWxsfTthLmEucHVzaChlKTtyZXR1cm4gYy5sb2FkKGIpLnRoZW4oZnVuY3Rpb24oYSl7aWYoIXRoaXMuYyl7aWYoYSlyZXR1cm4gZS5sb2FkZWQ9ITAsdGhpcy5hLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiBhLmxvYWRlZH0pJiZ0aGlzLmoucmVzb2x2ZSgpLGM7dGhpcy5hLnNwbGljZSh0aGlzLmEuaW5kZXhPZihlKSwxKTt0aGlzLmcobmV3IHYoNiw2MDEzKSl9fS5iaW5kKGEpLGZ1bmN0aW9uKGEpe3RoaXMuY3x8KHRoaXMuYS5zcGxpY2UodGhpcy5hLmluZGV4T2YoZSksXG4xKSx0aGlzLmcobmV3IHYoNiw2MDA1LGEubWVzc2FnZSkpKX0uYmluZChhKSl9ZnVuY3Rpb24gUWMoYSxiLGMpe3ZhciBkO3RyeXtkPWEuQz9hLmguY3JlYXRlU2Vzc2lvbihcInBlcnNpc3RlbnQtbGljZW5zZVwiKTphLmguY3JlYXRlU2Vzc2lvbigpfWNhdGNoKGUpe2EuZyhuZXcgdig2LDYwMDUsZS5tZXNzYWdlKSk7cmV0dXJufXkoYS5mLGQsXCJtZXNzYWdlXCIsYS5CYi5iaW5kKGEpKTt5KGEuZixkLFwia2V5c3RhdHVzZXNjaGFuZ2VcIixhLndiLmJpbmQoYSkpO2EuYS5wdXNoKHtpbml0RGF0YTpjLGhhOmQsbG9hZGVkOiExLE9hOm51bGx9KTtkLmdlbmVyYXRlUmVxdWVzdChiLGMuYnVmZmVyKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2lmKCF0aGlzLmMpe2Zvcih2YXIgYj0wO2I8dGhpcy5hLmxlbmd0aDsrK2IpaWYodGhpcy5hW2JdLmhhPT1kKXt0aGlzLmEuc3BsaWNlKGIsMSk7YnJlYWt9dGhpcy5nKG5ldyB2KDYsNjAwNixhLm1lc3NhZ2UpKX19LmJpbmQoYSkpfVxuay5CYj1mdW5jdGlvbihhKXtmb3IodmFyIGI9YS50YXJnZXQsYyxkPTA7ZDx0aGlzLmEubGVuZ3RoO2QrKylpZih0aGlzLmFbZF0uaGE9PWIpe2M9dGhpcy5hW2RdLk9hO2JyZWFrfWQ9cmMoW3RoaXMuYi5saWNlbnNlU2VydmVyVXJpXSx0aGlzLmkucmV0cnlQYXJhbWV0ZXJzKTtkLmJvZHk9YS5tZXNzYWdlO2QubWV0aG9kPVwiUE9TVFwiO1wiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIj09dGhpcy5iLmtleVN5c3RlbSYmV2MoZCk7dGhpcy5ILnJlcXVlc3QoMixkKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmM/UHJvbWlzZS5yZWplY3QoKTpiLnVwZGF0ZShhLmRhdGEpLnRoZW4oZnVuY3Rpb24oKXtjJiZjLnJlc29sdmUoKX0pfS5iaW5kKHRoaXMpLGZ1bmN0aW9uKGEpe2lmKHRoaXMuYylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7YT1uZXcgdig2LDYwMDcsYSk7dGhpcy5nKGEpO2MmJmMucmVqZWN0KGEpfS5iaW5kKHRoaXMpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2lmKHRoaXMuYylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5hPW5ldyB2KDYsNjAwOCxhLm1lc3NhZ2UpO3RoaXMuZyhhKTtjJiZjLnJlamVjdChhKX0uYmluZCh0aGlzKSl9O2Z1bmN0aW9uIFdjKGEpe2Zvcih2YXIgYj1HYihhLmJvZHksITApLGI9KG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhiLFwiYXBwbGljYXRpb24veG1sXCIpLGM9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkh0dHBIZWFkZXJcIiksZD0wO2Q8Yy5sZW5ndGg7KytkKWEuaGVhZGVyc1tjW2RdLnF1ZXJ5U2VsZWN0b3IoXCJuYW1lXCIpLnRleHRDb250ZW50XT1jW2RdLnF1ZXJ5U2VsZWN0b3IoXCJ2YWx1ZVwiKS50ZXh0Q29udGVudDthLmJvZHk9UmEoYi5xdWVyeVNlbGVjdG9yKFwiQ2hhbGxlbmdlXCIpLnRleHRDb250ZW50KS5idWZmZXJ9XG5rLndiPWZ1bmN0aW9uKGEpe2E9YS50YXJnZXQ7dmFyIGI7Zm9yKGI9MDtiPHRoaXMuYS5sZW5ndGgmJnRoaXMuYVtiXS5oYSE9YTsrK2IpO2lmKGIhPXRoaXMuYS5sZW5ndGgpe3ZhciBjPSExO2Eua2V5U3RhdHVzZXMuZm9yRWFjaChmdW5jdGlvbihhLGQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBkKXt2YXIgZT1kO2Q9YTthPWV9aWYoXCJjb20ubWljcm9zb2Z0LnBsYXlyZWFkeVwiPT10aGlzLmIua2V5U3lzdGVtJiYxNj09ZC5ieXRlTGVuZ3RoKXt2YXIgZT1uZXcgRGF0YVZpZXcoZCksZj1lLmdldFVpbnQzMigwLCEwKSxsPWUuZ2V0VWludDE2KDQsITApLG49ZS5nZXRVaW50MTYoNiwhMCk7ZS5zZXRVaW50MzIoMCxmLCExKTtlLnNldFVpbnQxNig0LGwsITEpO2Uuc2V0VWludDE2KDYsbiwhMSl9XCJjb20ubWljcm9zb2Z0LnBsYXlyZWFkeVwiPT10aGlzLmIua2V5U3lzdGVtJiZcInN0YXR1cy1wZW5kaW5nXCI9PWEmJihhPVwidXNhYmxlXCIpO1wic3RhdHVzLXBlbmRpbmdcIiE9YSYmKHRoaXMuYVtiXS5sb2FkZWQ9XG4hMCx0aGlzLmEuZXZlcnkoZnVuY3Rpb24oYSl7cmV0dXJuIGEubG9hZGVkfSkmJnRoaXMuai5yZXNvbHZlKCkpO1wiZXhwaXJlZFwiPT1hJiYoYz0hMCk7ZT1UYShuZXcgVWludDhBcnJheShkKSk7dGhpcy5BW2VdPWF9LmJpbmQodGhpcykpO3ZhciBkPWEuZXhwaXJhdGlvbi1EYXRlLm5vdygpOygwPmR8fGMmJjFFMz5kKSYmIXRoaXMuYVtiXS5PYSYmKHRoaXMuYS5zcGxpY2UoYiwxKSxhLmNsb3NlKCkpO0ljKHRoaXMudil9fTtrLkRjPWZ1bmN0aW9uKCl7UGEodGhpcy5BLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJleHBpcmVkXCI9PWJ9KSYmdGhpcy5nKG5ldyB2KDYsNjAxNCkpO3RoaXMuSyh0aGlzLkEpfTtcbmZ1bmN0aW9uIFhjKCl7dmFyIGE9W10sYj1be2NvbnRlbnRUeXBlOid2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCInfSx7Y29udGVudFR5cGU6J3ZpZGVvL3dlYm07IGNvZGVjcz1cInZwOFwiJ31dLGM9W3t2aWRlb0NhcGFiaWxpdGllczpiLHBlcnNpc3RlbnRTdGF0ZTpcInJlcXVpcmVkXCIsc2Vzc2lvblR5cGVzOltcInBlcnNpc3RlbnQtbGljZW5zZVwiXX0se3ZpZGVvQ2FwYWJpbGl0aWVzOmJ9XSxkPXt9O1wib3JnLnczLmNsZWFya2V5IGNvbS53aWRldmluZS5hbHBoYSBjb20ubWljcm9zb2Z0LnBsYXlyZWFkeSBjb20uYXBwbGUuZnBzLjJfMCBjb20uYXBwbGUuZnBzLjFfMCBjb20uYXBwbGUuZnBzIGNvbS5hZG9iZS5wcmltZXRpbWVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZT1uYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzKGIsYykudGhlbihmdW5jdGlvbihhKXt2YXIgYz1hLmdldENvbmZpZ3VyYXRpb24oKS5zZXNzaW9uVHlwZXM7ZFtiXT1cbntwZXJzaXN0ZW50U3RhdGU6Yz8wPD1jLmluZGV4T2YoXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIik6ITF9O3JldHVybiBhLmNyZWF0ZU1lZGlhS2V5cygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2RbYl09bnVsbH0pO2EucHVzaChlKX0pO3JldHVybiBQcm9taXNlLmFsbChhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGR9KX07ZnVuY3Rpb24gWmMoYSl7cmV0dXJuIWF8fDE9PWEubGVuZ3RoJiYxRS02PmEuZW5kKDApLWEuc3RhcnQoMCk/bnVsbDphLmxlbmd0aD9hLmVuZChhLmxlbmd0aC0xKTpudWxsfWZ1bmN0aW9uICRjKGEsYil7dmFyIGM9MDtpZighYXx8MT09YS5sZW5ndGgmJjFFLTY+YS5lbmQoMCktYS5zdGFydCgwKSlyZXR1cm4gYzt2YXIgZD0hMSxlPTFFLTQ7Ynx8KGU9LjI1KTtmb3IodmFyIGY9MDtmPGEubGVuZ3RoOysrZilpZihiK2U+PWEuc3RhcnQoZikmJmI8YS5lbmQoZikpYys9YS5lbmQoZiktYixkPSEwO2Vsc2UgaWYoZCYmLjA0Pj1hLnN0YXJ0KGYpLWEuZW5kKGYtMSkpYys9YS5lbmQoZiktYS5zdGFydChmKSxjKz1hLnN0YXJ0KGYpLWEuZW5kKGYtMSk7ZWxzZSBpZigwPGYmJmIrZTxhLnN0YXJ0KGYpJiZiK2U+PWEuZW5kKGYtMSkpaWYoLjA0Pj1hLnN0YXJ0KGYpLWIpYys9YS5lbmQoZiktYixkPSEwO2Vsc2UgYnJlYWs7ZWxzZSBkPSExO3JldHVybiBjfVxuZnVuY3Rpb24gYWQoYSxiLGMpe3ZhciBkPSRjKGEsYik7ZHx8KGQ9JGMoYSxiK2MpKSYmKGQrPWMpO3JldHVybiBkfTtmdW5jdGlvbiBiZChhLGIsYyl7dGhpcy5mPWE7dGhpcy5GPWI7dGhpcy5pPWM7dGhpcy5jPXt9O3RoaXMuYj1udWxsO3RoaXMuYT17fTt0aGlzLmc9bmV3IHg7dGhpcy5oPSExfVxuZnVuY3Rpb24gY2QoKXt2YXIgYT17fTsndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRVwiLHZpZGVvL21wNDsgY29kZWNzPVwiYXZjMy40MkUwMUVcIix2aWRlby9tcDQ7IGNvZGVjcz1cImh2YzEuMS42Lkw5My45MFwiLGF1ZGlvL21wNDsgY29kZWNzPVwibXA0YS40MC4yXCIsYXVkaW8vbXA0OyBjb2RlY3M9XCJhYy0zXCIsYXVkaW8vbXA0OyBjb2RlY3M9XCJlYy0zXCIsdmlkZW8vd2VibTsgY29kZWNzPVwidnA4XCIsdmlkZW8vd2VibTsgY29kZWNzPVwidnA5XCIsdmlkZW8vd2VibTsgY29kZWNzPVwiYXYxXCIsYXVkaW8vd2VibTsgY29kZWNzPVwidm9yYmlzXCIsYXVkaW8vd2VibTsgY29kZWNzPVwib3B1c1wiLHZpZGVvL21wMnQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCIsdmlkZW8vbXAydDsgY29kZWNzPVwiYXZjMy40MkUwMUVcIix2aWRlby9tcDJ0OyBjb2RlY3M9XCJodmMxLjEuNi5MOTMuOTBcIix2aWRlby9tcDJ0OyBjb2RlY3M9XCJtcDRhLjQwLjJcIix2aWRlby9tcDJ0OyBjb2RlY3M9XCJhYy0zXCIsdmlkZW8vbXAydDsgY29kZWNzPVwiZWMtM1wiLHZpZGVvL21wMnQ7IGNvZGVjcz1cIm1wNGEuNDAuMlwiLHRleHQvdnR0LGFwcGxpY2F0aW9uL21wNDsgY29kZWNzPVwid3Z0dFwiLGFwcGxpY2F0aW9uL3R0bWwreG1sLGFwcGxpY2F0aW9uL21wNDsgY29kZWNzPVwic3RwcFwiJy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbihiKXthW2JdPSEhUltiXXx8XG5NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoYik7dmFyIGM9Yi5zcGxpdChcIjtcIilbMF07YVtjXT1hW2NdfHxhW2JdfSk7cmV0dXJuIGF9az1iZC5wcm90b3R5cGU7ay5vPWZ1bmN0aW9uKCl7dGhpcy5oPSEwO3ZhciBhPVtdLGI7Zm9yKGIgaW4gdGhpcy5hKXt2YXIgYz10aGlzLmFbYl0sZD1jWzBdO3RoaXMuYVtiXT1jLnNsaWNlKDAsMSk7ZCYmYS5wdXNoKGQucFtcImNhdGNoXCJdKEMpKTtmb3IoZD0xO2Q8Yy5sZW5ndGg7KytkKWNbZF0ucFtcImNhdGNoXCJdKEMpLGNbZF0ucC5yZWplY3QoKX10aGlzLmImJmEucHVzaCh0aGlzLmIubygpKTtyZXR1cm4gUHJvbWlzZS5hbGwoYSkudGhlbihmdW5jdGlvbigpe3RoaXMuZy5vKCk7dGhpcy5iPXRoaXMuaT10aGlzLkY9dGhpcy5mPXRoaXMuZz1udWxsO3RoaXMuYz17fTt0aGlzLmE9e319LmJpbmQodGhpcykpfTtcbmsuaW5pdD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYyBpbiBhKXt2YXIgZD1hW2NdO1widGV4dFwiPT1jP3RoaXMuYj1uZXcgd2ModGhpcy5pLGQsYik6KGQ9dGhpcy5GLmFkZFNvdXJjZUJ1ZmZlcihkKSx5KHRoaXMuZyxkLFwiZXJyb3JcIix0aGlzLiRjLmJpbmQodGhpcyxjKSkseSh0aGlzLmcsZCxcInVwZGF0ZWVuZFwiLHRoaXMueGEuYmluZCh0aGlzLGMpKSx0aGlzLmNbY109ZCx0aGlzLmFbY109W10pfX07ZnVuY3Rpb24gZGQoYSxiKXt2YXIgYztcInRleHRcIj09Yj9jPWEuYi5iOihjPWVkKGEsYiksYz0hY3x8MT09Yy5sZW5ndGgmJjFFLTY+Yy5lbmQoMCktYy5zdGFydCgwKT9udWxsOjE9PWMubGVuZ3RoJiYwPmMuc3RhcnQoMCk/MDpjLmxlbmd0aD9jLnN0YXJ0KDApOm51bGwpO3JldHVybiBjfVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7XCJ0ZXh0XCI9PWI/KGI9QWMoYS5iLGMpLCFiJiZkJiYoYj1BYyhhLmIsYytkKSkmJihiKz1kKSk6KGE9ZWQoYSxiKSxiPWFkKGEsYyxkfHwwKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWQoYSxiKXt0cnl7cmV0dXJuIGEuY1tiXS5idWZmZXJlZH1jYXRjaChjKXtyZXR1cm4gbnVsbH19ZnVuY3Rpb24gZ2QoYSxiLGMsZCxlKXtyZXR1cm5cInRleHRcIj09Yj96YyhhLmIsYyxkLGUpOmhkKGEsYixhLlpjLmJpbmQoYSxiLGMpKX1rLnJlbW92ZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuXCJ0ZXh0XCI9PWE/dGhpcy5iLnJlbW92ZShiLGMpOmhkKHRoaXMsYSx0aGlzLkdiLmJpbmQodGhpcyxhLGIsYykpfTtmdW5jdGlvbiBpZChhLGIpe3JldHVyblwidGV4dFwiPT1iP2EuYi5yZW1vdmUoMCxJbmZpbml0eSk6aGQoYSxiLGEuR2IuYmluZChhLGIsMCxhLkYuZHVyYXRpb24pKX1cbmZ1bmN0aW9uIGpkKGEsYixjKXtyZXR1cm5cInRleHRcIj09Yj8oYS5iLmg9YyxQcm9taXNlLnJlc29sdmUoKSk6aGQoYSxiLGEuUGMuYmluZChhLGIsYykpfWZ1bmN0aW9uIGtkKGEsYixjKXtyZXR1cm5cInRleHRcIj09Yj8oYS5iLmY9YyxQcm9taXNlLnJlc29sdmUoKSk6UHJvbWlzZS5hbGwoW2hkKGEsYixhLlBiLmJpbmQoYSxiKSksaGQoYSxiLGEuTmMuYmluZChhLGIsYykpXSl9ay5lbmRPZlN0cmVhbT1mdW5jdGlvbihhKXtyZXR1cm4gbGQodGhpcyxmdW5jdGlvbigpe2E/dGhpcy5GLmVuZE9mU3RyZWFtKGEpOnRoaXMuRi5lbmRPZlN0cmVhbSgpfS5iaW5kKHRoaXMpKX07ay5BYT1mdW5jdGlvbihhKXtyZXR1cm4gbGQodGhpcyxmdW5jdGlvbigpe3RoaXMuRi5kdXJhdGlvbj1hfS5iaW5kKHRoaXMpKX07ay5lYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLkYuZHVyYXRpb259O2suWmM9ZnVuY3Rpb24oYSxiKXt0aGlzLmNbYV0uYXBwZW5kQnVmZmVyKGIpfTtcbmsuR2I9ZnVuY3Rpb24oYSxiLGMpe2M8PWI/dGhpcy54YShhKTp0aGlzLmNbYV0ucmVtb3ZlKGIsYyl9O2suUGI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jW2FdLmFwcGVuZFdpbmRvd0VuZDt0aGlzLmNbYV0uYWJvcnQoKTt0aGlzLmNbYV0uYXBwZW5kV2luZG93RW5kPWI7dGhpcy54YShhKX07ay5ZYj1mdW5jdGlvbihhKXt0aGlzLmYuY3VycmVudFRpbWUtPS4wMDE7dGhpcy54YShhKX07ay5QYz1mdW5jdGlvbihhLGIpe3RoaXMuY1thXS50aW1lc3RhbXBPZmZzZXQ9Yjt0aGlzLnhhKGEpfTtrLk5jPWZ1bmN0aW9uKGEsYil7dGhpcy5jW2FdLmFwcGVuZFdpbmRvd0VuZD1iKy4wNDt0aGlzLnhhKGEpfTtrLiRjPWZ1bmN0aW9uKGEpe3RoaXMuYVthXVswXS5wLnJlamVjdChuZXcgdigzLDMwMTQsdGhpcy5mLmVycm9yP3RoaXMuZi5lcnJvci5jb2RlOjApKX07ay54YT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmFbYV1bMF07YiYmKGIucC5yZXNvbHZlKCksbmQodGhpcyxhKSl9O1xuZnVuY3Rpb24gaGQoYSxiLGMpe2lmKGEuaClyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtjPXtzdGFydDpjLHA6bmV3IHd9O2EuYVtiXS5wdXNoKGMpO2lmKDE9PWEuYVtiXS5sZW5ndGgpdHJ5e2Muc3RhcnQoKX1jYXRjaChkKXtcIlF1b3RhRXhjZWVkZWRFcnJvclwiPT1kLm5hbWU/Yy5wLnJlamVjdChuZXcgdigzLDMwMTcsYikpOmMucC5yZWplY3QobmV3IHYoMywzMDE1LGQpKSxuZChhLGIpfXJldHVybiBjLnB9XG5mdW5jdGlvbiBsZChhLGIpe2lmKGEuaClyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTt2YXIgYz1bXSxkO2ZvcihkIGluIGEuYyl7dmFyIGU9bmV3IHcsZj17c3RhcnQ6ZnVuY3Rpb24oYSl7YS5yZXNvbHZlKCl9LmJpbmQobnVsbCxlKSxwOmV9O2EuYVtkXS5wdXNoKGYpO2MucHVzaChlKTsxPT1hLmFbZF0ubGVuZ3RoJiZmLnN0YXJ0KCl9cmV0dXJuIFByb21pc2UuYWxsKGMpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYSxjO3RyeXtiKCl9Y2F0Y2gobCl7Yz1Qcm9taXNlLnJlamVjdChuZXcgdigzLDMwMTUsbCkpfWZvcihhIGluIHRoaXMuYyluZCh0aGlzLGEpO3JldHVybiBjfS5iaW5kKGEpLGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KCl9LmJpbmQoYSkpfWZ1bmN0aW9uIG5kKGEsYil7YS5hW2JdLnNoaWZ0KCk7dmFyIGM9YS5hW2JdWzBdO2lmKGMpdHJ5e2Muc3RhcnQoKX1jYXRjaChkKXtjLnAucmVqZWN0KG5ldyB2KDMsMzAxNSxkKSksbmQoYSxiKX19O2Z1bmN0aW9uIG9kKGEsYixjKXt2YXIgZD0hMTthLnN0cmVhbVNldHMuZm9yRWFjaChmdW5jdGlvbihhKXthLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgZj1lLmFsbG93ZWRCeUFwcGxpY2F0aW9uO2UuYWxsb3dlZEJ5QXBwbGljYXRpb249ITA7aWYoXCJ2aWRlb1wiPT1hLnR5cGUpe2lmKGUud2lkdGg8Yi5taW5XaWR0aHx8ZS53aWR0aD5iLm1heFdpZHRofHxlLndpZHRoPmMud2lkdGh8fGUuaGVpZ2h0PGIubWluSGVpZ2h0fHxlLmhlaWdodD5iLm1heEhlaWdodHx8ZS5oZWlnaHQ+Yy5oZWlnaHR8fGUud2lkdGgqZS5oZWlnaHQ8Yi5taW5QaXhlbHN8fGUud2lkdGgqZS5oZWlnaHQ+Yi5tYXhQaXhlbHN8fGUuYmFuZHdpZHRoPGIubWluVmlkZW9CYW5kd2lkdGh8fGUuYmFuZHdpZHRoPmIubWF4VmlkZW9CYW5kd2lkdGgpZS5hbGxvd2VkQnlBcHBsaWNhdGlvbj0hMX1lbHNlXCJhdWRpb1wiPT1hLnR5cGUmJihlLmJhbmR3aWR0aDxiLm1pbkF1ZGlvQmFuZHdpZHRofHxlLmJhbmR3aWR0aD5cbmIubWF4QXVkaW9CYW5kd2lkdGgpJiYoZS5hbGxvd2VkQnlBcHBsaWNhdGlvbj0hMSk7ZiE9ZS5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmKGQ9ITApfSl9KTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHBkKGEsYixjKXt2YXIgZD1cIlwiLGU9bnVsbDthJiZhLkImJihkPWEua2V5U3lzdGVtKCksZT1hLnMpO2ZvcihhPTA7YTxjLnN0cmVhbVNldHMubGVuZ3RoOysrYSl7dmFyIGY9Yy5zdHJlYW1TZXRzW2FdO2lmKGQmJmYuZHJtSW5mb3MubGVuZ3RoJiYhZi5kcm1JbmZvcy5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhLmtleVN5c3RlbT09ZH0pKWMuc3RyZWFtU2V0cy5zcGxpY2UoYSwxKSwtLWE7ZWxzZXtmb3IodmFyIGc9YltmLnR5cGVdLGg9MDtoPGYuc3RyZWFtcy5sZW5ndGg7KytoKXt2YXIgbD1mLnN0cmVhbXNbaF0sbj1xZChsLm1pbWVUeXBlLGwuY29kZWNzKTtSW25dfHxNZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQobik/ZSYmbC5lbmNyeXB0ZWQmJjA+ZS5pbmRleE9mKG4pPyhmLnN0cmVhbXMuc3BsaWNlKGgsMSksLS1oKTohZ3x8bC5taW1lVHlwZT09Zy5taW1lVHlwZSYmbC5jb2RlY3Muc3BsaXQoXCIuXCIpWzBdPT1nLmNvZGVjcy5zcGxpdChcIi5cIilbMF18fFxuKGYuc3RyZWFtcy5zcGxpY2UoaCwxKSwtLWgpOihmLnN0cmVhbXMuc3BsaWNlKGgsMSksLS1oKX1mLnN0cmVhbXMubGVuZ3RofHwoYy5zdHJlYW1TZXRzLnNwbGljZShhLDEpLC0tYSl9fX1mdW5jdGlvbiByZChhLGIpe3JldHVybiBhLnN0cmVhbVNldHMubWFwKGZ1bmN0aW9uKGEpe3ZhciBjPWI/YlthLnR5cGVdOm51bGw7cmV0dXJuIGEuc3RyZWFtcy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYWxsb3dlZEJ5QXBwbGljYXRpb24mJmEuYWxsb3dlZEJ5S2V5U3lzdGVtfSkubWFwKGZ1bmN0aW9uKGIpe3JldHVybntpZDpiLmlkLGFjdGl2ZTpjPT1iLHR5cGU6YS50eXBlLGJhbmR3aWR0aDpiLmJhbmR3aWR0aCxsYW5ndWFnZTphLmxhbmd1YWdlLGtpbmQ6Yi5raW5kfHxudWxsLHdpZHRoOmIud2lkdGh8fG51bGwsaGVpZ2h0OmIuaGVpZ2h0fHxudWxsLGZyYW1lUmF0ZTpiLmZyYW1lUmF0ZXx8dm9pZCAwLGNvZGVjczpiLmNvZGVjc3x8bnVsbH19KX0pLnJlZHVjZShCLFtdKX1cbmZ1bmN0aW9uIHNkKGEsYil7Zm9yKHZhciBjPTA7YzxhLnN0cmVhbVNldHMubGVuZ3RoO2MrKylmb3IodmFyIGQ9YS5zdHJlYW1TZXRzW2NdLGU9MDtlPGQuc3RyZWFtcy5sZW5ndGg7ZSsrKXt2YXIgZj1kLnN0cmVhbXNbZV07aWYoZi5pZD09Yi5pZClyZXR1cm57c3RyZWFtOmYsYmQ6ZH19cmV0dXJuIG51bGx9ZnVuY3Rpb24gdGQoYSl7cmV0dXJuIGEuc3RyZWFtcy5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhLmFsbG93ZWRCeUFwcGxpY2F0aW9uJiZhLmFsbG93ZWRCeUtleVN5c3RlbX0pfVxuZnVuY3Rpb24gdWQoYSxiLGMpe3ZhciBkPXt9O2Euc3RyZWFtU2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGEpeyF0ZChhKXx8YS50eXBlIGluIGR8fChkW2EudHlwZV09YSl9KTt2YXIgZT0wO2Euc3RyZWFtU2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2lmKHRkKGEpJiZcInZpZGVvXCI9PWEudHlwZSl7dmFyIGI9dmQoYSk7Yj5lPyhlPWIsZC52aWRlbz1hKTpiPT1lJiZ3ZChhKTx3ZChkLnZpZGVvKSYmKGQudmlkZW89YSl9fSk7YS5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYSl7dGQoYSkmJmEucHJpbWFyeSYmKGRbYS50eXBlXS5wcmltYXJ5P3dkKGEpPHdkKGRbYS50eXBlXSkmJihkW2EudHlwZV09YSk6ZFthLnR5cGVdPWEpfSk7W0RjLENjLDBdLmZvckVhY2goZnVuY3Rpb24oZSl7YS5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYSl7aWYodGQoYSkpe3ZhciBmO1wiYXVkaW9cIj09YS50eXBlP2Y9Yi5wcmVmZXJyZWRBdWRpb0xhbmd1YWdlOlwidGV4dFwiPT1hLnR5cGUmJihmPWIucHJlZmVycmVkVGV4dExhbmd1YWdlKTtcbmlmKGYpe2Y9RWMoZik7dmFyIGc9RWMoYS5sYW5ndWFnZSk7QmMoZSxmLGcpJiYoYS5sYW5ndWFnZT09ZFthLnR5cGVdLmxhbmd1YWdlP3dkKGEpPHdkKGRbYS50eXBlXSkmJihkW2EudHlwZV09YSk6ZFthLnR5cGVdPWEsYyYmKGNbYS50eXBlXT0hMCkpfX19KX0pO3JldHVybiBkfWZ1bmN0aW9uIHdkKGEpe3ZhciBiPTA7aWYoIWF8fDE+YS5zdHJlYW1zLmxlbmd0aClyZXR1cm4gYjthLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihhKXtiKz1hLmJhbmR3aWR0aH0pO3JldHVybiBiL2Euc3RyZWFtcy5sZW5ndGh9ZnVuY3Rpb24gdmQoYSl7dmFyIGI9MDtpZighYSlyZXR1cm4gYjthLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihhKXthLmhlaWdodD5iJiYoYj1hLmhlaWdodCl9KTtyZXR1cm4gYn1mdW5jdGlvbiBxZChhLGIpe3ZhciBjPWE7YiYmKGMrPSc7IGNvZGVjcz1cIicrYisnXCInKTtyZXR1cm4gY307ZnVuY3Rpb24geGQoKXt0aGlzLm09dGhpcy5sPXRoaXMuaj10aGlzLmM9dGhpcy5hPW51bGw7dGhpcy5nPVtdO3RoaXMuYj1udWxsO3RoaXMuaD1bXTt0aGlzLnY9MTt0aGlzLmk9e307dGhpcy5zPTA7dGhpcy5mPW51bGw7dGhpcy5MYT10aGlzLkxhLmJpbmQodGhpcyl9bShcInNoYWthLmRhc2guRGFzaFBhcnNlclwiLHhkKTtrPXhkLnByb3RvdHlwZTtrLmNvbmZpZ3VyZT1mdW5jdGlvbihhKXt0aGlzLmM9YX07ay5zdGFydD1mdW5jdGlvbihhLGIsYyxkLGUpe3RoaXMuZz1bYV07dGhpcy5hPWI7dGhpcy5qPWM7dGhpcy5sPWQ7dGhpcy5tPWU7cmV0dXJuIHlkKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmEmJnpkKHRoaXMsMCk7cmV0dXJuIHRoaXMuYn0uYmluZCh0aGlzKSl9O1xuay5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5hJiZ0aGlzLmEuT2IodGhpcy5MYSk7dGhpcy5jPXRoaXMubT10aGlzLmw9dGhpcy5qPXRoaXMuYT1udWxsO3RoaXMuZz1bXTt0aGlzLmI9bnVsbDt0aGlzLmg9W107dGhpcy5pPXt9O251bGwhPXRoaXMuZiYmKHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5mKSx0aGlzLmY9bnVsbCk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtmdW5jdGlvbiB5ZChhKXtyZXR1cm4gYS5hLnJlcXVlc3QoMCxyYyhhLmcsYS5jLnJldHJ5UGFyYW1ldGVycykpLnRoZW4oZnVuY3Rpb24oYSl7aWYodGhpcy5hKXJldHVybiBBZCh0aGlzLGEuZGF0YSxhLnVyaSl9LmJpbmQoYSkpfVxuZnVuY3Rpb24gQWQoYSxiLGMpe3ZhciBkPUViKGIpLGU9bmV3IERPTVBhcnNlcixmPW51bGw7Yj1udWxsO3RyeXtmPWUucGFyc2VGcm9tU3RyaW5nKGQsXCJ0ZXh0L3htbFwiKX1jYXRjaChYKXt9ZiYmXCJNUERcIj09Zi5kb2N1bWVudEVsZW1lbnQudGFnTmFtZSYmKGI9Zi5kb2N1bWVudEVsZW1lbnQpO2lmKCFiKXRocm93IG5ldyB2KDQsNDAwMSk7Yz1bY107ZD1HKGIsXCJMb2NhdGlvblwiKS5tYXAoV2EpLmZpbHRlcihLYSk7MDxkLmxlbmd0aCYmKGM9YS5nPWQpO2Q9RyhiLFwiQmFzZVVSTFwiKS5tYXAoV2EpO2M9SyhjLGQpO3ZhciBnPUgoYixcIm1pbkJ1ZmZlclRpbWVcIixJKTthLnM9SChiLFwibWluaW11bVVwZGF0ZVBlcmlvZFwiLEksLTEpO3ZhciBoPUgoYixcImF2YWlsYWJpbGl0eVN0YXJ0VGltZVwiLFhhKSxkPUgoYixcInRpbWVTaGlmdEJ1ZmZlckRlcHRoXCIsSSksbD1IKGIsXCJzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheVwiLEkpLGU9SChiLFwibWF4U2VnbWVudER1cmF0aW9uXCIsSSksZj1iLmdldEF0dHJpYnV0ZShcInR5cGVcIil8fFxuXCJzdGF0aWNcIixuO2lmKGEuYiluPWEuYi5wcmVzZW50YXRpb25UaW1lbGluZTtlbHNle3ZhciByPU1hdGgubWF4KDEwLDEuNSpnKTtuPW5ldyBRKGgsbnVsbCE9bD9sOnIpfXZhciBoPUJkKGEse1NhOlwic3RhdGljXCIhPWYscHJlc2VudGF0aW9uVGltZWxpbmU6bixMOm51bGwsSTpudWxsLFI6bnVsbCx1Om51bGwsYmFuZHdpZHRoOnZvaWQgMCx0YjohMX0sYyxiKSxsPWguZHVyYXRpb24sdT1oLnBlcmlvZHM7bi5NYihcInN0YXRpY1wiPT1mKTtuLkFhKGx8fEluZmluaXR5KTtuLkxiKG51bGwhPWQ/ZDpJbmZpbml0eSk7bi4kYShlfHwxKTtpZihhLmIpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO2I9RyhiLFwiVVRDVGltaW5nXCIpO2Q9bi5TKCk7aC5jYSYmYS5hLkViKGEuTGEpO3JldHVybiBDZChhLGMsYixkKS50aGVuKGZ1bmN0aW9uKGEpe3RoaXMuYSYmKG4uS2IoYSksdGhpcy5iPXtwcmVzZW50YXRpb25UaW1lbGluZTpuLHBlcmlvZHM6dSxvZmZsaW5lU2Vzc2lvbklkczpbXSxtaW5CdWZmZXJUaW1lOmd8fFxuMH0pfS5iaW5kKGEpKX1cbmZ1bmN0aW9uIEJkKGEsYixjLGQpe3ZhciBlPUgoZCxcIm1lZGlhUHJlc2VudGF0aW9uRHVyYXRpb25cIixJKSxmPSExLGc9W10saD0wO2Q9RyhkLFwiUGVyaW9kXCIpO2Zvcih2YXIgbD0wO2w8ZC5sZW5ndGg7bCsrKXt2YXIgbj1kW2xdLGg9SChuLFwic3RhcnRcIixJLGgpLHI9SChuLFwiZHVyYXRpb25cIixJKTtpZihudWxsPT1yKWlmKGwrMSE9ZC5sZW5ndGgpe3ZhciB1PUgoZFtsKzFdLFwic3RhcnRcIixJKTtudWxsIT11JiYocj11LWgpfWVsc2UgbnVsbCE9ZSYmKHI9ZS1oKTt1PXtzdGFydDpoLGR1cmF0aW9uOnIsbm9kZTpuLGNhOiExfTtuPURkKGEsYixjLHUpO2cucHVzaChuKTtmPWZ8fHUuY2E7dT1iLkwuaWQ7YS5oLmV2ZXJ5KExhKHUpKSYmKGEuaihuKSxhLmgucHVzaCh1KSxhLmImJmEuYi5wZXJpb2RzLnB1c2gobikpO2lmKG51bGw9PXIpe2g9bnVsbDticmVha31oKz1yfXJldHVybiBudWxsIT1lP3twZXJpb2RzOmcsZHVyYXRpb246ZSxjYTpmfTp7cGVyaW9kczpnLGR1cmF0aW9uOmgsXG5jYTpmfX1mdW5jdGlvbiBEZChhLGIsYyxkKXtiLkw9RWQoZC5ub2RlLG51bGwsYyk7Yi5JPWQ7Yi5MLmlkfHwoYi5MLmlkPVwiX19zaGFrYV9wZXJpb2RfXCIrZC5zdGFydCk7YT1HKGQubm9kZSxcIkFkYXB0YXRpb25TZXRcIikubWFwKGEuemMuYmluZChhLGIpKS5maWx0ZXIoS2EpO2I9YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuSGN9KS5yZWR1Y2UoQixbXSk7Yz1iLmZpbHRlcihNYSk7aWYoYi5sZW5ndGghPWMubGVuZ3RoKXRocm93IG5ldyB2KDQsNDAxOCk7aWYoIWEubGVuZ3RoKXRocm93IG5ldyB2KDQsNDAwNCk7Zm9yKGI9MDtiPGEubGVuZ3RoO2IrKylhW2JdLmNhJiYoZC5jYT0hMCk7YT1GZChhKTtyZXR1cm57c3RhcnRUaW1lOmQuc3RhcnQsc3RyZWFtU2V0czphfX1cbmsuemM9ZnVuY3Rpb24oYSxiKXthLlI9RWQoYixhLkwsbnVsbCk7dmFyIGM9ITEsZD1HKGIsXCJSb2xlXCIpLGU9dm9pZCAwO1widGV4dFwiPT1hLlIuY29udGVudFR5cGUmJihlPVwic3VidGl0bGVcIik7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBnPWRbZl0uZ2V0QXR0cmlidXRlKFwic2NoZW1lSWRVcmlcIik7aWYobnVsbD09Z3x8XCJ1cm46bXBlZzpkYXNoOnJvbGU6MjAxMVwiPT1nKXN3aXRjaChnPWRbZl0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIiksZyl7Y2FzZSBcIm1haW5cIjpjPSEwO2JyZWFrO2Nhc2UgXCJjYXB0aW9uXCI6Y2FzZSBcInN1YnRpdGxlXCI6ZT1nfX12YXIgZD1HZChiKSxoPVtdO0coYixcIlN1cHBsZW1lbnRhbFByb3BlcnR5XCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5nZXRBdHRyaWJ1dGUoXCJzY2hlbWVJZFVyaVwiKTsoXCJ1cm46bXBlZzpkYXNoOmFkYXB0YXRpb24tc2V0LXN3aXRjaGluZzoyMDE2XCI9PWJ8fFwiaHR0cDovL2Rhc2hpZi5vcmcvZ3VpZGVsaW5lcy9BZGFwdGF0aW9uU2V0U3dpdGNoaW5nXCI9PVxuYnx8XCJodHRwOi8vZGFzaGlmLm9yZy9kZXNjcmlwdG9yL0FkYXB0YXRpb25TZXRTd2l0Y2hpbmdcIj09YikmJihhPWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikpJiZoLnB1c2guYXBwbHkoaCxhLnNwbGl0KFwiLFwiKSl9KTt2YXIgbD1udWxsLG49ITE7RyhiLFwiRXNzZW50aWFsUHJvcGVydHlcIikuZm9yRWFjaChmdW5jdGlvbihhKXtcImh0dHA6Ly9kYXNoaWYub3JnL2d1aWRlbGluZXMvdHJpY2ttb2RlXCI9PWEuZ2V0QXR0cmlidXRlKFwic2NoZW1lSWRVcmlcIik/bD1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpOm49ITB9KTtpZihudWxsIT1sfHxuKXJldHVybiBudWxsO3ZhciBmPUcoYixcIkNvbnRlbnRQcm90ZWN0aW9uXCIpLGY9ZWIoZix0aGlzLmMuZGFzaC5jdXN0b21TY2hlbWUpLGc9RWMoYi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpfHxcInVuZFwiKSxyPUcoYixcIlJlcHJlc2VudGF0aW9uXCIpLGU9ci5tYXAodGhpcy5BYy5iaW5kKHRoaXMsYSxmLGUsZykpLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hIWF9KTtcbmlmKCFlLmxlbmd0aCl0aHJvdyBuZXcgdig0LDQwMDMpO2EuUi5jb250ZW50VHlwZXx8KGEuUi5jb250ZW50VHlwZT1IZChlWzBdLm1pbWVUeXBlLGVbMF0uY29kZWNzKSk7cj1yLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJpZFwiKX0pLmZpbHRlcihLYSk7cmV0dXJue2lkOmEuUi5pZHx8XCJfX2Zha2VfX1wiK3RoaXMudisrLGNvbnRlbnRUeXBlOmEuUi5jb250ZW50VHlwZSxsYW5ndWFnZTpnLGhjOmMsc3RyZWFtczplLGRybUluZm9zOmYuZHJtSW5mb3MsZGQ6aCxjYTpkLEhjOnJ9fTtmdW5jdGlvbiBHZChhKXtpZihWYShhLFwiSW5iYW5kRXZlbnRTdHJlYW1cIikpcmV0dXJuITA7YT1HKGEsXCJSZXByZXNlbnRhdGlvblwiKTt2YXIgYjtpZigwPGEubGVuZ3RoKWZvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWlmKGI9VmEoYVtjXSxcIkluYmFuZEV2ZW50U3RyZWFtXCIpKXJldHVybiEwO3JldHVybiExfVxuay5BYz1mdW5jdGlvbihhLGIsYyxkLGUpe2EudT1FZChlLGEuUixudWxsKTtpZighSWQoYS51KSlyZXR1cm4gbnVsbDthLmJhbmR3aWR0aD1IKGUsXCJiYW5kd2lkdGhcIiwkYSl8fHZvaWQgMDt2YXIgZjtmPXRoaXMuSWMuYmluZCh0aGlzKTtpZihhLnUuSWEpZj1kYyhhLGYpO2Vsc2UgaWYoYS51LiQpZj1nYyhhLHRoaXMuaSk7ZWxzZSBpZihhLnUuSmEpZj1rYyhhLGYsdGhpcy5pLCEhdGhpcy5iKTtlbHNle3ZhciBnPWEudS5OLGg9YS5JLmR1cmF0aW9ufHwwO2Y9e2NyZWF0ZVNlZ21lbnRJbmRleDpQcm9taXNlLnJlc29sdmUuYmluZChQcm9taXNlKSxmaW5kU2VnbWVudFBvc2l0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiAwPD1hJiZhPGg/MTpudWxsfSxnZXRTZWdtZW50UmVmZXJlbmNlOmZ1bmN0aW9uKGEpe3JldHVybiAxIT1hP251bGw6bmV3IEooMSwwLGgsZnVuY3Rpb24oKXtyZXR1cm4gZ30sMCxudWxsKX0saW5pdFNlZ21lbnRSZWZlcmVuY2U6bnVsbCxwcmVzZW50YXRpb25UaW1lT2Zmc2V0OjB9fWU9XG5HKGUsXCJDb250ZW50UHJvdGVjdGlvblwiKTtlPWliKGUsdGhpcy5jLmRhc2guY3VzdG9tU2NoZW1lLGIpO3JldHVybntpZDp0aGlzLnYrKyxjcmVhdGVTZWdtZW50SW5kZXg6Zi5jcmVhdGVTZWdtZW50SW5kZXgsZmluZFNlZ21lbnRQb3NpdGlvbjpmLmZpbmRTZWdtZW50UG9zaXRpb24sZ2V0U2VnbWVudFJlZmVyZW5jZTpmLmdldFNlZ21lbnRSZWZlcmVuY2UsaW5pdFNlZ21lbnRSZWZlcmVuY2U6Zi5pbml0U2VnbWVudFJlZmVyZW5jZSxwcmVzZW50YXRpb25UaW1lT2Zmc2V0OmYucHJlc2VudGF0aW9uVGltZU9mZnNldCxtaW1lVHlwZTphLnUubWltZVR5cGUsY29kZWNzOmEudS5jb2RlY3MsZnJhbWVSYXRlOmEudS5mcmFtZVJhdGUsYmFuZHdpZHRoOmEuYmFuZHdpZHRoLHdpZHRoOmEudS53aWR0aCxoZWlnaHQ6YS51LmhlaWdodCxraW5kOmMsZW5jcnlwdGVkOjA8Yi5kcm1JbmZvcy5sZW5ndGgsa2V5SWQ6ZSxsYW5ndWFnZTpkLGFsbG93ZWRCeUFwcGxpY2F0aW9uOiEwLGFsbG93ZWRCeUtleVN5c3RlbTohMH19O1xuay5ZYz1mdW5jdGlvbigpe3RoaXMuZj1udWxsO3ZhciBhPURhdGUubm93KCk7eWQodGhpcykudGhlbihmdW5jdGlvbigpe3RoaXMuYSYmemQodGhpcywoRGF0ZS5ub3coKS1hKS8xRTMpfS5iaW5kKHRoaXMpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3RoaXMubChhKTt0aGlzLmEmJnpkKHRoaXMsMCl9LmJpbmQodGhpcykpfTtmdW5jdGlvbiB6ZChhLGIpezA+YS5zfHwoYS5mPXdpbmRvdy5zZXRUaW1lb3V0KGEuWWMuYmluZChhKSwxRTMqTWF0aC5tYXgoTWF0aC5tYXgoMyxhLnMpLWIsMCkpKX1cbmZ1bmN0aW9uIEVkKGEsYixjKXtiPWJ8fHtjb250ZW50VHlwZTpcIlwiLG1pbWVUeXBlOlwiXCIsY29kZWNzOlwiXCIsZnJhbWVSYXRlOnZvaWQgMH07Yz1jfHxiLk47dmFyIGQ9RyhhLFwiQmFzZVVSTFwiKS5tYXAoV2EpLGU9YS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50VHlwZVwiKXx8Yi5jb250ZW50VHlwZSxmPWEuZ2V0QXR0cmlidXRlKFwibWltZVR5cGVcIil8fGIubWltZVR5cGUsZz1hLmdldEF0dHJpYnV0ZShcImNvZGVjc1wiKXx8Yi5jb2RlY3MsaD1IKGEsXCJmcmFtZVJhdGVcIixjYil8fGIuZnJhbWVSYXRlO2V8fChlPUhkKGYsZykpO3JldHVybntOOksoYyxkKSxJYTpWYShhLFwiU2VnbWVudEJhc2VcIil8fGIuSWEsJDpWYShhLFwiU2VnbWVudExpc3RcIil8fGIuJCxKYTpWYShhLFwiU2VnbWVudFRlbXBsYXRlXCIpfHxiLkphLHdpZHRoOkgoYSxcIndpZHRoXCIsYmIpfHxiLndpZHRoLGhlaWdodDpIKGEsXCJoZWlnaHRcIixiYil8fGIuaGVpZ2h0LGNvbnRlbnRUeXBlOmUsbWltZVR5cGU6Zixjb2RlY3M6ZyxmcmFtZVJhdGU6aCxcbmlkOmEuZ2V0QXR0cmlidXRlKFwiaWRcIil9fVxuZnVuY3Rpb24gRmQoYSl7dmFyIGI9e307YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2JbYS5pZF09W2FdfSk7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPWJbYS5pZF07YS5kZC5mb3JFYWNoKGZ1bmN0aW9uKGEpeyhhPWJbYV0pJiZhIT1jJiYoYy5wdXNoLmFwcGx5KGMsYSksYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2JbYS5pZF09Y30pKX0pfSk7dmFyIGM9W10sZD1bXTtGKGIpLmZvckVhY2goZnVuY3Rpb24oYSl7aWYoISgwPD1kLmluZGV4T2YoYSkpKXtkLnB1c2goYSk7dmFyIGI9bmV3IEJhO2EuZm9yRWFjaChmdW5jdGlvbihhKXtiLnB1c2goYS5jb250ZW50VHlwZXx8XCJcIixhKX0pO2Iua2V5cygpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGQ9bmV3IEJhO2IuZ2V0KGEpLmZvckVhY2goZnVuY3Rpb24oYSl7ZC5wdXNoKGEubGFuZ3VhZ2UsYSl9KTtkLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBlPWQuZ2V0KGIpO2I9e2xhbmd1YWdlOmIsdHlwZTphLHByaW1hcnk6ZS5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhLmhjfSksXG5kcm1JbmZvczplLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5kcm1JbmZvc30pLnJlZHVjZShCLFtdKSxzdHJlYW1zOmUubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnN0cmVhbXN9KS5yZWR1Y2UoQixbXSl9O2MucHVzaChiKX0pfSl9fSk7cmV0dXJuIGN9ZnVuY3Rpb24gSWQoYSl7dmFyIGI7Yj0wKyhhLklhPzE6MCk7Yis9YS4kPzE6MDtiKz1hLkphPzE6MDtpZighYilyZXR1cm5cInRleHRcIj09YS5jb250ZW50VHlwZXx8XCJhcHBsaWNhdGlvblwiPT1hLmNvbnRlbnRUeXBlPyEwOiExOzEhPWImJihhLklhJiYoYS4kPW51bGwpLGEuSmE9bnVsbCk7cmV0dXJuITB9XG5mdW5jdGlvbiBKZChhLGIsYyxkKXtiPUsoYixbY10pO2I9cmMoYixhLmMucmV0cnlQYXJhbWV0ZXJzKTtiLm1ldGhvZD1kO3JldHVybiBhLmEucmVxdWVzdCgwLGIpLnRoZW4oZnVuY3Rpb24oYSl7aWYoXCJIRUFEXCI9PWQpe2lmKCFhLmhlYWRlcnN8fCFhLmhlYWRlcnMuZGF0ZSlyZXR1cm4gMDthPWEuaGVhZGVycy5kYXRlfWVsc2UgYT1FYihhLmRhdGEpO2E9RGF0ZS5wYXJzZShhKTtyZXR1cm4gaXNOYU4oYSk/MDphLURhdGUubm93KCl9KX1cbmZ1bmN0aW9uIENkKGEsYixjLGQpe2M9Yy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJue3NjaGVtZTphLmdldEF0dHJpYnV0ZShcInNjaGVtZUlkVXJpXCIpLHZhbHVlOmEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9fSk7dmFyIGU9YS5jLmRhc2guY2xvY2tTeW5jVXJpO2QmJiFjLmxlbmd0aCYmZSYmYy5wdXNoKHtzY2hlbWU6XCJ1cm46bXBlZzpkYXNoOnV0YzpodHRwLWhlYWQ6MjAxNFwiLHZhbHVlOmV9KTtyZXR1cm4gSmEoYyxmdW5jdGlvbihhKXt2YXIgYz1hLnZhbHVlO3N3aXRjaChhLnNjaGVtZSl7Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOmh0dHAtaGVhZDoyMDE0XCI6Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOmh0dHAtaGVhZDoyMDEyXCI6cmV0dXJuIEpkKHRoaXMsYixjLFwiSEVBRFwiKTtjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC14c2RhdGU6MjAxNFwiOmNhc2UgXCJ1cm46bXBlZzpkYXNoOnV0YzpodHRwLWlzbzoyMDE0XCI6Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOmh0dHAteHNkYXRlOjIwMTJcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1pc286MjAxMlwiOnJldHVybiBKZCh0aGlzLFxuYixjLFwiR0VUXCIpO2Nhc2UgXCJ1cm46bXBlZzpkYXNoOnV0YzpkaXJlY3Q6MjAxNFwiOmNhc2UgXCJ1cm46bXBlZzpkYXNoOnV0YzpkaXJlY3Q6MjAxMlwiOnJldHVybiBhPURhdGUucGFyc2UoYyksaXNOYU4oYSk/MDphLURhdGUubm93KCk7Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOmh0dHAtbnRwOjIwMTRcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6bnRwOjIwMTRcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6c250cDoyMDE0XCI6cmV0dXJuIFByb21pc2UucmVqZWN0KCk7ZGVmYXVsdDpyZXR1cm4gUHJvbWlzZS5yZWplY3QoKX19LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtyZXR1cm4gMH0pfWsuSWM9ZnVuY3Rpb24oYSxiLGMpe2E9cmMoYSx0aGlzLmMucmV0cnlQYXJhbWV0ZXJzKTtudWxsIT1iJiYoYS5oZWFkZXJzLlJhbmdlPVwiYnl0ZXM9XCIrYitcIi1cIisobnVsbCE9Yz9jOlwiXCIpKTtyZXR1cm4gdGhpcy5hLnJlcXVlc3QoMSxhKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRhdGF9KX07XG5rLkxhPWZ1bmN0aW9uKGEsYil7aWYoMT09YSl7dmFyIGM9bmV3IEpiKG5ldyBEYXRhVmlldyhiLmRhdGEpKSxkPVNiKDE3MDE2NzE3ODMsYyk7aWYoLTEhPWQpe3ZhciBlPWMuYS04K2Q7TihjLDQpO2Q9UmIoYyk7aWYoXCJ1cm46bXBlZzpkYXNoOmV2ZW50OjIwMTJcIj09ZCl5ZCh0aGlzKTtlbHNle3ZhciBmPVJiKGMpLGc9TShjKSxoPU0oYyksbD1NKGMpLG49TShjKSxjPVFiKGMsZS1jLmEpO3RoaXMubShuZXcgdChcImVtc2dcIix7ZGV0YWlsOntzY2hlbWVJZFVyaTpkLHZhbHVlOmYsdGltZXNjYWxlOmcscHJlc2VudGF0aW9uVGltZURlbHRhOmgsZXZlbnREdXJhdGlvbjpsLGlkOm4sbWVzc2FnZURhdGE6Y319KSl9fX19O2Z1bmN0aW9uIEhkKGEsYil7cmV0dXJuIFJbcWQoYSxiKV0/XCJ0ZXh0XCI6YS5zcGxpdChcIi9cIilbMF19dGMubXBkPXhkO3NjW1wiYXBwbGljYXRpb24vZGFzaCt4bWxcIl09eGQ7ZnVuY3Rpb24gUyhhLGIpe3ZhciBjPUViKGEpLGQ9W10sZT1uZXcgRE9NUGFyc2VyLGY9bnVsbDt0cnl7Zj1lLnBhcnNlRnJvbVN0cmluZyhjLFwidGV4dC94bWxcIil9Y2F0Y2gocil7dGhyb3cgbmV3IHYoMiwyMDA1KTt9aWYoZil7dmFyIGcsaCxsO2lmKGU9Zi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInR0XCIpWzBdKWY9ZS5nZXRBdHRyaWJ1dGUoXCJ0dHA6ZnJhbWVSYXRlXCIpLGc9ZS5nZXRBdHRyaWJ1dGUoXCJ0dHA6c3ViRnJhbWVSYXRlXCIpLGg9ZS5nZXRBdHRyaWJ1dGUoXCJ0dHA6ZnJhbWVSYXRlTXVsdGlwbGllclwiKSxsPWUuZ2V0QXR0cmlidXRlKFwidHRwOnRpY2tSYXRlXCIpLGM9ZS5nZXRBdHRyaWJ1dGUoXCJ4bWw6c3BhY2VcIil8fFwiZGVmYXVsdFwiO2Vsc2UgdGhyb3cgbmV3IHYoMiwyMDA2KTtpZihcImRlZmF1bHRcIiE9YyYmXCJwcmVzZXJ2ZVwiIT1jKXRocm93IG5ldyB2KDIsMjAwNSk7Yz1cImRlZmF1bHRcIj09YztmPW5ldyBLZChmLGcsaCxsKTtnPVMuYihlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGluZ1wiKVswXSk7XG5oPVMuYihlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGF5b3V0XCIpWzBdKTtlPVMuYihlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXSk7Zm9yKGw9MDtsPGUubGVuZ3RoO2wrKyl7dmFyIG49Uy5jKGVbbF0sYixmLGcsaCxjKTtuJiZkLnB1c2gobil9fXJldHVybiBkfW0oXCJzaGFrYS5tZWRpYS5UdG1sVGV4dFBhcnNlclwiLFMpO1MubT0vXihcXGR7Mix9KTooXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KVxcLj8oXFxkKyk/JC87Uy52PS9eKD86KFxcZHsyLH0pOik/KFxcZHsyfSk6KFxcZHsyfSkkLztTLnM9L14oPzooXFxkezIsfSk6KT8oXFxkezJ9KTooXFxkezJ9XFwuXFxkezIsfSkkLztTLkE9L14oXFxkKlxcLj9cXGQqKWYkLztTLkM9L14oXFxkKlxcLj9cXGQqKXQkLztTLkI9L14oPzooXFxkKlxcLj9cXGQqKWgpPyg/OihcXGQqXFwuP1xcZCopbSk/KD86KFxcZCpcXC4/XFxkKilzKT8oPzooXFxkKlxcLj9cXGQqKW1zKT8kLztTLmw9L14oXFxkezEsMn18MTAwKSUgKFxcZHsxLDJ9fDEwMCklJC87XG5TLkthPXtsZWZ0Olwic3RhcnRcIixjZW50ZXI6XCJjZW50ZXJcIixyaWdodDpcImVuZFwiLHN0YXJ0Olwic3RhcnRcIixlbmQ6XCJlbmRcIn07Uy5SYT17bGVmdDpcImxpbmUtbGVmdFwiLGNlbnRlcjpcImNlbnRlclwiLHJpZ2h0OlwibGluZS1yaWdodFwifTtTLmI9ZnVuY3Rpb24oYSl7dmFyIGI9W107aWYoIWEpcmV0dXJuIGI7Zm9yKHZhciBjPWEuY2hpbGROb2RlcyxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPVwic3BhblwiPT1jW2RdLm5vZGVOYW1lJiZcInBcIj09YS5ub2RlTmFtZTtjW2RdLm5vZGVUeXBlIT1Ob2RlLkVMRU1FTlRfTk9ERXx8XCJiclwiPT1jW2RdLm5vZGVOYW1lfHxlfHwoZT1TLmIoY1tkXSksYj1iLmNvbmNhdChlKSl9Yi5sZW5ndGh8fGIucHVzaChhKTtyZXR1cm4gYn07XG5TLmg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9YS5jaGlsZE5vZGVzLGQ9MDtkPGMubGVuZ3RoO2QrKylpZihcImJyXCI9PWNbZF0ubm9kZU5hbWUmJjA8ZCljW2QtMV0udGV4dENvbnRlbnQrPVwiXFxuXCI7ZWxzZSBpZigwPGNbZF0uY2hpbGROb2Rlcy5sZW5ndGgpUy5oKGNbZF0sYik7ZWxzZSBpZihiKXt2YXIgZT1jW2RdLnRleHRDb250ZW50LnRyaW0oKSxlPWUucmVwbGFjZSgvXFxzKy9nLFwiIFwiKTtjW2RdLnRleHRDb250ZW50PWV9fTtcblMuYz1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoIWEuaGFzQXR0cmlidXRlKFwiYmVnaW5cIikmJiFhLmhhc0F0dHJpYnV0ZShcImVuZFwiKSYmL15cXHMqJC8udGVzdChhLnRleHRDb250ZW50KSlyZXR1cm4gbnVsbDtTLmgoYSxmKTtmPVMuYShhLmdldEF0dHJpYnV0ZShcImJlZ2luXCIpLGMpO3ZhciBnPVMuYShhLmdldEF0dHJpYnV0ZShcImVuZFwiKSxjKTtjPVMuYShhLmdldEF0dHJpYnV0ZShcImR1clwiKSxjKTt2YXIgaD1hLnRleHRDb250ZW50O251bGw9PWcmJm51bGwhPWMmJihnPWYrYyk7aWYobnVsbD09Znx8bnVsbD09Zyl0aHJvdyBuZXcgdigyLDIwMDEpO2I9eGMoZitiLGcrYixoKTtpZighYilyZXR1cm4gbnVsbDtlPVMuaShhLFwicmVnaW9uXCIsZSk7Uy5xYShiLGEsZSxkKTtyZXR1cm4gYn07XG5TLnFhPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGY9Uy5mKGIsYyxkLFwidHRzOmV4dGVudFwiKTtmJiYoZT1TLmwuZXhlYyhmKSkmJihhLnNpemU9TnVtYmVyKGVbMV0pKTtlPVMuZihiLGMsZCxcInR0czp3cml0aW5nTW9kZVwiKTtmPSEwO1widGJcIj09ZXx8XCJ0YmxyXCI9PWU/YS52ZXJ0aWNhbD1cImxyXCI6XCJ0YnJsXCI9PWU/YS52ZXJ0aWNhbD1cInJsXCI6Zj0hMTtpZihlPVMuZihiLGMsZCxcInR0czpvcmlnaW5cIikpaWYoZT1TLmwuZXhlYyhlKSlmPyhhLnBvc2l0aW9uPU51bWJlcihlWzJdKSxhLmxpbmU9TnVtYmVyKGVbMV0pKTooYS5wb3NpdGlvbj1OdW1iZXIoZVsxXSksYS5saW5lPU51bWJlcihlWzJdKSksYS5zbmFwVG9MaW5lcz0hMTtpZihiPVMuZihiLGMsZCxcInR0czp0ZXh0QWxpZ25cIikpYS5hbGlnbj1iLFwiY2VudGVyXCI9PWImJihcImNlbnRlclwiIT1hLmFsaWduJiYoYS5hbGlnbj1cIm1pZGRsZVwiKSxhLnBvc2l0aW9uPVwiYXV0b1wiKSxhLnBvc2l0aW9uQWxpZ249Uy5SYVtiXSxhLmxpbmVBbGlnbj1cblMuS2FbYl19O1MuZj1mdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGU9Uy5iKGIpLGY9MDtmPGUubGVuZ3RoO2YrKyl7dmFyIGc9ZVtmXS5nZXRBdHRyaWJ1dGUoZCk7aWYoZylyZXR1cm4gZ31lPVMuaTtyZXR1cm4oYT1lKGIsXCJzdHlsZVwiLGMpfHxlKGEsXCJzdHlsZVwiLGMpKT9hLmdldEF0dHJpYnV0ZShkKTpudWxsfTtTLmk9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhfHwxPmMubGVuZ3RoKXJldHVybiBudWxsO3ZhciBkPW51bGw7aWYoYT1TLnJhKGEsYikpZm9yKGI9MDtiPGMubGVuZ3RoO2IrKylpZihjW2JdLmdldEF0dHJpYnV0ZShcInhtbDppZFwiKT09YSl7ZD1jW2JdO2JyZWFrfXJldHVybiBkfTtTLnJhPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPW51bGw7YSYmIShjPWEuZ2V0QXR0cmlidXRlKGIpKTspe3ZhciBkPWEucGFyZW50Tm9kZTtpZihkIGluc3RhbmNlb2YgRWxlbWVudClhPWQ7ZWxzZSBicmVha31yZXR1cm4gY307XG5TLmE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1udWxsO1MubS50ZXN0KGEpP2M9Uy5zYShiLGEpOlMudi50ZXN0KGEpP2M9Uy5nKFMudixhKTpTLnMudGVzdChhKT9jPVMuZyhTLnMsYSk6Uy5BLnRlc3QoYSk/Yz1TLkNhKGIsYSk6Uy5DLnRlc3QoYSk/Yz1TLkRhKGIsYSk6Uy5CLnRlc3QoYSkmJihjPVMuZyhTLkIsYSkpO3JldHVybiBjfTtTLkNhPWZ1bmN0aW9uKGEsYil7dmFyIGM9Uy5BLmV4ZWMoYik7cmV0dXJuIE51bWJlcihjWzFdKS9hLmZyYW1lUmF0ZX07Uy5EYT1mdW5jdGlvbihhLGIpe3ZhciBjPVMuQy5leGVjKGIpO3JldHVybiBOdW1iZXIoY1sxXSkvYS5hfTtTLnNhPWZ1bmN0aW9uKGEsYil7dmFyIGM9Uy5tLmV4ZWMoYiksZD1OdW1iZXIoY1sxXSksZT1OdW1iZXIoY1syXSksZj1OdW1iZXIoY1szXSksZz1OdW1iZXIoY1s0XSksZz1nKyhOdW1iZXIoY1s1XSl8fDApL2EuYixmPWYrZy9hLmZyYW1lUmF0ZTtyZXR1cm4gZis2MCplKzM2MDAqZH07XG5TLmc9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmV4ZWMoYik7cmV0dXJuIGMmJlwiXCIhPWNbMF0/KE51bWJlcihjWzRdKXx8MCkvMUUzKyhOdW1iZXIoY1szXSl8fDApKzYwKihOdW1iZXIoY1syXSl8fDApKzM2MDAqKE51bWJlcihjWzFdKXx8MCk6bnVsbH07ZnVuY3Rpb24gS2QoYSxiLGMsZCl7dGhpcy5mcmFtZVJhdGU9TnVtYmVyKGEpfHwzMDt0aGlzLmI9TnVtYmVyKGIpfHwxO3RoaXMuYT1OdW1iZXIoZCk7dGhpcy5hfHwodGhpcy5hPWE/dGhpcy5mcmFtZVJhdGUqdGhpcy5iOjEpO2MmJihhPS9eKFxcZCspIChcXGQrKSQvZy5leGVjKGMpKSYmKHRoaXMuZnJhbWVSYXRlKj1hWzFdL2FbMl0pfVJbXCJhcHBsaWNhdGlvbi90dG1sK3htbFwiXT1TO2Z1bmN0aW9uIExkKGEsYil7dmFyIGM9bmV3IEpiKG5ldyBEYXRhVmlldyhhKSksZD1TYigxODM1Mjk1MDkyLGMpO2lmKC0xIT1kKXJldHVybiBTKFFiKGMsZC04KS5idWZmZXIsYik7aWYoLTEhPVRiKGEsTGQuVSkpcmV0dXJuW107dGhyb3cgbmV3IHYoMiwyMDA3KTt9bShcInNoYWthLm1lZGlhLk1wNFR0bWxQYXJzZXJcIixMZCk7TGQuVT0xOTM3MDEwODAwO1JbJ2FwcGxpY2F0aW9uL21wNDsgY29kZWNzPVwic3RwcFwiJ109TGQ7ZnVuY3Rpb24gTWQoYSl7dGhpcy5iPWE7dGhpcy5hPTB9ZnVuY3Rpb24gTmQoYSxiKXt2YXIgYztiLmxhc3RJbmRleD1hLmE7Yz0oYz1iLmV4ZWMoYS5iKSk/e3Bvc2l0aW9uOmMuaW5kZXgsbGVuZ3RoOmNbMF0ubGVuZ3RoLEtjOmN9Om51bGw7aWYoYS5hPT1hLmIubGVuZ3RofHwhY3x8Yy5wb3NpdGlvbiE9YS5hKXJldHVybiBudWxsO2EuYSs9Yy5sZW5ndGg7cmV0dXJuIGMuS2N9ZnVuY3Rpb24gT2QoYSl7cmV0dXJuIGEuYT09YS5iLmxlbmd0aD9udWxsOihhPU5kKGEsL1teIFxcdFxcbl0qL2dtKSk/YVswXTpudWxsfTtmdW5jdGlvbiBUKGEsYixjLGQsZSl7YT1FYihhKTthPWEucmVwbGFjZSgvXFxyXFxufFxccig/PVteXFxuXXwkKS9nbSxcIlxcblwiKTthPWEuc3BsaXQoL1xcbnsyLH0vbSk7aWYoIS9eV0VCVlRUKCR8WyBcXHRcXG5dKS9tLnRlc3QoYVswXSkpdGhyb3cgbmV3IHYoMiwyRTMpO2Q9W107Zm9yKHZhciBmPTE7ZjxhLmxlbmd0aDtmKyspe3ZhciBnPWFbZl0uc3BsaXQoXCJcXG5cIik7KGc9VC5jKGcsYixjLGUpKSYmZC5wdXNoKGcpfXJldHVybiBkfW0oXCJzaGFrYS5tZWRpYS5WdHRUZXh0UGFyc2VyXCIsVCk7XG5ULmM9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoMT09YS5sZW5ndGgmJiFhWzBdfHwvXk5PVEUoJHxbIFxcdF0pLy50ZXN0KGFbMF0pKXJldHVybiBudWxsO3ZhciBlPW51bGw7MD5hWzBdLmluZGV4T2YoXCItLVxceDNlXCIpJiYoZT1hWzBdLGEuc3BsaWNlKDAsMSkpO3ZhciBmPW5ldyBNZChhWzBdKSxnPVQuYShmKSxoPU5kKGYsL1sgXFx0XSstLVxceDNlWyBcXHRdKy9nKSxsPVQuYShmKTtpZihudWxsPT1nfHwhaHx8bnVsbD09bCl0aHJvdyBuZXcgdigyLDIwMDEpO2Q/KGcrPWMsbCs9Yyk6KGcrPWIsbCs9Yik7YT14YyhnLGwsYS5zbGljZSgxKS5qb2luKFwiXFxuXCIpLnRyaW0oKSk7aWYoIWEpcmV0dXJuIG51bGw7TmQoZiwvWyBcXHRdKy9nbSk7Zm9yKGI9T2QoZik7YjspVC5qKGEsYiksTmQoZiwvWyBcXHRdKy9nbSksYj1PZChmKTtudWxsIT1lJiYoYS5pZD1lKTtyZXR1cm4gYX07XG5ULmo9ZnVuY3Rpb24oYSxiKXt2YXIgYztpZihjPS9eYWxpZ246KHN0YXJ0fG1pZGRsZXxjZW50ZXJ8ZW5kfGxlZnR8cmlnaHQpJC8uZXhlYyhiKSlhLmFsaWduPWNbMV0sXCJjZW50ZXJcIj09Y1sxXSYmXCJjZW50ZXJcIiE9YS5hbGlnbiYmKGEucG9zaXRpb249XCJhdXRvXCIsYS5hbGlnbj1cIm1pZGRsZVwiKTtlbHNlIGlmKGM9L152ZXJ0aWNhbDoobHJ8cmwpJC8uZXhlYyhiKSlhLnZlcnRpY2FsPWNbMV07ZWxzZSBpZihjPS9ec2l6ZTooXFxkezEsMn18MTAwKSUkLy5leGVjKGIpKWEuc2l6ZT1OdW1iZXIoY1sxXSk7ZWxzZSBpZihjPS9ecG9zaXRpb246KFxcZHsxLDJ9fDEwMCklKD86LChsaW5lLWxlZnR8bGluZS1yaWdodHxjZW50ZXJ8c3RhcnR8ZW5kKSk/JC8uZXhlYyhiKSlhLnBvc2l0aW9uPU51bWJlcihjWzFdKSxjWzJdJiYoYS5wb3NpdGlvbkFsaWduPWNbMl0pO2Vsc2UgaWYoYz0vXmxpbmU6KFxcZHsxLDJ9fDEwMCklKD86LChzdGFydHxlbmR8Y2VudGVyKSk/JC8uZXhlYyhiKSlhLnNuYXBUb0xpbmVzPVxuITEsYS5saW5lPU51bWJlcihjWzFdKSxjWzJdJiYoYS5saW5lQWxpZ249Y1syXSk7ZWxzZSBpZihjPS9ebGluZTooLT9cXGQrKSg/Oiwoc3RhcnR8ZW5kfGNlbnRlcikpPyQvLmV4ZWMoYikpYS5zbmFwVG9MaW5lcz0hMCxhLmxpbmU9TnVtYmVyKGNbMV0pLGNbMl0mJihhLmxpbmVBbGlnbj1jWzJdKX07VC5hPWZ1bmN0aW9uKGEpe2E9TmQoYSwvKD86KFxcZHsxLH0pOik/KFxcZHsyfSk6KFxcZHsyfSlcXC4oXFxkezN9KS9nKTtpZighYSlyZXR1cm4gbnVsbDt2YXIgYj1OdW1iZXIoYVsyXSksYz1OdW1iZXIoYVszXSk7cmV0dXJuIDU5PGJ8fDU5PGM/bnVsbDpOdW1iZXIoYVs0XSkvMUUzK2MrNjAqYiszNjAwKihOdW1iZXIoYVsxXSl8fDApfTtSW1widGV4dC92dHRcIl09VDtSWyd0ZXh0L3Z0dDsgY29kZWNzPVwidnR0XCInXT1UO2Z1bmN0aW9uIFUoYSxiLGMsZCl7dmFyIGU9bmV3IEpiKG5ldyBEYXRhVmlldyhhKSksZj1TYigxODM1Mjk1MDkyLGUpO2lmKC0xIT1mKXJldHVybiBVLkJhKFFiKGUsZi04KS5idWZmZXIsYixjLGQpO2lmKC0xIT1UYihhLFUucGEpKXJldHVybltdO3Rocm93IG5ldyB2KDIsMjAwOCk7fW0oXCJzaGFrYS5tZWRpYS5NcDRWdHRQYXJzZXJcIixVKTtVLkJhPWZ1bmN0aW9uKGEsYixjLGQpe2E9bmV3IEpiKG5ldyBEYXRhVmlldyhhKSk7Yys9YjtkKz1iO2ZvcihiPVtdO0xiKGEpOyl7dmFyIGU9U2IoVS5vYSxhKTtpZigtMT09ZSlicmVhazsoZT1VLmMoUWIoYSxlLTgpLmJ1ZmZlcixjLGQpKSYmYi5wdXNoKGUpfXJldHVybiBifTtcblUuYz1mdW5jdGlvbihhLGIsYyl7YT1uZXcgSmIobmV3IERhdGFWaWV3KGEpKTtmb3IodmFyIGQsZSxmO0xiKGEpOyl7dmFyIGc9TShhKSxoPU0oYSksbD1FYihRYihhLGctOCkuYnVmZmVyKTsxPT1nJiZQYihhKTtzd2l0Y2goaCl7Y2FzZSBVLks6ZD1sO2JyZWFrO2Nhc2UgVS5IOmY9bDticmVhaztjYXNlIFUuWTplPWx9fWlmKCFkKXRocm93IG5ldyB2KDIsMjAwOCk7Yj14YyhiLGMsZCk7aWYoIWIpcmV0dXJuIG51bGw7ZiYmKGIuaWQ9Zik7aWYoZSlmb3IoZT1uZXcgTWQoZSksZj1PZChlKTtmOylULmooYixmKSxOZChlLC9bIFxcdF0rL2dtKSxmPU9kKGUpO3JldHVybiBifTtVLnBhPTIwMDQyNTE3NjQ7VS5vYT0xOTg3MzQzNDU5O1UuSz0xODg1NDM2MjY4O1UuSD0xNzY4MTg3MjQ3O1UuWT0xOTM3MDExODE1O1JbJ2FwcGxpY2F0aW9uL21wNDsgY29kZWNzPVwid3Z0dFwiJ109VTtmdW5jdGlvbiBQZChhLGIsYyxkLGUsZil7dGhpcy5hPWE7dGhpcy5jPWI7dGhpcy5qPWM7dGhpcy5zPWQ7dGhpcy5sPWU7dGhpcy5tPWY7dGhpcy5iPW5ldyB4O3RoaXMuZz0hMTt0aGlzLmg9MTt0aGlzLmk9dGhpcy5mPW51bGw7MDxhLnJlYWR5U3RhdGU/dGhpcy54YigpOnkodGhpcy5iLGEsXCJsb2FkZWRtZXRhZGF0YVwiLHRoaXMueGIuYmluZCh0aGlzKSk7eSh0aGlzLmIsYSxcInJhdGVjaGFuZ2VcIix0aGlzLnFjLmJpbmQodGhpcykpO1FkKHRoaXMpfWs9UGQucHJvdG90eXBlO2subz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYi5vKCk7dGhpcy5iPW51bGw7UmQodGhpcyk7bnVsbCE9dGhpcy5mJiYod2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5mKSx0aGlzLmY9bnVsbCk7dGhpcy5tPXRoaXMubD10aGlzLmM9dGhpcy5hPW51bGw7cmV0dXJuIGF9O2Z1bmN0aW9uIFNkKGEpe3JldHVybiAwPGEuYS5yZWFkeVN0YXRlP1RkKGEsYS5hLmN1cnJlbnRUaW1lKTpVZChhKX1cbmZ1bmN0aW9uIFVkKGEpe3JldHVybiBhLnM/VGQoYSxhLnMpOkluZmluaXR5PmEuYy5lYSgpP2EuYy50YSgpOk1hdGgubWF4KGEuYy5WYSgpLGEuYy50YSgpKX1mdW5jdGlvbiBWZChhLGIpe2IhPWEuZyYmKGEuZz1iLFdkKGEsYS5oKSxhLmwoYikpfWZ1bmN0aW9uIFFkKGEpe1JkKGEpO2EuaT13aW5kb3cuc2V0VGltZW91dChhLnVjLmJpbmQoYSksMjUwKX1mdW5jdGlvbiBSZChhKXthLmkmJih3aW5kb3cuY2xlYXJUaW1lb3V0KGEuaSksYS5pPW51bGwpfWsudWM9ZnVuY3Rpb24oKXt0aGlzLmk9bnVsbDtRZCh0aGlzKTt2YXIgYT1hZCh0aGlzLmEuYnVmZmVyZWQsdGhpcy5hLmN1cnJlbnRUaW1lLC4xKSxiPVpjKHRoaXMuYS5idWZmZXJlZCk+PSh0aGlzLmMuUygpP3RoaXMuYy5aKCktLjE6dGhpcy5hLmR1cmF0aW9uLS4xKXx8dGhpcy5hLmVuZGVkO3RoaXMuZz8oYnx8YT49dGhpcy5qKSYmVmQodGhpcywhMSk6IWImJi41PmEmJlZkKHRoaXMsITApfTtrLlVhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaH07XG5mdW5jdGlvbiBXZChhLGIpe251bGwhPWEuZiYmKHdpbmRvdy5jbGVhckludGVydmFsKGEuZiksYS5mPW51bGwpO2EuaD1iO2EuYS5wbGF5YmFja1JhdGU9YS5nfHwwPmI/MDpiOyFhLmcmJjA+YiYmKGEuZj13aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt0aGlzLmEuY3VycmVudFRpbWUrPWIvNH0uYmluZChhKSwyNTApKX1rLnFjPWZ1bmN0aW9uKCl7dGhpcy5hLnBsYXliYWNrUmF0ZSE9KHRoaXMuZ3x8MD50aGlzLmg/MDp0aGlzLmgpJiZXZCh0aGlzLHRoaXMuYS5wbGF5YmFja1JhdGUpfTtcbmsueGI9ZnVuY3Rpb24oKXt0aGlzLmIubGEodGhpcy5hLFwibG9hZGVkbWV0YWRhdGFcIik7dmFyIGE9VWQodGhpcyk7LjAwMT5NYXRoLmFicyh0aGlzLmEuY3VycmVudFRpbWUtYSk/KHkodGhpcy5iLHRoaXMuYSxcInNlZWtpbmdcIix0aGlzLnpiLmJpbmQodGhpcykpLHkodGhpcy5iLHRoaXMuYSxcInBsYXlpbmdcIix0aGlzLnliLmJpbmQodGhpcykpKTooeSh0aGlzLmIsdGhpcy5hLFwic2Vla2luZ1wiLHRoaXMuc2MuYmluZCh0aGlzKSksdGhpcy5hLmN1cnJlbnRUaW1lPWEpfTtrLnNjPWZ1bmN0aW9uKCl7dGhpcy5iLmxhKHRoaXMuYSxcInNlZWtpbmdcIik7eSh0aGlzLmIsdGhpcy5hLFwic2Vla2luZ1wiLHRoaXMuemIuYmluZCh0aGlzKSk7eSh0aGlzLmIsdGhpcy5hLFwicGxheWluZ1wiLHRoaXMueWIuYmluZCh0aGlzKSl9O2suemI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmEuY3VycmVudFRpbWUsYj1YZCh0aGlzLGEpOy4wMDE8TWF0aC5hYnMoYi1hKT9ZZCh0aGlzLGEsYik6dGhpcy5tKCl9O1xuay55Yj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYS5jdXJyZW50VGltZSxiPVhkKHRoaXMsYSk7LjAwMTxNYXRoLmFicyhiLWEpJiZZZCh0aGlzLGEsYil9O2Z1bmN0aW9uIFhkKGEsYil7dmFyIGM9YS5jLGQ9Yy50YSgpLGU9Yy5aKCk7aWYoIWMuUygpfHxJbmZpbml0eT09Yy5jKXJldHVybiBiPGQ/ZDpiPmU/ZTpiO2M9ZCsxO2Q9YythLmo7cmV0dXJuIGI+PWQmJmI8PWV8fCRjKGEuYS5idWZmZXJlZCxiKSYmYj49YyYmYjw9ZT9iOmI+ZT9lOmU8ZCYmYj49YyYmYjw9ZT9iOk1hdGgubWluKGQrMixlKX1mdW5jdGlvbiBZZChhLGIsYyl7YS5hLmN1cnJlbnRUaW1lPWM7dmFyIGQ9MCxlPWZ1bmN0aW9uKCl7IXRoaXMuYXx8MTA8PWQrK3x8dGhpcy5hLmN1cnJlbnRUaW1lIT1ifHwodGhpcy5hLmN1cnJlbnRUaW1lPWMsc2V0VGltZW91dChlLDEwMCkpfS5iaW5kKGEpO3NldFRpbWVvdXQoZSwxMDApfVxuZnVuY3Rpb24gVGQoYSxiKXt2YXIgYz1hLmMudGEoKTtpZihiPGMpcmV0dXJuIGM7Yz1hLmMuWigpO3JldHVybiBiPmM/YzpifTtmdW5jdGlvbiBaZChhLGIsYyxkLGUsZixnLGgsbCl7dGhpcy5tPWE7dGhpcy5mPWI7dGhpcy5VPWM7dGhpcy5hPWQ7dGhpcy5IPWU7dGhpcy52PWY7dGhpcy5qPWc7dGhpcy5BPWh8fG51bGw7dGhpcy5CPWx8fG51bGw7dGhpcy5nPW51bGw7dGhpcy5pPTE7dGhpcy5DPVByb21pc2UucmVzb2x2ZSgpO3RoaXMuaD1bXTt0aGlzLmw9e307dGhpcy5iPXt9O3RoaXMuYz10aGlzLnM9dGhpcy5LPSExfVpkLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMuYikkZCh0aGlzLmJbYV0pO3RoaXMuZz10aGlzLmI9dGhpcy5sPXRoaXMuaD10aGlzLkI9dGhpcy5BPXRoaXMuaj10aGlzLnY9dGhpcy5IPXRoaXMuQz10aGlzLmE9dGhpcy5VPXRoaXMuZj10aGlzLm09bnVsbDt0aGlzLmM9ITA7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtcblpkLnByb3RvdHlwZS5jb25maWd1cmU9ZnVuY3Rpb24oYSl7dGhpcy5nPWE7dGhpcy5tLmo9dGhpcy5pKk1hdGgubWF4KHRoaXMuYS5taW5CdWZmZXJUaW1lfHwwLHRoaXMuZy5yZWJ1ZmZlcmluZ0dvYWwpfTtaZC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuSCh0aGlzLmEucGVyaW9kc1thZSh0aGlzLFNkKHRoaXMubSkpXSk7cmV0dXJuIE5hKGEpP1Byb21pc2UucmVqZWN0KG5ldyB2KDUsNTAwNSkpOmJlKHRoaXMsYSkudGhlbihmdW5jdGlvbigpe3RoaXMuQSYmdGhpcy5BKCl9LmJpbmQodGhpcykpfTtmdW5jdGlvbiBjZShhKXtyZXR1cm4gYS5hLnBlcmlvZHNbYWUoYSxTZChhLm0pKV19ZnVuY3Rpb24gZGUoYSl7cmV0dXJuIE9hKGEuYixmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHJlYW19KX1mdW5jdGlvbiBlZShhLGIpe3ZhciBjPXt9O2MudGV4dD1iO3JldHVybiBiZShhLGMpfVxuZnVuY3Rpb24gZmUoYSxiLGMsZCl7dmFyIGU9YS5iW2JdOyFlJiZcInRleHRcIj09YiYmYS5nLmlnbm9yZVRleHRTdHJlYW1GYWlsdXJlcz9lZShhLGMpOmUmJihiPWEuaFtnZShhLGMpXSkmJmIuemEmJihiPWEubFtjLmlkXSkmJmIuemEmJmUuc3RyZWFtIT1jJiYoZS5zdHJlYW09YyxlLk1hPSEwLGQmJihlLmJhP2UuUWE9ITA6ZS5nYT8oZS5uYT0hMCxlLlFhPSEwKTooJGQoZSksaGUoYSxlLCEwKSkpKX1mdW5jdGlvbiBpZShhKXt2YXIgYj1TZChhLm0pO2lmKCFPYmplY3Qua2V5cyhhLmIpLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiAwPGZkKHRoaXMuZixhLGIpfS5iaW5kKGEpKSlmb3IodmFyIGMgaW4gYS5iKXt2YXIgZD1hLmJbY107ZC5iYXx8ZC5uYXx8KGQuZ2E/ZC5uYT0hMDpudWxsPT1kZChhLmYsYyk/bnVsbD09ZC5hYSYmamUoYSxkLDApOigkZChkKSxoZShhLGQsITEpKSl9fVxuZnVuY3Rpb24gYmUoYSxiLGMpe3ZhciBkPWFlKGEsU2QoYS5tKSksZT1PYShiLGZ1bmN0aW9uKGEpe3JldHVybiBxZChhLm1pbWVUeXBlLGEuY29kZWNzKX0pO2EuZi5pbml0KGUsYS5nLnVzZVJlbGF0aXZlQ3VlVGltZXN0YW1wcyk7a2UoYSk7ZT1GKGIpO3JldHVybiBsZShhLGUpLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5jKWZvcih2YXIgYSBpbiBiKXt2YXIgZT1iW2FdO3RoaXMuYlthXXx8KHRoaXMuYlthXT17c3RyZWFtOmUsdHlwZTphLHZhOm51bGwsVzpudWxsLE1hOiEwLEdhOmQsZW5kT2ZTdHJlYW06ITEsZ2E6ITEsYWE6bnVsbCxuYTohMSxRYTohMSxiYTohMSxlYjohMSxYYTohMSxIYjpjfHwwfSxqZSh0aGlzLHRoaXMuYlthXSwwKSl9fS5iaW5kKGEpKX1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9YS5oW2JdO2lmKGMpcmV0dXJuIGMuSjtjPXtKOm5ldyB3LHphOiExfTthLmhbYl09Yzt2YXIgZD1hLmEucGVyaW9kc1tiXS5zdHJlYW1TZXRzLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHJlYW1zfSkucmVkdWNlKEIsW10pO2EuQz1hLkMudGhlbihmdW5jdGlvbigpe2lmKCF0aGlzLmMpcmV0dXJuIGxlKHRoaXMsZCl9LmJpbmQoYSkpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmN8fCh0aGlzLmhbYl0uSi5yZXNvbHZlKCksdGhpcy5oW2JdLnphPSEwKX0uYmluZChhKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt0aGlzLmN8fCh0aGlzLmhbYl0uSi5yZWplY3QoKSxkZWxldGUgdGhpcy5oW2JdLHRoaXMuaihhKSl9LmJpbmQoYSkpO3JldHVybiBjLkp9XG5mdW5jdGlvbiBsZShhLGIpe2Zvcih2YXIgYz1bXSxkPTA7ZDxiLmxlbmd0aDsrK2Qpe3ZhciBlPWJbZF0sZj1hLmxbZS5pZF07Zj9jLnB1c2goZi5KKTooYS5sW2UuaWRdPXtKOm5ldyB3LHphOiExfSxjLnB1c2goZS5jcmVhdGVTZWdtZW50SW5kZXgoKSkpfXJldHVybiBQcm9taXNlLmFsbChjKS50aGVuKGZ1bmN0aW9uKCl7aWYoIXRoaXMuYylmb3IodmFyIGE9MDthPGIubGVuZ3RoOysrYSl7dmFyIGM9dGhpcy5sW2JbYV0uaWRdO2MuemF8fChjLkoucmVzb2x2ZSgpLGMuemE9ITApfX0uYmluZChhKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtpZighdGhpcy5jKXJldHVybiB0aGlzLmxbZS5pZF0uSi5yZWplY3QoKSxkZWxldGUgdGhpcy5sW2UuaWRdLFByb21pc2UucmVqZWN0KGEpfS5iaW5kKGEpKX1mdW5jdGlvbiBrZShhKXt2YXIgYj1hLmEucHJlc2VudGF0aW9uVGltZWxpbmUuZWEoKTtJbmZpbml0eT5iP2EuZi5BYShiKTphLmYuQWEoTWF0aC5wb3coMiwzMikpfVxuWmQucHJvdG90eXBlLlk9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuYyYmIWEuZ2EmJm51bGwhPWEuYWEmJiFhLmJhKWlmKGEuYWE9bnVsbCxhLm5hKWhlKHRoaXMsYSxhLlFhKTtlbHNle3RyeXt2YXIgYj1uZSh0aGlzLGEpO251bGwhPWImJihqZSh0aGlzLGEsYiksYS5YYT0hMSl9Y2F0Y2goYyl7dGhpcy5qKGMpO3JldHVybn1iPUYodGhpcy5iKTtvZSh0aGlzLGEpO2IuZXZlcnkoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZW5kT2ZTdHJlYW19KSYmdGhpcy5mLmVuZE9mU3RyZWFtKCl9fTtcbmZ1bmN0aW9uIG5lKGEsYil7dmFyIGM9U2QoYS5tKSxkLGU9YS5mO2Q9Yi50eXBlO2Q9XCJ0ZXh0XCI9PWQ/ZS5iLmE6WmMoZWQoZSxkKSk7dmFyIGY9Yi52YSYmYi5XP2EuYS5wZXJpb2RzW2dlKGEsYi52YSldLnN0YXJ0VGltZStiLlcuZW5kVGltZTpNYXRoLm1heChjLGIuSGIpO2IuSGI9MDt2YXIgZT1nZShhLGIuc3RyZWFtKSxnPWFlKGEsZiksaD1mZChhLmYsYi50eXBlLGMsLjEpLGw9TWF0aC5tYXgoYS5pKk1hdGgubWF4KGEuYS5taW5CdWZmZXJUaW1lfHwwLGEuZy5yZWJ1ZmZlcmluZ0dvYWwpLGEuaSphLmcuYnVmZmVyaW5nR29hbCk7aWYoZj49YS5hLnByZXNlbnRhdGlvblRpbWVsaW5lLmVhKCkpcmV0dXJuIGIuZW5kT2ZTdHJlYW09ITAsbnVsbDtiLmVuZE9mU3RyZWFtPSExO2IuR2E9ZztpZihnIT1lKXJldHVybiBudWxsO2lmKGg+PWwpcmV0dXJuLjU7Yi5XJiZiLnN0cmVhbT09Yi52YT8oZj1iLlcucG9zaXRpb24rMSxkPXBlKGEsYixlLGYpKTooZj1iLlc/Yi5zdHJlYW0uZmluZFNlZ21lbnRQb3NpdGlvbihNYXRoLm1heCgwLFxuYS5hLnBlcmlvZHNbZ2UoYSxiLnZhKV0uc3RhcnRUaW1lK2IuVy5lbmRUaW1lLWEuYS5wZXJpb2RzW2VdLnN0YXJ0VGltZSkpOmIuc3RyZWFtLmZpbmRTZWdtZW50UG9zaXRpb24oTWF0aC5tYXgoMCwoZHx8YyktYS5hLnBlcmlvZHNbZV0uc3RhcnRUaW1lKSksbnVsbD09Zj9kPW51bGw6KGc9bnVsbCxudWxsPT1kJiYoZz1wZShhLGIsZSxNYXRoLm1heCgwLGYtMSkpKSxkPWd8fHBlKGEsYixlLGYpKSk7aWYoIWQpcmV0dXJuIDE7cWUoYSxiLGMsZSxkKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBwZShhLGIsYyxkKXtjPWEuYS5wZXJpb2RzW2NdO2I9Yi5zdHJlYW0uZ2V0U2VnbWVudFJlZmVyZW5jZShkKTtpZighYilyZXR1cm4gbnVsbDthPWEuYS5wcmVzZW50YXRpb25UaW1lbGluZTtkPWEuWigpO3JldHVybiBjLnN0YXJ0VGltZStiLmVuZFRpbWU8YS51YSgpfHxjLnN0YXJ0VGltZStiLnN0YXJ0VGltZT5kP251bGw6Yn1cbmZ1bmN0aW9uIHFlKGEsYixjLGQsZSl7dmFyIGY9YS5hLnBlcmlvZHNbZF0sZz1iLnN0cmVhbSxoPWEuYS5wZXJpb2RzW2QrMV0sbD1udWxsLGw9aD9oLnN0YXJ0VGltZTphLmEucHJlc2VudGF0aW9uVGltZWxpbmUuZWEoKTtkPXJlKGEsYixkLGwpO2IuZ2E9ITA7Yi5NYT0hMTtoPXNlKGEsZSk7UHJvbWlzZS5hbGwoW2QsaF0pLnRoZW4oZnVuY3Rpb24oYSl7aWYoIXRoaXMuYyYmIXRoaXMucylyZXR1cm4gdGUodGhpcyxiLGMsZixnLGUsYVsxXSl9LmJpbmQoYSkpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmN8fHRoaXMuc3x8KGIuZ2E9ITEsYi5lYj0hMSxqZSh0aGlzLGIsMCksdWUodGhpcyxnKSl9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7dGhpcy5jfHx0aGlzLnN8fChiLmdhPSExLDEwMDE9PWEuY29kZXx8MTAwMj09YS5jb2RlfHwxMDAzPT1hLmNvZGU/XCJ0ZXh0XCI9PWIudHlwZSYmdGhpcy5nLmlnbm9yZVRleHRTdHJlYW1GYWlsdXJlcyYmMTAwMT09YS5jb2RlP2RlbGV0ZSB0aGlzLmIudGV4dDpcbih0aGlzLmooYSksamUodGhpcyxiLDQpKTozMDE3PT1hLmNvZGU/dmUodGhpcyxiLGEpOlwidGV4dFwiPT1iLnR5cGUmJnRoaXMuZy5pZ25vcmVUZXh0U3RyZWFtRmFpbHVyZXM/ZGVsZXRlIHRoaXMuYi50ZXh0OihiLlhhPSEwLHRoaXMuaihhKSkpfS5iaW5kKGEpKX1mdW5jdGlvbiB2ZShhLGIsYyl7aWYoIUYoYS5iKS5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhIT1iJiZhLmVifSkpe3ZhciBkPU1hdGgucm91bmQoMTAwKmEuaSk7aWYoMjA8ZClhLmktPS4yO2Vsc2UgaWYoNDxkKWEuaS09LjA0O2Vsc2V7Yi5YYT0hMDthLnM9ITA7YS5qKGMpO3JldHVybn1iLmViPSEwfWplKGEsYiw0KX1cbmZ1bmN0aW9uIHJlKGEsYixjLGQpe2lmKCFiLk1hKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtjPWpkKGEuZixiLnR5cGUsYS5hLnBlcmlvZHNbY10uc3RhcnRUaW1lLWIuc3RyZWFtLnByZXNlbnRhdGlvblRpbWVPZmZzZXQpO2Q9bnVsbCE9ZD9rZChhLmYsYi50eXBlLGQpOlByb21pc2UucmVzb2x2ZSgpO2lmKCFiLnN0cmVhbS5pbml0U2VnbWVudFJlZmVyZW5jZSlyZXR1cm4gUHJvbWlzZS5hbGwoW2MsZF0pO2E9c2UoYSxiLnN0cmVhbS5pbml0U2VnbWVudFJlZmVyZW5jZSkudGhlbihmdW5jdGlvbihhKXtpZighdGhpcy5jKXJldHVybiBnZCh0aGlzLmYsYi50eXBlLGEsbnVsbCxudWxsKX0uYmluZChhKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLk1hPSEwO3JldHVybiBQcm9taXNlLnJlamVjdChhKX0pO3JldHVybiBQcm9taXNlLmFsbChbYyxkLGFdKX1cbmZ1bmN0aW9uIHRlKGEsYixjLGQsZSxmLGcpe3JldHVybiB3ZShhLGIsYykudGhlbihmdW5jdGlvbigpe2lmKCF0aGlzLmMpcmV0dXJuIGdkKHRoaXMuZixiLnR5cGUsZyxmLnN0YXJ0VGltZStkLnN0YXJ0VGltZSxmLmVuZFRpbWUrZC5zdGFydFRpbWUpfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKCl7aWYoIXRoaXMuYylyZXR1cm4gYi52YT1lLGIuVz1mLFByb21pc2UucmVzb2x2ZSgpfS5iaW5kKGEpKX1mdW5jdGlvbiB3ZShhLGIsYyl7dmFyIGQ9ZGQoYS5mLGIudHlwZSk7aWYobnVsbD09ZClyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7Yz1jLWQtYS5nLmJ1ZmZlckJlaGluZDtyZXR1cm4gMD49Yz9Qcm9taXNlLnJlc29sdmUoKTphLmYucmVtb3ZlKGIudHlwZSxkLGQrYykudGhlbihmdW5jdGlvbigpe30uYmluZChhKSl9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKCFhLksmJihhLks9RihhLmIpLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVyblwidGV4dFwiPT1hLnR5cGU/ITA6IWEubmEmJiFhLmJhJiZhLld9KSxhLkspKXt2YXIgYz1nZShhLGIpO2EuaFtjXXx8bWUoYSxjKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy52KCl9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oQyk7Zm9yKGM9MDtjPGEuYS5wZXJpb2RzLmxlbmd0aDsrK2MpbWUoYSxjKVtcImNhdGNoXCJdKEMpO2EuQiYmYS5CKCl9fVxuZnVuY3Rpb24gb2UoYSxiKXtpZihiLkdhIT1nZShhLGIuc3RyZWFtKSl7dmFyIGM9Yi5HYSxkPUYoYS5iKTtkLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiBhLkdhPT1jfSkmJmQuZXZlcnkoeGUpJiZtZShhLGMpLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5jJiZkLmV2ZXJ5KGZ1bmN0aW9uKGEpe3ZhciBiPWdlKHRoaXMsYS5zdHJlYW0pO3JldHVybiB4ZShhKSYmYS5HYT09YyYmYiE9Y30uYmluZCh0aGlzKSkpe3ZhciBhPXRoaXMuYS5wZXJpb2RzW2NdLGI9dGhpcy5IKGEpLGc7Zm9yKGcgaW4gdGhpcy5iKWlmKCFiW2ddJiZcInRleHRcIiE9Zyl7dGhpcy5qKG5ldyB2KDUsNTAwNSkpO3JldHVybn1mb3IoZyBpbiBiKWlmKCF0aGlzLmJbZ10paWYoXCJ0ZXh0XCI9PWcpYmUodGhpcyx7dGV4dDpiLnRleHR9LGEuc3RhcnRUaW1lKSxkZWxldGUgYltnXTtlbHNle3RoaXMuaihuZXcgdig1LDUwMDUpKTtyZXR1cm59Zm9yKGcgaW4gdGhpcy5iKShhPWJbZ10pPyhmZSh0aGlzLGcsYSwhMSksamUodGhpcyxcbnRoaXMuYltnXSwwKSk6ZGVsZXRlIHRoaXMuYltnXTt0aGlzLnYoKX19LmJpbmQoYSkpW1wiY2F0Y2hcIl0oQyl9fWZ1bmN0aW9uIHhlKGEpe3JldHVybiFhLmdhJiZudWxsPT1hLmFhJiYhYS5uYSYmIWEuYmF9ZnVuY3Rpb24gYWUoYSxiKXtmb3IodmFyIGM9YS5hLnBlcmlvZHMubGVuZ3RoLTE7MDxjOy0tYylpZihiPj1hLmEucGVyaW9kc1tjXS5zdGFydFRpbWUpcmV0dXJuIGM7cmV0dXJuIDB9ZnVuY3Rpb24gZ2UoYSxiKXtmb3IodmFyIGM9MDtjPGEuYS5wZXJpb2RzLmxlbmd0aDsrK2MpZm9yKHZhciBkPWEuYS5wZXJpb2RzW2NdLGU9MDtlPGQuc3RyZWFtU2V0cy5sZW5ndGg7KytlKWlmKDA8PWQuc3RyZWFtU2V0c1tlXS5zdHJlYW1zLmluZGV4T2YoYikpcmV0dXJuIGM7cmV0dXJuLTF9XG5mdW5jdGlvbiBzZShhLGIpe3ZhciBjPXJjKGIuYSgpLGEuZy5yZXRyeVBhcmFtZXRlcnMpO2lmKGIuTXx8bnVsbCE9Yi5EKXt2YXIgZD1cImJ5dGVzPVwiK2IuTStcIi1cIjtudWxsIT1iLkQmJihkKz1iLkQpO2MuaGVhZGVycy5SYW5nZT1kfXJldHVybiBhLlUucmVxdWVzdCgxLGMpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGF0YX0pfWZ1bmN0aW9uIGhlKGEsYixjKXtiLm5hPSExO2IuUWE9ITE7Yi5iYT0hMDtpZChhLmYsYi50eXBlKS50aGVuKGZ1bmN0aW9uKCl7aWYoIXRoaXMuYyYmYyl7dmFyIGE9dGhpcy5mLGU9Yi50eXBlO3JldHVyblwidGV4dFwiPT1lP1Byb21pc2UucmVzb2x2ZSgpOmhkKGEsZSxhLlliLmJpbmQoYSxlKSl9fS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5jfHwoYi52YT1udWxsLGIuVz1udWxsLGIuYmE9ITEsamUodGhpcyxiLDApKX0uYmluZChhKSl9XG5mdW5jdGlvbiBqZShhLGIsYyl7Yi5hYT13aW5kb3cuc2V0VGltZW91dChhLlkuYmluZChhLGIpLDFFMypjKX1mdW5jdGlvbiAkZChhKXtudWxsIT1hLmFhJiYod2luZG93LmNsZWFyVGltZW91dChhLmFhKSxhLmFhPW51bGwpfTtmdW5jdGlvbiB5ZShhKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYil7dmFyIGM9YS5zcGxpdChcIjpcIik7aWYoMj5jLmxlbmd0aHx8XCJkYXRhXCIhPWNbMF0pdGhyb3cgbmV3IHYoMSwxMDA0LGEpO2M9Yy5zbGljZSgxKS5qb2luKFwiOlwiKS5zcGxpdChcIixcIik7aWYoMj5jLmxlbmd0aCl0aHJvdyBuZXcgdigxLDEwMDQsYSk7dmFyIGQ9Y1swXSxjPXdpbmRvdy5kZWNvZGVVUklDb21wb25lbnQoYy5zbGljZSgxKS5qb2luKFwiLFwiKSksZD1kLnNwbGl0KFwiO1wiKSxlPW51bGw7MTxkLmxlbmd0aCYmKGU9ZFsxXSk7aWYoXCJiYXNlNjRcIj09ZSljPVJhKGMpLmJ1ZmZlcjtlbHNle2lmKGUpdGhyb3cgbmV3IHYoMSwxMDA1LGEpO2M9SWIoYyl9Yih7dXJpOmEsZGF0YTpjLGhlYWRlcnM6e1wiY29udGVudC10eXBlXCI6ZFswXX19KX0pfW0oXCJzaGFrYS5uZXQuRGF0YVVyaVBsdWdpblwiLHllKTtwYy5kYXRhPXllO2Z1bmN0aW9uIHplKGEsYil7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZCl7dmFyIGU9bmV3IFhNTEh0dHBSZXF1ZXN0O2Uub3BlbihiLm1ldGhvZCxhLCEwKTtlLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7ZS50aW1lb3V0PWIucmV0cnlQYXJhbWV0ZXJzLnRpbWVvdXQ7ZS53aXRoQ3JlZGVudGlhbHM9Yi5hbGxvd0Nyb3NzU2l0ZUNyZWRlbnRpYWxzO2Uub25sb2FkPWZ1bmN0aW9uKGIpe2I9Yi50YXJnZXQ7dmFyIGU9Yi5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdChcIlxcclxcblwiKS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXt2YXIgYz1iLnNwbGl0KFwiOiBcIik7YVtjWzBdLnRvTG93ZXJDYXNlKCldPWMuc2xpY2UoMSkuam9pbihcIjogXCIpO3JldHVybiBhfSx7fSk7aWYoMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1cyYmMjAyIT1iLnN0YXR1cyliLnJlc3BvbnNlVVJMJiYoYT1iLnJlc3BvbnNlVVJMKSxjKHt1cmk6YSxkYXRhOmIucmVzcG9uc2UsaGVhZGVyczplLHBkOiEhZVtcIngtc2hha2EtZnJvbS1jYWNoZVwiXX0pO1xuZWxzZXt2YXIgZj1udWxsO3RyeXtmPUhiKGIucmVzcG9uc2UpfWNhdGNoKG4pe31kKG5ldyB2KDEsMTAwMSxhLGIuc3RhdHVzLGYsZSkpfX07ZS5vbmVycm9yPWZ1bmN0aW9uKCl7ZChuZXcgdigxLDEwMDIsYSkpfTtlLm9udGltZW91dD1mdW5jdGlvbigpe2QobmV3IHYoMSwxMDAzLGEpKX07Zm9yKHZhciBmIGluIGIuaGVhZGVycyllLnNldFJlcXVlc3RIZWFkZXIoZixiLmhlYWRlcnNbZl0pO2Uuc2VuZChiLmJvZHkpfSl9bShcInNoYWthLm5ldC5IdHRwUGx1Z2luXCIsemUpO3BjLmh0dHA9emU7cGMuaHR0cHM9emU7ZnVuY3Rpb24gQWUoKXt0aGlzLmE9bnVsbDt0aGlzLmM9W107dGhpcy5iPXt9fWs9QWUucHJvdG90eXBlO1xuay5pbml0PWZ1bmN0aW9uKGEpe2lmKCF3aW5kb3cuaW5kZXhlZERCKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig5LDlFMykpO3ZhciBiPXdpbmRvdy5pbmRleGVkREIub3BlbihcInNoYWthX29mZmxpbmVfZGJcIiwxKSxjPW5ldyB3O2Iub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKGIpe2I9Yi50YXJnZXQucmVzdWx0O2Zvcih2YXIgYyBpbiBhKWIuY3JlYXRlT2JqZWN0U3RvcmUoYyx7a2V5UGF0aDphW2NdfSl9O2Iub25zdWNjZXNzPWZ1bmN0aW9uKGEpe3RoaXMuYT1hLnRhcmdldC5yZXN1bHQ7Yy5yZXNvbHZlKCl9LmJpbmQodGhpcyk7Yi5vbmVycm9yPUJlLmJpbmQobnVsbCxiLGMpO3JldHVybiBjLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1PYmplY3Qua2V5cyhhKTtyZXR1cm4gUHJvbWlzZS5hbGwoYi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIENlKHRoaXMsYSkudGhlbihmdW5jdGlvbihiKXt0aGlzLmJbYV09Yn0uYmluZCh0aGlzKSl9LmJpbmQodGhpcykpKX0uYmluZCh0aGlzKSl9O1xuay5vPWZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKHRoaXMuYy5tYXAoZnVuY3Rpb24oYSl7dHJ5e2EudHJhbnNhY3Rpb24uYWJvcnQoKX1jYXRjaChiKXt9cmV0dXJuIGEuSltcImNhdGNoXCJdKEMpfSkpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmEmJih0aGlzLmEuY2xvc2UoKSx0aGlzLmE9bnVsbCl9LmJpbmQodGhpcykpfTtrLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBEZSh0aGlzLGEsXCJyZWFkb25seVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldChiKX0pfTtrLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gRGUodGhpcyxhLFwicmVhZG9ubHlcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5vcGVuQ3Vyc29yKCl9LGZ1bmN0aW9uKGEpe2EmJihiKGEudmFsdWUpLGFbXCJjb250aW51ZVwiXSgpKX0pfTtmdW5jdGlvbiBFZShhLGIsYyl7cmV0dXJuIERlKGEsYixcInJlYWR3cml0ZVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLnB1dChjKX0pfVxuay5yZW1vdmU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gRGUodGhpcyxhLFwicmVhZHdyaXRlXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGFbXCJkZWxldGVcIl0oYil9KX07ZnVuY3Rpb24gRmUoYSxiKXt2YXIgYz1bXTtyZXR1cm4gRGUoYSxcInNlZ21lbnRcIixcInJlYWR3cml0ZVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLm9wZW5DdXJzb3IoKX0sZnVuY3Rpb24oYSl7aWYoYSl7aWYoYihhLnZhbHVlKSl7dmFyIGQ9YVtcImRlbGV0ZVwiXSgpLGY9bmV3IHc7ZC5vbnN1Y2Nlc3M9Zi5yZXNvbHZlO2Qub25lcnJvcj1CZS5iaW5kKG51bGwsZCxmKTtjLnB1c2goZil9YVtcImNvbnRpbnVlXCJdKCl9fSkudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChjKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYy5sZW5ndGh9KX1cbmZ1bmN0aW9uIENlKGEsYil7dmFyIGM9MDtyZXR1cm4gRGUoYSxiLFwicmVhZG9ubHlcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5vcGVuQ3Vyc29yKG51bGwsXCJwcmV2XCIpfSxmdW5jdGlvbihhKXthJiYoYz1hLmtleSsxKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gY30pfVxuZnVuY3Rpb24gRGUoYSxiLGMsZCxlKXtjPWEuYS50cmFuc2FjdGlvbihbYl0sYyk7dmFyIGY9ZChjLm9iamVjdFN0b3JlKGIpKSxnPW5ldyB3O2UmJihmLm9uc3VjY2Vzcz1mdW5jdGlvbihhKXtlKGEudGFyZ2V0LnJlc3VsdCl9KTtmLm9uZXJyb3I9QmUuYmluZChudWxsLGYsZyk7dmFyIGg9e3RyYW5zYWN0aW9uOmMsSjpnfTthLmMucHVzaChoKTt2YXIgbD1mdW5jdGlvbigpe3RoaXMuYy5zcGxpY2UodGhpcy5jLmluZGV4T2YoaCksMSl9LmJpbmQoYSk7Yy5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7bCgpO2cucmVzb2x2ZShmLnJlc3VsdCl9O2Mub25lcnJvcj1mdW5jdGlvbihhKXtsKCk7QmUoZixnLGEpfTtyZXR1cm4gZ31mdW5jdGlvbiBCZShhLGIsYyl7XCJBYm9ydEVycm9yXCI9PWEuZXJyb3IubmFtZT9iLnJlamVjdChuZXcgdig5LDkwMDIpKTpiLnJlamVjdChuZXcgdig5LDkwMDEsYS5lcnJvcikpO2MucHJldmVudERlZmF1bHQoKX07dmFyIEdlPXttYW5pZmVzdDpcImtleVwiLHNlZ21lbnQ6XCJrZXlcIn07ZnVuY3Rpb24gSGUoYSl7cmV0dXJue29mZmxpbmVVcmk6XCJvZmZsaW5lOlwiK2Eua2V5LG9yaWdpbmFsTWFuaWZlc3RVcmk6YS5vcmlnaW5hbE1hbmlmZXN0VXJpLGR1cmF0aW9uOmEuZHVyYXRpb24sc2l6ZTphLnNpemUsdHJhY2tzOmEucGVyaW9kc1swXS5zdHJlYW1zLm1hcChmdW5jdGlvbihhKXtyZXR1cm57aWQ6YS5pZCxhY3RpdmU6ITEsdHlwZTphLmNvbnRlbnRUeXBlLGJhbmR3aWR0aDowLGxhbmd1YWdlOmEubGFuZ3VhZ2Usa2luZDphLmtpbmR8fG51bGwsd2lkdGg6YS53aWR0aCxoZWlnaHQ6YS5oZWlnaHQsZnJhbWVSYXRlOmEuZnJhbWVSYXRlLGNvZGVjczphLmNvZGVjc319KSxhcHBNZXRhZGF0YTphLmFwcE1ldGFkYXRhfX07ZnVuY3Rpb24gSWUoYSxiLGMpe3RoaXMuYj17fTt0aGlzLmk9Yzt0aGlzLm09YTt0aGlzLmw9Yjt0aGlzLmo9dGhpcy5hPW51bGw7dGhpcy5mPXRoaXMuZz10aGlzLmg9dGhpcy5jPTB9SWUucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmp8fFByb21pc2UucmVzb2x2ZSgpO3RoaXMuYj17fTt0aGlzLmo9dGhpcy5hPXRoaXMubD10aGlzLm09dGhpcy5pPW51bGw7cmV0dXJuIGF9O2Z1bmN0aW9uIEplKGEsYixjLGQsZSl7YS5iW2JdPWEuYltiXXx8W107YS5iW2JdLnB1c2goe3VyaXM6Yy5hKCksTTpjLk0sRDpjLkQsbWI6ZCxFYTplfSl9XG5mdW5jdGlvbiBLZShhLGIpe2EuYz0wO2EuaD0wO2EuZz0wO2EuZj0wO0YoYS5iKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZm9yRWFjaChmdW5jdGlvbihhKXtudWxsIT1hLkQ/dGhpcy5jKz1hLkQtYS5NKzE6dGhpcy5nKz1hLm1ifS5iaW5kKHRoaXMpKX0uYmluZChhKSk7YS5hPWI7YS5hLnNpemU9YS5jO3ZhciBjPUYoYS5iKS5tYXAoZnVuY3Rpb24oYSl7dmFyIGI9MCxjPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaSlyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IHYoOSw5MDAyKSk7aWYoYj49YS5sZW5ndGgpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO3ZhciBkPWFbYisrXTtyZXR1cm4gTGUodGhpcyxkKS50aGVuKGMpfS5iaW5kKHRoaXMpO3JldHVybiBjKCl9LmJpbmQoYSkpO2EuYj17fTtyZXR1cm4gYS5qPVByb21pc2UuYWxsKGMpfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1yYyhiLnVyaXMsYS5sKTtpZihiLk18fG51bGwhPWIuRCljLmhlYWRlcnMuUmFuZ2U9XCJieXRlcz1cIitiLk0rXCItXCIrKG51bGw9PWIuRD9cIlwiOmIuRCk7dmFyIGQ7cmV0dXJuIGEubS5yZXF1ZXN0KDEsYykudGhlbihmdW5jdGlvbihhKXtpZighdGhpcy5hKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig5LDkwMDIpKTtkPWEuZGF0YS5ieXRlTGVuZ3RoO3JldHVybiBiLkVhKGEuZGF0YSl9LmJpbmQoYSkpLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5hKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgdig5LDkwMDIpKTtudWxsPT1iLkQ/KHRoaXMuYS5zaXplKz1kLHRoaXMuZis9Yi5tYik6dGhpcy5oKz1kO3ZhciBhPSh0aGlzLmgrdGhpcy5mKS8odGhpcy5jK3RoaXMuZyksYz1IZSh0aGlzLmEpO3RoaXMuaS5wcm9ncmVzc0NhbGxiYWNrKGMsYSl9LmJpbmQoYSkpfTtmdW5jdGlvbiBNZSgpe31NZS5wcm90b3R5cGUuY29uZmlndXJlPWZ1bmN0aW9uKCl7fTtNZS5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oYSl7dmFyIGI9L15vZmZsaW5lOihbMC05XSspJC8uZXhlYyhhKTtpZighYilyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IHYoMSw5MDA0LGEpKTt2YXIgYz1OdW1iZXIoYlsxXSksZD1uZXcgQWU7cmV0dXJuIGQuaW5pdChHZSkudGhlbihmdW5jdGlvbigpe3JldHVybiBkLmdldChcIm1hbmlmZXN0XCIsYyl9KS50aGVuKGZ1bmN0aW9uKGEpe2lmKCFhKXRocm93IG5ldyB2KDksOTAwMyxjKTtyZXR1cm4gTmUoYSl9KS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBkLm8oKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX0sZnVuY3Rpb24oYSl7cmV0dXJuIGQubygpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBhO30pfSl9O01lLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtcbmZ1bmN0aW9uIE5lKGEpe3ZhciBiPW5ldyBRKG51bGwsMCk7Yi5BYShhLmR1cmF0aW9uKTt2YXIgYz1hLmRybUluZm8/W2EuZHJtSW5mb106W107cmV0dXJue3ByZXNlbnRhdGlvblRpbWVsaW5lOmIsbWluQnVmZmVyVGltZToxMCxvZmZsaW5lU2Vzc2lvbklkczphLnNlc3Npb25JZHMscGVyaW9kczphLnBlcmlvZHMubWFwKGZ1bmN0aW9uKGEpe3JldHVybntzdGFydFRpbWU6YS5zdGFydFRpbWUsc3RyZWFtU2V0czphLnN0cmVhbXMubWFwKGZ1bmN0aW9uKGQpe3ZhciBlPWQuc2VnbWVudHMubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBKKGIsYS5zdGFydFRpbWUsYS5lbmRUaW1lLGZ1bmN0aW9uKCl7cmV0dXJuW2EudXJpXX0sMCxudWxsKX0pO2IuSGEoYS5zdGFydFRpbWUsZSk7ZT1uZXcgTyhlKTtyZXR1cm57bGFuZ3VhZ2U6ZC5sYW5ndWFnZSx0eXBlOmQuY29udGVudFR5cGUscHJpbWFyeTpkLnByaW1hcnksZHJtSW5mb3M6YyxzdHJlYW1zOlt7aWQ6ZC5pZCxjcmVhdGVTZWdtZW50SW5kZXg6UHJvbWlzZS5yZXNvbHZlLmJpbmQoUHJvbWlzZSksXG5maW5kU2VnbWVudFBvc2l0aW9uOmUuZmluZC5iaW5kKGUpLGdldFNlZ21lbnRSZWZlcmVuY2U6ZS5nZXQuYmluZChlKSxpbml0U2VnbWVudFJlZmVyZW5jZTpkLmluaXRTZWdtZW50VXJpP25ldyB5YihmdW5jdGlvbigpe3JldHVybltkLmluaXRTZWdtZW50VXJpXX0sMCxudWxsKTpudWxsLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6ZC5wcmVzZW50YXRpb25UaW1lT2Zmc2V0LG1pbWVUeXBlOmQubWltZVR5cGUsY29kZWNzOmQuY29kZWNzLGJhbmR3aWR0aDowLHdpZHRoOmQud2lkdGh8fHZvaWQgMCxoZWlnaHQ6ZC5oZWlnaHR8fHZvaWQgMCxraW5kOmQua2luZCxlbmNyeXB0ZWQ6ZC5lbmNyeXB0ZWQsa2V5SWQ6ZC5rZXlJZCxhbGxvd2VkQnlBcHBsaWNhdGlvbjohMCxhbGxvd2VkQnlLZXlTeXN0ZW06ITB9XX19KX19KX19c2NbXCJhcHBsaWNhdGlvbi94LW9mZmxpbmUtbWFuaWZlc3RcIl09TWU7ZnVuY3Rpb24gT2UoYSl7aWYoL15vZmZsaW5lOihbMC05XSspJC8uZXhlYyhhKSl7dmFyIGI9e3VyaTphLGRhdGE6bmV3IEFycmF5QnVmZmVyKDApLGhlYWRlcnM6e1wiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi94LW9mZmxpbmUtbWFuaWZlc3RcIn19O3JldHVybiBQcm9taXNlLnJlc29sdmUoYil9aWYoYj0vXm9mZmxpbmU6WzAtOV0rXFwvWzAtOV0rXFwvKFswLTldKykkLy5leGVjKGEpKXt2YXIgYz1OdW1iZXIoYlsxXSksZD1uZXcgQWU7cmV0dXJuIGQuaW5pdChHZSkudGhlbihmdW5jdGlvbigpe3JldHVybiBkLmdldChcInNlZ21lbnRcIixjKX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGQubygpLnRoZW4oZnVuY3Rpb24oKXtpZighYil0aHJvdyBuZXcgdig5LDkwMDMsYyk7cmV0dXJue3VyaTphLGRhdGE6Yi5kYXRhLGhlYWRlcnM6e319fSl9KX1yZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IHYoMSw5MDA0LGEpKX1tKFwic2hha2Eub2ZmbGluZS5PZmZsaW5lU2NoZW1lXCIsT2UpO1xucGMub2ZmbGluZT1PZTtmdW5jdGlvbiBQZSgpe3RoaXMuYT1Qcm9taXNlLnJlc29sdmUoKTt0aGlzLmM9dGhpcy5iPXRoaXMuZj0hMTt0aGlzLmc9bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7dGhpcy5oPWF9LmJpbmQodGhpcykpfVBlLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe3RoaXMuYT10aGlzLmEudGhlbihhKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmM/KHRoaXMuaCgpLFByb21pc2UucmVqZWN0KHRoaXMuaSkpOlByb21pc2UucmVzb2x2ZShhKX0uYmluZCh0aGlzKSk7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIFFlKGEpe2EuZnx8KGEuYT1hLmEudGhlbihmdW5jdGlvbihhKXt0aGlzLmI9ITA7cmV0dXJuIFByb21pc2UucmVzb2x2ZShhKX0uYmluZChhKSxmdW5jdGlvbihhKXt0aGlzLmI9ITA7cmV0dXJuIFByb21pc2UucmVqZWN0KGEpfS5iaW5kKGEpKSk7YS5mPSEwO3JldHVybiBhLmF9XG5QZS5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYilyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dGhpcy5jPSEwO3RoaXMuaT1hO3JldHVybiB0aGlzLmd9O2Z1bmN0aW9uIFJlKGEsYixjLGQsZSl7dmFyIGY9ZSBpbiBkLGc7Zm9yKGcgaW4gYil7dmFyIGg9ZStcIi5cIitnLGw9Zj9kW2VdOmNbZ10sbj0hIXtcIi5hYnIubWFuYWdlclwiOiEwfVtoXTtpZihmfHxnIGluIGEpdm9pZCAwPT09YltnXT92b2lkIDA9PT1sfHxmP2RlbGV0ZSBhW2ddOmFbZ109bDpuP2FbZ109YltnXTpcIm9iamVjdFwiPT10eXBlb2YgYVtnXSYmXCJvYmplY3RcIj09dHlwZW9mIGJbZ10/UmUoYVtnXSxiW2ddLGwsZCxoKTp0eXBlb2YgYltnXT09dHlwZW9mIGwmJihhW2ddPWJbZ10pfX07ZnVuY3Rpb24gVihhLGIpe3AuY2FsbCh0aGlzKTt0aGlzLkE9ITE7dGhpcy5mPWE7dGhpcy5tPW51bGw7dGhpcy52PW5ldyB4O3RoaXMuS2E9bmV3IHE7dGhpcy5wYT10aGlzLmM9dGhpcy5sPXRoaXMuYj10aGlzLmk9dGhpcy5xYT10aGlzLkM9dGhpcy5GPXRoaXMuZz10aGlzLmg9bnVsbDt0aGlzLlJhPTFFOTt0aGlzLm9hPVtdO3RoaXMuRGE9ITE7dGhpcy5zYT0hMDt0aGlzLkg9dGhpcy5qPW51bGw7dGhpcy5zPXt9O3RoaXMuYT1TZSh0aGlzKTt0aGlzLkNhPXt3aWR0aDpJbmZpbml0eSxoZWlnaHQ6SW5maW5pdHl9O3RoaXMuQj1bXTt0aGlzLlk9dGhpcy5LPXRoaXMucmE9MDtiJiZiKHRoaXMpO3RoaXMuaD1uZXcgUCh0aGlzLlVjLmJpbmQodGhpcykpO3RoaXMucWE9VGUodGhpcyk7Zm9yKHZhciBjPTA7Yzx0aGlzLmYudGV4dFRyYWNrcy5sZW5ndGg7KytjKXt2YXIgZD10aGlzLmYudGV4dFRyYWNrc1tjXTtkLm1vZGU9XCJkaXNhYmxlZFwiO1wiU2hha2EgUGxheWVyIFRleHRUcmFja1wiPT1cbmQubGFiZWwmJih0aGlzLm09ZCl9dGhpcy5tfHwodGhpcy5tPXRoaXMuZi5hZGRUZXh0VHJhY2soXCJzdWJ0aXRsZXNcIixcIlNoYWthIFBsYXllciBUZXh0VHJhY2tcIikpO3RoaXMubS5tb2RlPVwiaGlkZGVuXCI7eSh0aGlzLnYsdGhpcy5mLFwiZXJyb3JcIix0aGlzLnRjLmJpbmQodGhpcykpfWJhKFYpO20oXCJzaGFrYS5QbGF5ZXJcIixWKTtWLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5BPSEwO3ZhciBhPVByb21pc2UucmVzb2x2ZSgpO3RoaXMuaiYmKGE9dGhpcy5qLmNhbmNlbChuZXcgdig3LDdFMykpKTtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKCl7dmFyIGE9UHJvbWlzZS5hbGwoW3RoaXMuSCxVZSh0aGlzKSx0aGlzLnY/dGhpcy52Lm8oKTpudWxsLHRoaXMuaD90aGlzLmgubygpOm51bGxdKTt0aGlzLmE9dGhpcy5oPXRoaXMuS2E9dGhpcy52PXRoaXMubT10aGlzLmY9bnVsbDtyZXR1cm4gYX0uYmluZCh0aGlzKSl9O1YucHJvdG90eXBlLmRlc3Ryb3k9Vi5wcm90b3R5cGUubztcblYudmVyc2lvbj1cInYyLjAuN1wiO3ZhciBWZT17fTtWLnJlZ2lzdGVyU3VwcG9ydFBsdWdpbj1mdW5jdGlvbihhLGIpe1ZlW2FdPWJ9O1YuaXNCcm93c2VyU3VwcG9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuISF3aW5kb3cuUHJvbWlzZSYmISF3aW5kb3cuVWludDhBcnJheSYmISFBcnJheS5wcm90b3R5cGUuZm9yRWFjaCYmISF3aW5kb3cuTWVkaWFTb3VyY2UmJiEhd2luZG93Lk1lZGlhS2V5cyYmISF3aW5kb3cubmF2aWdhdG9yJiYhIXdpbmRvdy5uYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzJiYhIXdpbmRvdy5NZWRpYUtleVN5c3RlbUFjY2VzcyYmISF3aW5kb3cuTWVkaWFLZXlTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb259O1xuVi5wcm9iZVN1cHBvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gWGMoKS50aGVuKGZ1bmN0aW9uKGEpe3ZhciBiPXVjKCksYz1jZCgpO2E9e21hbmlmZXN0OmIsbWVkaWE6Yyxkcm06YX07Zm9yKHZhciBkIGluIFZlKWFbZF09VmVbZF0oKTtyZXR1cm4gYX0pfTtcblYucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMua2IoKSxlPW5ldyBQZTt0aGlzLmo9ZTt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHQoXCJsb2FkaW5nXCIpKTtyZXR1cm4gUWUoZS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGR9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHZjKGEsdGhpcy5oLHRoaXMuYS5tYW5pZmVzdC5yZXRyeVBhcmFtZXRlcnMsYyl9LmJpbmQodGhpcykpLnRoZW4oZnVuY3Rpb24oYil7dGhpcy5sPW5ldyBiO3RoaXMubC5jb25maWd1cmUodGhpcy5hLm1hbmlmZXN0KTtyZXR1cm4gdGhpcy5sLnN0YXJ0KGEsdGhpcy5oLHRoaXMuTmEuYmluZCh0aGlzKSx0aGlzLmlhLmJpbmQodGhpcyksdGhpcy5SYy5iaW5kKHRoaXMpKX0uYmluZCh0aGlzKSkudGhlbihmdW5jdGlvbihiKXtpZigwPT1iLnBlcmlvZHMubGVuZ3RoKXRocm93IG5ldyB2KDQsNDAxNCk7dGhpcy5jPWI7dGhpcy5wYT1hO3RoaXMuZz1uZXcgSmModGhpcy5oLHRoaXMuaWEuYmluZCh0aGlzKSxcbnRoaXMuU2MuYmluZCh0aGlzKSk7dGhpcy5nLmNvbmZpZ3VyZSh0aGlzLmEuZHJtKTtyZXR1cm4gdGhpcy5nLmluaXQoYiwhMSl9LmJpbmQodGhpcykpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmMucGVyaW9kcy5mb3JFYWNoKHRoaXMuTmEuYmluZCh0aGlzKSk7dGhpcy5ZPURhdGUubm93KCkvMUUzO3JldHVybiBQcm9taXNlLmFsbChbTWModGhpcy5nLHRoaXMuZiksdGhpcy5xYV0pfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5hLmFici5tYW5hZ2VyLmluaXQodGhpcy5pYi5iaW5kKHRoaXMpKTt0aGlzLmk9bmV3IFBkKHRoaXMuZix0aGlzLmMucHJlc2VudGF0aW9uVGltZWxpbmUsMSpNYXRoLm1heCh0aGlzLmMubWluQnVmZmVyVGltZXx8MCx0aGlzLmEuc3RyZWFtaW5nLnJlYnVmZmVyaW5nR29hbCksYnx8bnVsbCx0aGlzLk5iLmJpbmQodGhpcyksdGhpcy5UYy5iaW5kKHRoaXMpKTt0aGlzLkM9bmV3IGJkKHRoaXMuZix0aGlzLkYsdGhpcy5tKTt0aGlzLmI9bmV3IFpkKHRoaXMuaSxcbnRoaXMuQyx0aGlzLmgsdGhpcy5jLHRoaXMuUWMuYmluZCh0aGlzKSx0aGlzLlJiLmJpbmQodGhpcyksdGhpcy5pYS5iaW5kKHRoaXMpKTt0aGlzLmIuY29uZmlndXJlKHRoaXMuYS5zdHJlYW1pbmcpO3JldHVybiB0aGlzLmIuaW5pdCgpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5jLnBlcmlvZHMuZm9yRWFjaCh0aGlzLk5hLmJpbmQodGhpcykpO1dlKHRoaXMpO1hlKHRoaXMpO3RoaXMuaj1udWxsfS5iaW5kKHRoaXMpKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt0aGlzLmo9PWUmJih0aGlzLmo9bnVsbCx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHQoXCJ1bmxvYWRpbmdcIikpKTtyZXR1cm4gUHJvbWlzZS5yZWplY3QoYSl9LmJpbmQodGhpcykpfTtWLnByb3RvdHlwZS5sb2FkPVYucHJvdG90eXBlLmxvYWQ7XG5mdW5jdGlvbiBUZShhKXthLkY9bmV3IE1lZGlhU291cmNlO3ZhciBiPW5ldyB3O3koYS52LGEuRixcInNvdXJjZW9wZW5cIixiLnJlc29sdmUpO2EuZi5zcmM9d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYS5GKTtyZXR1cm4gYn1WLnByb3RvdHlwZS5jb25maWd1cmU9ZnVuY3Rpb24oYSl7YS5hYnImJmEuYWJyLm1hbmFnZXImJmEuYWJyLm1hbmFnZXIhPXRoaXMuYS5hYnIubWFuYWdlciYmKHRoaXMuYS5hYnIubWFuYWdlci5zdG9wKCksYS5hYnIubWFuYWdlci5pbml0KHRoaXMuaWIuYmluZCh0aGlzKSkpO1JlKHRoaXMuYSxhLFNlKHRoaXMpLFllKCksXCJcIik7WmUodGhpcyl9O1YucHJvdG90eXBlLmNvbmZpZ3VyZT1WLnByb3RvdHlwZS5jb25maWd1cmU7XG5mdW5jdGlvbiBaZShhKXthLmwmJmEubC5jb25maWd1cmUoYS5hLm1hbmlmZXN0KTthLmcmJmEuZy5jb25maWd1cmUoYS5hLmRybSk7aWYoYS5iKXthLmIuY29uZmlndXJlKGEuYS5zdHJlYW1pbmcpO3RyeXthLmMucGVyaW9kcy5mb3JFYWNoKGEuTmEuYmluZChhKSl9Y2F0Y2goYil7YS5pYShiKX0kZShhLGNlKGEuYikpfWEuYS5hYnIuZW5hYmxlZCYmIWEuc2E/YS5hLmFici5tYW5hZ2VyLmVuYWJsZSgpOmEuYS5hYnIubWFuYWdlci5kaXNhYmxlKCk7YS5hLmFici5tYW5hZ2VyLnNldERlZmF1bHRFc3RpbWF0ZShhLmEuYWJyLmRlZmF1bHRCYW5kd2lkdGhFc3RpbWF0ZSl9Vi5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbj1mdW5jdGlvbigpe3ZhciBhPVNlKHRoaXMpO1JlKGEsdGhpcy5hLFNlKHRoaXMpLFllKCksXCJcIik7cmV0dXJuIGF9O1YucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb249Vi5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbjtcblYucHJvdG90eXBlLkpjPWZ1bmN0aW9uKCl7dmFyIGE9U2UodGhpcyk7YS5hYnImJmEuYWJyLm1hbmFnZXImJmEuYWJyLm1hbmFnZXIhPXRoaXMuYS5hYnIubWFuYWdlciYmKHRoaXMuYS5hYnIubWFuYWdlci5zdG9wKCksYS5hYnIubWFuYWdlci5pbml0KHRoaXMuaWIuYmluZCh0aGlzKSkpO3RoaXMuYT1TZSh0aGlzKTtaZSh0aGlzKX07Vi5wcm90b3R5cGUucmVzZXRDb25maWd1cmF0aW9uPVYucHJvdG90eXBlLkpjO1YucHJvdG90eXBlLiRiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZn07Vi5wcm90b3R5cGUuZ2V0TWVkaWFFbGVtZW50PVYucHJvdG90eXBlLiRiO1YucHJvdG90eXBlLnJiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaH07Vi5wcm90b3R5cGUuZ2V0TmV0d29ya2luZ0VuZ2luZT1WLnByb3RvdHlwZS5yYjtWLnByb3RvdHlwZS5aYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhfTtWLnByb3RvdHlwZS5nZXRNYW5pZmVzdFVyaT1WLnByb3RvdHlwZS5aYjtcblYucHJvdG90eXBlLlM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jP3RoaXMuYy5wcmVzZW50YXRpb25UaW1lbGluZS5TKCk6ITF9O1YucHJvdG90eXBlLmlzTGl2ZT1WLnByb3RvdHlwZS5TO1YucHJvdG90eXBlLmZhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYz90aGlzLmMucHJlc2VudGF0aW9uVGltZWxpbmUuZmEoKTohMX07Vi5wcm90b3R5cGUuaXNJblByb2dyZXNzPVYucHJvdG90eXBlLmZhO1YucHJvdG90eXBlLkxjPWZ1bmN0aW9uKCl7dmFyIGE9MCxiPTA7dGhpcy5jJiYoYj10aGlzLmMucHJlc2VudGF0aW9uVGltZWxpbmUsYT1iLnVhKCksYj1iLlZhKCkpO3JldHVybntzdGFydDphLGVuZDpifX07Vi5wcm90b3R5cGUuc2Vla1JhbmdlPVYucHJvdG90eXBlLkxjO1YucHJvdG90eXBlLmtleVN5c3RlbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmc/dGhpcy5nLmtleVN5c3RlbSgpOlwiXCJ9O1YucHJvdG90eXBlLmtleVN5c3RlbT1WLnByb3RvdHlwZS5rZXlTeXN0ZW07XG5WLnByb3RvdHlwZS5kcm1JbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZz90aGlzLmcuYjpudWxsfTtWLnByb3RvdHlwZS5kcm1JbmZvPVYucHJvdG90eXBlLmRybUluZm87Vi5wcm90b3R5cGUuZGM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5EYX07Vi5wcm90b3R5cGUuaXNCdWZmZXJpbmc9Vi5wcm90b3R5cGUuZGM7Vi5wcm90b3R5cGUua2I9ZnVuY3Rpb24oKXtpZih0aGlzLkEpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgdChcInVubG9hZGluZ1wiKSk7dmFyIGE9UHJvbWlzZS5yZXNvbHZlKCk7dGhpcy5qJiYoYT10aGlzLmouY2FuY2VsKG5ldyB2KDcsN0UzKSkpO3JldHVybiBhLnRoZW4oZnVuY3Rpb24oKXt0aGlzLkh8fCh0aGlzLkg9YWYodGhpcykudGhlbihmdW5jdGlvbigpe3RoaXMuSD1udWxsfS5iaW5kKHRoaXMpKSk7cmV0dXJuIHRoaXMuSH0uYmluZCh0aGlzKSl9O1YucHJvdG90eXBlLnVubG9hZD1WLnByb3RvdHlwZS5rYjtcblYucHJvdG90eXBlLlVhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaT90aGlzLmkuVWEoKTowfTtWLnByb3RvdHlwZS5nZXRQbGF5YmFja1JhdGU9Vi5wcm90b3R5cGUuVWE7Vi5wcm90b3R5cGUuZWQ9ZnVuY3Rpb24oYSl7dGhpcy5pJiZXZCh0aGlzLmksYSl9O1YucHJvdG90eXBlLnRyaWNrUGxheT1WLnByb3RvdHlwZS5lZDtWLnByb3RvdHlwZS5TYj1mdW5jdGlvbigpe3RoaXMuaSYmV2QodGhpcy5pLDEpfTtWLnByb3RvdHlwZS5jYW5jZWxUcmlja1BsYXk9Vi5wcm90b3R5cGUuU2I7Vi5wcm90b3R5cGUuZ2V0VHJhY2tzPWZ1bmN0aW9uKCl7aWYoIXRoaXMuYilyZXR1cm5bXTt2YXIgYT1kZSh0aGlzLmIpO3JldHVybiByZChjZSh0aGlzLmIpLGEpLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gMD50aGlzLm9hLmluZGV4T2YoYS5pZCl9LmJpbmQodGhpcykpfTtWLnByb3RvdHlwZS5nZXRUcmFja3M9Vi5wcm90b3R5cGUuZ2V0VHJhY2tzO1xuVi5wcm90b3R5cGUuTWM9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLmIpe3ZhciBjPXNkKGNlKHRoaXMuYiksYSk7aWYoYyl7dmFyIGQ9Yy5zdHJlYW07ZC5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmZC5hbGxvd2VkQnlLZXlTeXN0ZW0mJih0aGlzLkIucHVzaCh7dGltZXN0YW1wOkRhdGUubm93KCkvMUUzLGlkOmQuaWQsdHlwZTphLnR5cGUsZnJvbUFkYXB0YXRpb246ITF9KSxjPXt9LGNbYS50eXBlXT1kLFwidGV4dFwiIT1hLnR5cGUmJihkPWRlKHRoaXMuYikudGV4dCx0aGlzLmNvbmZpZ3VyZSh7YWJyOntlbmFibGVkOiExfX0pLGQmJihjLnRleHQ9ZCkpLGJmKHRoaXMsYyxiKSl9fX07Vi5wcm90b3R5cGUuc2VsZWN0VHJhY2s9Vi5wcm90b3R5cGUuTWM7Vi5wcm90b3R5cGUuZ2M9ZnVuY3Rpb24oKXtyZXR1cm5cInNob3dpbmdcIj09dGhpcy5tLm1vZGV9O1YucHJvdG90eXBlLmlzVGV4dFRyYWNrVmlzaWJsZT1WLnByb3RvdHlwZS5nYztcblYucHJvdG90eXBlLk9jPWZ1bmN0aW9uKGEpe3RoaXMubS5tb2RlPWE/XCJzaG93aW5nXCI6XCJoaWRkZW5cIjtjZih0aGlzKX07Vi5wcm90b3R5cGUuc2V0VGV4dFRyYWNrVmlzaWJpbGl0eT1WLnByb3RvdHlwZS5PYztcblYucHJvdG90eXBlLmdldFN0YXRzPWZ1bmN0aW9uKCl7ZGYodGhpcyk7dmFyIGE9e30sYj17fSxjPXRoaXMuZiYmdGhpcy5mLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5P3RoaXMuZi5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpOnt9O3RoaXMuYiYmKGI9ZGUodGhpcy5iKSxhPWIudmlkZW98fHt9LGI9Yi5hdWRpb3x8e30pO3JldHVybnt3aWR0aDphLndpZHRofHwwLGhlaWdodDphLmhlaWdodHx8MCxzdHJlYW1CYW5kd2lkdGg6YS5iYW5kd2lkdGgrYi5iYW5kd2lkdGh8fDAsZGVjb2RlZEZyYW1lczpOdW1iZXIoYy50b3RhbFZpZGVvRnJhbWVzKSxkcm9wcGVkRnJhbWVzOk51bWJlcihjLmRyb3BwZWRWaWRlb0ZyYW1lcyksZXN0aW1hdGVkQmFuZHdpZHRoOnRoaXMuYS5hYnIubWFuYWdlci5nZXRCYW5kd2lkdGhFc3RpbWF0ZSgpLHBsYXlUaW1lOnRoaXMucmEsYnVmZmVyaW5nVGltZTp0aGlzLkssc3dpdGNoSGlzdG9yeTp0aGlzLkIuc2xpY2UoMCl9fTtcblYucHJvdG90eXBlLmdldFN0YXRzPVYucHJvdG90eXBlLmdldFN0YXRzO1xuVi5wcm90b3R5cGUuYWRkVGV4dFRyYWNrPWZ1bmN0aW9uKGEsYixjLGQsZSl7aWYoIXRoaXMuYilyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtmb3IodmFyIGY9Y2UodGhpcy5iKSxnLGg9MDtoPHRoaXMuYy5wZXJpb2RzLmxlbmd0aDtoKyspaWYodGhpcy5jLnBlcmlvZHNbaF09PWYpe2lmKGg9PXRoaXMuYy5wZXJpb2RzLmxlbmd0aC0xKXtpZihnPXRoaXMuYy5wcmVzZW50YXRpb25UaW1lbGluZS5lYSgpLWYuc3RhcnRUaW1lLEluZmluaXR5PT1nKXJldHVybiBQcm9taXNlLnJlamVjdCgpfWVsc2UgZz10aGlzLmMucGVyaW9kc1toKzFdLnN0YXJ0VGltZS1mLnN0YXJ0VGltZTticmVha312YXIgbD17aWQ6dGhpcy5SYSsrLGNyZWF0ZVNlZ21lbnRJbmRleDpQcm9taXNlLnJlc29sdmUuYmluZChQcm9taXNlKSxmaW5kU2VnbWVudFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIDF9LGdldFNlZ21lbnRSZWZlcmVuY2U6ZnVuY3Rpb24oYil7cmV0dXJuIDEhPWI/bnVsbDpuZXcgSigxLDAsXG5nLGZ1bmN0aW9uKCl7cmV0dXJuW2FdfSwwLG51bGwpfSxpbml0U2VnbWVudFJlZmVyZW5jZTpudWxsLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6MCxtaW1lVHlwZTpkLGNvZGVjczplfHxcIlwiLGJhbmR3aWR0aDowLGtpbmQ6YyxlbmNyeXB0ZWQ6ITEsa2V5SWQ6bnVsbCxsYW5ndWFnZTpiLGFsbG93ZWRCeUFwcGxpY2F0aW9uOiEwLGFsbG93ZWRCeUtleVN5c3RlbTohMH07ZD17bGFuZ3VhZ2U6Yix0eXBlOlwidGV4dFwiLHByaW1hcnk6ITEsZHJtSW5mb3M6W10sc3RyZWFtczpbbF19O3RoaXMub2EucHVzaChsLmlkKTtmLnN0cmVhbVNldHMucHVzaChkKTtyZXR1cm4gZWUodGhpcy5iLGwpLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5BKXJldHVybiB0aGlzLm9hLnNwbGljZSh0aGlzLm9hLmluZGV4T2YobC5pZCksMSksJGUodGhpcyxmKSxXZSh0aGlzKSx7aWQ6bC5pZCxhY3RpdmU6ITEsdHlwZTpcInRleHRcIixiYW5kd2lkdGg6MCxsYW5ndWFnZTpiLGtpbmQ6Yyx3aWR0aDpudWxsLGhlaWdodDpudWxsfX0uYmluZCh0aGlzKSl9O1xuVi5wcm90b3R5cGUuYWRkVGV4dFRyYWNrPVYucHJvdG90eXBlLmFkZFRleHRUcmFjaztWLnByb3RvdHlwZS5nYj1mdW5jdGlvbihhLGIpe3RoaXMuQ2Eud2lkdGg9YTt0aGlzLkNhLmhlaWdodD1ifTtWLnByb3RvdHlwZS5zZXRNYXhIYXJkd2FyZVJlc29sdXRpb249Vi5wcm90b3R5cGUuZ2I7XG5mdW5jdGlvbiBVZShhKXthLnYmJmEudi5sYShhLkYsXCJzb3VyY2VvcGVuXCIpO2EuZiYmKGEuZi5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIiksYS5mLmxvYWQoKSk7dmFyIGI9UHJvbWlzZS5hbGwoW2EuYT9hLmEuYWJyLm1hbmFnZXIuc3RvcCgpOm51bGwsYS5nP2EuZy5vKCk6bnVsbCxhLkM/YS5DLm8oKTpudWxsLGEuaT9hLmkubygpOm51bGwsYS5iP2EuYi5vKCk6bnVsbCxhLmw/YS5sLnN0b3AoKTpudWxsXSk7YS5nPW51bGw7YS5DPW51bGw7YS5pPW51bGw7YS5iPW51bGw7YS5sPW51bGw7YS5jPW51bGw7YS5wYT1udWxsO2EucWE9bnVsbDthLkY9bnVsbDthLnM9e307YS5CPVtdO2EucmE9MDthLks9MDtyZXR1cm4gYn1mdW5jdGlvbiBhZihhKXtyZXR1cm4gYS5sP1VlKGEpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLkF8fCh0aGlzLk5iKCExKSx0aGlzLnFhPVRlKHRoaXMpKX0uYmluZChhKSk6UHJvbWlzZS5yZXNvbHZlKCl9XG5mdW5jdGlvbiBZZSgpe3JldHVybntcIi5kcm0uc2VydmVyc1wiOlwiXCIsXCIuZHJtLmNsZWFyS2V5c1wiOlwiXCIsXCIuZHJtLmFkdmFuY2VkXCI6e2Rpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkOiExLHBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkOiExLHZpZGVvUm9idXN0bmVzczpcIlwiLGF1ZGlvUm9idXN0bmVzczpcIlwiLHNlcnZlckNlcnRpZmljYXRlOm51bGx9fX1cbmZ1bmN0aW9uIFNlKGEpe3JldHVybntkcm06e3JldHJ5UGFyYW1ldGVyczpxYygpLHNlcnZlcnM6e30sY2xlYXJLZXlzOnt9LGFkdmFuY2VkOnt9fSxtYW5pZmVzdDp7cmV0cnlQYXJhbWV0ZXJzOnFjKCksZGFzaDp7Y3VzdG9tU2NoZW1lOmZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIG51bGx9LGNsb2NrU3luY1VyaTpcIlwifX0sc3RyZWFtaW5nOntyZXRyeVBhcmFtZXRlcnM6cWMoKSxyZWJ1ZmZlcmluZ0dvYWw6MixidWZmZXJpbmdHb2FsOjEwLGJ1ZmZlckJlaGluZDozMCxpZ25vcmVUZXh0U3RyZWFtRmFpbHVyZXM6ITEsdXNlUmVsYXRpdmVDdWVUaW1lc3RhbXBzOiExfSxhYnI6e21hbmFnZXI6YS5LYSxlbmFibGVkOiEwLGRlZmF1bHRCYW5kd2lkdGhFc3RpbWF0ZTo1RTV9LHByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2U6XCJcIixwcmVmZXJyZWRUZXh0TGFuZ3VhZ2U6XCJcIixyZXN0cmljdGlvbnM6e21pbldpZHRoOjAsbWF4V2lkdGg6SW5maW5pdHksbWluSGVpZ2h0OjAsbWF4SGVpZ2h0OkluZmluaXR5LFxubWluUGl4ZWxzOjAsbWF4UGl4ZWxzOkluZmluaXR5LG1pbkF1ZGlvQmFuZHdpZHRoOjAsbWF4QXVkaW9CYW5kd2lkdGg6SW5maW5pdHksbWluVmlkZW9CYW5kd2lkdGg6MCxtYXhWaWRlb0JhbmR3aWR0aDpJbmZpbml0eX19fWs9Vi5wcm90b3R5cGU7ay5OYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmI/ZGUodGhpcy5iKTp7fTtwZCh0aGlzLmcsYixhKTtiPWEuc3RyZWFtU2V0cy5zb21lKHRkKTtvZChhLHRoaXMuYS5yZXN0cmljdGlvbnMsdGhpcy5DYSkmJiF0aGlzLmomJldlKHRoaXMpO2E9IWEuc3RyZWFtU2V0cy5zb21lKHRkKTtpZighYil0aHJvdyBuZXcgdig0LDQwMTEpO2lmKGEpdGhyb3cgbmV3IHYoNCw0MDEyKTt9O2Z1bmN0aW9uIGJmKGEsYixjKXtmb3IodmFyIGQgaW4gYil7dmFyIGU9YltkXSxmPWN8fCExO1widGV4dFwiPT1kJiYoZj0hMCk7YS5zYT9hLnNbZF09e3N0cmVhbTplLFZiOmZ9OmZlKGEuYixkLGUsZil9fVxuZnVuY3Rpb24gZGYoYSl7aWYoYS5jKXt2YXIgYj1EYXRlLm5vdygpLzFFMzthLkRhP2EuSys9Yi1hLlk6YS5yYSs9Yi1hLlk7YS5ZPWJ9fWsuVWM9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYS5hYnIubWFuYWdlci5zZWdtZW50RG93bmxvYWRlZChhLGIsYyl9O2suTmI9ZnVuY3Rpb24oYSl7ZGYodGhpcyk7dGhpcy5EYT1hO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgdChcImJ1ZmZlcmluZ1wiLHtidWZmZXJpbmc6YX0pKX07ay5UYz1mdW5jdGlvbigpe3RoaXMuYiYmaWUodGhpcy5iKX07XG5mdW5jdGlvbiBlZihhLGIsYyl7aWYoIUYoYikuc29tZSh0ZCkpcmV0dXJuIGEuaWEobmV3IHYoNCw0MDEyKSkse307dmFyIGQ9e307aWYoYylbXCJ2aWRlb1wiLFwiYXVkaW9cIixcInRleHRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXthIGluIGImJihkW2FdPWJbYV0pfSk7ZWxzZXtjPWRlKGEuYik7Zm9yKHZhciBlIGluIGMpe3ZhciBmPWNbZV07Zi5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmZi5hbGxvd2VkQnlLZXlTeXN0ZW0mJmJbZV0ubGFuZ3VhZ2U9PWYubGFuZ3VhZ2V8fChkW2VdPWJbZV0pfX1pZihOYShkKSlyZXR1cm57fTtoYShPYmplY3Qua2V5cyhkKSk7dmFyIGc9YS5hLmFici5tYW5hZ2VyLmNob29zZVN0cmVhbXMoZCk7cmV0dXJuIFBhKGQsZnVuY3Rpb24oYSl7cmV0dXJuISFnW2FdfSk/ZzooYS5pYShuZXcgdig0LDQwMTIpKSx7fSl9XG5mdW5jdGlvbiAkZShhLGIpe3ZhciBjPXthdWRpbzohMSx0ZXh0OiExfSxkPXVkKGIsYS5hLGMpLGU9ZWYoYSxkKSxmO2ZvcihmIGluIGUpYS5CLnB1c2goe3RpbWVzdGFtcDpEYXRlLm5vdygpLzFFMyxpZDplW2ZdLmlkLHR5cGU6Zixmcm9tQWRhcHRhdGlvbjohMH0pO2JmKGEsZSwhMCk7WGUoYSk7ZC50ZXh0JiZkLmF1ZGlvJiZjLnRleHQmJmQudGV4dC5sYW5ndWFnZSE9ZC5hdWRpby5sYW5ndWFnZSYmKGEubS5tb2RlPVwic2hvd2luZ1wiLGNmKGEpKX1rLlFjPWZ1bmN0aW9uKGEpe3RoaXMuc2E9ITA7dGhpcy5hLmFici5tYW5hZ2VyLmRpc2FibGUoKTthPXVkKGEsdGhpcy5hKTthPWVmKHRoaXMsYSwhMCk7Zm9yKHZhciBiIGluIHRoaXMucylhW2JdPXRoaXMuc1tiXS5zdHJlYW07dGhpcy5zPXt9O2ZvcihiIGluIGEpdGhpcy5CLnB1c2goe3RpbWVzdGFtcDpEYXRlLm5vdygpLzFFMyxpZDphW2JdLmlkLHR5cGU6Yixmcm9tQWRhcHRhdGlvbjohMH0pO3RoaXMuanx8V2UodGhpcyk7cmV0dXJuIGF9O1xuay5SYj1mdW5jdGlvbigpe3RoaXMuc2E9ITE7dGhpcy5hLmFici5lbmFibGVkJiZ0aGlzLmEuYWJyLm1hbmFnZXIuZW5hYmxlKCk7Zm9yKHZhciBhIGluIHRoaXMucyl7dmFyIGI9dGhpcy5zW2FdO2ZlKHRoaXMuYixhLGIuc3RyZWFtLGIuVmIpfXRoaXMucz17fX07ay5pYj1mdW5jdGlvbihhLGIpe3ZhciBjPWRlKHRoaXMuYiksZDtmb3IoZCBpbiBhKXt2YXIgZT1hW2RdO2NbZF0hPWU/dGhpcy5CLnB1c2goe3RpbWVzdGFtcDpEYXRlLm5vdygpLzFFMyxpZDplLmlkLHR5cGU6ZCxmcm9tQWRhcHRhdGlvbjohMH0pOmRlbGV0ZSBhW2RdfWlmKCFOYShhKSYmdGhpcy5iKXtmb3IoZCBpbiBhKWZlKHRoaXMuYixkLGFbZF0sYnx8ITEpO1hlKHRoaXMpfX07ZnVuY3Rpb24gWGUoYSl7UHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3RoaXMuQXx8dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB0KFwiYWRhcHRhdGlvblwiKSl9LmJpbmQoYSkpfVxuZnVuY3Rpb24gV2UoYSl7UHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3RoaXMuQXx8dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB0KFwidHJhY2tzY2hhbmdlZFwiKSl9LmJpbmQoYSkpfWZ1bmN0aW9uIGNmKGEpe2EuZGlzcGF0Y2hFdmVudChuZXcgdChcInRleHR0cmFja3Zpc2liaWxpdHlcIikpfWsuaWE9ZnVuY3Rpb24oYSl7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB0KFwiZXJyb3JcIix7ZGV0YWlsOmF9KSl9O2suUmM9ZnVuY3Rpb24oYSl7dGhpcy5kaXNwYXRjaEV2ZW50KGEpfTtrLnRjPWZ1bmN0aW9uKCl7aWYodGhpcy5mLmVycm9yKXt2YXIgYT10aGlzLmYuZXJyb3IuY29kZTtpZigxIT1hKXt2YXIgYj10aGlzLmYuZXJyb3IubXNFeHRlbmRlZENvZGU7YiYmKDA+YiYmKGIrPU1hdGgucG93KDIsMzIpKSxiPWIudG9TdHJpbmcoMTYpKTt0aGlzLmlhKG5ldyB2KDMsMzAxNixhLGIpKX19fTtcbmsuU2M9ZnVuY3Rpb24oYSl7dmFyIGI9W1wib3V0cHV0LXJlc3RyaWN0ZWRcIixcImludGVybmFsLWVycm9yXCJdLGM9Y2UodGhpcy5iKSxkPSExO2Muc3RyZWFtU2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGMpe2Muc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ZhciBlPWMuYWxsb3dlZEJ5S2V5U3lzdGVtO2Mua2V5SWQmJmMua2V5SWQgaW4gYSYmKGMuYWxsb3dlZEJ5S2V5U3lzdGVtPTA+Yi5pbmRleE9mKGFbYy5rZXlJZF0pKTtlIT1jLmFsbG93ZWRCeUtleVN5c3RlbSYmKGQ9ITApfSl9KTskZSh0aGlzLGMpO2QmJldlKHRoaXMpfTtmdW5jdGlvbiBXKGEpe3RoaXMuYT1uZXcgQWU7dGhpcy5jPWE7dGhpcy5qPWZmKHRoaXMpO3RoaXMuZz1udWxsO3RoaXMudj0hMTt0aGlzLmk9bnVsbDt0aGlzLmw9W107dGhpcy5mPS0xO3RoaXMubT0wO3RoaXMuYj1udWxsO3RoaXMuaD1uZXcgSWUoYS5oLGEuZ2V0Q29uZmlndXJhdGlvbigpLnN0cmVhbWluZy5yZXRyeVBhcmFtZXRlcnMsdGhpcy5qKX1tKFwic2hha2Eub2ZmbGluZS5TdG9yYWdlXCIsVyk7ZnVuY3Rpb24gZ2YoKXtyZXR1cm4hIXdpbmRvdy5pbmRleGVkREJ9Vy5zdXBwb3J0PWdmO1xuVy5wcm90b3R5cGUubz1mdW5jdGlvbigpe3ZhciBhPXRoaXMubCxiPXRoaXMuYSxjPXRoaXMuaD90aGlzLmgubygpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXt9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKGEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBiLnJlbW92ZShcInNlZ21lbnRcIixhKX0pKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5vKCl9KTpQcm9taXNlLnJlc29sdmUoKTt0aGlzLmo9dGhpcy5jPXRoaXMuaD10aGlzLmE9bnVsbDtyZXR1cm4gY307Vy5wcm90b3R5cGUuZGVzdHJveT1XLnByb3RvdHlwZS5vO1cucHJvdG90eXBlLmNvbmZpZ3VyZT1mdW5jdGlvbihhKXtSZSh0aGlzLmosYSxmZih0aGlzKSx7fSxcIlwiKX07Vy5wcm90b3R5cGUuY29uZmlndXJlPVcucHJvdG90eXBlLmNvbmZpZ3VyZTtcblcucHJvdG90eXBlLmFkPWZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEpe2Y9YX1pZih0aGlzLnYpcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB2KDksOTAwNikpO3RoaXMudj0hMDt2YXIgZSxmPW51bGw7cmV0dXJuIGhmKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtZKHRoaXMpO3JldHVybiBqZih0aGlzLGEsZCxjKX0uYmluZCh0aGlzKSkudGhlbihmdW5jdGlvbihjKXtZKHRoaXMpO3RoaXMuYj1jLm1hbmlmZXN0O3RoaXMuZz1jLldiO2lmKHRoaXMuYi5wcmVzZW50YXRpb25UaW1lbGluZS5TKCl8fHRoaXMuYi5wcmVzZW50YXRpb25UaW1lbGluZS5mYSgpKXRocm93IG5ldyB2KDksOTAwNSxhKTt0aGlzLmIucGVyaW9kcy5mb3JFYWNoKHRoaXMucy5iaW5kKHRoaXMpKTt0aGlzLmY9dGhpcy5hLmIubWFuaWZlc3QrKzt0aGlzLm09MDtjPXRoaXMuYi5wZXJpb2RzLm1hcCh0aGlzLkEuYmluZCh0aGlzKSk7dmFyIGQ9dGhpcy5nLmIsZj1SYyh0aGlzLmcpO2lmKGQpe2lmKCFmLmxlbmd0aCl0aHJvdyBuZXcgdig5LFxuOTAwNyxhKTtkLmluaXREYXRhPVtdfWU9e2tleTp0aGlzLmYsb3JpZ2luYWxNYW5pZmVzdFVyaTphLGR1cmF0aW9uOnRoaXMubSxzaXplOjAscGVyaW9kczpjLHNlc3Npb25JZHM6Zixkcm1JbmZvOmQsYXBwTWV0YWRhdGE6Yn07cmV0dXJuIEtlKHRoaXMuaCxlKX0uYmluZCh0aGlzKSkudGhlbihmdW5jdGlvbigpe1kodGhpcyk7aWYoZil0aHJvdyBmO3JldHVybiBFZSh0aGlzLmEsXCJtYW5pZmVzdFwiLGUpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGtmKHRoaXMpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEhlKGUpfS5iaW5kKHRoaXMpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3JldHVybiBrZih0aGlzKVtcImNhdGNoXCJdKEMpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBhO30pfS5iaW5kKHRoaXMpKX07Vy5wcm90b3R5cGUuc3RvcmU9Vy5wcm90b3R5cGUuYWQ7XG5XLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXs2MDEzIT1hLmNvZGUmJihlPWEpfXZhciBjPWEub2ZmbGluZVVyaSxkPS9eb2ZmbGluZTooWzAtOV0rKSQvLmV4ZWMoYyk7aWYoIWQpcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB2KDksOTAwNCxjKSk7dmFyIGU9bnVsbCxmLGcsaD1OdW1iZXIoZFsxXSk7cmV0dXJuIGhmKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtZKHRoaXMpO3JldHVybiB0aGlzLmEuZ2V0KFwibWFuaWZlc3RcIixoKX0uYmluZCh0aGlzKSkudGhlbihmdW5jdGlvbihhKXtZKHRoaXMpO2lmKCFhKXRocm93IG5ldyB2KDksOTAwMyxjKTtmPWE7YT1OZShmKTtnPW5ldyBKYyh0aGlzLmMuaCxiLGZ1bmN0aW9uKCl7fSk7Zy5jb25maWd1cmUodGhpcy5jLmdldENvbmZpZ3VyYXRpb24oKS5kcm0pO3JldHVybiBnLmluaXQoYSwhMCl9LmJpbmQodGhpcykpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gT2MoZyxmLnNlc3Npb25JZHMpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGcubygpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7WSh0aGlzKTtcbmlmKGUpdGhyb3cgZTt2YXIgYj1mLnBlcmlvZHMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnN0cmVhbXMubWFwKGZ1bmN0aW9uKGEpe3ZhciBiPWEuc2VnbWVudHMubWFwKGZ1bmN0aW9uKGEpe2E9L15vZmZsaW5lOlswLTldK1xcL1swLTldK1xcLyhbMC05XSspJC8uZXhlYyhhLnVyaSk7cmV0dXJuIE51bWJlcihhWzFdKX0pO2EuaW5pdFNlZ21lbnRVcmkmJihhPS9eb2ZmbGluZTpbMC05XStcXC9bMC05XStcXC8oWzAtOV0rKSQvLmV4ZWMoYS5pbml0U2VnbWVudFVyaSksYi5wdXNoKE51bWJlcihhWzFdKSkpO3JldHVybiBifSkucmVkdWNlKEIsW10pfSkucmVkdWNlKEIsW10pLGM9MCxkPWIubGVuZ3RoLGc9dGhpcy5qLnByb2dyZXNzQ2FsbGJhY2s7cmV0dXJuIEZlKHRoaXMuYSxmdW5jdGlvbihlKXtlPWIuaW5kZXhPZihlLmtleSk7MDw9ZSYmKGcoYSxjL2QpLGMrKyk7cmV0dXJuIDA8PWV9LmJpbmQodGhpcykpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7WSh0aGlzKTt0aGlzLmoucHJvZ3Jlc3NDYWxsYmFjayhhLFxuMSk7cmV0dXJuIHRoaXMuYS5yZW1vdmUoXCJtYW5pZmVzdFwiLGgpfS5iaW5kKHRoaXMpKX07Vy5wcm90b3R5cGUucmVtb3ZlPVcucHJvdG90eXBlLnJlbW92ZTtXLnByb3RvdHlwZS5saXN0PWZ1bmN0aW9uKCl7dmFyIGE9W107cmV0dXJuIGhmKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtZKHRoaXMpO3JldHVybiB0aGlzLmEuZm9yRWFjaChcIm1hbmlmZXN0XCIsZnVuY3Rpb24oYil7YS5wdXNoKEhlKGIpKX0pfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX07Vy5wcm90b3R5cGUubGlzdD1XLnByb3RvdHlwZS5saXN0O1xuZnVuY3Rpb24gamYoYSxiLGMsZCl7ZnVuY3Rpb24gZSgpe312YXIgZj1hLmMuaCxnPWEuYy5nZXRDb25maWd1cmF0aW9uKCksaCxsLG47cmV0dXJuIHZjKGIsZixnLm1hbmlmZXN0LnJldHJ5UGFyYW1ldGVycyxkKS50aGVuKGZ1bmN0aW9uKGEpe1kodGhpcyk7bj1uZXcgYTtuLmNvbmZpZ3VyZShnLm1hbmlmZXN0KTtyZXR1cm4gbi5zdGFydChiLGYsdGhpcy5zLmJpbmQodGhpcyksYyl9LmJpbmQoYSkpLnRoZW4oZnVuY3Rpb24oYSl7WSh0aGlzKTtoPWE7bD1uZXcgSmMoZixjLGUpO2wuY29uZmlndXJlKGcuZHJtKTtyZXR1cm4gbC5pbml0KGgsITApfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKCl7WSh0aGlzKTtyZXR1cm4gbGYoaCl9LmJpbmQoYSkpLnRoZW4oZnVuY3Rpb24oKXtZKHRoaXMpO3JldHVybiBOYyhsKX0uYmluZChhKSkudGhlbihmdW5jdGlvbigpe1kodGhpcyk7cmV0dXJuIG4uc3RvcCgpfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKCl7WSh0aGlzKTtyZXR1cm57bWFuaWZlc3Q6aCxcbldiOmx9fS5iaW5kKGEpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2lmKG4pcmV0dXJuIG4uc3RvcCgpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBhO30pO3Rocm93IGE7fSl9XG5XLnByb3RvdHlwZS5CPWZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9YS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJ2aWRlb1wiPT1hLnR5cGUmJjQ4MD49YS5oZWlnaHR9KTtjLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi5iYW5kd2lkdGgtYS5iYW5kd2lkdGh9KTtjLmxlbmd0aCYmYi5wdXNoKGNbMF0pO2Zvcih2YXIgZD1FYyh0aGlzLmMuZ2V0Q29uZmlndXJhdGlvbigpLnByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2UpLGM9WzAsQ2MsRGNdLGU9YS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJhdWRpb1wiPT1hLnR5cGV9KSxjPWMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBlLmZpbHRlcihmdW5jdGlvbihiKXtiPUVjKGIubGFuZ3VhZ2UpO3JldHVybiBCYyhhLGQsYil9KX0pLGY9ZSxnPTA7ZzxjLmxlbmd0aDtnKyspY1tnXS5sZW5ndGgmJihmPWNbZ10pO2Yuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLmJhbmR3aWR0aC1iLmJhbmR3aWR0aH0pO2YubGVuZ3RoJiZiLnB1c2goZltNYXRoLmZsb29yKGYubGVuZ3RoL1xuMildKTt2YXIgYz1FYyh0aGlzLmMuZ2V0Q29uZmlndXJhdGlvbigpLnByZWZlcnJlZFRleHRMYW5ndWFnZSksaD1CYy5iaW5kKG51bGwsRGMsYyk7Yi5wdXNoLmFwcGx5KGIsYS5maWx0ZXIoZnVuY3Rpb24oYSl7dmFyIGI9RWMoYS5sYW5ndWFnZSk7cmV0dXJuXCJ0ZXh0XCI9PWEudHlwZSYmaChiKX0pKTtyZXR1cm4gYn07ZnVuY3Rpb24gZmYoYSl7cmV0dXJue3RyYWNrU2VsZWN0aW9uQ2FsbGJhY2s6YS5CLmJpbmQoYSkscHJvZ3Jlc3NDYWxsYmFjazpmdW5jdGlvbihhLGMpe2lmKGF8fGMpcmV0dXJuIG51bGx9fX1mdW5jdGlvbiBoZihhKXtyZXR1cm4gYS5hLmE/UHJvbWlzZS5yZXNvbHZlKCk6YS5hLmluaXQoR2UpfVxuVy5wcm90b3R5cGUucz1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixjKXtiPWIuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLnR5cGU9PWN9KTtyZXR1cm4gMD09Yi5sZW5ndGg/bnVsbDpzZChhLGJbMF0pLnN0cmVhbX12YXIgYz17fTt0aGlzLmkmJihjPXt2aWRlbzpiKHRoaXMuYi5wZXJpb2RzWzBdLHRoaXMuaSxcInZpZGVvXCIpLGF1ZGlvOmIodGhpcy5iLnBlcmlvZHNbMF0sdGhpcy5pLFwiYXVkaW9cIil9KTtwZCh0aGlzLmcsYyxhKTtvZChhLHRoaXMuYy5nZXRDb25maWd1cmF0aW9uKCkucmVzdHJpY3Rpb25zLHt3aWR0aDpJbmZpbml0eSxoZWlnaHQ6SW5maW5pdHl9KX07ZnVuY3Rpb24ga2YoYSl7dmFyIGI9YS5nP2EuZy5vKCk6UHJvbWlzZS5yZXNvbHZlKCk7YS5nPW51bGw7YS5iPW51bGw7YS52PSExO2EuaT1udWxsO2EubD1bXTthLmY9LTE7cmV0dXJuIGJ9XG5mdW5jdGlvbiBsZihhKXthPWEucGVyaW9kcy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3RyZWFtU2V0c30pLnJlZHVjZShCLFtdKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3RyZWFtc30pLnJlZHVjZShCLFtdKTtyZXR1cm4gUHJvbWlzZS5hbGwoYS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY3JlYXRlU2VnbWVudEluZGV4KCl9KSl9XG5XLnByb3RvdHlwZS5BPWZ1bmN0aW9uKGEpe3ZhciBiPXJkKGEsbnVsbCksYj10aGlzLmoudHJhY2tTZWxlY3Rpb25DYWxsYmFjayhiKTt0aGlzLml8fCh0aGlzLmk9Yix0aGlzLmIucGVyaW9kcy5mb3JFYWNoKHRoaXMucy5iaW5kKHRoaXMpKSk7Zm9yKHZhciBjPWIubGVuZ3RoLTE7MDxjOy0tYyl7Zm9yKHZhciBkPSExLGU9Yy0xOzA8PWU7LS1lKWlmKGJbY10udHlwZT09YltlXS50eXBlJiZiW2NdLmtpbmQ9PWJbZV0ua2luZCYmYltjXS5sYW5ndWFnZT09YltlXS5sYW5ndWFnZSl7ZD0hMDticmVha31pZihkKWJyZWFrfWI9Yi5tYXAoZnVuY3Rpb24oYil7Yj1zZChhLGIpO3JldHVybiBtZih0aGlzLGEsYi5iZCxiLnN0cmVhbSl9LmJpbmQodGhpcykpO3JldHVybntzdGFydFRpbWU6YS5zdGFydFRpbWUsc3RyZWFtczpifX07XG5mdW5jdGlvbiBtZihhLGIsYyxkKXtmb3IodmFyIGU9W10sZj1hLmIucHJlc2VudGF0aW9uVGltZWxpbmUudGEoKSxnPWYsaD1kLmZpbmRTZWdtZW50UG9zaXRpb24oZiksbD1udWxsIT1oP2QuZ2V0U2VnbWVudFJlZmVyZW5jZShoKTpudWxsO2w7KXt2YXIgbj1hLmEuYi5zZWdtZW50Kys7SmUoYS5oLGMudHlwZSxsLChsLmVuZFRpbWUtbC5zdGFydFRpbWUpKmQuYmFuZHdpZHRoLzgsZnVuY3Rpb24oYSxiLGMsZCl7Yj17a2V5OmEsZGF0YTpkLG1hbmlmZXN0S2V5OnRoaXMuZixzdHJlYW1OdW1iZXI6YyxzZWdtZW50TnVtYmVyOmJ9O3RoaXMubC5wdXNoKGEpO3JldHVybiBFZSh0aGlzLmEsXCJzZWdtZW50XCIsYil9LmJpbmQoYSxuLGwucG9zaXRpb24sZC5pZCkpO2UucHVzaCh7c3RhcnRUaW1lOmwuc3RhcnRUaW1lLGVuZFRpbWU6bC5lbmRUaW1lLHVyaTpcIm9mZmxpbmU6XCIrYS5mK1wiL1wiK2QuaWQrXCIvXCIrbn0pO2c9bC5lbmRUaW1lK2Iuc3RhcnRUaW1lO2w9ZC5nZXRTZWdtZW50UmVmZXJlbmNlKCsraCl9YS5tPVxuTWF0aC5tYXgoYS5tLGctZik7Yj1udWxsO2QuaW5pdFNlZ21lbnRSZWZlcmVuY2UmJihuPWEuYS5iLnNlZ21lbnQrKyxiPVwib2ZmbGluZTpcIithLmYrXCIvXCIrZC5pZCtcIi9cIituLEplKGEuaCxjLnR5cGUsZC5pbml0U2VnbWVudFJlZmVyZW5jZSwwLGZ1bmN0aW9uKGEsYil7dmFyIGM9e2tleTpuLGRhdGE6YixtYW5pZmVzdEtleTp0aGlzLmYsc3RyZWFtTnVtYmVyOmEsc2VnbWVudE51bWJlcjotMX07dGhpcy5sLnB1c2gobik7cmV0dXJuIEVlKHRoaXMuYSxcInNlZ21lbnRcIixjKX0uYmluZChhLGQuaWQpKSk7cmV0dXJue2lkOmQuaWQscHJpbWFyeTpjLnByaW1hcnkscHJlc2VudGF0aW9uVGltZU9mZnNldDpkLnByZXNlbnRhdGlvblRpbWVPZmZzZXR8fDAsY29udGVudFR5cGU6Yy50eXBlLG1pbWVUeXBlOmQubWltZVR5cGUsY29kZWNzOmQuY29kZWNzLGZyYW1lUmF0ZTpkLmZyYW1lUmF0ZSxraW5kOmQua2luZCxsYW5ndWFnZTpjLmxhbmd1YWdlLHdpZHRoOmQud2lkdGh8fG51bGwsaGVpZ2h0OmQuaGVpZ2h0fHxcbm51bGwsaW5pdFNlZ21lbnRVcmk6YixlbmNyeXB0ZWQ6ZC5lbmNyeXB0ZWQsa2V5SWQ6ZC5rZXlJZCxzZWdtZW50czplfX1mdW5jdGlvbiBZKGEpe2lmKCFhLmMpdGhyb3cgbmV3IHYoOSw5MDAyKTt9VmUub2ZmbGluZT1nZjttKFwic2hha2EucG9seWZpbGwuaW5zdGFsbEFsbFwiLGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxuZi5sZW5ndGg7KythKW5mW2FdKCl9KTt2YXIgbmY9W107ZnVuY3Rpb24gb2YoYSl7bmYucHVzaChhKX1tKFwic2hha2EucG9seWZpbGwucmVnaXN0ZXJcIixvZik7ZnVuY3Rpb24gcGYoYSl7dmFyIGI9YS50eXBlLnJlcGxhY2UoL14od2Via2l0fG1venxNUykvLFwiXCIpLnRvTG93ZXJDYXNlKCksYj1uZXcgRXZlbnQoYixhKTthLnRhcmdldC5kaXNwYXRjaEV2ZW50KGIpfVxub2YoZnVuY3Rpb24oKXtpZih3aW5kb3cuRG9jdW1lbnQpe3ZhciBhPUVsZW1lbnQucHJvdG90eXBlO2EucmVxdWVzdEZ1bGxzY3JlZW49YS5yZXF1ZXN0RnVsbHNjcmVlbnx8YS5tb3pSZXF1ZXN0RnVsbFNjcmVlbnx8YS5tc1JlcXVlc3RGdWxsc2NyZWVufHxhLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuO2E9RG9jdW1lbnQucHJvdG90eXBlO2EuZXhpdEZ1bGxzY3JlZW49YS5leGl0RnVsbHNjcmVlbnx8YS5tb3pDYW5jZWxGdWxsU2NyZWVufHxhLm1zRXhpdEZ1bGxzY3JlZW58fGEud2Via2l0RXhpdEZ1bGxzY3JlZW47XCJmdWxsc2NyZWVuRWxlbWVudFwiaW4gZG9jdW1lbnR8fChPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsXCJmdWxsc2NyZWVuRWxlbWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnR8fGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnR8fGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCxcblwiZnVsbHNjcmVlbkVuYWJsZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbmFibGVkfHxkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbmFibGVkfHxkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRW5hYmxlZH19KSk7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixwZik7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiLHBmKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLHBmKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW96ZnVsbHNjcmVlbmVycm9yXCIscGYpO2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIixwZik7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIk1TRnVsbHNjcmVlbkVycm9yXCIscGYpfX0pO29mKGZ1bmN0aW9uKCl7dmFyIGE9bmF2aWdhdG9yLnVzZXJBZ2VudDthJiYwPD1hLmluZGV4T2YoXCJDcktleVwiKSYmZGVsZXRlIHdpbmRvdy5pbmRleGVkREJ9KTtmdW5jdGlvbiBxZihhKXt0aGlzLmM9W107dGhpcy5iPVtdO3RoaXMuYT1bXTtmb3IoYT1uZXcgSmIobmV3IERhdGFWaWV3KGEuYnVmZmVyKSk7TGIoYSk7KXt2YXIgYj1TYigxODg2NjE0Mzc2LGEpO2lmKC0xPT1iKWJyZWFrO3ZhciBjPWEuYS04LGQ9TWIoYSk7aWYoMTxkKU4oYSxiLShhLmEtYykpO2Vsc2V7TihhLDMpO3ZhciBlPVRhKFFiKGEsMTYpKSxmPVtdO2lmKDA8ZClmb3IodmFyIGQ9TShhKSxnPTA7ZzxkOysrZyl7dmFyIGg9VGEoUWIoYSwxNikpO2YucHVzaChoKX1kPU0oYSk7TihhLGQpO3RoaXMuYi5wdXNoLmFwcGx5KHRoaXMuYixmKTt0aGlzLmMucHVzaChlKTt0aGlzLmEucHVzaCh7c3RhcnQ6YyxlbmQ6YS5hLTF9KTthLmEhPWMrYiYmTihhLGItKGEuYS1jKSl9fX07ZnVuY3Rpb24gcmYoYSxiKXt0cnl7dmFyIGM9bmV3IHNmKGEsYik7cmV0dXJuIFByb21pc2UucmVzb2x2ZShjKX1jYXRjaChkKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZCl9fVxuZnVuY3Rpb24gc2YoYSxiKXt0aGlzLmtleVN5c3RlbT1hO2Zvcih2YXIgYz0hMSxkPTA7ZDxiLmxlbmd0aDsrK2Qpe3ZhciBlPWJbZF0sZj17YXVkaW9DYXBhYmlsaXRpZXM6W10sdmlkZW9DYXBhYmlsaXRpZXM6W10scGVyc2lzdGVudFN0YXRlOlwib3B0aW9uYWxcIixkaXN0aW5jdGl2ZUlkZW50aWZpZXI6XCJvcHRpb25hbFwiLGluaXREYXRhVHlwZXM6ZS5pbml0RGF0YVR5cGVzLHNlc3Npb25UeXBlczpbXCJ0ZW1wb3JhcnlcIl0sbGFiZWw6ZS5sYWJlbH0sZz0hMTtpZihlLmF1ZGlvQ2FwYWJpbGl0aWVzKWZvcih2YXIgaD0wO2g8ZS5hdWRpb0NhcGFiaWxpdGllcy5sZW5ndGg7KytoKXt2YXIgbD1lLmF1ZGlvQ2FwYWJpbGl0aWVzW2hdO2lmKGwuY29udGVudFR5cGUpe3ZhciBnPSEwLG49bC5jb250ZW50VHlwZS5zcGxpdChcIjtcIilbMF07TVNNZWRpYUtleXMuaXNUeXBlU3VwcG9ydGVkKHRoaXMua2V5U3lzdGVtLG4pJiYoZi5hdWRpb0NhcGFiaWxpdGllcy5wdXNoKGwpLGM9ITApfX1pZihlLnZpZGVvQ2FwYWJpbGl0aWVzKWZvcihoPVxuMDtoPGUudmlkZW9DYXBhYmlsaXRpZXMubGVuZ3RoOysraClsPWUudmlkZW9DYXBhYmlsaXRpZXNbaF0sbC5jb250ZW50VHlwZSYmKGc9ITAsbj1sLmNvbnRlbnRUeXBlLnNwbGl0KFwiO1wiKVswXSxNU01lZGlhS2V5cy5pc1R5cGVTdXBwb3J0ZWQodGhpcy5rZXlTeXN0ZW0sbikmJihmLnZpZGVvQ2FwYWJpbGl0aWVzLnB1c2gobCksYz0hMCkpO2d8fChjPU1TTWVkaWFLZXlzLmlzVHlwZVN1cHBvcnRlZCh0aGlzLmtleVN5c3RlbSxcInZpZGVvL21wNFwiKSk7XCJyZXF1aXJlZFwiPT1lLnBlcnNpc3RlbnRTdGF0ZSYmKGYucGVyc2lzdGVudFN0YXRlPVwicmVxdWlyZWRcIixmLnNlc3Npb25UeXBlcz1bXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIl0pO2lmKGMpe3RoaXMuYT1mO3JldHVybn19Yz1FcnJvcihcIlVuc3VwcG9ydGVkIGtleVN5c3RlbVwiKTtjLm5hbWU9XCJOb3RTdXBwb3J0ZWRFcnJvclwiO2MuY29kZT1ET01FeGNlcHRpb24uTk9UX1NVUFBPUlRFRF9FUlI7dGhyb3cgYzt9XG5zZi5wcm90b3R5cGUuY3JlYXRlTWVkaWFLZXlzPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHRmKHRoaXMua2V5U3lzdGVtKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGEpfTtzZi5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O2Z1bmN0aW9uIHVmKGEpe3ZhciBiPXRoaXMubWVkaWFLZXlzO2ImJmIhPWEmJnZmKGIsbnVsbCk7ZGVsZXRlIHRoaXMubWVkaWFLZXlzO3JldHVybih0aGlzLm1lZGlhS2V5cz1hKT92ZihhLHRoaXMpOlByb21pc2UucmVzb2x2ZSgpfWZ1bmN0aW9uIHRmKGEpe3RoaXMuYT1uZXcgTVNNZWRpYUtleXMoYSk7dGhpcy5iPW5ldyB4fXRmLnByb3RvdHlwZS5jcmVhdGVTZXNzaW9uPWZ1bmN0aW9uKGEpe2lmKFwidGVtcG9yYXJ5XCIhPShhfHxcInRlbXBvcmFyeVwiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU2Vzc2lvbiB0eXBlIFwiK2ErXCIgaXMgdW5zdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS5cIik7cmV0dXJuIG5ldyB3Zih0aGlzLmEpfTtcbnRmLnByb3RvdHlwZS5zZXRTZXJ2ZXJDZXJ0aWZpY2F0ZT1mdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcInNldFNlcnZlckNlcnRpZmljYXRlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS5cIikpfTtmdW5jdGlvbiB2ZihhLGIpe2Z1bmN0aW9uIGMoKXtiLm1zU2V0TWVkaWFLZXlzKGQuYSk7Yi5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZGVkbWV0YWRhdGFcIixjKX1DYShhLmIpO2lmKCFiKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTt5KGEuYixiLFwibXNuZWVka2V5XCIseGYpO3ZhciBkPWE7dHJ5e3JldHVybiAxPD1iLnJlYWR5U3RhdGU/Yi5tc1NldE1lZGlhS2V5cyhhLmEpOmIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsYyksUHJvbWlzZS5yZXNvbHZlKCl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX1cbmZ1bmN0aW9uIHdmKGEpe3AuY2FsbCh0aGlzKTt0aGlzLmM9bnVsbDt0aGlzLmc9YTt0aGlzLmI9dGhpcy5hPW51bGw7dGhpcy5mPW5ldyB4O3RoaXMuc2Vzc2lvbklkPVwiXCI7dGhpcy5leHBpcmF0aW9uPU5hTjt0aGlzLmNsb3NlZD1uZXcgdzt0aGlzLmtleVN0YXR1c2VzPW5ldyB5Zn1iYSh3Zik7az13Zi5wcm90b3R5cGU7ay5nZW5lcmF0ZVJlcXVlc3Q9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9bmV3IHc7dHJ5e3RoaXMuYz10aGlzLmcuY3JlYXRlU2Vzc2lvbihcInZpZGVvL21wNFwiLG5ldyBVaW50OEFycmF5KGIpLG51bGwpLHkodGhpcy5mLHRoaXMuYyxcIm1za2V5bWVzc2FnZVwiLHRoaXMucGMuYmluZCh0aGlzKSkseSh0aGlzLmYsdGhpcy5jLFwibXNrZXlhZGRlZFwiLHRoaXMubmMuYmluZCh0aGlzKSkseSh0aGlzLmYsdGhpcy5jLFwibXNrZXllcnJvclwiLHRoaXMub2MuYmluZCh0aGlzKSksemYodGhpcyxcInN0YXR1cy1wZW5kaW5nXCIpfWNhdGNoKGMpe3RoaXMuYS5yZWplY3QoYyl9cmV0dXJuIHRoaXMuYX07XG5rLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoRXJyb3IoXCJNZWRpYUtleVNlc3Npb24ubG9hZCBub3QgeWV0IHN1cHBvcnRlZFwiKSl9O2sudXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMuYj1uZXcgdzt0cnl7dGhpcy5jLnVwZGF0ZShuZXcgVWludDhBcnJheShhKSl9Y2F0Y2goYil7dGhpcy5iLnJlamVjdChiKX1yZXR1cm4gdGhpcy5ifTtrLmNsb3NlPWZ1bmN0aW9uKCl7dHJ5e3RoaXMuYy5jbG9zZSgpLHRoaXMuY2xvc2VkLnJlc29sdmUoKSxDYSh0aGlzLmYpfWNhdGNoKGEpe3RoaXMuY2xvc2VkLnJlamVjdChhKX1yZXR1cm4gdGhpcy5jbG9zZWR9O2sucmVtb3ZlPWZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKFwiTWVkaWFLZXlTZXNzaW9uLnJlbW92ZSBpcyBvbmx5IGFwcGxpY2FibGUgZm9yIHBlcnNpc3RlbnQgbGljZW5zZXMsIHdoaWNoIGFyZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm1cIikpfTtcbmZ1bmN0aW9uIHhmKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7Yi5pbml0Q3VzdG9tRXZlbnQoXCJlbmNyeXB0ZWRcIiwhMSwhMSxudWxsKTtiLmluaXREYXRhVHlwZT1cImNlbmNcIjtpZihhPWEuaW5pdERhdGEpe3ZhciBjPW5ldyBxZihhKTtpZighKDE+PWMuYS5sZW5ndGgpKXtmb3IodmFyIGQ9W10sZT0wO2U8Yy5hLmxlbmd0aDtlKyspZC5wdXNoKGEuc3ViYXJyYXkoYy5hW2VdLnN0YXJ0LGMuYVtlXS5lbmQrMSkpO2U9QWY7YT1bXTtmb3IoYz0wO2M8ZC5sZW5ndGg7KytjKXtmb3IodmFyIGY9ITEsZz0wO2c8YS5sZW5ndGgmJiEoZj1lP2UoZFtjXSxhW2ddKTpkW2NdPT09YVtnXSk7KytnKTtmfHxhLnB1c2goZFtjXSl9Zm9yKGU9ZD0wO2U8YS5sZW5ndGg7ZSsrKWQrPWFbZV0ubGVuZ3RoO2Q9bmV3IFVpbnQ4QXJyYXkoZCk7Zm9yKGU9Yz0wO2U8YS5sZW5ndGg7ZSsrKWQuc2V0KGFbZV0sYyksYys9YVtlXS5sZW5ndGg7YT1kfX1iLmluaXREYXRhPVxuYTt0aGlzLmRpc3BhdGNoRXZlbnQoYil9ZnVuY3Rpb24gQWYoYSxiKXtyZXR1cm4gVWEoYSxiKX1rLnBjPWZ1bmN0aW9uKGEpe3RoaXMuYSYmKHRoaXMuYS5yZXNvbHZlKCksdGhpcy5hPW51bGwpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgdChcIm1lc3NhZ2VcIix7bWVzc2FnZVR5cGU6dm9pZCAwPT10aGlzLmtleVN0YXR1c2VzLldhKCk/XCJsaWNlbnNlcmVxdWVzdFwiOlwibGljZW5zZXJlbmV3YWxcIixtZXNzYWdlOmEubWVzc2FnZS5idWZmZXJ9KSl9O2submM9ZnVuY3Rpb24oKXt0aGlzLmE/KHpmKHRoaXMsXCJ1c2FibGVcIiksdGhpcy5hLnJlc29sdmUoKSx0aGlzLmE9bnVsbCk6dGhpcy5iJiYoemYodGhpcyxcInVzYWJsZVwiKSx0aGlzLmIucmVzb2x2ZSgpLHRoaXMuYj1udWxsKX07XG5rLm9jPWZ1bmN0aW9uKCl7dmFyIGE9RXJyb3IoXCJFTUUgUGF0Y2hlZE1lZGlhS2V5c01zIGtleSBlcnJvclwiKTthLmVycm9yQ29kZT10aGlzLmMuZXJyb3I7aWYodGhpcy5hKXRoaXMuYS5yZWplY3QoYSksdGhpcy5hPW51bGw7ZWxzZSBpZih0aGlzLmIpdGhpcy5iLnJlamVjdChhKSx0aGlzLmI9bnVsbDtlbHNlIHN3aXRjaCh0aGlzLmMuZXJyb3IuY29kZSl7Y2FzZSBNU01lZGlhS2V5RXJyb3IuTVNfTUVESUFfS0VZRVJSX09VVFBVVDpjYXNlIE1TTWVkaWFLZXlFcnJvci5NU19NRURJQV9LRVlFUlJfSEFSRFdBUkVDSEFOR0U6emYodGhpcyxcIm91dHB1dC1ub3QtYWxsb3dlZFwiKTtkZWZhdWx0OnpmKHRoaXMsXCJpbnRlcm5hbC1lcnJvclwiKX19O2Z1bmN0aW9uIHpmKGEsYil7YS5rZXlTdGF0dXNlcy5oYihiKTthLmRpc3BhdGNoRXZlbnQobmV3IHQoXCJrZXlzdGF0dXNlc2NoYW5nZVwiKSl9ZnVuY3Rpb24geWYoKXt0aGlzLnNpemU9MDt0aGlzLmE9dm9pZCAwfXZhciBCZjtrPXlmLnByb3RvdHlwZTtcbmsuaGI9ZnVuY3Rpb24oYSl7dGhpcy5zaXplPXZvaWQgMD09YT8wOjE7dGhpcy5hPWF9O2suV2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtrLmZvckVhY2g9ZnVuY3Rpb24oYSl7dGhpcy5hJiZhKHRoaXMuYSxCZil9O2suZ2V0PWZ1bmN0aW9uKGEpe2lmKHRoaXMuaGFzKGEpKXJldHVybiB0aGlzLmF9O2suaGFzPWZ1bmN0aW9uKGEpe3ZhciBiPUJmO3JldHVybiB0aGlzLmEmJlVhKG5ldyBVaW50OEFycmF5KGEpLG5ldyBVaW50OEFycmF5KGIpKT8hMDohMX07ay5rZXlzPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBDZigpe3JldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcIlRoZSBrZXkgc3lzdGVtIHNwZWNpZmllZCBpcyBub3Qgc3VwcG9ydGVkLlwiKSl9ZnVuY3Rpb24gRGYoYSl7cmV0dXJuIGE/UHJvbWlzZS5yZWplY3QoRXJyb3IoXCJNZWRpYUtleXMgbm90IHN1cHBvcnRlZC5cIikpOlByb21pc2UucmVzb2x2ZSgpfWZ1bmN0aW9uIEVmKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3IuXCIpO31FZi5wcm90b3R5cGUuY3JlYXRlU2Vzc2lvbj1mdW5jdGlvbigpe307RWYucHJvdG90eXBlLnNldFNlcnZlckNlcnRpZmljYXRlPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBGZigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yLlwiKTt9RmYucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb249ZnVuY3Rpb24oKXt9O0ZmLnByb3RvdHlwZS5jcmVhdGVNZWRpYUtleXM9ZnVuY3Rpb24oKXt9O3ZhciBHZj1cIlwiO2Z1bmN0aW9uIEhmKGEpe0dmPWE7SWY9KG5ldyBVaW50OEFycmF5KFswXSkpLmJ1ZmZlcjtuYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzPUpmO2RlbGV0ZSBIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5tZWRpYUtleXM7SFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUubWVkaWFLZXlzPW51bGw7SFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUuc2V0TWVkaWFLZXlzPUtmO3dpbmRvdy5NZWRpYUtleXM9TGY7d2luZG93Lk1lZGlhS2V5U3lzdGVtQWNjZXNzPU1mfWZ1bmN0aW9uIE5mKGEpe3ZhciBiPUdmO3JldHVybiBiP2IrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnNsaWNlKDEpOmF9ZnVuY3Rpb24gSmYoYSxiKXt0cnl7dmFyIGM9bmV3IE1mKGEsYik7cmV0dXJuIFByb21pc2UucmVzb2x2ZShjKX1jYXRjaChkKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZCl9fVxuZnVuY3Rpb24gS2YoYSl7dmFyIGI9dGhpcy5tZWRpYUtleXM7YiYmYiE9YSYmT2YoYixudWxsKTtkZWxldGUgdGhpcy5tZWRpYUtleXM7KHRoaXMubWVkaWFLZXlzPWEpJiZPZihhLHRoaXMpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX1cbmZ1bmN0aW9uIE1mKGEsYil7dGhpcy5hPXRoaXMua2V5U3lzdGVtPWE7dmFyIGM9ITA7XCJvcmcudzMuY2xlYXJrZXlcIj09YSYmKHRoaXMuYT1cIndlYmtpdC1vcmcudzMuY2xlYXJrZXlcIixjPSExKTt2YXIgZD0hMSxlO2U9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ2aWRlb1wiKTtlPWUubGVuZ3RoP2VbMF06ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7KytmKXt2YXIgZz1iW2ZdLGg9e2F1ZGlvQ2FwYWJpbGl0aWVzOltdLHZpZGVvQ2FwYWJpbGl0aWVzOltdLHBlcnNpc3RlbnRTdGF0ZTpcIm9wdGlvbmFsXCIsZGlzdGluY3RpdmVJZGVudGlmaWVyOlwib3B0aW9uYWxcIixpbml0RGF0YVR5cGVzOmcuaW5pdERhdGFUeXBlcyxzZXNzaW9uVHlwZXM6W1widGVtcG9yYXJ5XCJdLGxhYmVsOmcubGFiZWx9LGw9ITE7aWYoZy5hdWRpb0NhcGFiaWxpdGllcylmb3IodmFyIG49MDtuPGcuYXVkaW9DYXBhYmlsaXRpZXMubGVuZ3RoOysrbil7dmFyIHI9XG5nLmF1ZGlvQ2FwYWJpbGl0aWVzW25dO2lmKHIuY29udGVudFR5cGUpe3ZhciBsPSEwLHU9ci5jb250ZW50VHlwZS5zcGxpdChcIjtcIilbMF07ZS5jYW5QbGF5VHlwZSh1LHRoaXMuYSkmJihoLmF1ZGlvQ2FwYWJpbGl0aWVzLnB1c2gociksZD0hMCl9fWlmKGcudmlkZW9DYXBhYmlsaXRpZXMpZm9yKG49MDtuPGcudmlkZW9DYXBhYmlsaXRpZXMubGVuZ3RoOysrbilyPWcudmlkZW9DYXBhYmlsaXRpZXNbbl0sci5jb250ZW50VHlwZSYmKGw9ITAsZS5jYW5QbGF5VHlwZShyLmNvbnRlbnRUeXBlLHRoaXMuYSkmJihoLnZpZGVvQ2FwYWJpbGl0aWVzLnB1c2gociksZD0hMCkpO2x8fChkPWUuY2FuUGxheVR5cGUoXCJ2aWRlby9tcDRcIix0aGlzLmEpfHxlLmNhblBsYXlUeXBlKFwidmlkZW8vd2VibVwiLHRoaXMuYSkpO1wicmVxdWlyZWRcIj09Zy5wZXJzaXN0ZW50U3RhdGUmJihjPyhoLnBlcnNpc3RlbnRTdGF0ZT1cInJlcXVpcmVkXCIsaC5zZXNzaW9uVHlwZXM9W1wicGVyc2lzdGVudC1saWNlbnNlXCJdKTpcbmQ9ITEpO2lmKGQpe3RoaXMuYj1oO3JldHVybn19Yz1cIlVuc3VwcG9ydGVkIGtleVN5c3RlbVwiO2lmKFwib3JnLnczLmNsZWFya2V5XCI9PWF8fFwiY29tLndpZGV2aW5lLmFscGhhXCI9PWEpYz1cIk5vbmUgb2YgdGhlIHJlcXVlc3RlZCBjb25maWd1cmF0aW9ucyB3ZXJlIHN1cHBvcnRlZC5cIjtjPUVycm9yKGMpO2MubmFtZT1cIk5vdFN1cHBvcnRlZEVycm9yXCI7Yy5jb2RlPURPTUV4Y2VwdGlvbi5OT1RfU1VQUE9SVEVEX0VSUjt0aHJvdyBjO31NZi5wcm90b3R5cGUuY3JlYXRlTWVkaWFLZXlzPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IExmKHRoaXMuYSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShhKX07TWYucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ifTtmdW5jdGlvbiBMZihhKXt0aGlzLmc9YTt0aGlzLmI9bnVsbDt0aGlzLmE9bmV3IHg7dGhpcy5jPVtdO3RoaXMuZj17fX1cbmZ1bmN0aW9uIE9mKGEsYil7YS5iPWI7Q2EoYS5hKTt2YXIgYz1HZjtiJiYoeShhLmEsYixjK1wibmVlZGtleVwiLGEueWMuYmluZChhKSkseShhLmEsYixjK1wia2V5bWVzc2FnZVwiLGEueGMuYmluZChhKSkseShhLmEsYixjK1wia2V5YWRkZWRcIixhLnZjLmJpbmQoYSkpLHkoYS5hLGIsYytcImtleWVycm9yXCIsYS53Yy5iaW5kKGEpKSl9az1MZi5wcm90b3R5cGU7ay5jcmVhdGVTZXNzaW9uPWZ1bmN0aW9uKGEpe3ZhciBiPWF8fFwidGVtcG9yYXJ5XCI7aWYoXCJ0ZW1wb3JhcnlcIiE9YiYmXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIiE9Yil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU2Vzc2lvbiB0eXBlIFwiK2ErXCIgaXMgdW5zdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS5cIik7YT10aGlzLmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTthLnNyY3x8KGEuc3JjPVwiYWJvdXQ6YmxhbmtcIik7Yj1uZXcgUGYoYSx0aGlzLmcsYik7dGhpcy5jLnB1c2goYik7cmV0dXJuIGJ9O1xuay5zZXRTZXJ2ZXJDZXJ0aWZpY2F0ZT1mdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcInNldFNlcnZlckNlcnRpZmljYXRlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS5cIikpfTtrLnljPWZ1bmN0aW9uKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7Yi5pbml0Q3VzdG9tRXZlbnQoXCJlbmNyeXB0ZWRcIiwhMSwhMSxudWxsKTtiLmluaXREYXRhVHlwZT1cIndlYm1cIjtiLmluaXREYXRhPWEuaW5pdERhdGE7dGhpcy5iLmRpc3BhdGNoRXZlbnQoYil9O2sueGM9ZnVuY3Rpb24oYSl7dmFyIGI9UWYodGhpcyxhLnNlc3Npb25JZCk7YiYmKGE9bmV3IHQoXCJtZXNzYWdlXCIse21lc3NhZ2VUeXBlOnZvaWQgMD09Yi5rZXlTdGF0dXNlcy5XYSgpP1wibGljZW5zZXJlcXVlc3RcIjpcImxpY2Vuc2VyZW5ld2FsXCIsbWVzc2FnZTphLm1lc3NhZ2V9KSxiLmImJihiLmIucmVzb2x2ZSgpLGIuYj1udWxsKSxiLmRpc3BhdGNoRXZlbnQoYSkpfTtcbmsudmM9ZnVuY3Rpb24oYSl7aWYoYT1RZih0aGlzLGEuc2Vzc2lvbklkKSlSZihhLFwidXNhYmxlXCIpLGEuYSYmYS5hLnJlc29sdmUoKSxhLmE9bnVsbH07XG5rLndjPWZ1bmN0aW9uKGEpe3ZhciBiPVFmKHRoaXMsYS5zZXNzaW9uSWQpO2lmKGIpe3ZhciBjPUVycm9yKFwiRU1FIHYwLjFiIGtleSBlcnJvclwiKTtjLmVycm9yQ29kZT1hLmVycm9yQ29kZTtjLmVycm9yQ29kZS5zeXN0ZW1Db2RlPWEuc3lzdGVtQ29kZTshYS5zZXNzaW9uSWQmJmIuYj8oYy5tZXRob2Q9XCJnZW5lcmF0ZVJlcXVlc3RcIiw0NT09YS5zeXN0ZW1Db2RlJiYoYy5tZXNzYWdlPVwiVW5zdXBwb3J0ZWQgc2Vzc2lvbiB0eXBlLlwiKSxiLmIucmVqZWN0KGMpLGIuYj1udWxsKTphLnNlc3Npb25JZCYmYi5hPyhjLm1ldGhvZD1cInVwZGF0ZVwiLGIuYS5yZWplY3QoYyksYi5hPW51bGwpOihjPWEuc3lzdGVtQ29kZSxhLmVycm9yQ29kZS5jb2RlPT1NZWRpYUtleUVycm9yLk1FRElBX0tFWUVSUl9PVVRQVVQ/UmYoYixcIm91dHB1dC1yZXN0cmljdGVkXCIpOjE9PWM/UmYoYixcImV4cGlyZWRcIik6UmYoYixcImludGVybmFsLWVycm9yXCIpKX19O1xuZnVuY3Rpb24gUWYoYSxiKXt2YXIgYz1hLmZbYl07cmV0dXJuIGM/YzooYz1hLmMuc2hpZnQoKSk/KGMuc2Vzc2lvbklkPWIsYS5mW2JdPWMpOm51bGx9ZnVuY3Rpb24gUGYoYSxiLGMpe3AuY2FsbCh0aGlzKTt0aGlzLmY9YTt0aGlzLmg9ITE7dGhpcy5hPXRoaXMuYj1udWxsO3RoaXMuYz1iO3RoaXMuZz1jO3RoaXMuc2Vzc2lvbklkPVwiXCI7dGhpcy5leHBpcmF0aW9uPU5hTjt0aGlzLmNsb3NlZD1uZXcgdzt0aGlzLmtleVN0YXR1c2VzPW5ldyBTZn1iYShQZik7XG5mdW5jdGlvbiBUZihhLGIsYyl7aWYoYS5oKXJldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcIlRoZSBzZXNzaW9uIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpKTthLmg9ITA7dmFyIGQ7dHJ5e2lmKFwicGVyc2lzdGVudC1saWNlbnNlXCI9PWEuZylpZihjKWQ9bmV3IFVpbnQ4QXJyYXkoSWIoXCJMT0FEX1NFU1NJT058XCIrYykpO2Vsc2V7dmFyIGU9SWIoXCJQRVJTSVNURU5UfFwiKSxmPW5ldyBVaW50OEFycmF5KGUuYnl0ZUxlbmd0aCtiLmJ5dGVMZW5ndGgpO2Yuc2V0KG5ldyBVaW50OEFycmF5KGUpLDApO2Yuc2V0KG5ldyBVaW50OEFycmF5KGIpLGUuYnl0ZUxlbmd0aCk7ZD1mfWVsc2UgZD1uZXcgVWludDhBcnJheShiKX1jYXRjaChoKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoaCl9YS5iPW5ldyB3O3ZhciBnPU5mKFwiZ2VuZXJhdGVLZXlSZXF1ZXN0XCIpO3RyeXthLmZbZ10oYS5jLGQpfWNhdGNoKGgpe2lmKFwiSW52YWxpZFN0YXRlRXJyb3JcIiE9aC5uYW1lKXJldHVybiBhLmI9bnVsbCxcblByb21pc2UucmVqZWN0KGgpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0cnl7dGhpcy5mW2ddKHRoaXMuYyxkKX1jYXRjaChsKXt0aGlzLmIucmVqZWN0KGwpLHRoaXMuYj1udWxsfX0uYmluZChhKSwxMCl9cmV0dXJuIGEuYn1rPVBmLnByb3RvdHlwZTtcbmsuamI9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLmEpdGhpcy5hLnRoZW4odGhpcy5qYi5iaW5kKHRoaXMsYSxiKSlbXCJjYXRjaFwiXSh0aGlzLmpiLmJpbmQodGhpcyxhLGIpKTtlbHNle3RoaXMuYT1hO3ZhciBjLGQ7XCJ3ZWJraXQtb3JnLnczLmNsZWFya2V5XCI9PXRoaXMuYz8oYz1FYihiKSxkPUpTT04ucGFyc2UoYyksXCJvY3RcIiE9ZC5rZXlzWzBdLmt0eSYmKHRoaXMuYS5yZWplY3QoRXJyb3IoXCJSZXNwb25zZSBpcyBub3QgYSB2YWxpZCBKU09OIFdlYiBLZXkgU2V0LlwiKSksdGhpcy5hPW51bGwpLGM9UmEoZC5rZXlzWzBdLmspLGQ9UmEoZC5rZXlzWzBdLmtpZCkpOihjPW5ldyBVaW50OEFycmF5KGIpLGQ9bnVsbCk7dmFyIGU9TmYoXCJhZGRLZXlcIik7dHJ5e3RoaXMuZltlXSh0aGlzLmMsYyxkLHRoaXMuc2Vzc2lvbklkKX1jYXRjaChmKXt0aGlzLmEucmVqZWN0KGYpLHRoaXMuYT1udWxsfX19O1xuZnVuY3Rpb24gUmYoYSxiKXthLmtleVN0YXR1c2VzLmhiKGIpO2EuZGlzcGF0Y2hFdmVudChuZXcgdChcImtleXN0YXR1c2VzY2hhbmdlXCIpKX1rLmdlbmVyYXRlUmVxdWVzdD1mdW5jdGlvbihhLGIpe3JldHVybiBUZih0aGlzLGIsbnVsbCl9O2subG9hZD1mdW5jdGlvbihhKXtyZXR1cm5cInBlcnNpc3RlbnQtbGljZW5zZVwiPT10aGlzLmc/VGYodGhpcyxudWxsLGEpOlByb21pc2UucmVqZWN0KEVycm9yKFwiTm90IGEgcGVyc2lzdGVudCBzZXNzaW9uLlwiKSl9O2sudXBkYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyB3O3RoaXMuamIoYixhKTtyZXR1cm4gYn07XG5rLmNsb3NlPWZ1bmN0aW9uKCl7aWYoXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIiE9dGhpcy5nKXtpZighdGhpcy5zZXNzaW9uSWQpcmV0dXJuIHRoaXMuY2xvc2VkLnJlamVjdChFcnJvcihcIlRoZSBzZXNzaW9uIGlzIG5vdCBjYWxsYWJsZS5cIikpLHRoaXMuY2xvc2VkO3ZhciBhPU5mKFwiY2FuY2VsS2V5UmVxdWVzdFwiKTt0cnl7dGhpcy5mW2FdKHRoaXMuYyx0aGlzLnNlc3Npb25JZCl9Y2F0Y2goYil7fX10aGlzLmNsb3NlZC5yZXNvbHZlKCk7cmV0dXJuIHRoaXMuY2xvc2VkfTtrLnJlbW92ZT1mdW5jdGlvbigpe3JldHVyblwicGVyc2lzdGVudC1saWNlbnNlXCIhPXRoaXMuZz9Qcm9taXNlLnJlamVjdChFcnJvcihcIk5vdCBhIHBlcnNpc3RlbnQgc2Vzc2lvbi5cIikpOnRoaXMuY2xvc2UoKX07ZnVuY3Rpb24gU2YoKXt0aGlzLnNpemU9MDt0aGlzLmE9dm9pZCAwfXZhciBJZjtrPVNmLnByb3RvdHlwZTtrLmhiPWZ1bmN0aW9uKGEpe3RoaXMuc2l6ZT12b2lkIDA9PWE/MDoxO3RoaXMuYT1hfTtcbmsuV2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtrLmZvckVhY2g9ZnVuY3Rpb24oYSl7dGhpcy5hJiZhKHRoaXMuYSxJZil9O2suZ2V0PWZ1bmN0aW9uKGEpe2lmKHRoaXMuaGFzKGEpKXJldHVybiB0aGlzLmF9O2suaGFzPWZ1bmN0aW9uKGEpe3ZhciBiPUlmO3JldHVybiB0aGlzLmEmJlVhKG5ldyBVaW50OEFycmF5KGEpLG5ldyBVaW50OEFycmF5KGIpKT8hMDohMX07ay5rZXlzPWZ1bmN0aW9uKCl7fTtvZihmdW5jdGlvbigpeyF3aW5kb3cuSFRNTFZpZGVvRWxlbWVudHx8bmF2aWdhdG9yLnJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyYmTWVkaWFLZXlTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb258fChIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS53ZWJraXRHZW5lcmF0ZUtleVJlcXVlc3Q/SGYoXCJ3ZWJraXRcIik6SFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlSZXF1ZXN0P0hmKFwiXCIpOndpbmRvdy5NU01lZGlhS2V5cz8oQmY9KG5ldyBVaW50OEFycmF5KFswXSkpLmJ1ZmZlcixkZWxldGUgSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUubWVkaWFLZXlzLEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLm1lZGlhS2V5cz1udWxsLEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLnNldE1lZGlhS2V5cz11Zix3aW5kb3cuTWVkaWFLZXlzPXRmLHdpbmRvdy5NZWRpYUtleVN5c3RlbUFjY2Vzcz1zZixuYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzPVxucmYpOihuYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzPUNmLGRlbGV0ZSBIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5tZWRpYUtleXMsSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUubWVkaWFLZXlzPW51bGwsSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUuc2V0TWVkaWFLZXlzPURmLHdpbmRvdy5NZWRpYUtleXM9RWYsd2luZG93Lk1lZGlhS2V5U3lzdGVtQWNjZXNzPUZmKSl9KTtmdW5jdGlvbiBVZigpe3ZhciBhPU1lZGlhU291cmNlLnByb3RvdHlwZS5hZGRTb3VyY2VCdWZmZXI7TWVkaWFTb3VyY2UucHJvdG90eXBlLmFkZFNvdXJjZUJ1ZmZlcj1mdW5jdGlvbigpe3ZhciBiPWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2IuYWJvcnQ9ZnVuY3Rpb24oKXt9O3JldHVybiBifX1cbmZ1bmN0aW9uIFZmKCl7dmFyIGE9TWVkaWFTb3VyY2UucHJvdG90eXBlLmVuZE9mU3RyZWFtO01lZGlhU291cmNlLnByb3RvdHlwZS5lbmRPZlN0cmVhbT1mdW5jdGlvbigpe2Zvcih2YXIgYj0wLGQ9MDtkPHRoaXMuc291cmNlQnVmZmVycy5sZW5ndGg7KytkKXZhciBlPXRoaXMuc291cmNlQnVmZmVyc1tkXSxlPWUuYnVmZmVyZWQuZW5kKGUuYnVmZmVyZWQubGVuZ3RoLTEpLGI9TWF0aC5tYXgoYixlKTtpZighaXNOYU4odGhpcy5kdXJhdGlvbikmJmI8dGhpcy5kdXJhdGlvbilmb3IodGhpcy5zYj0hMCxkPTA7ZDx0aGlzLnNvdXJjZUJ1ZmZlcnMubGVuZ3RoOysrZCllPXRoaXMuc291cmNlQnVmZmVyc1tkXSxlLm9iPSExO3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIGI9TWVkaWFTb3VyY2UucHJvdG90eXBlLmFkZFNvdXJjZUJ1ZmZlcjtNZWRpYVNvdXJjZS5wcm90b3R5cGUuYWRkU291cmNlQnVmZmVyPWZ1bmN0aW9uKCl7dmFyIGE9Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7XG5hLkY9dGhpczthLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIixXZiwhMSk7dGhpcy5hfHwodGhpcy5hZGRFdmVudExpc3RlbmVyKFwic291cmNlY2xvc2VcIixYZiwhMSksdGhpcy5hPSEwKTtyZXR1cm4gYX19ZnVuY3Rpb24gV2YoYSl7dmFyIGI9YS50YXJnZXQsYz1iLkY7aWYoYy5zYil7YS5wcmV2ZW50RGVmYXVsdCgpO2Euc3RvcFByb3BhZ2F0aW9uKCk7YS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtiLm9iPSEwO2ZvcihhPTA7YTxjLnNvdXJjZUJ1ZmZlcnMubGVuZ3RoOysrYSlpZigwPT1jLnNvdXJjZUJ1ZmZlcnNbYV0ub2IpcmV0dXJuO2Muc2I9ITF9fWZ1bmN0aW9uIFhmKGEpe2E9YS50YXJnZXQ7Zm9yKHZhciBiPTA7YjxhLnNvdXJjZUJ1ZmZlcnMubGVuZ3RoOysrYilhLnNvdXJjZUJ1ZmZlcnNbYl0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWVuZFwiLFdmLCExKTthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzb3VyY2VjbG9zZVwiLFhmLCExKX1cbm9mKGZ1bmN0aW9uKCl7aWYod2luZG93Lk1lZGlhU291cmNlKXt2YXIgYT1uYXZpZ2F0b3IudmVuZG9yLGI9bmF2aWdhdG9yLmFwcFZlcnNpb247IWF8fCFifHwwPmEuaW5kZXhPZihcIkFwcGxlXCIpfHwoMDw9Yi5pbmRleE9mKFwiVmVyc2lvbi84XCIpP3dpbmRvdy5NZWRpYVNvdXJjZT1udWxsOjA8PWIuaW5kZXhPZihcIlZlcnNpb24vOVwiKT9VZigpOjA8PWIuaW5kZXhPZihcIlZlcnNpb24vMTBcIikmJihVZigpLFZmKCkpKX19KTtmdW5jdGlvbiBaKGEpe3RoaXMuYz1bXTt0aGlzLmI9W107dGhpcy5rYT1ZZjtpZihhKXRyeXthKHRoaXMuWC5iaW5kKHRoaXMpLHRoaXMuYS5iaW5kKHRoaXMpKX1jYXRjaChiKXt0aGlzLmEoYil9fXZhciBZZj0wO2Z1bmN0aW9uIFpmKGEpe3ZhciBiPW5ldyBaO2IuWCh2b2lkIDApO3JldHVybiBiLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYX0pfWZ1bmN0aW9uICRmKGEpe3ZhciBiPW5ldyBaO2IuYShhKTtyZXR1cm4gYn1mdW5jdGlvbiBhZyhhKXtmdW5jdGlvbiBiKGEsYixjKXthLmthPT1ZZiYmKGVbYl09YyxkKyssZD09ZS5sZW5ndGgmJmEuWChlKSl9dmFyIGM9bmV3IFo7aWYoIWEubGVuZ3RoKXJldHVybiBjLlgoW10pLGM7Zm9yKHZhciBkPTAsZT1BcnJheShhLmxlbmd0aCksZj1jLmEuYmluZChjKSxnPTA7ZzxhLmxlbmd0aDsrK2cpYVtnXSYmYVtnXS50aGVuP2FbZ10udGhlbihiLmJpbmQobnVsbCxjLGcpLGYpOmIoYyxnLGFbZ10pO3JldHVybiBjfVxuZnVuY3Rpb24gYmcoYSl7Zm9yKHZhciBiPW5ldyBaLGM9Yi5YLmJpbmQoYiksZD1iLmEuYmluZChiKSxlPTA7ZTxhLmxlbmd0aDsrK2UpYVtlXSYmYVtlXS50aGVuP2FbZV0udGhlbihjLGQpOmMoYVtlXSk7cmV0dXJuIGJ9Wi5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBaO3N3aXRjaCh0aGlzLmthKXtjYXNlIDE6Y2codGhpcyxjLGEpO2JyZWFrO2Nhc2UgMjpjZyh0aGlzLGMsYik7YnJlYWs7Y2FzZSBZZjp0aGlzLmMucHVzaCh7SjpjLEVhOmF9KSx0aGlzLmIucHVzaCh7SjpjLEVhOmJ9KX1yZXR1cm4gY307Wi5wcm90b3R5cGVbXCJjYXRjaFwiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxhKX07XG5aLnByb3RvdHlwZS5YPWZ1bmN0aW9uKGEpe2lmKHRoaXMua2E9PVlmKXt0aGlzLlBhPWE7dGhpcy5rYT0xO2ZvcihhPTA7YTx0aGlzLmMubGVuZ3RoOysrYSljZyh0aGlzLHRoaXMuY1thXS5KLHRoaXMuY1thXS5FYSk7dGhpcy5jPVtdO3RoaXMuYj1bXX19O1oucHJvdG90eXBlLmE9ZnVuY3Rpb24oYSl7aWYodGhpcy5rYT09WWYpe3RoaXMuUGE9YTt0aGlzLmthPTI7Zm9yKGE9MDthPHRoaXMuYi5sZW5ndGg7KythKWNnKHRoaXMsdGhpcy5iW2FdLkosdGhpcy5iW2FdLkVhKTt0aGlzLmM9W107dGhpcy5iPVtdfX07XG5mdW5jdGlvbiBjZyhhLGIsYyl7ZGcucHVzaChmdW5jdGlvbigpe2lmKGMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMpe3RyeXt2YXIgYT1jKHRoaXMuUGEpfWNhdGNoKGYpe2IuYShmKTtyZXR1cm59dmFyIGU7dHJ5e2U9YSYmYS50aGVufWNhdGNoKGYpe2IuYShmKTtyZXR1cm59YSBpbnN0YW5jZW9mIFo/YT09Yj9iLmEobmV3IFR5cGVFcnJvcihcIkNoYWluaW5nIGN5Y2xlIGRldGVjdGVkXCIpKTphLnRoZW4oYi5YLmJpbmQoYiksYi5hLmJpbmQoYikpOmU/ZWcoYSxlLGIpOmIuWChhKX1lbHNlIDE9PXRoaXMua2E/Yi5YKHRoaXMuUGEpOmIuYSh0aGlzLlBhKX0uYmluZChhKSk7bnVsbD09ZmcmJihmZz1nZyhoZykpfVxuZnVuY3Rpb24gZWcoYSxiLGMpe3RyeXt2YXIgZD0hMTtiLmNhbGwoYSxmdW5jdGlvbihhKXtpZighZCl7ZD0hMDt2YXIgYjt0cnl7Yj1hJiZhLnRoZW59Y2F0Y2goZyl7Yy5hKGcpO3JldHVybn1iP2VnKGEsYixjKTpjLlgoYSl9fSxjLmEuYmluZChjKSl9Y2F0Y2goZSl7Yy5hKGUpfX1mdW5jdGlvbiBoZygpe2Zvcig7ZGcubGVuZ3RoOyl7bnVsbCE9ZmcmJihpZyhmZyksZmc9bnVsbCk7dmFyIGE9ZGc7ZGc9W107Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDsrK2IpYVtiXSgpfX1mdW5jdGlvbiBnZygpe3JldHVybiAwfWZ1bmN0aW9uIGlnKCl7fXZhciBmZz1udWxsLGRnPVtdO1xub2YoZnVuY3Rpb24oYSl7d2luZG93LnNldEltbWVkaWF0ZT8oZ2c9ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoYSl9LGlnPWZ1bmN0aW9uKGEpe3JldHVybiB3aW5kb3cuY2xlYXJJbW1lZGlhdGUoYSl9KTooZ2c9ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGEsMCl9LGlnPWZ1bmN0aW9uKGEpe3JldHVybiB3aW5kb3cuY2xlYXJUaW1lb3V0KGEpfSk7aWYoIXdpbmRvdy5Qcm9taXNlfHxhKXdpbmRvdy5Qcm9taXNlPVosd2luZG93LlByb21pc2UucmVzb2x2ZT1aZix3aW5kb3cuUHJvbWlzZS5yZWplY3Q9JGYsd2luZG93LlByb21pc2UuYWxsPWFnLHdpbmRvdy5Qcm9taXNlLnJhY2U9Ymcsd2luZG93LlByb21pc2UucHJvdG90eXBlLnRoZW49Wi5wcm90b3R5cGUudGhlbix3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXT1aLnByb3RvdHlwZVtcImNhdGNoXCJdfSk7ZnVuY3Rpb24gamcoKXtyZXR1cm57ZHJvcHBlZFZpZGVvRnJhbWVzOnRoaXMud2Via2l0RHJvcHBlZEZyYW1lQ291bnQsdG90YWxWaWRlb0ZyYW1lczp0aGlzLndlYmtpdERlY29kZWRGcmFtZUNvdW50LGNvcnJ1cHRlZFZpZGVvRnJhbWVzOjAsY3JlYXRpb25UaW1lOk5hTix0b3RhbEZyYW1lRGVsYXk6MH19b2YoZnVuY3Rpb24oKXtpZih3aW5kb3cuSFRNTFZpZGVvRWxlbWVudCl7dmFyIGE9SFRNTFZpZGVvRWxlbWVudC5wcm90b3R5cGU7IWEuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkmJlwid2Via2l0RHJvcHBlZEZyYW1lQ291bnRcImluIGEmJihhLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5PWpnKX19KTtmdW5jdGlvbiBrZyhhLGIsYyl7cmV0dXJuIG5ldyB3aW5kb3cuVGV4dFRyYWNrQ3VlKGEsYixjKX1mdW5jdGlvbiBsZyhhLGIsYyl7cmV0dXJuIG5ldyB3aW5kb3cuVGV4dFRyYWNrQ3VlKGErXCItXCIrYitcIi1cIitjLGEsYixjKX1vZihmdW5jdGlvbigpe2lmKCF3aW5kb3cuVlRUQ3VlJiZ3aW5kb3cuVGV4dFRyYWNrQ3VlKXt2YXIgYT1UZXh0VHJhY2tDdWUubGVuZ3RoO2lmKDM9PWEpd2luZG93LlZUVEN1ZT1rZztlbHNlIGlmKDY9PWEpd2luZG93LlZUVEN1ZT1sZztlbHNle3ZhciBiO3RyeXtiPSEha2coMSwyLFwiXCIpfWNhdGNoKGMpe2I9ITF9YiYmKHdpbmRvdy5WVFRDdWU9a2cpfX19KTt9LmNhbGwoZyx0aGlzKSk7XG5pZiAodHlwZW9mKG1vZHVsZSkhPVwidW5kZWZpbmVkXCImJm1vZHVsZS5leHBvcnRzKW1vZHVsZS5leHBvcnRzPWcuc2hha2E7XG5lbHNlIGlmICh0eXBlb2YoZGVmaW5lKSE9XCJ1bmRlZmluZWRcIiAmJiBkZWZpbmUuYW1kKWRlZmluZShmdW5jdGlvbigpe3JldHVybiBnLnNoYWthfSk7XG5lbHNlIHRoaXMuc2hha2E9Zy5zaGFrYTtcbn0pKCk7XG5cbiIsIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG52YXIgU3RhdHM9ZnVuY3Rpb24oKXt2YXIgbD1EYXRlLm5vdygpLG09bCxnPTAsbj1JbmZpbml0eSxvPTAsaD0wLHA9SW5maW5pdHkscT0wLHI9MCxzPTAsZj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2YuaWQ9XCJzdGF0c1wiO2YuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGIpe2IucHJldmVudERlZmF1bHQoKTt0KCsrcyUyKX0sITEpO2Yuc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7b3BhY2l0eTowLjk7Y3Vyc29yOnBvaW50ZXJcIjt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2EuaWQ9XCJmcHNcIjthLnN0eWxlLmNzc1RleHQ9XCJwYWRkaW5nOjAgMCAzcHggM3B4O3RleHQtYWxpZ246bGVmdDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDJcIjtmLmFwcGVuZENoaWxkKGEpO3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aS5pZD1cImZwc1RleHRcIjtpLnN0eWxlLmNzc1RleHQ9XCJjb2xvcjojMGZmO2ZvbnQtZmFtaWx5OkhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTo5cHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxNXB4XCI7XG5pLmlubmVySFRNTD1cIkZQU1wiO2EuYXBwZW5kQ2hpbGQoaSk7dmFyIGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLmlkPVwiZnBzR3JhcGhcIjtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3NHB4O2hlaWdodDozMHB4O2JhY2tncm91bmQtY29sb3I6IzBmZlwiO2ZvcihhLmFwcGVuZENoaWxkKGMpOzc0PmMuY2hpbGRyZW4ubGVuZ3RoOyl7dmFyIGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7ai5zdHlsZS5jc3NUZXh0PVwid2lkdGg6MXB4O2hlaWdodDozMHB4O2Zsb2F0OmxlZnQ7YmFja2dyb3VuZC1jb2xvcjojMTEzXCI7Yy5hcHBlbmRDaGlsZChqKX12YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2QuaWQ9XCJtc1wiO2Quc3R5bGUuY3NzVGV4dD1cInBhZGRpbmc6MCAwIDNweCAzcHg7dGV4dC1hbGlnbjpsZWZ0O2JhY2tncm91bmQtY29sb3I6IzAyMDtkaXNwbGF5Om5vbmVcIjtmLmFwcGVuZENoaWxkKGQpO3ZhciBrPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5rLmlkPVwibXNUZXh0XCI7ay5zdHlsZS5jc3NUZXh0PVwiY29sb3I6IzBmMDtmb250LWZhbWlseTpIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtmb250LXNpemU6OXB4O2ZvbnQtd2VpZ2h0OmJvbGQ7bGluZS1oZWlnaHQ6MTVweFwiO2suaW5uZXJIVE1MPVwiTVNcIjtkLmFwcGVuZENoaWxkKGspO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5pZD1cIm1zR3JhcGhcIjtlLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3NHB4O2hlaWdodDozMHB4O2JhY2tncm91bmQtY29sb3I6IzBmMFwiO2ZvcihkLmFwcGVuZENoaWxkKGUpOzc0PmUuY2hpbGRyZW4ubGVuZ3RoOylqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLGouc3R5bGUuY3NzVGV4dD1cIndpZHRoOjFweDtoZWlnaHQ6MzBweDtmbG9hdDpsZWZ0O2JhY2tncm91bmQtY29sb3I6IzEzMVwiLGUuYXBwZW5kQ2hpbGQoaik7dmFyIHQ9ZnVuY3Rpb24oYil7cz1iO3N3aXRjaChzKXtjYXNlIDA6YS5zdHlsZS5kaXNwbGF5PVxuXCJibG9ja1wiO2Quc3R5bGUuZGlzcGxheT1cIm5vbmVcIjticmVhaztjYXNlIDE6YS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGQuc3R5bGUuZGlzcGxheT1cImJsb2NrXCJ9fTtyZXR1cm57UkVWSVNJT046MTIsZG9tRWxlbWVudDpmLHNldE1vZGU6dCxiZWdpbjpmdW5jdGlvbigpe2w9RGF0ZS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7dmFyIGI9RGF0ZS5ub3coKTtnPWItbDtuPU1hdGgubWluKG4sZyk7bz1NYXRoLm1heChvLGcpO2sudGV4dENvbnRlbnQ9ZytcIiBNUyAoXCIrbitcIi1cIitvK1wiKVwiO3ZhciBhPU1hdGgubWluKDMwLDMwLTMwKihnLzIwMCkpO2UuYXBwZW5kQ2hpbGQoZS5maXJzdENoaWxkKS5zdHlsZS5oZWlnaHQ9YStcInB4XCI7cisrO2I+bSsxRTMmJihoPU1hdGgucm91bmQoMUUzKnIvKGItbSkpLHA9TWF0aC5taW4ocCxoKSxxPU1hdGgubWF4KHEsaCksaS50ZXh0Q29udGVudD1oK1wiIEZQUyAoXCIrcCtcIi1cIitxK1wiKVwiLGE9TWF0aC5taW4oMzAsMzAtMzAqKGgvMTAwKSksYy5hcHBlbmRDaGlsZChjLmZpcnN0Q2hpbGQpLnN0eWxlLmhlaWdodD1cbmErXCJweFwiLG09YixyPTApO3JldHVybiBifSx1cGRhdGU6ZnVuY3Rpb24oKXtsPXRoaXMuZW5kKCl9fX07XCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1TdGF0cyk7XG4iLCIvKipcbiAqIFR3ZWVuLmpzIC0gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qcy9ncmFwaHMvY29udHJpYnV0b3JzIGZvciB0aGUgZnVsbCBsaXN0IG9mIGNvbnRyaWJ1dG9ycy5cbiAqIFRoYW5rIHlvdSBhbGwsIHlvdSdyZSBhd2Vzb21lIVxuICovXG5cbnZhciBUV0VFTiA9IFRXRUVOIHx8IChmdW5jdGlvbiAoKSB7XG5cblx0dmFyIF90d2VlbnMgPSBbXTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0QWxsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfdHdlZW5zO1xuXG5cdFx0fSxcblxuXHRcdHJlbW92ZUFsbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRfdHdlZW5zID0gW107XG5cblx0XHR9LFxuXG5cdFx0YWRkOiBmdW5jdGlvbiAodHdlZW4pIHtcblxuXHRcdFx0X3R3ZWVucy5wdXNoKHR3ZWVuKTtcblxuXHRcdH0sXG5cblx0XHRyZW1vdmU6IGZ1bmN0aW9uICh0d2Vlbikge1xuXG5cdFx0XHR2YXIgaSA9IF90d2VlbnMuaW5kZXhPZih0d2Vlbik7XG5cblx0XHRcdGlmIChpICE9PSAtMSkge1xuXHRcdFx0XHRfdHdlZW5zLnNwbGljZShpLCAxKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uICh0aW1lLCBwcmVzZXJ2ZSkge1xuXG5cdFx0XHRpZiAoX3R3ZWVucy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdHRpbWUgPSB0aW1lICE9PSB1bmRlZmluZWQgPyB0aW1lIDogVFdFRU4ubm93KCk7XG5cblx0XHRcdHdoaWxlIChpIDwgX3R3ZWVucy5sZW5ndGgpIHtcblxuXHRcdFx0XHRpZiAoX3R3ZWVuc1tpXS51cGRhdGUodGltZSkgfHwgcHJlc2VydmUpIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3R3ZWVucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblx0fTtcblxufSkoKTtcblxuXG4vLyBJbmNsdWRlIGEgcGVyZm9ybWFuY2Uubm93IHBvbHlmaWxsXG4oZnVuY3Rpb24gKCkge1xuXHQvLyBJbiBub2RlLmpzLCB1c2UgcHJvY2Vzcy5ocnRpbWUuXG5cdGlmICh0aGlzLndpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHRoaXMucHJvY2VzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0VFdFRU4ubm93ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZSgpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFtzZWNvbmRzLCBtaWNyb3NlY29uZHNdIHRvIG1pbGxpc2Vjb25kcy5cblx0XHRcdHJldHVybiB0aW1lWzBdICogMTAwMCArIHRpbWVbMV0gLyAxMDAwO1xuXHRcdH07XG5cdH1cblx0Ly8gSW4gYSBicm93c2VyLCB1c2Ugd2luZG93LnBlcmZvcm1hbmNlLm5vdyBpZiBpdCBpcyBhdmFpbGFibGUuXG5cdGVsc2UgaWYgKHRoaXMud2luZG93ICE9PSB1bmRlZmluZWQgJiZcblx0ICAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWQgJiZcblx0XHQgd2luZG93LnBlcmZvcm1hbmNlLm5vdyAhPT0gdW5kZWZpbmVkKSB7XG5cblx0XHQvLyBUaGlzIG11c3QgYmUgYm91bmQsIGJlY2F1c2UgZGlyZWN0bHkgYXNzaWduaW5nIHRoaXMgZnVuY3Rpb25cblx0XHQvLyBsZWFkcyB0byBhbiBpbnZvY2F0aW9uIGV4Y2VwdGlvbiBpbiBDaHJvbWUuXG5cdFx0VFdFRU4ubm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHdpbmRvdy5wZXJmb3JtYW5jZSk7XG5cdH1cblx0Ly8gVXNlIERhdGUubm93IGlmIGl0IGlzIGF2YWlsYWJsZS5cblx0ZWxzZSBpZiAoRGF0ZS5ub3cgIT09IHVuZGVmaW5lZCkge1xuXHRcdFRXRUVOLm5vdyA9IERhdGUubm93O1xuXHR9XG5cdC8vIE90aGVyd2lzZSwgdXNlICduZXcgRGF0ZSgpLmdldFRpbWUoKScuXG5cdGVsc2Uge1xuXHRcdFRXRUVOLm5vdyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0XHR9O1xuXHR9XG59KSgpO1xuXG5cblRXRUVOLlR3ZWVuID0gZnVuY3Rpb24gKG9iamVjdCkge1xuXG5cdHZhciBfb2JqZWN0ID0gb2JqZWN0O1xuXHR2YXIgX3ZhbHVlc1N0YXJ0ID0ge307XG5cdHZhciBfdmFsdWVzRW5kID0ge307XG5cdHZhciBfdmFsdWVzU3RhcnRSZXBlYXQgPSB7fTtcblx0dmFyIF9kdXJhdGlvbiA9IDEwMDA7XG5cdHZhciBfcmVwZWF0ID0gMDtcblx0dmFyIF95b3lvID0gZmFsc2U7XG5cdHZhciBfaXNQbGF5aW5nID0gZmFsc2U7XG5cdHZhciBfcmV2ZXJzZWQgPSBmYWxzZTtcblx0dmFyIF9kZWxheVRpbWUgPSAwO1xuXHR2YXIgX3N0YXJ0VGltZSA9IG51bGw7XG5cdHZhciBfZWFzaW5nRnVuY3Rpb24gPSBUV0VFTi5FYXNpbmcuTGluZWFyLk5vbmU7XG5cdHZhciBfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5MaW5lYXI7XG5cdHZhciBfY2hhaW5lZFR3ZWVucyA9IFtdO1xuXHR2YXIgX29uU3RhcnRDYWxsYmFjayA9IG51bGw7XG5cdHZhciBfb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcblx0dmFyIF9vblVwZGF0ZUNhbGxiYWNrID0gbnVsbDtcblx0dmFyIF9vbkNvbXBsZXRlQ2FsbGJhY2sgPSBudWxsO1xuXHR2YXIgX29uU3RvcENhbGxiYWNrID0gbnVsbDtcblxuXHQvLyBTZXQgYWxsIHN0YXJ0aW5nIHZhbHVlcyBwcmVzZW50IG9uIHRoZSB0YXJnZXQgb2JqZWN0XG5cdGZvciAodmFyIGZpZWxkIGluIG9iamVjdCkge1xuXHRcdF92YWx1ZXNTdGFydFtmaWVsZF0gPSBwYXJzZUZsb2F0KG9iamVjdFtmaWVsZF0sIDEwKTtcblx0fVxuXG5cdHRoaXMudG8gPSBmdW5jdGlvbiAocHJvcGVydGllcywgZHVyYXRpb24pIHtcblxuXHRcdGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0XHR9XG5cblx0XHRfdmFsdWVzRW5kID0gcHJvcGVydGllcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cblx0XHRUV0VFTi5hZGQodGhpcyk7XG5cblx0XHRfaXNQbGF5aW5nID0gdHJ1ZTtcblxuXHRcdF9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuXG5cdFx0X3N0YXJ0VGltZSA9IHRpbWUgIT09IHVuZGVmaW5lZCA/IHRpbWUgOiBUV0VFTi5ub3coKTtcblx0XHRfc3RhcnRUaW1lICs9IF9kZWxheVRpbWU7XG5cblx0XHRmb3IgKHZhciBwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG5cblx0XHRcdC8vIENoZWNrIGlmIGFuIEFycmF5IHdhcyBwcm92aWRlZCBhcyBwcm9wZXJ0eSB2YWx1ZVxuXHRcdFx0aWYgKF92YWx1ZXNFbmRbcHJvcGVydHldIGluc3RhbmNlb2YgQXJyYXkpIHtcblxuXHRcdFx0XHRpZiAoX3ZhbHVlc0VuZFtwcm9wZXJ0eV0ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgYSBsb2NhbCBjb3B5IG9mIHRoZSBBcnJheSB3aXRoIHRoZSBzdGFydCB2YWx1ZSBhdCB0aGUgZnJvbnRcblx0XHRcdFx0X3ZhbHVlc0VuZFtwcm9wZXJ0eV0gPSBbX29iamVjdFtwcm9wZXJ0eV1dLmNvbmNhdChfdmFsdWVzRW5kW3Byb3BlcnR5XSk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYHRvKClgIHNwZWNpZmllcyBhIHByb3BlcnR5IHRoYXQgZG9lc24ndCBleGlzdCBpbiB0aGUgc291cmNlIG9iamVjdCxcblx0XHRcdC8vIHdlIHNob3VsZCBub3Qgc2V0IHRoYXQgcHJvcGVydHkgaW4gdGhlIG9iamVjdFxuXHRcdFx0aWYgKF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0X3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IF9vYmplY3RbcHJvcGVydHldO1xuXG5cdFx0XHRpZiAoKF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gaW5zdGFuY2VvZiBBcnJheSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gKj0gMS4wOyAvLyBFbnN1cmVzIHdlJ3JlIHVzaW5nIG51bWJlcnMsIG5vdCBzdHJpbmdzXG5cdFx0XHR9XG5cblx0XHRcdF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gPSBfdmFsdWVzU3RhcnRbcHJvcGVydHldIHx8IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICghX2lzUGxheWluZykge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0VFdFRU4ucmVtb3ZlKHRoaXMpO1xuXHRcdF9pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdGlmIChfb25TdG9wQ2FsbGJhY2sgIT09IG51bGwpIHtcblx0XHRcdF9vblN0b3BDYWxsYmFjay5jYWxsKF9vYmplY3QpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcENoYWluZWRUd2VlbnMoKTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuc3RvcENoYWluZWRUd2VlbnMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IF9jaGFpbmVkVHdlZW5zLmxlbmd0aDsgaSA8IG51bUNoYWluZWRUd2VlbnM7IGkrKykge1xuXHRcdFx0X2NoYWluZWRUd2VlbnNbaV0uc3RvcCgpO1xuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuZGVsYXkgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG5cblx0XHRfZGVsYXlUaW1lID0gYW1vdW50O1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5yZXBlYXQgPSBmdW5jdGlvbiAodGltZXMpIHtcblxuXHRcdF9yZXBlYXQgPSB0aW1lcztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMueW95byA9IGZ1bmN0aW9uICh5b3lvKSB7XG5cblx0XHRfeW95byA9IHlveW87XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXG5cdHRoaXMuZWFzaW5nID0gZnVuY3Rpb24gKGVhc2luZykge1xuXG5cdFx0X2Vhc2luZ0Z1bmN0aW9uID0gZWFzaW5nO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5pbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKGludGVycG9sYXRpb24pIHtcblxuXHRcdF9pbnRlcnBvbGF0aW9uRnVuY3Rpb24gPSBpbnRlcnBvbGF0aW9uO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5jaGFpbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jaGFpbmVkVHdlZW5zID0gYXJndW1lbnRzO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5vblN0YXJ0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cblx0XHRfb25TdGFydENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLm9uVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cblx0XHRfb25VcGRhdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cblx0XHRfb25Db21wbGV0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLm9uU3RvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0X29uU3RvcENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cblx0XHR2YXIgcHJvcGVydHk7XG5cdFx0dmFyIGVsYXBzZWQ7XG5cdFx0dmFyIHZhbHVlO1xuXG5cdFx0aWYgKHRpbWUgPCBfc3RhcnRUaW1lKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoX29uU3RhcnRDYWxsYmFja0ZpcmVkID09PSBmYWxzZSkge1xuXG5cdFx0XHRpZiAoX29uU3RhcnRDYWxsYmFjayAhPT0gbnVsbCkge1xuXHRcdFx0XHRfb25TdGFydENhbGxiYWNrLmNhbGwoX29iamVjdCk7XG5cdFx0XHR9XG5cblx0XHRcdF9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRlbGFwc2VkID0gKHRpbWUgLSBfc3RhcnRUaW1lKSAvIF9kdXJhdGlvbjtcblx0XHRlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuXHRcdHZhbHVlID0gX2Vhc2luZ0Z1bmN0aW9uKGVsYXBzZWQpO1xuXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG5cblx0XHRcdC8vIERvbid0IHVwZGF0ZSBwcm9wZXJ0aWVzIHRoYXQgZG8gbm90IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0XG5cdFx0XHRpZiAoX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc3RhcnQgPSBfdmFsdWVzU3RhcnRbcHJvcGVydHldIHx8IDA7XG5cdFx0XHR2YXIgZW5kID0gX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG5cblx0XHRcdGlmIChlbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXG5cdFx0XHRcdF9vYmplY3RbcHJvcGVydHldID0gX2ludGVycG9sYXRpb25GdW5jdGlvbihlbmQsIHZhbHVlKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBQYXJzZXMgcmVsYXRpdmUgZW5kIHZhbHVlcyB3aXRoIHN0YXJ0IGFzIGJhc2UgKGUuZy46ICsxMCwgLTMpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGVuZCkgPT09ICdzdHJpbmcnKSB7XG5cblx0XHRcdFx0XHRpZiAoZW5kLmNoYXJBdCgwKSA9PT0gJysnIHx8IGVuZC5jaGFyQXQoMCkgPT09ICctJykge1xuXHRcdFx0XHRcdFx0ZW5kID0gc3RhcnQgKyBwYXJzZUZsb2F0KGVuZCwgMTApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbmQgPSBwYXJzZUZsb2F0KGVuZCwgMTApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3RlY3QgYWdhaW5zdCBub24gbnVtZXJpYyBwcm9wZXJ0aWVzLlxuXHRcdFx0XHRpZiAodHlwZW9mIChlbmQpID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRcdF9vYmplY3RbcHJvcGVydHldID0gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKF9vblVwZGF0ZUNhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRfb25VcGRhdGVDYWxsYmFjay5jYWxsKF9vYmplY3QsIHZhbHVlKTtcblx0XHR9XG5cblx0XHRpZiAoZWxhcHNlZCA9PT0gMSkge1xuXG5cdFx0XHRpZiAoX3JlcGVhdCA+IDApIHtcblxuXHRcdFx0XHRpZiAoaXNGaW5pdGUoX3JlcGVhdCkpIHtcblx0XHRcdFx0XHRfcmVwZWF0LS07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWFzc2lnbiBzdGFydGluZyB2YWx1ZXMsIHJlc3RhcnQgYnkgbWFraW5nIHN0YXJ0VGltZSA9IG5vd1xuXHRcdFx0XHRmb3IgKHByb3BlcnR5IGluIF92YWx1ZXNTdGFydFJlcGVhdCkge1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiAoX3ZhbHVlc0VuZFtwcm9wZXJ0eV0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gKyBwYXJzZUZsb2F0KF92YWx1ZXNFbmRbcHJvcGVydHldLCAxMCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKF95b3lvKSB7XG5cdFx0XHRcdFx0XHR2YXIgdG1wID0gX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcblxuXHRcdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNFbmRbcHJvcGVydHldO1xuXHRcdFx0XHRcdFx0X3ZhbHVlc0VuZFtwcm9wZXJ0eV0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChfeW95bykge1xuXHRcdFx0XHRcdF9yZXZlcnNlZCA9ICFfcmV2ZXJzZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfc3RhcnRUaW1lID0gdGltZSArIF9kZWxheVRpbWU7XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKF9vbkNvbXBsZXRlQ2FsbGJhY2sgIT09IG51bGwpIHtcblx0XHRcdFx0XHRfb25Db21wbGV0ZUNhbGxiYWNrLmNhbGwoX29iamVjdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IF9jaGFpbmVkVHdlZW5zLmxlbmd0aDsgaSA8IG51bUNoYWluZWRUd2VlbnM7IGkrKykge1xuXHRcdFx0XHRcdC8vIE1ha2UgdGhlIGNoYWluZWQgdHdlZW5zIHN0YXJ0IGV4YWN0bHkgYXQgdGhlIHRpbWUgdGhleSBzaG91bGQsXG5cdFx0XHRcdFx0Ly8gZXZlbiBpZiB0aGUgYHVwZGF0ZSgpYCBtZXRob2Qgd2FzIGNhbGxlZCB3YXkgcGFzdCB0aGUgZHVyYXRpb24gb2YgdGhlIHR3ZWVuXG5cdFx0XHRcdFx0X2NoYWluZWRUd2VlbnNbaV0uc3RhcnQoX3N0YXJ0VGltZSArIF9kdXJhdGlvbik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH07XG5cbn07XG5cblxuVFdFRU4uRWFzaW5nID0ge1xuXG5cdExpbmVhcjoge1xuXG5cdFx0Tm9uZTogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGs7XG5cblx0XHR9XG5cblx0fSxcblxuXHRRdWFkcmF0aWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGs7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqICgyIC0gayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIGsgKiBrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gLSAwLjUgKiAoLS1rICogKGsgLSAyKSAtIDEpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Q3ViaWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIC0tayAqIGsgKiBrICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKChrIC09IDIpICogayAqIGsgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFF1YXJ0aWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGsgKiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAxIC0gKC0tayAqIGsgKiBrICogayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIGsgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAtIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAtIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0UXVpbnRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGsgKiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAtLWsgKiBrICogayAqIGsgKiBrICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoKGsgLT0gMikgKiBrICogayAqIGsgKiBrICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRTaW51c29pZGFsOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBNYXRoLmNvcyhrICogTWF0aC5QSSAvIDIpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguc2luKGsgKiBNYXRoLlBJIC8gMik7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRFeHBvbmVudGlhbDoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrID09PSAwID8gMCA6IE1hdGgucG93KDEwMjQsIGsgLSAxKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtIDEwICogayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKC0gTWF0aC5wb3coMiwgLSAxMCAqIChrIC0gMSkpICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRDaXJjdWxhcjoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSBrICogayk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAoLS1rICogaykpO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAtIDAuNSAqIChNYXRoLnNxcnQoMSAtIGsgKiBrKSAtIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKGsgLT0gMikgKiBrKSArIDEpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0RWxhc3RpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIC1NYXRoLnBvdygyLCAxMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gTWF0aC5wb3coMiwgLTEwICogaykgKiBNYXRoLnNpbigoayAtIDAuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGsgKj0gMjtcblxuXHRcdFx0aWYgKGsgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAtMC41ICogTWF0aC5wb3coMiwgMTAgKiAoayAtIDEpKSAqIE1hdGguc2luKChrIC0gMS4xKSAqIDUgKiBNYXRoLlBJKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqIE1hdGgucG93KDIsIC0xMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpICsgMTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdEJhY2s6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cblx0XHRcdHJldHVybiBrICogayAqICgocyArIDEpICogayAtIHMpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXG5cdFx0XHRyZXR1cm4gLS1rICogayAqICgocyArIDEpICogayArIHMpICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0dmFyIHMgPSAxLjcwMTU4ICogMS41MjU7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIChrICogayAqICgocyArIDEpICogayAtIHMpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiAoKHMgKyAxKSAqIGsgKyBzKSArIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Qm91bmNlOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBUV0VFTi5FYXNpbmcuQm91bmNlLk91dCgxIC0gayk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA8ICgxIC8gMi43NSkpIHtcblx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIGsgKiBrO1xuXHRcdFx0fSBlbHNlIGlmIChrIDwgKDIgLyAyLjc1KSkge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKGsgLT0gKDEuNSAvIDIuNzUpKSAqIGsgKyAwLjc1O1xuXHRcdFx0fSBlbHNlIGlmIChrIDwgKDIuNSAvIDIuNzUpKSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMi4yNSAvIDIuNzUpKSAqIGsgKyAwLjkzNzU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKGsgLT0gKDIuNjI1IC8gMi43NSkpICogayArIDAuOTg0Mzc1O1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA8IDAuNSkge1xuXHRcdFx0XHRyZXR1cm4gVFdFRU4uRWFzaW5nLkJvdW5jZS5JbihrICogMikgKiAwLjU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBUV0VFTi5FYXNpbmcuQm91bmNlLk91dChrICogMiAtIDEpICogMC41ICsgMC41O1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuVFdFRU4uSW50ZXJwb2xhdGlvbiA9IHtcblxuXHRMaW5lYXI6IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgbSA9IHYubGVuZ3RoIC0gMTtcblx0XHR2YXIgZiA9IG0gKiBrO1xuXHRcdHZhciBpID0gTWF0aC5mbG9vcihmKTtcblx0XHR2YXIgZm4gPSBUV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkxpbmVhcjtcblxuXHRcdGlmIChrIDwgMCkge1xuXHRcdFx0cmV0dXJuIGZuKHZbMF0sIHZbMV0sIGYpO1xuXHRcdH1cblxuXHRcdGlmIChrID4gMSkge1xuXHRcdFx0cmV0dXJuIGZuKHZbbV0sIHZbbSAtIDFdLCBtIC0gZik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKHZbaV0sIHZbaSArIDEgPiBtID8gbSA6IGkgKyAxXSwgZiAtIGkpO1xuXG5cdH0sXG5cblx0QmV6aWVyOiBmdW5jdGlvbiAodiwgaykge1xuXG5cdFx0dmFyIGIgPSAwO1xuXHRcdHZhciBuID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBwdyA9IE1hdGgucG93O1xuXHRcdHZhciBibiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuQmVybnN0ZWluO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG5cdFx0XHRiICs9IHB3KDEgLSBrLCBuIC0gaSkgKiBwdyhrLCBpKSAqIHZbaV0gKiBibihuLCBpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYjtcblxuXHR9LFxuXG5cdENhdG11bGxSb206IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgbSA9IHYubGVuZ3RoIC0gMTtcblx0XHR2YXIgZiA9IG0gKiBrO1xuXHRcdHZhciBpID0gTWF0aC5mbG9vcihmKTtcblx0XHR2YXIgZm4gPSBUV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkNhdG11bGxSb207XG5cblx0XHRpZiAodlswXSA9PT0gdlttXSkge1xuXG5cdFx0XHRpZiAoayA8IDApIHtcblx0XHRcdFx0aSA9IE1hdGguZmxvb3IoZiA9IG0gKiAoMSArIGspKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuKHZbKGkgLSAxICsgbSkgJSBtXSwgdltpXSwgdlsoaSArIDEpICUgbV0sIHZbKGkgKyAyKSAlIG1dLCBmIC0gaSk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoayA8IDApIHtcblx0XHRcdFx0cmV0dXJuIHZbMF0gLSAoZm4odlswXSwgdlswXSwgdlsxXSwgdlsxXSwgLWYpIC0gdlswXSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID4gMSkge1xuXHRcdFx0XHRyZXR1cm4gdlttXSAtIChmbih2W21dLCB2W21dLCB2W20gLSAxXSwgdlttIC0gMV0sIGYgLSBtKSAtIHZbbV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm4odltpID8gaSAtIDEgOiAwXSwgdltpXSwgdlttIDwgaSArIDEgPyBtIDogaSArIDFdLCB2W20gPCBpICsgMiA/IG0gOiBpICsgMl0sIGYgLSBpKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFV0aWxzOiB7XG5cblx0XHRMaW5lYXI6IGZ1bmN0aW9uIChwMCwgcDEsIHQpIHtcblxuXHRcdFx0cmV0dXJuIChwMSAtIHAwKSAqIHQgKyBwMDtcblxuXHRcdH0sXG5cblx0XHRCZXJuc3RlaW46IGZ1bmN0aW9uIChuLCBpKSB7XG5cblx0XHRcdHZhciBmYyA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuRmFjdG9yaWFsO1xuXG5cdFx0XHRyZXR1cm4gZmMobikgLyBmYyhpKSAvIGZjKG4gLSBpKTtcblxuXHRcdH0sXG5cblx0XHRGYWN0b3JpYWw6IChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBhID0gWzFdO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKG4pIHtcblxuXHRcdFx0XHR2YXIgcyA9IDE7XG5cblx0XHRcdFx0aWYgKGFbbl0pIHtcblx0XHRcdFx0XHRyZXR1cm4gYVtuXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGkgPSBuOyBpID4gMTsgaS0tKSB7XG5cdFx0XHRcdFx0cyAqPSBpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YVtuXSA9IHM7XG5cdFx0XHRcdHJldHVybiBzO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSkoKSxcblxuXHRcdENhdG11bGxSb206IGZ1bmN0aW9uIChwMCwgcDEsIHAyLCBwMywgdCkge1xuXG5cdFx0XHR2YXIgdjAgPSAocDIgLSBwMCkgKiAwLjU7XG5cdFx0XHR2YXIgdjEgPSAocDMgLSBwMSkgKiAwLjU7XG5cdFx0XHR2YXIgdDIgPSB0ICogdDtcblx0XHRcdHZhciB0MyA9IHQgKiB0MjtcblxuXHRcdFx0cmV0dXJuICgyICogcDEgLSAyICogcDIgKyB2MCArIHYxKSAqIHQzICsgKC0gMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEpICogdDIgKyB2MCAqIHQgKyBwMTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuKGZ1bmN0aW9uIChyb290KSB7XG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gVFdFRU47XG5cdFx0fSk7XG5cblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblxuXHRcdC8vIE5vZGUuanNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IFRXRUVOO1xuXG5cdH0gZWxzZSBpZiAocm9vdCAhPT0gdW5kZWZpbmVkKSB7XG5cblx0XHQvLyBHbG9iYWwgdmFyaWFibGVcblx0XHRyb290LlRXRUVOID0gVFdFRU47XG5cblx0fVxuXG59KSh0aGlzKTtcbiIsIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLldlYlZSTWFuYWdlciA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBFbWl0dGVyID0gX2RlcmVxXygnLi9lbWl0dGVyLmpzJyk7XG52YXIgTW9kZXMgPSBfZGVyZXFfKCcuL21vZGVzLmpzJyk7XG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xuXG4vKipcbiAqIEV2ZXJ5dGhpbmcgaGF2aW5nIHRvIGRvIHdpdGggdGhlIFdlYlZSIGJ1dHRvbi5cbiAqIEVtaXRzIGEgJ2NsaWNrJyBldmVudCB3aGVuIGl0J3MgY2xpY2tlZC5cbiAqL1xuZnVuY3Rpb24gQnV0dG9uTWFuYWdlcihvcHRfcm9vdCkge1xuICB2YXIgcm9vdCA9IG9wdF9yb290IHx8IGRvY3VtZW50LmJvZHk7XG4gIHRoaXMubG9hZEljb25zXygpO1xuXG4gIC8vIE1ha2UgdGhlIGZ1bGxzY3JlZW4gYnV0dG9uLlxuICB2YXIgZnNCdXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbigpO1xuICBmc0J1dHRvbi5zcmMgPSB0aGlzLklDT05TLmZ1bGxzY3JlZW47XG4gIGZzQnV0dG9uLnRpdGxlID0gJ0Z1bGxzY3JlZW4gbW9kZSc7XG4gIHZhciBzID0gZnNCdXR0b24uc3R5bGU7XG4gIHMuYm90dG9tID0gMDtcbiAgcy5yaWdodCA9IDA7XG4gIGZzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jcmVhdGVDbGlja0hhbmRsZXJfKCdmcycpKTtcbiAgcm9vdC5hcHBlbmRDaGlsZChmc0J1dHRvbik7XG4gIHRoaXMuZnNCdXR0b24gPSBmc0J1dHRvbjtcblxuICAvLyBNYWtlIHRoZSBWUiBidXR0b24uXG4gIHZhciB2ckJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKCk7XG4gIHZyQnV0dG9uLnNyYyA9IHRoaXMuSUNPTlMuY2FyZGJvYXJkO1xuICB2ckJ1dHRvbi50aXRsZSA9ICdWaXJ0dWFsIHJlYWxpdHkgbW9kZSc7XG4gIHZhciBzID0gdnJCdXR0b24uc3R5bGU7XG4gIHMuYm90dG9tID0gMDtcbiAgcy5yaWdodCA9ICc0OHB4JztcbiAgdnJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNyZWF0ZUNsaWNrSGFuZGxlcl8oJ3ZyJykpO1xuICByb290LmFwcGVuZENoaWxkKHZyQnV0dG9uKTtcbiAgdGhpcy52ckJ1dHRvbiA9IHZyQnV0dG9uO1xuXG4gIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcblxufVxuQnV0dG9uTWFuYWdlci5wcm90b3R5cGUgPSBuZXcgRW1pdHRlcigpO1xuXG5CdXR0b25NYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVCdXR0b24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBidXR0b24uY2xhc3NOYW1lID0gJ3dlYnZyLWJ1dHRvbic7XG4gIHZhciBzID0gYnV0dG9uLnN0eWxlO1xuICBzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgcy53aWR0aCA9ICcyNHB4J1xuICBzLmhlaWdodCA9ICcyNHB4JztcbiAgcy5iYWNrZ3JvdW5kU2l6ZSA9ICdjb3Zlcic7XG4gIHMuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgcy5ib3JkZXIgPSAwO1xuICBzLnVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gIHMud2Via2l0VXNlclNlbGVjdCA9ICdub25lJztcbiAgcy5Nb3pVc2VyU2VsZWN0ID0gJ25vbmUnO1xuICBzLmN1cnNvciA9ICdwb2ludGVyJztcbiAgcy5wYWRkaW5nID0gJzEycHgnO1xuICBzLnpJbmRleCA9IDE7XG4gIHMuZGlzcGxheSA9ICdub25lJztcbiAgcy5ib3hTaXppbmcgPSAnY29udGVudC1ib3gnO1xuXG4gIC8vIFByZXZlbnQgYnV0dG9uIGZyb20gYmVpbmcgc2VsZWN0ZWQgYW5kIGRyYWdnZWQuXG4gIGJ1dHRvbi5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0pO1xuXG4gIC8vIFN0eWxlIGl0IG9uIGhvdmVyLlxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICBzLmZpbHRlciA9IHMud2Via2l0RmlsdGVyID0gJ2Ryb3Atc2hhZG93KDAgMCA1cHggcmdiYSgyNTUsMjU1LDI1NSwxKSknO1xuICB9KTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbihlKSB7XG4gICAgcy5maWx0ZXIgPSBzLndlYmtpdEZpbHRlciA9ICcnO1xuICB9KTtcbiAgcmV0dXJuIGJ1dHRvbjtcbn07XG5cbkJ1dHRvbk1hbmFnZXIucHJvdG90eXBlLnNldE1vZGUgPSBmdW5jdGlvbihtb2RlLCBpc1ZSQ29tcGF0aWJsZSkge1xuICBpc1ZSQ29tcGF0aWJsZSA9IGlzVlJDb21wYXRpYmxlIHx8IFdlYlZSQ29uZmlnLkZPUkNFX0VOQUJMRV9WUjtcbiAgaWYgKCF0aGlzLmlzVmlzaWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGVzLk5PUk1BTDpcbiAgICAgIHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLmZzQnV0dG9uLnNyYyA9IHRoaXMuSUNPTlMuZnVsbHNjcmVlbjtcbiAgICAgIHRoaXMudnJCdXR0b24uc3R5bGUuZGlzcGxheSA9IChpc1ZSQ29tcGF0aWJsZSA/ICdibG9jaycgOiAnbm9uZScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBNb2Rlcy5NQUdJQ19XSU5ET1c6XG4gICAgICB0aGlzLmZzQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy5mc0J1dHRvbi5zcmMgPSB0aGlzLklDT05TLmV4aXRGdWxsc2NyZWVuO1xuICAgICAgdGhpcy52ckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBNb2Rlcy5WUjpcbiAgICAgIHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMudnJCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gSGFjayBmb3IgU2FmYXJpIE1hYy9pT1MgdG8gZm9yY2UgcmVsYXlvdXQgKHN2Zy1zcGVjaWZpYyBpc3N1ZSlcbiAgLy8gaHR0cDovL2dvby5nbC9oamdSNnJcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5mc0J1dHRvbi5zdHlsZS5kaXNwbGF5O1xuICB0aGlzLmZzQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgdGhpcy5mc0J1dHRvbi5vZmZzZXRIZWlnaHQ7XG4gIHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheSA9IG9sZFZhbHVlO1xufTtcblxuQnV0dG9uTWFuYWdlci5wcm90b3R5cGUuc2V0VmlzaWJpbGl0eSA9IGZ1bmN0aW9uKGlzVmlzaWJsZSkge1xuICB0aGlzLmlzVmlzaWJsZSA9IGlzVmlzaWJsZTtcbiAgdGhpcy5mc0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gaXNWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgdGhpcy52ckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gaXNWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJztcbn07XG5cbkJ1dHRvbk1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZUNsaWNrSGFuZGxlcl8gPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmVtaXQoZXZlbnROYW1lKTtcbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuQnV0dG9uTWFuYWdlci5wcm90b3R5cGUubG9hZEljb25zXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBQcmVsb2FkIHNvbWUgaGFyZC1jb2RlZCBTVkcuXG4gIHRoaXMuSUNPTlMgPSB7fTtcbiAgdGhpcy5JQ09OUy5jYXJkYm9hcmQgPSBVdGlsLmJhc2U2NCgnaW1hZ2Uvc3ZnK3htbCcsICdQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l5TkhCNElpQm9aV2xuYUhROUlqSTBjSGdpSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJZ1ptbHNiRDBpSTBaR1JrWkdSaUkrQ2lBZ0lDQThjR0YwYUNCa1BTSk5NakF1TnpRZ05rZ3pMakl4UXpJdU5UVWdOaUF5SURZdU5UY2dNaUEzTGpJNGRqRXdMalEwWXpBZ0xqY3VOVFVnTVM0eU9DQXhMakl6SURFdU1qaG9OQzQzT1dNdU5USWdNQ0F1T1RZdExqTXpJREV1TVRRdExqYzViREV1TkMwekxqUTRZeTR5TXkwdU5Ua3VOemt0TVM0d01TQXhMalEwTFRFdU1ERnpNUzR5TVM0ME1pQXhMalExSURFdU1ERnNNUzR6T1NBekxqUTRZeTR4T1M0ME5pNDJNeTQzT1NBeExqRXhMamM1YURRdU56bGpMamN4SURBZ01TNHlOaTB1TlRjZ01TNHlOaTB4TGpJNFZqY3VNamhqTUMwdU55MHVOVFV0TVM0eU9DMHhMakkyTFRFdU1qaDZUVGN1TlNBeE5DNDJNbU10TVM0eE55QXdMVEl1TVRNdExqazFMVEl1TVRNdE1pNHhNaUF3TFRFdU1UY3VPVFl0TWk0eE15QXlMakV6TFRJdU1UTWdNUzR4T0NBd0lESXVNVEl1T1RZZ01pNHhNaUF5TGpFemN5MHVPVFVnTWk0eE1pMHlMakV5SURJdU1USjZiVGtnTUdNdE1TNHhOeUF3TFRJdU1UTXRMamsxTFRJdU1UTXRNaTR4TWlBd0xURXVNVGN1T1RZdE1pNHhNeUF5TGpFekxUSXVNVE56TWk0eE1pNDVOaUF5TGpFeUlESXVNVE10TGprMUlESXVNVEl0TWk0eE1pQXlMakV5ZWlJdlBnb2dJQ0FnUEhCaGRHZ2dabWxzYkQwaWJtOXVaU0lnWkQwaVRUQWdNR2d5TkhZeU5FZ3dWakI2SWk4K0Nqd3ZjM1puUGdvPScpO1xuICB0aGlzLklDT05TLmZ1bGxzY3JlZW4gPSBVdGlsLmJhc2U2NCgnaW1hZ2Uvc3ZnK3htbCcsICdQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l5TkhCNElpQm9aV2xuYUhROUlqSTBjSGdpSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJZ1ptbHNiRDBpSTBaR1JrWkdSaUkrQ2lBZ0lDQThjR0YwYUNCa1BTSk5NQ0F3YURJMGRqSTBTREI2SWlCbWFXeHNQU0p1YjI1bElpOCtDaUFnSUNBOGNHRjBhQ0JrUFNKTk55QXhORWcxZGpWb05YWXRNa2czZGkwemVtMHRNaTAwYURKV04yZ3pWalZJTlhZMWVtMHhNaUEzYUMwemRqSm9OWFl0TldndE1uWXplazB4TkNBMWRqSm9NM1l6YURKV05XZ3ROWG9pTHo0S1BDOXpkbWMrQ2c9PScpO1xuICB0aGlzLklDT05TLmV4aXRGdWxsc2NyZWVuID0gVXRpbC5iYXNlNjQoJ2ltYWdlL3N2Zyt4bWwnLCAnUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeU5IQjRJaUJvWldsbmFIUTlJakkwY0hnaUlIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSWdabWxzYkQwaUkwWkdSa1pHUmlJK0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTUNBd2FESTBkakkwU0RCNklpQm1hV3hzUFNKdWIyNWxJaTgrQ2lBZ0lDQThjR0YwYUNCa1BTSk5OU0F4Tm1nemRqTm9Nbll0TlVnMWRqSjZiVE10T0VnMWRqSm9OVlkxU0RoMk0zcHROaUF4TVdneWRpMHphRE4yTFRKb0xUVjJOWHB0TWkweE1WWTFhQzB5ZGpWb05WWTRhQzB6ZWlJdlBnbzhMM04yWno0SycpO1xuICB0aGlzLklDT05TLnNldHRpbmdzID0gVXRpbC5iYXNlNjQoJ2ltYWdlL3N2Zyt4bWwnLCAnUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeU5IQjRJaUJvWldsbmFIUTlJakkwY0hnaUlIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSWdabWxzYkQwaUkwWkdSa1pHUmlJK0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTUNBd2FESTBkakkwU0RCNklpQm1hV3hzUFNKdWIyNWxJaTgrQ2lBZ0lDQThjR0YwYUNCa1BTSk5NVGt1TkRNZ01USXVPVGhqTGpBMExTNHpNaTR3TnkwdU5qUXVNRGN0TGprNGN5MHVNRE10TGpZMkxTNHdOeTB1T1Roc01pNHhNUzB4TGpZMVl5NHhPUzB1TVRVdU1qUXRMalF5TGpFeUxTNDJOR3d0TWkwekxqUTJZeTB1TVRJdExqSXlMUzR6T1MwdU15MHVOakV0TGpJeWJDMHlMalE1SURGakxTNDFNaTB1TkMweExqQTRMUzQzTXkweExqWTVMUzQ1T0d3dExqTTRMVEl1TmpWRE1UUXVORFlnTWk0eE9DQXhOQzR5TlNBeUlERTBJREpvTFRSakxTNHlOU0F3TFM0ME5pNHhPQzB1TkRrdU5ESnNMUzR6T0NBeUxqWTFZeTB1TmpFdU1qVXRNUzR4Tnk0MU9TMHhMalk1TGprNGJDMHlMalE1TFRGakxTNHlNeTB1TURrdExqUTVJREF0TGpZeExqSXliQzB5SURNdU5EWmpMUzR4TXk0eU1pMHVNRGN1TkRrdU1USXVOalJzTWk0eE1TQXhMalkxWXkwdU1EUXVNekl0TGpBM0xqWTFMUzR3Tnk0NU9ITXVNRE11TmpZdU1EY3VPVGhzTFRJdU1URWdNUzQyTldNdExqRTVMakUxTFM0eU5DNDBNaTB1TVRJdU5qUnNNaUF6TGpRMll5NHhNaTR5TWk0ek9TNHpMall4TGpJeWJESXVORGt0TVdNdU5USXVOQ0F4TGpBNExqY3pJREV1TmprdU9UaHNMak00SURJdU5qVmpMakF6TGpJMExqSTBMalF5TGpRNUxqUXlhRFJqTGpJMUlEQWdMalEyTFM0eE9DNDBPUzB1TkRKc0xqTTRMVEl1TmpWakxqWXhMUzR5TlNBeExqRTNMUzQxT1NBeExqWTVMUzQ1T0d3eUxqUTVJREZqTGpJekxqQTVMalE1SURBZ0xqWXhMUzR5TW13eUxUTXVORFpqTGpFeUxTNHlNaTR3TnkwdU5Ea3RMakV5TFM0Mk5Hd3RNaTR4TVMweExqWTFlazB4TWlBeE5TNDFZeTB4TGpreklEQXRNeTQxTFRFdU5UY3RNeTQxTFRNdU5YTXhMalUzTFRNdU5TQXpMalV0TXk0MUlETXVOU0F4TGpVM0lETXVOU0F6TGpVdE1TNDFOeUF6TGpVdE15NDFJRE11TlhvaUx6NEtQQzl6ZG1jK0NnPT0nKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uTWFuYWdlcjtcblxufSx7XCIuL2VtaXR0ZXIuanNcIjoyLFwiLi9tb2Rlcy5qc1wiOjMsXCIuL3V0aWwuanNcIjo0fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKCkge1xuICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xufVxuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdO1xuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vY29uc29sZS5sb2coJ05vIHZhbGlkIGNhbGxiYWNrIHNwZWNpZmllZC4nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIC8vIEVsaW1pbmF0ZSB0aGUgZmlyc3QgcGFyYW0gKHRoZSBjYWxsYmFjaykuXG4gIGFyZ3Muc2hpZnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cbn07XG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICBpZiAoZXZlbnROYW1lIGluIHRoaXMuY2FsbGJhY2tzKSB7XG4gICAgdGhpcy5jYWxsYmFja3NbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdID0gW2NhbGxiYWNrXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xuXG59LHt9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBNb2RlcyA9IHtcbiAgVU5LTk9XTjogMCxcbiAgLy8gTm90IGZ1bGxzY3JlZW4sIGp1c3QgdHJhY2tpbmcuXG4gIE5PUk1BTDogMSxcbiAgLy8gTWFnaWMgd2luZG93IGltbWVyc2l2ZSBtb2RlLlxuICBNQUdJQ19XSU5ET1c6IDIsXG4gIC8vIEZ1bGwgc2NyZWVuIHNwbGl0IHNjcmVlbiBWUiBtb2RlLlxuICBWUjogMyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kZXM7XG5cbn0se31dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFV0aWwgPSB7fTtcblxuVXRpbC5iYXNlNjQgPSBmdW5jdGlvbihtaW1lVHlwZSwgYmFzZTY0KSB7XG4gIHJldHVybiAnZGF0YTonICsgbWltZVR5cGUgKyAnO2Jhc2U2NCwnICsgYmFzZTY0O1xufTtcblxuVXRpbC5pc01vYmlsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2hlY2sgPSBmYWxzZTtcbiAgKGZ1bmN0aW9uKGEpe2lmKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KGEpfHwvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsNCkpKWNoZWNrID0gdHJ1ZX0pKG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYSk7XG4gIHJldHVybiBjaGVjaztcbn07XG5cblV0aWwuaXNGaXJlZm94ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvZmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59O1xuXG5VdGlsLmlzSU9TID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG5cblV0aWwuaXNJRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuVXRpbC5hcHBlbmRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKHVybCwga2V5LCB2YWx1ZSkge1xuICAvLyBEZXRlcm1pbmUgZGVsaW1pdGVyIGJhc2VkIG9uIGlmIHRoZSBVUkwgYWxyZWFkeSBHRVQgcGFyYW1ldGVycyBpbiBpdC5cbiAgdmFyIGRlbGltaXRlciA9ICh1cmwuaW5kZXhPZignPycpIDwgMCA/ICc/JyA6ICcmJyk7XG4gIHVybCArPSBkZWxpbWl0ZXIgKyBrZXkgKyAnPScgKyB2YWx1ZTtcbiAgcmV0dXJuIHVybDtcbn07XG5cbi8vIEZyb20gaHR0cDovL2dvby5nbC80V1gzdGdcblV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sIFwiXFxcXFtcIikucmVwbGFjZSgvW1xcXV0vLCBcIlxcXFxdXCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiW1xcXFw/Jl1cIiArIG5hbWUgKyBcIj0oW14mI10qKVwiKSxcbiAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XG4gIHJldHVybiByZXN1bHRzID09PSBudWxsID8gXCJcIiA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufTtcblxuVXRpbC5pc0xhbmRzY2FwZU1vZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICh3aW5kb3cub3JpZW50YXRpb24gPT0gOTAgfHwgd2luZG93Lm9yaWVudGF0aW9uID09IC05MCk7XG59O1xuXG5VdGlsLmdldFNjcmVlbldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLm1heCh3aW5kb3cuc2NyZWVuLndpZHRoLCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgKlxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW87XG59O1xuXG5VdGlsLmdldFNjcmVlbkhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5taW4od2luZG93LnNjcmVlbi53aWR0aCwgd2luZG93LnNjcmVlbi5oZWlnaHQpICpcbiAgICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsO1xuXG59LHt9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBCdXR0b25NYW5hZ2VyID0gX2RlcmVxXygnLi9idXR0b24tbWFuYWdlci5qcycpO1xudmFyIEVtaXR0ZXIgPSBfZGVyZXFfKCcuL2VtaXR0ZXIuanMnKTtcbnZhciBNb2RlcyA9IF9kZXJlcV8oJy4vbW9kZXMuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG5cbi8qKlxuICogSGVscGVyIGZvciBnZXR0aW5nIGluIGFuZCBvdXQgb2YgVlIgbW9kZS5cbiAqL1xuZnVuY3Rpb24gV2ViVlJNYW5hZ2VyKHJlbmRlcmVyLCBlZmZlY3QsIHBhcmFtcykge1xuICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcblxuICB0aGlzLm1vZGUgPSBNb2Rlcy5VTktOT1dOO1xuXG4gIC8vIFNldCBvcHRpb24gdG8gaGlkZSB0aGUgYnV0dG9uLlxuICB0aGlzLmhpZGVCdXR0b24gPSB0aGlzLnBhcmFtcy5oaWRlQnV0dG9uIHx8IGZhbHNlO1xuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgRk9WIHNob3VsZCBiZSBkaXN0b3J0ZWQgb3IgdW4tZGlzdG9ydGVkLiBCeSBkZWZhdWx0LCBpdFxuICAvLyBzaG91bGQgYmUgZGlzdG9ydGVkLCBidXQgaW4gdGhlIGNhc2Ugb2YgdmVydGV4IHNoYWRlciBiYXNlZCBkaXN0b3J0aW9uLFxuICAvLyBlbnN1cmUgdGhhdCB3ZSB1c2UgdW5kaXN0b3J0ZWQgcGFyYW1ldGVycy5cbiAgdGhpcy5wcmVkaXN0b3J0ZWQgPSAhIXRoaXMucGFyYW1zLnByZWRpc3RvcnRlZDtcblxuICAvLyBTYXZlIHRoZSBUSFJFRS5qcyByZW5kZXJlciBhbmQgZWZmZWN0IGZvciBsYXRlci5cbiAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB0aGlzLmVmZmVjdCA9IGVmZmVjdDtcbiAgdmFyIHBvbHlmaWxsV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWJ2ci1wb2x5ZmlsbC1mdWxsc2NyZWVuLXdyYXBwZXInKTtcbiAgdGhpcy5idXR0b24gPSBuZXcgQnV0dG9uTWFuYWdlcihwb2x5ZmlsbFdyYXBwZXIpO1xuXG4gIHRoaXMuaXNGdWxsc2NyZWVuRGlzYWJsZWQgPSAhIVV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ25vX2Z1bGxzY3JlZW4nKTtcbiAgdGhpcy5zdGFydE1vZGUgPSBNb2Rlcy5OT1JNQUw7XG4gIHZhciBzdGFydE1vZGVQYXJhbSA9IHBhcnNlSW50KFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ3N0YXJ0X21vZGUnKSk7XG4gIGlmICghaXNOYU4oc3RhcnRNb2RlUGFyYW0pKSB7XG4gICAgdGhpcy5zdGFydE1vZGUgPSBzdGFydE1vZGVQYXJhbTtcbiAgfVxuXG4gIGlmICh0aGlzLmhpZGVCdXR0b24pIHtcbiAgICB0aGlzLmJ1dHRvbi5zZXRWaXNpYmlsaXR5KGZhbHNlKTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBicm93c2VyIGlzIGNvbXBhdGlibGUgd2l0aCBXZWJWUi5cbiAgdGhpcy5nZXREZXZpY2VCeVR5cGVfKFZSRGlzcGxheSkudGhlbihmdW5jdGlvbihobWQpIHtcbiAgICB0aGlzLmhtZCA9IGhtZDtcblxuICAgIC8vIE9ubHkgZW5hYmxlIFZSIG1vZGUgaWYgdGhlcmUncyBhIFZSIGRldmljZSBhdHRhY2hlZCBvciB3ZSBhcmUgcnVubmluZyB0aGVcbiAgICAvLyBwb2x5ZmlsbCBvbiBtb2JpbGUuXG4gICAgaWYgKCF0aGlzLmlzVlJDb21wYXRpYmxlT3ZlcnJpZGUpIHtcbiAgICAgIHRoaXMuaXNWUkNvbXBhdGlibGUgPSAgIWhtZC5pc1BvbHlmaWxsZWQgfHwgVXRpbC5pc01vYmlsZSgpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5zdGFydE1vZGUpIHtcbiAgICAgIGNhc2UgTW9kZXMuTUFHSUNfV0lORE9XOlxuICAgICAgICB0aGlzLnNldE1vZGVfKE1vZGVzLk1BR0lDX1dJTkRPVyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2Rlcy5WUjpcbiAgICAgICAgdGhpcy5lbnRlclZSTW9kZV8oKTtcbiAgICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5WUik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5OT1JNQUwpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICAvLyBIb29rIHVwIGJ1dHRvbiBsaXN0ZW5lcnMuXG4gIHRoaXMuYnV0dG9uLm9uKCdmcycsIHRoaXMub25GU0NsaWNrXy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5idXR0b24ub24oJ3ZyJywgdGhpcy5vblZSQ2xpY2tfLmJpbmQodGhpcykpO1xuXG4gIC8vIEJpbmQgdG8gZnVsbHNjcmVlbiBldmVudHMuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICAgdGhpcy5vbkZ1bGxzY3JlZW5DaGFuZ2VfLmJpbmQodGhpcykpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAgIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbXNmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAgIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlXy5iaW5kKHRoaXMpKTtcblxuICAvLyBCaW5kIHRvIFZSKiBzcGVjaWZpYyBldmVudHMuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJyxcbiAgICAgIHRoaXMub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheWRldmljZXBhcmFtc2NoYW5nZScsXG4gICAgICB0aGlzLm9uVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbn1cblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSA9IG5ldyBFbWl0dGVyKCk7XG5cbi8vIEV4cG9zZSB0aGVzZSB2YWx1ZXMgZXh0ZXJuYWxseS5cbldlYlZSTWFuYWdlci5Nb2RlcyA9IE1vZGVzO1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHNjZW5lLCBjYW1lcmEsIHRpbWVzdGFtcCkge1xuICAvLyBTY2VuZSBtYXkgYmUgYW4gYXJyYXkgb2YgdHdvIHNjZW5lcywgb25lIGZvciBlYWNoIGV5ZS5cbiAgaWYgKHNjZW5lIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB0aGlzLmVmZmVjdC5yZW5kZXIoc2NlbmVbMF0sIGNhbWVyYSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lZmZlY3QucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICB9XG59O1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLnNldFZSQ29tcGF0aWJsZU92ZXJyaWRlID0gZnVuY3Rpb24oaXNWUkNvbXBhdGlibGUpIHtcbiAgdGhpcy5pc1ZSQ29tcGF0aWJsZSA9IGlzVlJDb21wYXRpYmxlO1xuICB0aGlzLmlzVlJDb21wYXRpYmxlT3ZlcnJpZGUgPSB0cnVlO1xuXG4gIC8vIERvbid0IGFjdHVhbGx5IGNoYW5nZSBtb2RlcywganVzdCB1cGRhdGUgdGhlIGJ1dHRvbnMuXG4gIHRoaXMuYnV0dG9uLnNldE1vZGUodGhpcy5tb2RlLCB0aGlzLmlzVlJDb21wYXRpYmxlKTtcbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUuc2V0RnVsbHNjcmVlbkNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdGhpcy5mdWxsc2NyZWVuQ2FsbGJhY2sgPSBjYWxsYmFjaztcbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUuc2V0VlJDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMudnJDYWxsYmFjayA9IGNhbGxiYWNrO1xufTtcblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZS5zZXRFeGl0RnVsbHNjcmVlbkNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdGhpcy5leGl0RnVsbHNjcmVlbkNhbGxiYWNrID0gY2FsbGJhY2s7XG59XG5cbi8qKlxuICogUHJvbWlzZSByZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIEhNRCBkZXZpY2UgYXZhaWxhYmxlLlxuICovXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLmdldERldmljZUJ5VHlwZV8gPSBmdW5jdGlvbih0eXBlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBuYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cygpLnRoZW4oZnVuY3Rpb24oZGlzcGxheXMpIHtcbiAgICAgIC8vIFByb21pc2Ugc3VjY2VlZHMsIGJ1dCBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGRpc3BsYXlzIGFjdHVhbGx5LlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwbGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZGlzcGxheXNbaV0gaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgICAgICAgcmVzb2x2ZShkaXNwbGF5c1tpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBObyBkaXNwbGF5cyBhcmUgZm91bmQuXG4gICAgICByZXNvbHZlKG51bGwpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogSGVscGVyIGZvciBlbnRlcmluZyBWUiBtb2RlLlxuICovXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLmVudGVyVlJNb2RlXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhtZC5yZXF1ZXN0UHJlc2VudChbe1xuICAgIHNvdXJjZTogdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LFxuICAgIHByZWRpc3RvcnRlZDogdGhpcy5wcmVkaXN0b3J0ZWRcbiAgfV0pO1xufTtcblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZS5zZXRNb2RlXyA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgdmFyIG9sZE1vZGUgPSB0aGlzLm1vZGU7XG4gIGlmIChtb2RlID09IHRoaXMubW9kZSkge1xuICAgIGNvbnNvbGUud2FybignTm90IGNoYW5naW5nIG1vZGVzLCBhbHJlYWR5IGluICVzJywgbW9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNvbnNvbGUubG9nKCdNb2RlIGNoYW5nZTogJXMgPT4gJXMnLCB0aGlzLm1vZGUsIG1vZGUpO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLmJ1dHRvbi5zZXRNb2RlKG1vZGUsIHRoaXMuaXNWUkNvbXBhdGlibGUpO1xuXG4gIC8vIEVtaXQgYW4gZXZlbnQgaW5kaWNhdGluZyB0aGUgbW9kZSBjaGFuZ2VkLlxuICB0aGlzLmVtaXQoJ21vZGVjaGFuZ2UnLCBtb2RlLCBvbGRNb2RlKTtcbn07XG5cbi8qKlxuICogTWFpbiBidXR0b24gd2FzIGNsaWNrZWQuXG4gKi9cbldlYlZSTWFuYWdlci5wcm90b3R5cGUub25GU0NsaWNrXyA9IGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgTW9kZXMuTk9STUFMOlxuICAgICAgLy8gVE9ETzogUmVtb3ZlIHRoaXMgaGFjayBpZi93aGVuIGlPUyBnZXRzIHJlYWwgZnVsbHNjcmVlbiBtb2RlLlxuICAgICAgLy8gSWYgdGhpcyBpcyBhbiBpZnJhbWUgb24gaU9TLCBicmVhayBvdXQgYW5kIG9wZW4gaW4gbm9fZnVsbHNjcmVlbiBtb2RlLlxuICAgICAgaWYgKFV0aWwuaXNJT1MoKSAmJiBVdGlsLmlzSUZyYW1lKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbkNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5mdWxsc2NyZWVuQ2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgICAgdXJsID0gVXRpbC5hcHBlbmRRdWVyeVBhcmFtZXRlcih1cmwsICdub19mdWxsc2NyZWVuJywgJ3RydWUnKTtcbiAgICAgICAgICB1cmwgPSBVdGlsLmFwcGVuZFF1ZXJ5UGFyYW1ldGVyKHVybCwgJ3N0YXJ0X21vZGUnLCBNb2Rlcy5NQUdJQ19XSU5ET1cpO1xuICAgICAgICAgIHRvcC5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5NQUdJQ19XSU5ET1cpO1xuICAgICAgdGhpcy5yZXF1ZXN0RnVsbHNjcmVlbl8oKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTW9kZXMuTUFHSUNfV0lORE9XOlxuICAgICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuRGlzYWJsZWQpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5leGl0RnVsbHNjcmVlbkNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZXhpdEZ1bGxzY3JlZW5DYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5OT1JNQUwpO1xuICAgICAgdGhpcy5leGl0RnVsbHNjcmVlbl8oKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBWUiBidXR0b24gd2FzIGNsaWNrZWQuXG4gKi9cbldlYlZSTWFuYWdlci5wcm90b3R5cGUub25WUkNsaWNrXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBoYWNrIHdoZW4gaU9TIGhhcyBmdWxsc2NyZWVuIG1vZGUuXG4gIC8vIElmIHRoaXMgaXMgYW4gaWZyYW1lIG9uIGlPUywgYnJlYWsgb3V0IGFuZCBvcGVuIGluIG5vX2Z1bGxzY3JlZW4gbW9kZS5cbiAgaWYgKHRoaXMubW9kZSA9PSBNb2Rlcy5OT1JNQUwgJiYgVXRpbC5pc0lPUygpICYmIFV0aWwuaXNJRnJhbWUoKSkge1xuICAgIGlmICh0aGlzLnZyQ2FsbGJhY2spIHtcbiAgICAgIHRoaXMudnJDYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICB1cmwgPSBVdGlsLmFwcGVuZFF1ZXJ5UGFyYW1ldGVyKHVybCwgJ25vX2Z1bGxzY3JlZW4nLCAndHJ1ZScpO1xuICAgICAgdXJsID0gVXRpbC5hcHBlbmRRdWVyeVBhcmFtZXRlcih1cmwsICdzdGFydF9tb2RlJywgTW9kZXMuVlIpO1xuICAgICAgdG9wLmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHRoaXMuZW50ZXJWUk1vZGVfKCk7XG59O1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLnJlcXVlc3RGdWxsc2NyZWVuXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuYm9keTtcbiAgLy92YXIgY2FudmFzID0gdGhpcy5yZW5kZXJlci5kb21FbGVtZW50O1xuICBpZiAoY2FudmFzLnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgY2FudmFzLnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoY2FudmFzLm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgY2FudmFzLm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoY2FudmFzLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgY2FudmFzLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoY2FudmFzLm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBjYW52YXMubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9XG59O1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLmV4aXRGdWxsc2NyZWVuXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKCk7XG4gIH1cbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgY29uc29sZS5sb2coJ29uVlJEaXNwbGF5UHJlc2VudENoYW5nZV8nLCBlKTtcbiAgaWYgKHRoaXMuaG1kLmlzUHJlc2VudGluZykge1xuICAgIHRoaXMuc2V0TW9kZV8oTW9kZXMuVlIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0TW9kZV8oTW9kZXMuTk9STUFMKTtcbiAgfVxufTtcblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZS5vblZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8gPSBmdW5jdGlvbihlKSB7XG4gIGNvbnNvbGUubG9nKCdvblZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8nLCBlKTtcbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUub25GdWxsc2NyZWVuQ2hhbmdlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gSWYgd2UgbGVhdmUgZnVsbC1zY3JlZW4sIGdvIGJhY2sgdG8gbm9ybWFsIG1vZGUuXG4gIGlmIChkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCA9PT0gbnVsbCB8fFxuICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgPT09IG51bGwpIHtcbiAgICB0aGlzLnNldE1vZGVfKE1vZGVzLk5PUk1BTCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViVlJNYW5hZ2VyO1xuXG59LHtcIi4vYnV0dG9uLW1hbmFnZXIuanNcIjoxLFwiLi9lbWl0dGVyLmpzXCI6MixcIi4vbW9kZXMuanNcIjozLFwiLi91dGlsLmpzXCI6NH1dfSx7fSxbNV0pKDUpXG59KTsiLCIoZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5XZWJWUlBvbHlmaWxsID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGV4aXN0cyBPbmx5IGNoZWNrIGlmIHRoZXJlIGFyZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7QXJyYXl8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50LCBleGlzdHMpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGF2YWlsYWJsZSA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChleGlzdHMpIHJldHVybiAhIWF2YWlsYWJsZTtcbiAgaWYgKCFhdmFpbGFibGUpIHJldHVybiBbXTtcbiAgaWYgKGF2YWlsYWJsZS5mbikgcmV0dXJuIFthdmFpbGFibGUuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXZhaWxhYmxlLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGF2YWlsYWJsZVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcylcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgdGhpcy5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFt0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMsIHRydWUpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIHRoaXMuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgICAgbGlzdGVuZXJzLmZuID09PSBmblxuICAgICAgJiYgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKVxuICAgICAgJiYgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuXG4gICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSlcbiAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIHtcbiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYXBwbHkgYW55bW9yZS5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuXG59LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxufSx7fV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xudmFyIFdha2VMb2NrID0gX2RlcmVxXygnLi93YWtlbG9jay5qcycpO1xuXG4vLyBTdGFydCBhdCBhIGhpZ2hlciBudW1iZXIgdG8gcmVkdWNlIGNoYW5jZSBvZiBjb25mbGljdC5cbnZhciBuZXh0RGlzcGxheUlkID0gMTAwMDtcbnZhciBoYXNTaG93RGVwcmVjYXRpb25XYXJuaW5nID0gZmFsc2U7XG5cbnZhciBkZWZhdWx0TGVmdEJvdW5kcyA9IFswLCAwLCAwLjUsIDFdO1xudmFyIGRlZmF1bHRSaWdodEJvdW5kcyA9IFswLjUsIDAsIDAuNSwgMV07XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBWUiBmcmFtZSBkYXRhLlxuICovXG5cbmZ1bmN0aW9uIFZSRnJhbWVEYXRhKCkge1xuICB0aGlzLmxlZnRQcm9qZWN0aW9uTWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG4gIHRoaXMubGVmdFZpZXdNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgdGhpcy5yaWdodFByb2plY3Rpb25NYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgdGhpcy5yaWdodFZpZXdNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgdGhpcy5wb3NlID0gbnVsbDtcbn07XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBWUiBkaXNwbGF5cy5cbiAqL1xuZnVuY3Rpb24gVlJEaXNwbGF5KCkge1xuICB0aGlzLmlzUG9seWZpbGxlZCA9IHRydWU7XG4gIHRoaXMuZGlzcGxheUlkID0gbmV4dERpc3BsYXlJZCsrO1xuICB0aGlzLmRpc3BsYXlOYW1lID0gJ3dlYnZyLXBvbHlmaWxsIGRpc3BsYXlOYW1lJztcblxuICB0aGlzLmRlcHRoTmVhciA9IDAuMDE7XG4gIHRoaXMuZGVwdGhGYXIgPSAxMDAwMC4wO1xuXG4gIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuICB0aGlzLmNhcGFiaWxpdGllcyA9IHtcbiAgICBoYXNQb3NpdGlvbjogZmFsc2UsXG4gICAgaGFzT3JpZW50YXRpb246IGZhbHNlLFxuICAgIGhhc0V4dGVybmFsRGlzcGxheTogZmFsc2UsXG4gICAgY2FuUHJlc2VudDogZmFsc2UsXG4gICAgbWF4TGF5ZXJzOiAxXG4gIH07XG4gIHRoaXMuc3RhZ2VQYXJhbWV0ZXJzID0gbnVsbDtcblxuICAvLyBcIlByaXZhdGVcIiBtZW1iZXJzLlxuICB0aGlzLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlO1xuICB0aGlzLmxheWVyXyA9IG51bGw7XG5cbiAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPSBudWxsO1xuICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsO1xuXG4gIHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfID0gbnVsbDtcbiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IG51bGw7XG5cbiAgdGhpcy53YWtlbG9ja18gPSBuZXcgV2FrZUxvY2soKTtcbn1cblxuVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRGcmFtZURhdGEgPSBmdW5jdGlvbihmcmFtZURhdGEpIHtcbiAgLy8gVE9ETzogVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgcmV0YWluIGl0J3MgdmFsdWUgZm9yIHRoZSBkdXJhdGlvbiBvZiBhIGZyYW1lXG4gIC8vIGJ1dCBJIGRvdWJ0IHRoYXQncyBwcmFjdGljYWwgdG8gZG8gaW4gamF2YXNjcmlwdC5cbiAgcmV0dXJuIFV0aWwuZnJhbWVEYXRhRnJvbVBvc2UoZnJhbWVEYXRhLCB0aGlzLmdldFBvc2UoKSwgdGhpcyk7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmdldFBvc2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ETzogVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgcmV0YWluIGl0J3MgdmFsdWUgZm9yIHRoZSBkdXJhdGlvbiBvZiBhIGZyYW1lXG4gIC8vIGJ1dCBJIGRvdWJ0IHRoYXQncyBwcmFjdGljYWwgdG8gZG8gaW4gamF2YXNjcmlwdC5cbiAgcmV0dXJuIHRoaXMuZ2V0SW1tZWRpYXRlUG9zZSgpO1xufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLndyYXBGb3JGdWxsc2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAvLyBEb24ndCB3cmFwIGluIGlPUy5cbiAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIGlmICghdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8pIHtcbiAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gW1xuICAgICAgJ2hlaWdodDogJyArIE1hdGgubWluKHNjcmVlbi5oZWlnaHQsIHNjcmVlbi53aWR0aCkgKyAncHggIWltcG9ydGFudCcsXG4gICAgICAndG9wOiAwICFpbXBvcnRhbnQnLFxuICAgICAgJ2xlZnQ6IDAgIWltcG9ydGFudCcsXG4gICAgICAncmlnaHQ6IDAgIWltcG9ydGFudCcsXG4gICAgICAnYm9yZGVyOiAwJyxcbiAgICAgICdtYXJnaW46IDAnLFxuICAgICAgJ3BhZGRpbmc6IDAnLFxuICAgICAgJ3otaW5kZXg6IDk5OTk5OSAhaW1wb3J0YW50JyxcbiAgICAgICdwb3NpdGlvbjogZml4ZWQnLFxuICAgIF07XG4gICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uc2V0QXR0cmlidXRlKCdzdHlsZScsIGNzc1Byb3BlcnRpZXMuam9pbignOyAnKSArICc7Jyk7XG4gICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uY2xhc3NMaXN0LmFkZCgnd2VidnItcG9seWZpbGwtZnVsbHNjcmVlbi13cmFwcGVyJyk7XG4gIH1cblxuICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPT0gZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXztcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbnkgcHJldmlvdXNseSBhcHBsaWVkIHdyYXBwZXJzXG4gIHRoaXMucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIoKTtcblxuICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IGVsZW1lbnQ7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5wYXJlbnRFbGVtZW50O1xuICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7XG4gIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7XG4gIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLmluc2VydEJlZm9yZSh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XywgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uZmlyc3RDaGlsZCk7XG4gIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBmdW5jdGlvbiBhcHBseUZ1bGxzY3JlZW5FbGVtZW50U3R5bGUoKSB7XG4gICAgaWYgKCFzZWxmLmZ1bGxzY3JlZW5FbGVtZW50Xykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gW1xuICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsXG4gICAgICAndG9wOiAwJyxcbiAgICAgICdsZWZ0OiAwJyxcbiAgICAgICd3aWR0aDogJyArIE1hdGgubWF4KHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodCkgKyAncHgnLFxuICAgICAgJ2hlaWdodDogJyArIE1hdGgubWluKHNjcmVlbi5oZWlnaHQsIHNjcmVlbi53aWR0aCkgKyAncHgnLFxuICAgICAgJ2JvcmRlcjogMCcsXG4gICAgICAnbWFyZ2luOiAwJyxcbiAgICAgICdwYWRkaW5nOiAwJyxcbiAgICBdO1xuICAgIHNlbGYuZnVsbHNjcmVlbkVsZW1lbnRfLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBjc3NQcm9wZXJ0aWVzLmpvaW4oJzsgJykgKyAnOycpO1xuICB9XG5cbiAgYXBwbHlGdWxsc2NyZWVuRWxlbWVudFN0eWxlKCk7XG5cbiAgcmV0dXJuIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfO1xufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XztcbiAgaWYgKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8pIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgfVxuICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5wYXJlbnRFbGVtZW50O1xuICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7XG4gIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLnJlcXVlc3RQcmVzZW50ID0gZnVuY3Rpb24obGF5ZXJzKSB7XG4gIHZhciB3YXNQcmVzZW50aW5nID0gdGhpcy5pc1ByZXNlbnRpbmc7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIShsYXllcnMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICBpZiAoIWhhc1Nob3dEZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVzaW5nIGEgZGVwcmVjYXRlZCBmb3JtIG9mIHJlcXVlc3RQcmVzZW50LiBTaG91bGQgcGFzcyBpbiBhbiBhcnJheSBvZiBWUkxheWVycy5cIik7XG4gICAgICBoYXNTaG93RGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgbGF5ZXJzID0gW2xheWVyc107XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCFzZWxmLmNhcGFiaWxpdGllcy5jYW5QcmVzZW50KSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdWUkRpc3BsYXkgaXMgbm90IGNhcGFibGUgb2YgcHJlc2VudGluZy4nKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxheWVycy5sZW5ndGggPT0gMCB8fCBsYXllcnMubGVuZ3RoID4gc2VsZi5jYXBhYmlsaXRpZXMubWF4TGF5ZXJzKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBsYXllcnMuJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpbmNvbWluZ0xheWVyID0gbGF5ZXJzWzBdO1xuICAgIGlmICghaW5jb21pbmdMYXllci5zb3VyY2UpIHtcbiAgICAgIC8qXG4gICAgICB0b2RvOiBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGJlaGF2aW9yIGlmIHRoZSBzb3VyY2UgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvd2VidnIvaXNzdWVzLzU4XG4gICAgICAqL1xuICAgICAgcmVzb2x2ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsZWZ0Qm91bmRzID0gaW5jb21pbmdMYXllci5sZWZ0Qm91bmRzIHx8IGRlZmF1bHRMZWZ0Qm91bmRzO1xuICAgIHZhciByaWdodEJvdW5kcyA9IGluY29taW5nTGF5ZXIucmlnaHRCb3VuZHMgfHwgZGVmYXVsdFJpZ2h0Qm91bmRzO1xuICAgIGlmICh3YXNQcmVzZW50aW5nKSB7XG4gICAgICAvLyBBbHJlYWR5IHByZXNlbnRpbmcsIGp1c3QgY2hhbmdpbmcgY29uZmlndXJhdGlvblxuICAgICAgdmFyIGxheWVyID0gc2VsZi5sYXllcl87XG4gICAgICBpZiAobGF5ZXIuc291cmNlICE9PSBpbmNvbWluZ0xheWVyLnNvdXJjZSkge1xuICAgICAgICBsYXllci5zb3VyY2UgPSBpbmNvbWluZ0xheWVyLnNvdXJjZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgbGF5ZXIubGVmdEJvdW5kc1tpXSA9IGxlZnRCb3VuZHNbaV07XG4gICAgICAgIGxheWVyLnJpZ2h0Qm91bmRzW2ldID0gcmlnaHRCb3VuZHNbaV07XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXYXMgbm90IGFscmVhZHkgcHJlc2VudGluZy5cbiAgICBzZWxmLmxheWVyXyA9IHtcbiAgICAgIHByZWRpc3RvcnRlZDogaW5jb21pbmdMYXllci5wcmVkaXN0b3J0ZWQsXG4gICAgICBzb3VyY2U6IGluY29taW5nTGF5ZXIuc291cmNlLFxuICAgICAgbGVmdEJvdW5kczogbGVmdEJvdW5kcy5zbGljZSgwKSxcbiAgICAgIHJpZ2h0Qm91bmRzOiByaWdodEJvdW5kcy5zbGljZSgwKVxuICAgIH07XG5cbiAgICBzZWxmLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlO1xuICAgIGlmIChzZWxmLmxheWVyXyAmJiBzZWxmLmxheWVyXy5zb3VyY2UpIHtcbiAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9IHNlbGYud3JhcEZvckZ1bGxzY3JlZW4oc2VsZi5sYXllcl8uc291cmNlKTtcblxuICAgICAgZnVuY3Rpb24gb25GdWxsc2NyZWVuQ2hhbmdlKCkge1xuICAgICAgICB2YXIgYWN0dWFsRnVsbHNjcmVlbkVsZW1lbnQgPSBVdGlsLmdldEZ1bGxzY3JlZW5FbGVtZW50KCk7XG5cbiAgICAgICAgc2VsZi5pc1ByZXNlbnRpbmcgPSAoZnVsbHNjcmVlbkVsZW1lbnQgPT09IGFjdHVhbEZ1bGxzY3JlZW5FbGVtZW50KTtcbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzZW50aW5nKSB7XG4gICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24ubG9jaykge1xuICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLmxvY2soJ2xhbmRzY2FwZS1wcmltYXJ5JykuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdzY3JlZW4ub3JpZW50YXRpb24ubG9jaygpIGZhaWxlZCBkdWUgdG8nLCBlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5iZWdpblByZXNlbnRfKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzY3JlZW4ub3JpZW50YXRpb24gJiYgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaykge1xuICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5XcmFwcGVyKCk7XG4gICAgICAgICAgc2VsZi53YWtlbG9ja18ucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYuZW5kUHJlc2VudF8oKTtcbiAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uRnVsbHNjcmVlbkVycm9yKCkge1xuICAgICAgICBpZiAoIXNlbGYud2FpdGluZ0ZvclByZXNlbnRfKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlcigpO1xuICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7XG5cbiAgICAgICAgc2VsZi53YWtlbG9ja18ucmVsZWFzZSgpO1xuICAgICAgICBzZWxmLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlO1xuICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBwcmVzZW50LicpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5hZGRGdWxsc2NyZWVuTGlzdGVuZXJzXyhmdWxsc2NyZWVuRWxlbWVudCxcbiAgICAgICAgICBvbkZ1bGxzY3JlZW5DaGFuZ2UsIG9uRnVsbHNjcmVlbkVycm9yKTtcblxuICAgICAgaWYgKFV0aWwucmVxdWVzdEZ1bGxzY3JlZW4oZnVsbHNjcmVlbkVsZW1lbnQpKSB7XG4gICAgICAgIHNlbGYud2FrZWxvY2tfLnJlcXVlc3QoKTtcbiAgICAgICAgc2VsZi53YWl0aW5nRm9yUHJlc2VudF8gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICAgICAgLy8gKnNpZ2gqIEp1c3QgZmFrZSBpdC5cbiAgICAgICAgc2VsZi53YWtlbG9ja18ucmVxdWVzdCgpO1xuICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuYmVnaW5QcmVzZW50XygpO1xuICAgICAgICBzZWxmLmZpcmVWUkRpc3BsYXlQcmVzZW50Q2hhbmdlXygpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzZWxmLndhaXRpbmdGb3JQcmVzZW50XyAmJiAhVXRpbC5pc0lPUygpKSB7XG4gICAgICBVdGlsLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gcHJlc2VudC4nKSk7XG4gICAgfVxuICB9KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZXhpdFByZXNlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdhc1ByZXNlbnRpbmcgPSB0aGlzLmlzUHJlc2VudGluZztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuICB0aGlzLmxheWVyXyA9IG51bGw7XG4gIHRoaXMud2FrZWxvY2tfLnJlbGVhc2UoKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHdhc1ByZXNlbnRpbmcpIHtcbiAgICAgIGlmICghVXRpbC5leGl0RnVsbHNjcmVlbigpICYmIFV0aWwuaXNJT1MoKSkge1xuICAgICAgICBzZWxmLmVuZFByZXNlbnRfKCk7XG4gICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignV2FzIG5vdCBwcmVzZW50aW5nIHRvIFZSRGlzcGxheS4nKSk7XG4gICAgfVxuICB9KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZ2V0TGF5ZXJzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmxheWVyXykge1xuICAgIHJldHVybiBbdGhpcy5sYXllcl9dO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfID0gZnVuY3Rpb24oKSB7XG4gIC8vIEltcG9ydGFudDogdW5mb3J0dW5hdGVseSB3ZSBjYW5ub3QgaGF2ZSBmdWxsIHNwZWMgY29tcGxpYW5jZSBoZXJlLlxuICAvLyBDdXN0b21FdmVudCBjdXN0b20gZmllbGRzIGFsbCBnbyB1bmRlciBlLmRldGFpbCAoc28gdGhlIFZSRGlzcGxheSBlbmRzIHVwXG4gIC8vIGJlaW5nIGUuZGV0YWlsLmRpc3BsYXksIGluc3RlYWQgb2YgZS5kaXNwbGF5IGFzIHBlciBXZWJWUiBzcGVjKS5cbiAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywge2RldGFpbDoge2Rpc3BsYXk6IHRoaXN9fSk7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuYWRkRnVsbHNjcmVlbkxpc3RlbmVyc18gPSBmdW5jdGlvbihlbGVtZW50LCBjaGFuZ2VIYW5kbGVyLCBlcnJvckhhbmRsZXIpIHtcbiAgdGhpcy5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXygpO1xuXG4gIHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XyA9IGVsZW1lbnQ7XG4gIHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfID0gY2hhbmdlSGFuZGxlcjtcbiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IGVycm9ySGFuZGxlcjtcblxuICBpZiAoY2hhbmdlSGFuZGxlcikge1xuICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbmFibGVkKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVycm9ySGFuZGxlcikge1xuICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIH1cbiAgfVxufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XylcbiAgICByZXR1cm47XG5cbiAgdmFyIGVsZW1lbnQgPSB0aGlzLmZ1bGxzY3JlZW5FdmVudFRhcmdldF87XG5cbiAgaWYgKHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfKSB7XG4gICAgdmFyIGNoYW5nZUhhbmRsZXIgPSB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXztcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gIH1cblxuICBpZiAodGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXykge1xuICAgIHZhciBlcnJvckhhbmRsZXIgPSB0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7XG4gIH1cblxuICB0aGlzLmZ1bGxzY3JlZW5FdmVudFRhcmdldF8gPSBudWxsO1xuICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl8gPSBudWxsO1xufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5iZWdpblByZXNlbnRfID0gZnVuY3Rpb24oKSB7XG4gIC8vIE92ZXJyaWRlIHRvIGFkZCBjdXN0b20gYmVoYXZpb3Igd2hlbiBwcmVzZW50YXRpb24gYmVnaW5zLlxufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5lbmRQcmVzZW50XyA9IGZ1bmN0aW9uKCkge1xuICAvLyBPdmVycmlkZSB0byBhZGQgY3VzdG9tIGJlaGF2aW9yIHdoZW4gcHJlc2VudGF0aW9uIGVuZHMuXG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24ocG9zZSkge1xuICAvLyBPdmVycmlkZSB0byBhZGQgY3VzdG9tIGJlaGF2aW9yIGZvciBmcmFtZSBzdWJtaXNzaW9uLlxufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRFeWVQYXJhbWV0ZXJzID0gZnVuY3Rpb24od2hpY2hFeWUpIHtcbiAgLy8gT3ZlcnJpZGUgdG8gcmV0dXJuIGFjY3VyYXRlIGV5ZSBwYXJhbWV0ZXJzIGlmIGNhblByZXNlbnQgaXMgdHJ1ZS5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKlxuICogRGVwcmVjYXRlZCBjbGFzc2VzXG4gKi9cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIFZSIGRldmljZXMuIChEZXByZWNhdGVkKVxuICovXG5mdW5jdGlvbiBWUkRldmljZSgpIHtcbiAgdGhpcy5pc1BvbHlmaWxsZWQgPSB0cnVlO1xuICB0aGlzLmhhcmR3YXJlVW5pdElkID0gJ3dlYnZyLXBvbHlmaWxsIGhhcmR3YXJlVW5pdElkJztcbiAgdGhpcy5kZXZpY2VJZCA9ICd3ZWJ2ci1wb2x5ZmlsbCBkZXZpY2VJZCc7XG4gIHRoaXMuZGV2aWNlTmFtZSA9ICd3ZWJ2ci1wb2x5ZmlsbCBkZXZpY2VOYW1lJztcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIFZSIEhNRCBkZXZpY2VzLiAoRGVwcmVjYXRlZClcbiAqL1xuZnVuY3Rpb24gSE1EVlJEZXZpY2UoKSB7XG59XG5ITURWUkRldmljZS5wcm90b3R5cGUgPSBuZXcgVlJEZXZpY2UoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIFZSIHBvc2l0aW9uIHNlbnNvciBkZXZpY2VzLiAoRGVwcmVjYXRlZClcbiAqL1xuZnVuY3Rpb24gUG9zaXRpb25TZW5zb3JWUkRldmljZSgpIHtcbn1cblBvc2l0aW9uU2Vuc29yVlJEZXZpY2UucHJvdG90eXBlID0gbmV3IFZSRGV2aWNlKCk7XG5cbm1vZHVsZS5leHBvcnRzLlZSRnJhbWVEYXRhID0gVlJGcmFtZURhdGE7XG5tb2R1bGUuZXhwb3J0cy5WUkRpc3BsYXkgPSBWUkRpc3BsYXk7XG5tb2R1bGUuZXhwb3J0cy5WUkRldmljZSA9IFZSRGV2aWNlO1xubW9kdWxlLmV4cG9ydHMuSE1EVlJEZXZpY2UgPSBITURWUkRldmljZTtcbm1vZHVsZS5leHBvcnRzLlBvc2l0aW9uU2Vuc29yVlJEZXZpY2UgPSBQb3NpdGlvblNlbnNvclZSRGV2aWNlO1xuXG59LHtcIi4vdXRpbC5qc1wiOjIyLFwiLi93YWtlbG9jay5qc1wiOjI0fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgQ2FyZGJvYXJkVUkgPSBfZGVyZXFfKCcuL2NhcmRib2FyZC11aS5qcycpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcbnZhciBXR0xVUHJlc2VydmVHTFN0YXRlID0gX2RlcmVxXygnLi9kZXBzL3dnbHUtcHJlc2VydmUtc3RhdGUuanMnKTtcblxudmFyIGRpc3RvcnRpb25WUyA9IFtcbiAgJ2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uOycsXG4gICdhdHRyaWJ1dGUgdmVjMyB0ZXhDb29yZDsnLFxuXG4gICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkOycsXG5cbiAgJ3VuaWZvcm0gdmVjNCB2aWV3cG9ydE9mZnNldFNjYWxlWzJdOycsXG5cbiAgJ3ZvaWQgbWFpbigpIHsnLFxuICAnICB2ZWM0IHZpZXdwb3J0ID0gdmlld3BvcnRPZmZzZXRTY2FsZVtpbnQodGV4Q29vcmQueildOycsXG4gICcgIHZUZXhDb29yZCA9ICh0ZXhDb29yZC54eSAqIHZpZXdwb3J0Lnp3KSArIHZpZXdwb3J0Lnh5OycsXG4gICcgIGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCwgMS4wICk7JyxcbiAgJ30nLFxuXS5qb2luKCdcXG4nKTtcblxudmFyIGRpc3RvcnRpb25GUyA9IFtcbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBkaWZmdXNlOycsXG5cbiAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7JyxcblxuICAndm9pZCBtYWluKCkgeycsXG4gICcgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChkaWZmdXNlLCB2VGV4Q29vcmQpOycsXG4gICd9Jyxcbl0uam9pbignXFxuJyk7XG5cbi8qKlxuICogQSBtZXNoLWJhc2VkIGRpc3RvcnRlci5cbiAqL1xuZnVuY3Rpb24gQ2FyZGJvYXJkRGlzdG9ydGVyKGdsKSB7XG4gIHRoaXMuZ2wgPSBnbDtcbiAgdGhpcy5jdHhBdHRyaWJzID0gZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuICB0aGlzLm1lc2hXaWR0aCA9IDIwO1xuICB0aGlzLm1lc2hIZWlnaHQgPSAyMDtcblxuICB0aGlzLmJ1ZmZlclNjYWxlID0gV2ViVlJDb25maWcuQlVGRkVSX1NDQUxFO1xuXG4gIHRoaXMuYnVmZmVyV2lkdGggPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGg7XG4gIHRoaXMuYnVmZmVySGVpZ2h0ID0gZ2wuZHJhd2luZ0J1ZmZlckhlaWdodDtcblxuICAvLyBQYXRjaGluZyBzdXBwb3J0XG4gIHRoaXMucmVhbEJpbmRGcmFtZWJ1ZmZlciA9IGdsLmJpbmRGcmFtZWJ1ZmZlcjtcbiAgdGhpcy5yZWFsRW5hYmxlID0gZ2wuZW5hYmxlO1xuICB0aGlzLnJlYWxEaXNhYmxlID0gZ2wuZGlzYWJsZTtcbiAgdGhpcy5yZWFsQ29sb3JNYXNrID0gZ2wuY29sb3JNYXNrO1xuICB0aGlzLnJlYWxDbGVhckNvbG9yID0gZ2wuY2xlYXJDb2xvcjtcbiAgdGhpcy5yZWFsVmlld3BvcnQgPSBnbC52aWV3cG9ydDtcblxuICBpZiAoIVV0aWwuaXNJT1MoKSkge1xuICAgIHRoaXMucmVhbENhbnZhc1dpZHRoID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbC5jYW52YXMuX19wcm90b19fLCAnd2lkdGgnKTtcbiAgICB0aGlzLnJlYWxDYW52YXNIZWlnaHQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsLmNhbnZhcy5fX3Byb3RvX18sICdoZWlnaHQnKTtcbiAgfVxuXG4gIHRoaXMuaXNQYXRjaGVkID0gZmFsc2U7XG5cbiAgLy8gU3RhdGUgdHJhY2tpbmdcbiAgdGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IG51bGw7XG4gIHRoaXMuY3VsbEZhY2UgPSBmYWxzZTtcbiAgdGhpcy5kZXB0aFRlc3QgPSBmYWxzZTtcbiAgdGhpcy5ibGVuZCA9IGZhbHNlO1xuICB0aGlzLnNjaXNzb3JUZXN0ID0gZmFsc2U7XG4gIHRoaXMuc3RlbmNpbFRlc3QgPSBmYWxzZTtcbiAgdGhpcy52aWV3cG9ydCA9IFswLCAwLCAwLCAwXTtcbiAgdGhpcy5jb2xvck1hc2sgPSBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV07XG4gIHRoaXMuY2xlYXJDb2xvciA9IFswLCAwLCAwLCAwXTtcblxuICB0aGlzLmF0dHJpYnMgPSB7XG4gICAgcG9zaXRpb246IDAsXG4gICAgdGV4Q29vcmQ6IDFcbiAgfTtcbiAgdGhpcy5wcm9ncmFtID0gVXRpbC5saW5rUHJvZ3JhbShnbCwgZGlzdG9ydGlvblZTLCBkaXN0b3J0aW9uRlMsIHRoaXMuYXR0cmlicyk7XG4gIHRoaXMudW5pZm9ybXMgPSBVdGlsLmdldFByb2dyYW1Vbmlmb3JtcyhnbCwgdGhpcy5wcm9ncmFtKTtcblxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGUgPSBuZXcgRmxvYXQzMkFycmF5KDgpO1xuICB0aGlzLnNldFRleHR1cmVCb3VuZHMoKTtcblxuICB0aGlzLnZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmluZGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gIHRoaXMuaW5kZXhDb3VudCA9IDA7XG5cbiAgdGhpcy5yZW5kZXJUYXJnZXQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gIHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG4gIHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyID0gbnVsbDtcbiAgdGhpcy5kZXB0aEJ1ZmZlciA9IG51bGw7XG4gIHRoaXMuc3RlbmNpbEJ1ZmZlciA9IG51bGw7XG5cbiAgaWYgKHRoaXMuY3R4QXR0cmlicy5kZXB0aCAmJiB0aGlzLmN0eEF0dHJpYnMuc3RlbmNpbCkge1xuICAgIHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5jdHhBdHRyaWJzLmRlcHRoKSB7XG4gICAgdGhpcy5kZXB0aEJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICB9IGVsc2UgaWYgKHRoaXMuY3R4QXR0cmlicy5zdGVuY2lsKSB7XG4gICAgdGhpcy5zdGVuY2lsQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gIH1cblxuICB0aGlzLnBhdGNoKCk7XG5cbiAgdGhpcy5vblJlc2l6ZSgpO1xuXG4gIGlmICghV2ViVlJDb25maWcuQ0FSREJPQVJEX1VJX0RJU0FCTEVEKSB7XG4gICAgdGhpcy5jYXJkYm9hcmRVSSA9IG5ldyBDYXJkYm9hcmRVSShnbCk7XG4gIH1cbn07XG5cbi8qKlxuICogVGVhcnMgZG93biBhbGwgdGhlIHJlc291cmNlcyBjcmVhdGVkIGJ5IHRoZSBkaXN0b3J0ZXIgYW5kIHJlbW92ZXMgYW55XG4gKiBwYXRjaGVzLlxuICovXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcblxuICB0aGlzLnVucGF0Y2goKTtcblxuICBnbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLnZlcnRleEJ1ZmZlcik7XG4gIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLmluZGV4QnVmZmVyKTtcbiAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnJlbmRlclRhcmdldCk7XG4gIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRoaXMuZnJhbWVidWZmZXIpO1xuICBpZiAodGhpcy5kZXB0aFN0ZW5jaWxCdWZmZXIpIHtcbiAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5kZXB0aFN0ZW5jaWxCdWZmZXIpO1xuICB9XG4gIGlmICh0aGlzLmRlcHRoQnVmZmVyKSB7XG4gICAgZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKHRoaXMuZGVwdGhCdWZmZXIpO1xuICB9XG4gIGlmICh0aGlzLnN0ZW5jaWxCdWZmZXIpIHtcbiAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5zdGVuY2lsQnVmZmVyKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNhcmRib2FyZFVJKSB7XG4gICAgdGhpcy5jYXJkYm9hcmRVSS5kZXN0cm95KCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXNpemVzIHRoZSBiYWNrYnVmZmVyIHRvIG1hdGNoIHRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodC5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGdsU3RhdGUgPSBbXG4gICAgZ2wuUkVOREVSQlVGRkVSX0JJTkRJTkcsXG4gICAgZ2wuVEVYVFVSRV9CSU5ESU5HXzJELCBnbC5URVhUVVJFMFxuICBdO1xuXG4gIFdHTFVQcmVzZXJ2ZUdMU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uKGdsKSB7XG4gICAgLy8gQmluZCByZWFsIGJhY2tidWZmZXIgYW5kIGNsZWFyIGl0IG9uY2UuIFdlIGRvbid0IG5lZWQgdG8gY2xlYXIgaXQgYWdhaW5cbiAgICAvLyBhZnRlciB0aGF0IGJlY2F1c2Ugd2UncmUgb3ZlcndyaXRpbmcgdGhlIHNhbWUgYXJlYSBldmVyeSBmcmFtZS5cbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXG4gICAgLy8gUHV0IHRoaW5ncyBpbiBhIGdvb2Qgc3RhdGVcbiAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgeyBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7IH1cbiAgICBzZWxmLnJlYWxDb2xvck1hc2suY2FsbChnbCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgc2VsZi5yZWFsVmlld3BvcnQuY2FsbChnbCwgMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcbiAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmNhbGwoZ2wsIDAsIDAsIDAsIDEpO1xuXG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cbiAgICAvLyBOb3cgYmluZCBhbmQgcmVzaXplIHRoZSBmYWtlIGJhY2tidWZmZXJcbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIHNlbGYuZnJhbWVidWZmZXIpO1xuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgc2VsZi5yZW5kZXJUYXJnZXQpO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgc2VsZi5jdHhBdHRyaWJzLmFscGhhID8gZ2wuUkdCQSA6IGdsLlJHQixcbiAgICAgICAgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQsIDAsXG4gICAgICAgIHNlbGYuY3R4QXR0cmlicy5hbHBoYSA/IGdsLlJHQkEgOiBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgc2VsZi5yZW5kZXJUYXJnZXQsIDApO1xuXG4gICAgaWYgKHNlbGYuY3R4QXR0cmlicy5kZXB0aCAmJiBzZWxmLmN0eEF0dHJpYnMuc3RlbmNpbCkge1xuICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhTdGVuY2lsQnVmZmVyKTtcbiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMLFxuICAgICAgICAgIHNlbGYuYnVmZmVyV2lkdGgsIHNlbGYuYnVmZmVySGVpZ2h0KTtcbiAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoU3RlbmNpbEJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmIChzZWxmLmN0eEF0dHJpYnMuZGVwdGgpIHtcbiAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoQnVmZmVyKTtcbiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNixcbiAgICAgICAgICBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCk7XG4gICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCxcbiAgICAgICAgICBnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhCdWZmZXIpO1xuICAgIH0gZWxzZSBpZiAoc2VsZi5jdHhBdHRyaWJzLnN0ZW5jaWwpIHtcbiAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBzZWxmLnN0ZW5jaWxCdWZmZXIpO1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLlNURU5DSUxfSU5ERVg4LFxuICAgICAgICAgIHNlbGYuYnVmZmVyV2lkdGgsIHNlbGYuYnVmZmVySGVpZ2h0KTtcbiAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5TVEVOQ0lMX0FUVEFDSE1FTlQsXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLnN0ZW5jaWxCdWZmZXIpO1xuICAgIH1cblxuICAgIGlmICghZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUikgPT09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGcmFtZWJ1ZmZlciBpbmNvbXBsZXRlIScpO1xuICAgIH1cblxuICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKGdsLCBnbC5GUkFNRUJVRkZFUiwgc2VsZi5sYXN0Qm91bmRGcmFtZWJ1ZmZlcik7XG5cbiAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgeyBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuU0NJU1NPUl9URVNUKTsgfVxuXG4gICAgc2VsZi5yZWFsQ29sb3JNYXNrLmFwcGx5KGdsLCBzZWxmLmNvbG9yTWFzayk7XG4gICAgc2VsZi5yZWFsVmlld3BvcnQuYXBwbHkoZ2wsIHNlbGYudmlld3BvcnQpO1xuICAgIHNlbGYucmVhbENsZWFyQ29sb3IuYXBwbHkoZ2wsIHNlbGYuY2xlYXJDb2xvcik7XG4gIH0pO1xuXG4gIGlmICh0aGlzLmNhcmRib2FyZFVJKSB7XG4gICAgdGhpcy5jYXJkYm9hcmRVSS5vblJlc2l6ZSgpO1xuICB9XG59O1xuXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmlzUGF0Y2hlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzO1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gIGlmICghVXRpbC5pc0lPUygpKSB7XG4gICAgY2FudmFzLndpZHRoID0gVXRpbC5nZXRTY3JlZW5XaWR0aCgpICogdGhpcy5idWZmZXJTY2FsZTtcbiAgICBjYW52YXMuaGVpZ2h0ID0gVXRpbC5nZXRTY3JlZW5IZWlnaHQoKSAqIHRoaXMuYnVmZmVyU2NhbGU7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnd2lkdGgnLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVyV2lkdGg7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzZWxmLmJ1ZmZlcldpZHRoID0gdmFsdWU7XG4gICAgICAgIHNlbGYucmVhbENhbnZhc1dpZHRoLnNldC5jYWxsKGNhbnZhcywgdmFsdWUpO1xuICAgICAgICBzZWxmLm9uUmVzaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnaGVpZ2h0Jywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlckhlaWdodDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNlbGYuYnVmZmVySGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgIHNlbGYucmVhbENhbnZhc0hlaWdodC5zZXQuY2FsbChjYW52YXMsIHZhbHVlKTtcbiAgICAgICAgc2VsZi5vblJlc2l6ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IGdsLmdldFBhcmFtZXRlcihnbC5GUkFNRUJVRkZFUl9CSU5ESU5HKTtcblxuICBpZiAodGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9PSBudWxsKSB7XG4gICAgdGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IHRoaXMuZnJhbWVidWZmZXI7XG4gICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuICB9XG5cbiAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIgPSBmdW5jdGlvbih0YXJnZXQsIGZyYW1lYnVmZmVyKSB7XG4gICAgc2VsZi5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyID8gZnJhbWVidWZmZXIgOiBzZWxmLmZyYW1lYnVmZmVyO1xuICAgIC8vIFNpbGVudGx5IG1ha2UgY2FsbHMgdG8gYmluZCB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciBiaW5kIG91cnMgaW5zdGVhZC5cbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgdGFyZ2V0LCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTtcbiAgfTtcblxuICB0aGlzLmN1bGxGYWNlID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkNVTExfRkFDRSk7XG4gIHRoaXMuZGVwdGhUZXN0ID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkRFUFRIX1RFU1QpO1xuICB0aGlzLmJsZW5kID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkJMRU5EKTtcbiAgdGhpcy5zY2lzc29yVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5TQ0lTU09SX1RFU1QpO1xuICB0aGlzLnN0ZW5jaWxUZXN0ID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlNURU5DSUxfVEVTVCk7XG5cbiAgZ2wuZW5hYmxlID0gZnVuY3Rpb24ocG5hbWUpIHtcbiAgICBzd2l0Y2ggKHBuYW1lKSB7XG4gICAgICBjYXNlIGdsLkNVTExfRkFDRTogc2VsZi5jdWxsRmFjZSA9IHRydWU7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5ERVBUSF9URVNUOiBzZWxmLmRlcHRoVGVzdCA9IHRydWU7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5CTEVORDogc2VsZi5ibGVuZCA9IHRydWU7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5TQ0lTU09SX1RFU1Q6IHNlbGYuc2Npc3NvclRlc3QgPSB0cnVlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuU1RFTkNJTF9URVNUOiBzZWxmLnN0ZW5jaWxUZXN0ID0gdHJ1ZTsgYnJlYWs7XG4gICAgfVxuICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBwbmFtZSk7XG4gIH07XG5cbiAgZ2wuZGlzYWJsZSA9IGZ1bmN0aW9uKHBuYW1lKSB7XG4gICAgc3dpdGNoIChwbmFtZSkge1xuICAgICAgY2FzZSBnbC5DVUxMX0ZBQ0U6IHNlbGYuY3VsbEZhY2UgPSBmYWxzZTsgYnJlYWs7XG4gICAgICBjYXNlIGdsLkRFUFRIX1RFU1Q6IHNlbGYuZGVwdGhUZXN0ID0gZmFsc2U7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5CTEVORDogc2VsZi5ibGVuZCA9IGZhbHNlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOiBzZWxmLnNjaXNzb3JUZXN0ID0gZmFsc2U7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5TVEVOQ0lMX1RFU1Q6IHNlbGYuc3RlbmNpbFRlc3QgPSBmYWxzZTsgYnJlYWs7XG4gICAgfVxuICAgIHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgcG5hbWUpO1xuICB9O1xuXG4gIHRoaXMuY29sb3JNYXNrID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkNPTE9SX1dSSVRFTUFTSyk7XG4gIGdsLmNvbG9yTWFzayA9IGZ1bmN0aW9uKHIsIGcsIGIsIGEpIHtcbiAgICBzZWxmLmNvbG9yTWFza1swXSA9IHI7XG4gICAgc2VsZi5jb2xvck1hc2tbMV0gPSBnO1xuICAgIHNlbGYuY29sb3JNYXNrWzJdID0gYjtcbiAgICBzZWxmLmNvbG9yTWFza1szXSA9IGE7XG4gICAgc2VsZi5yZWFsQ29sb3JNYXNrLmNhbGwoZ2wsIHIsIGcsIGIsIGEpO1xuICB9O1xuXG4gIHRoaXMuY2xlYXJDb2xvciA9IGdsLmdldFBhcmFtZXRlcihnbC5DT0xPUl9DTEVBUl9WQUxVRSk7XG4gIGdsLmNsZWFyQ29sb3IgPSBmdW5jdGlvbihyLCBnLCBiLCBhKSB7XG4gICAgc2VsZi5jbGVhckNvbG9yWzBdID0gcjtcbiAgICBzZWxmLmNsZWFyQ29sb3JbMV0gPSBnO1xuICAgIHNlbGYuY2xlYXJDb2xvclsyXSA9IGI7XG4gICAgc2VsZi5jbGVhckNvbG9yWzNdID0gYTtcbiAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmNhbGwoZ2wsIHIsIGcsIGIsIGEpO1xuICB9O1xuXG4gIHRoaXMudmlld3BvcnQgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuVklFV1BPUlQpO1xuICBnbC52aWV3cG9ydCA9IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICBzZWxmLnZpZXdwb3J0WzBdID0geDtcbiAgICBzZWxmLnZpZXdwb3J0WzFdID0geTtcbiAgICBzZWxmLnZpZXdwb3J0WzJdID0gdztcbiAgICBzZWxmLnZpZXdwb3J0WzNdID0gaDtcbiAgICBzZWxmLnJlYWxWaWV3cG9ydC5jYWxsKGdsLCB4LCB5LCB3LCBoKTtcbiAgfTtcblxuICB0aGlzLmlzUGF0Y2hlZCA9IHRydWU7XG4gIFV0aWwuc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQoY2FudmFzKTtcbn07XG5cbkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUudW5wYXRjaCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuaXNQYXRjaGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGdsID0gdGhpcy5nbDtcbiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzO1xuXG4gIGlmICghVXRpbC5pc0lPUygpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ3dpZHRoJywgdGhpcy5yZWFsQ2FudmFzV2lkdGgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYW52YXMsICdoZWlnaHQnLCB0aGlzLnJlYWxDYW52YXNIZWlnaHQpO1xuICB9XG4gIGNhbnZhcy53aWR0aCA9IHRoaXMuYnVmZmVyV2lkdGg7XG4gIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmJ1ZmZlckhlaWdodDtcblxuICBnbC5iaW5kRnJhbWVidWZmZXIgPSB0aGlzLnJlYWxCaW5kRnJhbWVidWZmZXI7XG4gIGdsLmVuYWJsZSA9IHRoaXMucmVhbEVuYWJsZTtcbiAgZ2wuZGlzYWJsZSA9IHRoaXMucmVhbERpc2FibGU7XG4gIGdsLmNvbG9yTWFzayA9IHRoaXMucmVhbENvbG9yTWFzaztcbiAgZ2wuY2xlYXJDb2xvciA9IHRoaXMucmVhbENsZWFyQ29sb3I7XG4gIGdsLnZpZXdwb3J0ID0gdGhpcy5yZWFsVmlld3BvcnQ7XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIG91ciBmYWtlIGJhY2tidWZmZXIgaXMgYm91bmQgYW5kIGJpbmQgdGhlIHJlYWwgYmFja2J1ZmZlclxuICAvLyBpZiB0aGF0J3MgdGhlIGNhc2UuXG4gIGlmICh0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID09IHRoaXMuZnJhbWVidWZmZXIpIHtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICB9XG5cbiAgdGhpcy5pc1BhdGNoZWQgPSBmYWxzZTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIFV0aWwuc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQoY2FudmFzKTtcbiAgfSwgMSk7XG59O1xuXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnNldFRleHR1cmVCb3VuZHMgPSBmdW5jdGlvbihsZWZ0Qm91bmRzLCByaWdodEJvdW5kcykge1xuICBpZiAoIWxlZnRCb3VuZHMpIHtcbiAgICBsZWZ0Qm91bmRzID0gWzAsIDAsIDAuNSwgMV07XG4gIH1cblxuICBpZiAoIXJpZ2h0Qm91bmRzKSB7XG4gICAgcmlnaHRCb3VuZHMgPSBbMC41LCAwLCAwLjUsIDFdO1xuICB9XG5cbiAgLy8gTGVmdCBleWVcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzBdID0gbGVmdEJvdW5kc1swXTsgLy8gWFxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMV0gPSBsZWZ0Qm91bmRzWzFdOyAvLyBZXG4gIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVsyXSA9IGxlZnRCb3VuZHNbMl07IC8vIFdpZHRoXG4gIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVszXSA9IGxlZnRCb3VuZHNbM107IC8vIEhlaWdodFxuXG4gIC8vIFJpZ2h0IGV5ZVxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbNF0gPSByaWdodEJvdW5kc1swXTsgLy8gWFxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbNV0gPSByaWdodEJvdW5kc1sxXTsgLy8gWVxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbNl0gPSByaWdodEJvdW5kc1syXTsgLy8gV2lkdGhcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzddID0gcmlnaHRCb3VuZHNbM107IC8vIEhlaWdodFxufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBkaXN0b3J0aW9uIHBhc3Mgb24gdGhlIGluamVjdGVkIGJhY2tidWZmZXIsIHJlbmRlcmluZyBpdCB0byB0aGUgcmVhbFxuICogYmFja2J1ZmZlci5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5zdWJtaXRGcmFtZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGdsU3RhdGUgPSBbXTtcblxuICBpZiAoIVdlYlZSQ29uZmlnLkRJUlRZX1NVQk1JVF9GUkFNRV9CSU5ESU5HUykge1xuICAgIGdsU3RhdGUucHVzaChcbiAgICAgIGdsLkNVUlJFTlRfUFJPR1JBTSxcbiAgICAgIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HLFxuICAgICAgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORyxcbiAgICAgIGdsLlRFWFRVUkVfQklORElOR18yRCwgZ2wuVEVYVFVSRTBcbiAgICApO1xuICB9XG5cbiAgV0dMVVByZXNlcnZlR0xTdGF0ZShnbCwgZ2xTdGF0ZSwgZnVuY3Rpb24oZ2wpIHtcbiAgICAvLyBCaW5kIHRoZSByZWFsIGRlZmF1bHQgZnJhbWVidWZmZXJcbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBHTCBzdGF0ZSBpcyBpbiBhIGdvb2QgcGxhY2VcbiAgICBpZiAoc2VsZi5jdWxsRmFjZSkgeyBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLkNVTExfRkFDRSk7IH1cbiAgICBpZiAoc2VsZi5kZXB0aFRlc3QpIHsgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5ERVBUSF9URVNUKTsgfVxuICAgIGlmIChzZWxmLmJsZW5kKSB7IHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuQkxFTkQpOyB9XG4gICAgaWYgKHNlbGYuc2Npc3NvclRlc3QpIHsgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5TQ0lTU09SX1RFU1QpOyB9XG4gICAgaWYgKHNlbGYuc3RlbmNpbFRlc3QpIHsgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5TVEVOQ0lMX1RFU1QpOyB9XG4gICAgc2VsZi5yZWFsQ29sb3JNYXNrLmNhbGwoZ2wsIHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICAgIHNlbGYucmVhbFZpZXdwb3J0LmNhbGwoZ2wsIDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cbiAgICAvLyBJZiB0aGUgYmFja2J1ZmZlciBoYXMgYW4gYWxwaGEgY2hhbm5lbCBjbGVhciBldmVyeSBmcmFtZSBzbyB0aGUgcGFnZVxuICAgIC8vIGRvZXNuJ3Qgc2hvdyB0aHJvdWdoLlxuICAgIGlmIChzZWxmLmN0eEF0dHJpYnMuYWxwaGEgfHwgVXRpbC5pc0lPUygpKSB7XG4gICAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmNhbGwoZ2wsIDAsIDAsIDAsIDEpO1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgfVxuXG4gICAgLy8gQmluZCBkaXN0b3J0aW9uIHByb2dyYW0gYW5kIG1lc2hcbiAgICBnbC51c2VQcm9ncmFtKHNlbGYucHJvZ3JhbSk7XG5cbiAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBzZWxmLmluZGV4QnVmZmVyKTtcblxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2VsZi5hdHRyaWJzLnBvc2l0aW9uKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzZWxmLmF0dHJpYnMudGV4Q29vcmQpO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2VsZi5hdHRyaWJzLnBvc2l0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDIwLCAwKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNlbGYuYXR0cmlicy50ZXhDb29yZCwgMywgZ2wuRkxPQVQsIGZhbHNlLCAyMCwgOCk7XG5cbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcbiAgICBnbC51bmlmb3JtMWkoc2VsZi51bmlmb3Jtcy5kaWZmdXNlLCAwKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzZWxmLnJlbmRlclRhcmdldCk7XG5cbiAgICBnbC51bmlmb3JtNGZ2KHNlbGYudW5pZm9ybXMudmlld3BvcnRPZmZzZXRTY2FsZSwgc2VsZi52aWV3cG9ydE9mZnNldFNjYWxlKTtcblxuICAgIC8vIERyYXdzIGJvdGggZXllc1xuICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHNlbGYuaW5kZXhDb3VudCwgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXG4gICAgaWYgKHNlbGYuY2FyZGJvYXJkVUkpIHtcbiAgICAgIHNlbGYuY2FyZGJvYXJkVUkucmVuZGVyTm9TdGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEJpbmQgdGhlIGZha2UgZGVmYXVsdCBmcmFtZWJ1ZmZlciBhZ2FpblxuICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKHNlbGYuZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmZyYW1lYnVmZmVyKTtcblxuICAgIC8vIElmIHByZXNlcnZlRHJhd2luZ0J1ZmZlciA9PSBmYWxzZSBjbGVhciB0aGUgZnJhbWVidWZmZXJcbiAgICBpZiAoIXNlbGYuY3R4QXR0cmlicy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIpIHtcbiAgICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgMCwgMCwgMCwgMCk7XG4gICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICB9XG5cbiAgICBpZiAoIVdlYlZSQ29uZmlnLkRJUlRZX1NVQk1JVF9GUkFNRV9CSU5ESU5HUykge1xuICAgICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvLyBSZXN0b3JlIHN0YXRlXG4gICAgaWYgKHNlbGYuY3VsbEZhY2UpIHsgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLkNVTExfRkFDRSk7IH1cbiAgICBpZiAoc2VsZi5kZXB0aFRlc3QpIHsgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLkRFUFRIX1RFU1QpOyB9XG4gICAgaWYgKHNlbGYuYmxlbmQpIHsgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLkJMRU5EKTsgfVxuICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7IHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5TQ0lTU09SX1RFU1QpOyB9XG4gICAgaWYgKHNlbGYuc3RlbmNpbFRlc3QpIHsgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLlNURU5DSUxfVEVTVCk7IH1cblxuICAgIHNlbGYucmVhbENvbG9yTWFzay5hcHBseShnbCwgc2VsZi5jb2xvck1hc2spO1xuICAgIHNlbGYucmVhbFZpZXdwb3J0LmFwcGx5KGdsLCBzZWxmLnZpZXdwb3J0KTtcbiAgICBpZiAoc2VsZi5jdHhBdHRyaWJzLmFscGhhIHx8ICFzZWxmLmN0eEF0dHJpYnMucHJlc2VydmVEcmF3aW5nQnVmZmVyKSB7XG4gICAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmFwcGx5KGdsLCBzZWxmLmNsZWFyQ29sb3IpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gV29ya2Fyb3VuZCBmb3IgdGhlIGZhY3QgdGhhdCBTYWZhcmkgZG9lc24ndCBhbGxvdyB1cyB0byBwYXRjaCB0aGUgY2FudmFzXG4gIC8vIHdpZHRoIGFuZCBoZWlnaHQgY29ycmVjdGx5LiBBZnRlciBlYWNoIHN1Ym1pdCBmcmFtZSBjaGVjayB0byBzZWUgd2hhdCB0aGVcbiAgLy8gcmVhbCBiYWNrYnVmZmVyIHNpemUgaGFzIGJlZW4gc2V0IHRvIGFuZCByZXNpemUgdGhlIGZha2UgYmFja2J1ZmZlciBzaXplXG4gIC8vIHRvIG1hdGNoLlxuICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgdmFyIGNhbnZhcyA9IGdsLmNhbnZhcztcbiAgICBpZiAoY2FudmFzLndpZHRoICE9IHNlbGYuYnVmZmVyV2lkdGggfHwgY2FudmFzLmhlaWdodCAhPSBzZWxmLmJ1ZmZlckhlaWdodCkge1xuICAgICAgc2VsZi5idWZmZXJXaWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgIHNlbGYuYnVmZmVySGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgIHNlbGYub25SZXNpemUoKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbCB3aGVuIHRoZSBkZXZpY2VJbmZvIGhhcyBjaGFuZ2VkLiBBdCB0aGlzIHBvaW50IHdlIG5lZWRcbiAqIHRvIHJlLWNhbGN1bGF0ZSB0aGUgZGlzdG9ydGlvbiBtZXNoLlxuICovXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnVwZGF0ZURldmljZUluZm8gPSBmdW5jdGlvbihkZXZpY2VJbmZvKSB7XG4gIHZhciBnbCA9IHRoaXMuZ2w7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZ2xTdGF0ZSA9IFtnbC5BUlJBWV9CVUZGRVJfQklORElORywgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElOR107XG4gIFdHTFVQcmVzZXJ2ZUdMU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uKGdsKSB7XG4gICAgdmFyIHZlcnRpY2VzID0gc2VsZi5jb21wdXRlTWVzaFZlcnRpY2VzXyhzZWxmLm1lc2hXaWR0aCwgc2VsZi5tZXNoSGVpZ2h0LCBkZXZpY2VJbmZvKTtcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgc2VsZi52ZXJ0ZXhCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0aWNlcywgZ2wuU1RBVElDX0RSQVcpO1xuXG4gICAgLy8gSW5kaWNlcyBkb24ndCBjaGFuZ2UgYmFzZWQgb24gZGV2aWNlIHBhcmFtZXRlcnMsIHNvIG9ubHkgY29tcHV0ZSBvbmNlLlxuICAgIGlmICghc2VsZi5pbmRleENvdW50KSB7XG4gICAgICB2YXIgaW5kaWNlcyA9IHNlbGYuY29tcHV0ZU1lc2hJbmRpY2VzXyhzZWxmLm1lc2hXaWR0aCwgc2VsZi5tZXNoSGVpZ2h0KTtcbiAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHNlbGYuaW5kZXhCdWZmZXIpO1xuICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kaWNlcywgZ2wuU1RBVElDX0RSQVcpO1xuICAgICAgc2VsZi5pbmRleENvdW50ID0gaW5kaWNlcy5sZW5ndGg7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQnVpbGQgdGhlIGRpc3RvcnRpb24gbWVzaCB2ZXJ0aWNlcy5cbiAqIEJhc2VkIG9uIGNvZGUgZnJvbSB0aGUgVW5pdHkgY2FyZGJvYXJkIHBsdWdpbi5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5jb21wdXRlTWVzaFZlcnRpY2VzXyA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGRldmljZUluZm8pIHtcbiAgdmFyIHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyICogd2lkdGggKiBoZWlnaHQgKiA1KTtcblxuICB2YXIgbGVuc0ZydXN0dW0gPSBkZXZpY2VJbmZvLmdldExlZnRFeWVWaXNpYmxlVGFuQW5nbGVzKCk7XG4gIHZhciBub0xlbnNGcnVzdHVtID0gZGV2aWNlSW5mby5nZXRMZWZ0RXllTm9MZW5zVGFuQW5nbGVzKCk7XG4gIHZhciB2aWV3cG9ydCA9IGRldmljZUluZm8uZ2V0TGVmdEV5ZVZpc2libGVTY3JlZW5SZWN0KG5vTGVuc0ZydXN0dW0pO1xuICB2YXIgdmlkeCA9IDA7XG4gIHZhciBpaWR4ID0gMDtcbiAgZm9yICh2YXIgZSA9IDA7IGUgPCAyOyBlKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpKyssIHZpZHgrKykge1xuICAgICAgICB2YXIgdSA9IGkgLyAod2lkdGggLSAxKTtcbiAgICAgICAgdmFyIHYgPSBqIC8gKGhlaWdodCAtIDEpO1xuXG4gICAgICAgIC8vIEdyaWQgcG9pbnRzIHJlZ3VsYXJseSBzcGFjZWQgaW4gU3RyZW9TY3JlZW4sIGFuZCBiYXJyZWwgZGlzdG9ydGVkIGluXG4gICAgICAgIC8vIHRoZSBtZXNoLlxuICAgICAgICB2YXIgcyA9IHU7XG4gICAgICAgIHZhciB0ID0gdjtcbiAgICAgICAgdmFyIHggPSBVdGlsLmxlcnAobGVuc0ZydXN0dW1bMF0sIGxlbnNGcnVzdHVtWzJdLCB1KTtcbiAgICAgICAgdmFyIHkgPSBVdGlsLmxlcnAobGVuc0ZydXN0dW1bM10sIGxlbnNGcnVzdHVtWzFdLCB2KTtcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIHZhciByID0gZGV2aWNlSW5mby5kaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKGQpO1xuICAgICAgICB2YXIgcCA9IHggKiByIC8gZDtcbiAgICAgICAgdmFyIHEgPSB5ICogciAvIGQ7XG4gICAgICAgIHUgPSAocCAtIG5vTGVuc0ZydXN0dW1bMF0pIC8gKG5vTGVuc0ZydXN0dW1bMl0gLSBub0xlbnNGcnVzdHVtWzBdKTtcbiAgICAgICAgdiA9IChxIC0gbm9MZW5zRnJ1c3R1bVszXSkgLyAobm9MZW5zRnJ1c3R1bVsxXSAtIG5vTGVuc0ZydXN0dW1bM10pO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdSx2IHRvIG1lc2ggc2NyZWVuIGNvb3JkaW5hdGVzLlxuICAgICAgICB2YXIgYXNwZWN0ID0gZGV2aWNlSW5mby5kZXZpY2Uud2lkdGhNZXRlcnMgLyBkZXZpY2VJbmZvLmRldmljZS5oZWlnaHRNZXRlcnM7XG5cbiAgICAgICAgLy8gRklYTUU6IFRoZSBvcmlnaW5hbCBVbml0eSBwbHVnaW4gbXVsdGlwbGllZCBVIGJ5IHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgICAgLy8gYW5kIGRpZG4ndCBtdWx0aXBseSBlaXRoZXIgdmFsdWUgYnkgMiwgYnV0IHRoYXQgc2VlbXMgdG8gZ2V0IGl0XG4gICAgICAgIC8vIHJlYWxseSBjbG9zZSB0byBjb3JyZWN0IGxvb2tpbmcgZm9yIG1lLiBJIGhhdGUgdGhpcyBraW5kIG9mIFwiRG9uJ3RcbiAgICAgICAgLy8ga25vdyB3aHkgaXQgd29ya3NcIiBjb2RlIHRob3VnaCwgYW5kIHdvbGQgbG92ZSBhIG1vcmUgbG9naWNhbFxuICAgICAgICAvLyBleHBsYW5hdGlvbiBvZiB3aGF0IG5lZWRzIHRvIGhhcHBlbiBoZXJlLlxuICAgICAgICB1ID0gKHZpZXdwb3J0LnggKyB1ICogdmlld3BvcnQud2lkdGggLSAwLjUpICogMi4wOyAvLyogYXNwZWN0O1xuICAgICAgICB2ID0gKHZpZXdwb3J0LnkgKyB2ICogdmlld3BvcnQuaGVpZ2h0IC0gMC41KSAqIDIuMDtcblxuICAgICAgICB2ZXJ0aWNlc1sodmlkeCAqIDUpICsgMF0gPSB1OyAvLyBwb3NpdGlvbi54XG4gICAgICAgIHZlcnRpY2VzWyh2aWR4ICogNSkgKyAxXSA9IHY7IC8vIHBvc2l0aW9uLnlcbiAgICAgICAgdmVydGljZXNbKHZpZHggKiA1KSArIDJdID0gczsgLy8gdGV4Q29vcmQueFxuICAgICAgICB2ZXJ0aWNlc1sodmlkeCAqIDUpICsgM10gPSB0OyAvLyB0ZXhDb29yZC55XG4gICAgICAgIHZlcnRpY2VzWyh2aWR4ICogNSkgKyA0XSA9IGU7IC8vIHRleENvb3JkLnogKHZpZXdwb3J0IGluZGV4KVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdyA9IGxlbnNGcnVzdHVtWzJdIC0gbGVuc0ZydXN0dW1bMF07XG4gICAgbGVuc0ZydXN0dW1bMF0gPSAtKHcgKyBsZW5zRnJ1c3R1bVswXSk7XG4gICAgbGVuc0ZydXN0dW1bMl0gPSB3IC0gbGVuc0ZydXN0dW1bMl07XG4gICAgdyA9IG5vTGVuc0ZydXN0dW1bMl0gLSBub0xlbnNGcnVzdHVtWzBdO1xuICAgIG5vTGVuc0ZydXN0dW1bMF0gPSAtKHcgKyBub0xlbnNGcnVzdHVtWzBdKTtcbiAgICBub0xlbnNGcnVzdHVtWzJdID0gdyAtIG5vTGVuc0ZydXN0dW1bMl07XG4gICAgdmlld3BvcnQueCA9IDEgLSAodmlld3BvcnQueCArIHZpZXdwb3J0LndpZHRoKTtcbiAgfVxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIGRpc3RvcnRpb24gbWVzaCBpbmRpY2VzLlxuICogQmFzZWQgb24gY29kZSBmcm9tIHRoZSBVbml0eSBjYXJkYm9hcmQgcGx1Z2luLlxuICovXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLmNvbXB1dGVNZXNoSW5kaWNlc18gPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gIHZhciBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDIgKiAod2lkdGggLSAxKSAqIChoZWlnaHQgLSAxKSAqIDYpO1xuICB2YXIgaGFsZndpZHRoID0gd2lkdGggLyAyO1xuICB2YXIgaGFsZmhlaWdodCA9IGhlaWdodCAvIDI7XG4gIHZhciB2aWR4ID0gMDtcbiAgdmFyIGlpZHggPSAwO1xuICBmb3IgKHZhciBlID0gMDsgZSA8IDI7IGUrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVpZ2h0OyBqKyspIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2lkdGg7IGkrKywgdmlkeCsrKSB7XG4gICAgICAgIGlmIChpID09IDAgfHwgaiA9PSAwKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBCdWlsZCBhIHF1YWQuICBMb3dlciByaWdodCBhbmQgdXBwZXIgbGVmdCBxdWFkcmFudHMgaGF2ZSBxdWFkcyB3aXRoXG4gICAgICAgIC8vIHRoZSB0cmlhbmdsZSBkaWFnb25hbCBmbGlwcGVkIHRvIGdldCB0aGUgdmlnbmV0dGUgdG8gaW50ZXJwb2xhdGVcbiAgICAgICAgLy8gY29ycmVjdGx5LlxuICAgICAgICBpZiAoKGkgPD0gaGFsZndpZHRoKSA9PSAoaiA8PSBoYWxmaGVpZ2h0KSkge1xuICAgICAgICAgIC8vIFF1YWQgZGlhZ29uYWwgbG93ZXIgbGVmdCB0byB1cHBlciByaWdodC5cbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4O1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aCAtIDE7XG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aCAtIDE7XG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeDtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBRdWFkIGRpYWdvbmFsIHVwcGVyIGxlZnQgdG8gbG93ZXIgcmlnaHQuXG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIDE7XG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHg7XG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSAxO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGljZXM7XG59O1xuXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLmdldE93blByb3BlcnR5RGVzY3JpcHRvcl8gPSBmdW5jdGlvbihwcm90bywgYXR0ck5hbWUpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBhdHRyTmFtZSk7XG4gIC8vIEluIHNvbWUgY2FzZXMgKGFoZW0uLi4gU2FmYXJpKSwgdGhlIGRlc2NyaXB0b3IgcmV0dXJucyB1bmRlZmluZWQgZ2V0IGFuZFxuICAvLyBzZXQgZmllbGRzLiBJbiB0aGlzIGNhc2UsIHdlIG5lZWQgdG8gY3JlYXRlIGEgc3ludGhldGljIHByb3BlcnR5XG4gIC8vIGRlc2NyaXB0b3IuIFRoaXMgd29ya3MgYXJvdW5kIHNvbWUgb2YgdGhlIGlzc3VlcyBpblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm9yaXNtdXMvd2VidnItcG9seWZpbGwvaXNzdWVzLzQ2XG4gIGlmIChkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkIHx8IGRlc2NyaXB0b3Iuc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICB9O1xuICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkYm9hcmREaXN0b3J0ZXI7XG5cbn0se1wiLi9jYXJkYm9hcmQtdWkuanNcIjo1LFwiLi9kZXBzL3dnbHUtcHJlc2VydmUtc3RhdGUuanNcIjo3LFwiLi91dGlsLmpzXCI6MjJ9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG52YXIgV0dMVVByZXNlcnZlR0xTdGF0ZSA9IF9kZXJlcV8oJy4vZGVwcy93Z2x1LXByZXNlcnZlLXN0YXRlLmpzJyk7XG5cbnZhciB1aVZTID0gW1xuICAnYXR0cmlidXRlIHZlYzIgcG9zaXRpb247JyxcblxuICAndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXQ7JyxcblxuICAndm9pZCBtYWluKCkgeycsXG4gICcgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdCAqIHZlYzQoIHBvc2l0aW9uLCAtMS4wLCAxLjAgKTsnLFxuICAnfScsXG5dLmpvaW4oJ1xcbicpO1xuXG52YXIgdWlGUyA9IFtcbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cbiAgJ3VuaWZvcm0gdmVjNCBjb2xvcjsnLFxuXG4gICd2b2lkIG1haW4oKSB7JyxcbiAgJyAgZ2xfRnJhZ0NvbG9yID0gY29sb3I7JyxcbiAgJ30nLFxuXS5qb2luKCdcXG4nKTtcblxudmFyIERFRzJSQUQgPSBNYXRoLlBJLzE4MC4wO1xuXG4vLyBUaGUgZ2VhciBoYXMgNiBpZGVudGljYWwgc2VjdGlvbnMsIGVhY2ggc3Bhbm5pbmcgNjAgZGVncmVlcy5cbnZhciBrQW5nbGVQZXJHZWFyU2VjdGlvbiA9IDYwO1xuXG4vLyBIYWxmLWFuZ2xlIG9mIHRoZSBzcGFuIG9mIHRoZSBvdXRlciByaW0uXG52YXIga091dGVyUmltRW5kQW5nbGUgPSAxMjtcblxuLy8gQW5nbGUgYmV0d2VlbiB0aGUgbWlkZGxlIG9mIHRoZSBvdXRlciByaW0gYW5kIHRoZSBzdGFydCBvZiB0aGUgaW5uZXIgcmltLlxudmFyIGtJbm5lclJpbUJlZ2luQW5nbGUgPSAyMDtcblxuLy8gRGlzdGFuY2UgZnJvbSBjZW50ZXIgdG8gb3V0ZXIgcmltLCBub3JtYWxpemVkIHNvIHRoYXQgdGhlIGVudGlyZSBtb2RlbFxuLy8gZml0cyBpbiBhIFstMSwgMV0geCBbLTEsIDFdIHNxdWFyZS5cbnZhciBrT3V0ZXJSYWRpdXMgPSAxO1xuXG4vLyBEaXN0YW5jZSBmcm9tIGNlbnRlciB0byBkZXByZXNzZWQgcmltLCBpbiBtb2RlbCB1bml0cy5cbnZhciBrTWlkZGxlUmFkaXVzID0gMC43NTtcblxuLy8gUmFkaXVzIG9mIHRoZSBpbm5lciBob2xsb3cgY2lyY2xlLCBpbiBtb2RlbCB1bml0cy5cbnZhciBrSW5uZXJSYWRpdXMgPSAwLjMxMjU7XG5cbi8vIENlbnRlciBsaW5lIHRoaWNrbmVzcyBpbiBEUC5cbnZhciBrQ2VudGVyTGluZVRoaWNrbmVzc0RwID0gNDtcblxuLy8gQnV0dG9uIHdpZHRoIGluIERQLlxudmFyIGtCdXR0b25XaWR0aERwID0gMjg7XG5cbi8vIEZhY3RvciB0byBzY2FsZSB0aGUgdG91Y2ggYXJlYSB0aGF0IHJlc3BvbmRzIHRvIHRoZSB0b3VjaC5cbnZhciBrVG91Y2hTbG9wRmFjdG9yID0gMS41O1xuXG52YXIgQW5nbGVzID0gW1xuICAwLCBrT3V0ZXJSaW1FbmRBbmdsZSwga0lubmVyUmltQmVnaW5BbmdsZSxcbiAga0FuZ2xlUGVyR2VhclNlY3Rpb24gLSBrSW5uZXJSaW1CZWdpbkFuZ2xlLFxuICBrQW5nbGVQZXJHZWFyU2VjdGlvbiAtIGtPdXRlclJpbUVuZEFuZ2xlXG5dO1xuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGFsaWdubWVudCBsaW5lIGFuZCBcIm9wdGlvbnNcIiBnZWFyLiBJdCBpcyBhc3N1bWVkIHRoYXQgdGhlIGNhbnZhc1xuICogdGhpcyBpcyByZW5kZXJlZCBpbnRvIGNvdmVycyB0aGUgZW50aXJlIHNjcmVlbiAob3IgY2xvc2UgdG8gaXQuKVxuICovXG5mdW5jdGlvbiBDYXJkYm9hcmRVSShnbCkge1xuICB0aGlzLmdsID0gZ2w7XG5cbiAgdGhpcy5hdHRyaWJzID0ge1xuICAgIHBvc2l0aW9uOiAwXG4gIH07XG4gIHRoaXMucHJvZ3JhbSA9IFV0aWwubGlua1Byb2dyYW0oZ2wsIHVpVlMsIHVpRlMsIHRoaXMuYXR0cmlicyk7XG4gIHRoaXMudW5pZm9ybXMgPSBVdGlsLmdldFByb2dyYW1Vbmlmb3JtcyhnbCwgdGhpcy5wcm9ncmFtKTtcblxuICB0aGlzLnZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmdlYXJPZmZzZXQgPSAwO1xuICB0aGlzLmdlYXJWZXJ0ZXhDb3VudCA9IDA7XG4gIHRoaXMuYXJyb3dPZmZzZXQgPSAwO1xuICB0aGlzLmFycm93VmVydGV4Q291bnQgPSAwO1xuXG4gIHRoaXMucHJvak1hdCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xuXG4gIHRoaXMubGlzdGVuZXIgPSBudWxsO1xuXG4gIHRoaXMub25SZXNpemUoKTtcbn07XG5cbi8qKlxuICogVGVhcnMgZG93biBhbGwgdGhlIHJlc291cmNlcyBjcmVhdGVkIGJ5IHRoZSBVSSByZW5kZXJlci5cbiAqL1xuQ2FyZGJvYXJkVUkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcblxuICBpZiAodGhpcy5saXN0ZW5lcikge1xuICAgIGdsLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubGlzdGVuZXIsIGZhbHNlKTtcbiAgfVxuXG4gIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMudmVydGV4QnVmZmVyKTtcbn07XG5cbi8qKlxuICogQWRkcyBhIGxpc3RlbmVyIHRvIGNsaWNrcyBvbiB0aGUgZ2VhciBhbmQgYmFjayBpY29uc1xuICovXG5DYXJkYm9hcmRVSS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24ob3B0aW9uc0NhbGxiYWNrLCBiYWNrQ2FsbGJhY2spIHtcbiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzO1xuICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgbWlkbGluZSA9IGNhbnZhcy5jbGllbnRXaWR0aCAvIDI7XG4gICAgdmFyIGJ1dHRvblNpemUgPSBrQnV0dG9uV2lkdGhEcCAqIGtUb3VjaFNsb3BGYWN0b3I7XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB1c2VyIGNsaWNrZWQgb24gKG9yIGFyb3VuZCkgdGhlIGdlYXIgaWNvblxuICAgIGlmIChldmVudC5jbGllbnRYID4gbWlkbGluZSAtIGJ1dHRvblNpemUgJiZcbiAgICAgICAgZXZlbnQuY2xpZW50WCA8IG1pZGxpbmUgKyBidXR0b25TaXplICYmXG4gICAgICAgIGV2ZW50LmNsaWVudFkgPiBjYW52YXMuY2xpZW50SGVpZ2h0IC0gYnV0dG9uU2l6ZSkge1xuICAgICAgb3B0aW9uc0NhbGxiYWNrKGV2ZW50KTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB1c2VyIGNsaWNrZWQgb24gKG9yIGFyb3VuZCkgdGhlIGJhY2sgaWNvblxuICAgIGVsc2UgaWYgKGV2ZW50LmNsaWVudFggPCBidXR0b25TaXplICYmIGV2ZW50LmNsaWVudFkgPCBidXR0b25TaXplKSB7XG4gICAgICBiYWNrQ2FsbGJhY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5saXN0ZW5lciwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBCdWlsZHMgdGhlIFVJIG1lc2guXG4gKi9cbkNhcmRib2FyZFVJLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGdsU3RhdGUgPSBbXG4gICAgZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkdcbiAgXTtcblxuICBXR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbihnbCkge1xuICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG4gICAgdmFyIG1pZGxpbmUgPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGggLyAyO1xuXG4gICAgLy8gQXNzdW1lcyB5b3VyIGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0IGlzIHNjYWxlZCBwcm9wb3J0aW9uYXRlbHkuXG4gICAgLy8gVE9ETyhzbXVzKTogVGhlIGZvbGxvd2luZyBjYXVzZXMgYnV0dG9ucyB0byBiZWNvbWUgaHVnZSBvbiBpT1MsIGJ1dCBzZWVtc1xuICAgIC8vIGxpa2UgdGhlIHJpZ2h0IHRoaW5nIHRvIGRvLiBGb3Igbm93LCBhZGRlZCBhIGhhY2suIEJ1dCByZWFsbHksIGludmVzdGlnYXRlIHdoeS5cbiAgICB2YXIgZHBzID0gKGdsLmRyYXdpbmdCdWZmZXJXaWR0aCAvIChzY3JlZW4ud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykpO1xuICAgIGlmICghVXRpbC5pc0lPUygpKSB7XG4gICAgICBkcHMgKj0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgfVxuXG4gICAgdmFyIGxpbmVXaWR0aCA9IGtDZW50ZXJMaW5lVGhpY2tuZXNzRHAgKiBkcHMgLyAyO1xuICAgIHZhciBidXR0b25TaXplID0ga0J1dHRvbldpZHRoRHAgKiBrVG91Y2hTbG9wRmFjdG9yICogZHBzO1xuICAgIHZhciBidXR0b25TY2FsZSA9IGtCdXR0b25XaWR0aERwICogZHBzIC8gMjtcbiAgICB2YXIgYnV0dG9uQm9yZGVyID0gKChrQnV0dG9uV2lkdGhEcCAqIGtUb3VjaFNsb3BGYWN0b3IpIC0ga0J1dHRvbldpZHRoRHApICogZHBzO1xuXG4gICAgLy8gQnVpbGQgY2VudGVybGluZVxuICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSAtIGxpbmVXaWR0aCwgYnV0dG9uU2l6ZSk7XG4gICAgdmVydGljZXMucHVzaChtaWRsaW5lIC0gbGluZVdpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcbiAgICB2ZXJ0aWNlcy5wdXNoKG1pZGxpbmUgKyBsaW5lV2lkdGgsIGJ1dHRvblNpemUpO1xuICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSArIGxpbmVXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cbiAgICAvLyBCdWlsZCBnZWFyXG4gICAgc2VsZi5nZWFyT2Zmc2V0ID0gKHZlcnRpY2VzLmxlbmd0aCAvIDIpO1xuXG4gICAgZnVuY3Rpb24gYWRkR2VhclNlZ21lbnQodGhldGEsIHIpIHtcbiAgICAgIHZhciBhbmdsZSA9ICg5MCAtIHRoZXRhKSAqIERFRzJSQUQ7XG4gICAgICB2YXIgeCA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgIHZhciB5ID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgdmVydGljZXMucHVzaChrSW5uZXJSYWRpdXMgKiB4ICogYnV0dG9uU2NhbGUgKyBtaWRsaW5lLCBrSW5uZXJSYWRpdXMgKiB5ICogYnV0dG9uU2NhbGUgKyBidXR0b25TY2FsZSk7XG4gICAgICB2ZXJ0aWNlcy5wdXNoKHIgKiB4ICogYnV0dG9uU2NhbGUgKyBtaWRsaW5lLCByICogeSAqIGJ1dHRvblNjYWxlICsgYnV0dG9uU2NhbGUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IDY7IGkrKykge1xuICAgICAgdmFyIHNlZ21lbnRUaGV0YSA9IGkgKiBrQW5nbGVQZXJHZWFyU2VjdGlvbjtcblxuICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhLCBrT3V0ZXJSYWRpdXMpO1xuICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhICsga091dGVyUmltRW5kQW5nbGUsIGtPdXRlclJhZGl1cyk7XG4gICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyBrSW5uZXJSaW1CZWdpbkFuZ2xlLCBrTWlkZGxlUmFkaXVzKTtcbiAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIChrQW5nbGVQZXJHZWFyU2VjdGlvbiAtIGtJbm5lclJpbUJlZ2luQW5nbGUpLCBrTWlkZGxlUmFkaXVzKTtcbiAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIChrQW5nbGVQZXJHZWFyU2VjdGlvbiAtIGtPdXRlclJpbUVuZEFuZ2xlKSwga091dGVyUmFkaXVzKTtcbiAgICB9XG5cbiAgICBzZWxmLmdlYXJWZXJ0ZXhDb3VudCA9ICh2ZXJ0aWNlcy5sZW5ndGggLyAyKSAtIHNlbGYuZ2Vhck9mZnNldDtcblxuICAgIC8vIEJ1aWxkIGJhY2sgYXJyb3dcbiAgICBzZWxmLmFycm93T2Zmc2V0ID0gKHZlcnRpY2VzLmxlbmd0aCAvIDIpO1xuXG4gICAgZnVuY3Rpb24gYWRkQXJyb3dWZXJ0ZXgoeCwgeSkge1xuICAgICAgdmVydGljZXMucHVzaChidXR0b25Cb3JkZXIgKyB4LCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0IC0gYnV0dG9uQm9yZGVyIC0geSk7XG4gICAgfVxuXG4gICAgdmFyIGFuZ2xlZExpbmVXaWR0aCA9IGxpbmVXaWR0aCAvIE1hdGguc2luKDQ1ICogREVHMlJBRCk7XG5cbiAgICBhZGRBcnJvd1ZlcnRleCgwLCBidXR0b25TY2FsZSk7XG4gICAgYWRkQXJyb3dWZXJ0ZXgoYnV0dG9uU2NhbGUsIDApO1xuICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlICsgYW5nbGVkTGluZVdpZHRoLCBhbmdsZWRMaW5lV2lkdGgpO1xuICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgKyBhbmdsZWRMaW5lV2lkdGgpO1xuXG4gICAgYWRkQXJyb3dWZXJ0ZXgoYW5nbGVkTGluZVdpZHRoLCBidXR0b25TY2FsZSAtIGFuZ2xlZExpbmVXaWR0aCk7XG4gICAgYWRkQXJyb3dWZXJ0ZXgoMCwgYnV0dG9uU2NhbGUpO1xuICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlLCBidXR0b25TY2FsZSAqIDIpO1xuICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlICsgYW5nbGVkTGluZVdpZHRoLCAoYnV0dG9uU2NhbGUgKiAyKSAtIGFuZ2xlZExpbmVXaWR0aCk7XG5cbiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlIC0gYW5nbGVkTGluZVdpZHRoKTtcbiAgICBhZGRBcnJvd1ZlcnRleCgwLCBidXR0b25TY2FsZSk7XG5cbiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlIC0gbGluZVdpZHRoKTtcbiAgICBhZGRBcnJvd1ZlcnRleChrQnV0dG9uV2lkdGhEcCAqIGRwcywgYnV0dG9uU2NhbGUgLSBsaW5lV2lkdGgpO1xuICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgKyBsaW5lV2lkdGgpO1xuICAgIGFkZEFycm93VmVydGV4KGtCdXR0b25XaWR0aERwICogZHBzLCBidXR0b25TY2FsZSArIGxpbmVXaWR0aCk7XG5cbiAgICBzZWxmLmFycm93VmVydGV4Q291bnQgPSAodmVydGljZXMubGVuZ3RoIC8gMikgLSBzZWxmLmFycm93T2Zmc2V0O1xuXG4gICAgLy8gQnVmZmVyIGRhdGFcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgc2VsZi52ZXJ0ZXhCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgZGlzdG9ydGlvbiBwYXNzIG9uIHRoZSBpbmplY3RlZCBiYWNrYnVmZmVyLCByZW5kZXJpbmcgaXQgdG8gdGhlIHJlYWxcbiAqIGJhY2tidWZmZXIuXG4gKi9cbkNhcmRib2FyZFVJLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBnbFN0YXRlID0gW1xuICAgIGdsLkNVTExfRkFDRSxcbiAgICBnbC5ERVBUSF9URVNULFxuICAgIGdsLkJMRU5ELFxuICAgIGdsLlNDSVNTT1JfVEVTVCxcbiAgICBnbC5TVEVOQ0lMX1RFU1QsXG4gICAgZ2wuQ09MT1JfV1JJVEVNQVNLLFxuICAgIGdsLlZJRVdQT1JULFxuXG4gICAgZ2wuQ1VSUkVOVF9QUk9HUkFNLFxuICAgIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HXG4gIF07XG5cbiAgV0dMVVByZXNlcnZlR0xTdGF0ZShnbCwgZ2xTdGF0ZSwgZnVuY3Rpb24oZ2wpIHtcbiAgICAvLyBNYWtlIHN1cmUgdGhlIEdMIHN0YXRlIGlzIGluIGEgZ29vZCBwbGFjZVxuICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuICAgIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICBnbC5kaXNhYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cbiAgICBzZWxmLnJlbmRlck5vU3RhdGUoKTtcbiAgfSk7XG59O1xuXG5DYXJkYm9hcmRVSS5wcm90b3R5cGUucmVuZGVyTm9TdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gIC8vIEJpbmQgZGlzdG9ydGlvbiBwcm9ncmFtIGFuZCBtZXNoXG4gIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcblxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhCdWZmZXIpO1xuICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmF0dHJpYnMucG9zaXRpb24pO1xuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYXR0cmlicy5wb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCA4LCAwKTtcblxuICBnbC51bmlmb3JtNGYodGhpcy51bmlmb3Jtcy5jb2xvciwgMS4wLCAxLjAsIDEuMCwgMS4wKTtcblxuICBVdGlsLm9ydGhvTWF0cml4KHRoaXMucHJvak1hdCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCAwLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0LCAwLjEsIDEwMjQuMCk7XG4gIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0LCBmYWxzZSwgdGhpcy5wcm9qTWF0KTtcblxuICAvLyBEcmF3cyBVSSBlbGVtZW50XG4gIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCB0aGlzLmdlYXJPZmZzZXQsIHRoaXMuZ2VhclZlcnRleENvdW50KTtcbiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgdGhpcy5hcnJvd09mZnNldCwgdGhpcy5hcnJvd1ZlcnRleENvdW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FyZGJvYXJkVUk7XG5cbn0se1wiLi9kZXBzL3dnbHUtcHJlc2VydmUtc3RhdGUuanNcIjo3LFwiLi91dGlsLmpzXCI6MjJ9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBDYXJkYm9hcmREaXN0b3J0ZXIgPSBfZGVyZXFfKCcuL2NhcmRib2FyZC1kaXN0b3J0ZXIuanMnKTtcbnZhciBDYXJkYm9hcmRVSSA9IF9kZXJlcV8oJy4vY2FyZGJvYXJkLXVpLmpzJyk7XG52YXIgRGV2aWNlSW5mbyA9IF9kZXJlcV8oJy4vZGV2aWNlLWluZm8uanMnKTtcbnZhciBEcGRiID0gX2RlcmVxXygnLi9kcGRiL2RwZGIuanMnKTtcbnZhciBGdXNpb25Qb3NlU2Vuc29yID0gX2RlcmVxXygnLi9zZW5zb3ItZnVzaW9uL2Z1c2lvbi1wb3NlLXNlbnNvci5qcycpO1xudmFyIFJvdGF0ZUluc3RydWN0aW9ucyA9IF9kZXJlcV8oJy4vcm90YXRlLWluc3RydWN0aW9ucy5qcycpO1xudmFyIFZpZXdlclNlbGVjdG9yID0gX2RlcmVxXygnLi92aWV3ZXItc2VsZWN0b3IuanMnKTtcbnZhciBWUkRpc3BsYXkgPSBfZGVyZXFfKCcuL2Jhc2UuanMnKS5WUkRpc3BsYXk7XG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xuXG52YXIgRXllID0ge1xuICBMRUZUOiAnbGVmdCcsXG4gIFJJR0hUOiAncmlnaHQnXG59O1xuXG4vKipcbiAqIFZSRGlzcGxheSBiYXNlZCBvbiBtb2JpbGUgZGV2aWNlIHBhcmFtZXRlcnMgYW5kIERldmljZU1vdGlvbiBBUElzLlxuICovXG5mdW5jdGlvbiBDYXJkYm9hcmRWUkRpc3BsYXkoKSB7XG4gIHRoaXMuZGlzcGxheU5hbWUgPSAnQ2FyZGJvYXJkIFZSRGlzcGxheSAod2VidnItcG9seWZpbGwpJztcblxuICB0aGlzLmNhcGFiaWxpdGllcy5oYXNPcmllbnRhdGlvbiA9IHRydWU7XG4gIHRoaXMuY2FwYWJpbGl0aWVzLmNhblByZXNlbnQgPSB0cnVlO1xuXG4gIC8vIFwiUHJpdmF0ZVwiIG1lbWJlcnMuXG4gIHRoaXMuYnVmZmVyU2NhbGVfID0gV2ViVlJDb25maWcuQlVGRkVSX1NDQUxFO1xuICB0aGlzLnBvc2VTZW5zb3JfID0gbmV3IEZ1c2lvblBvc2VTZW5zb3IoKTtcbiAgdGhpcy5kaXN0b3J0ZXJfID0gbnVsbDtcbiAgdGhpcy5jYXJkYm9hcmRVSV8gPSBudWxsO1xuXG4gIHRoaXMuZHBkYl8gPSBuZXcgRHBkYih0cnVlLCB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZF8uYmluZCh0aGlzKSk7XG4gIHRoaXMuZGV2aWNlSW5mb18gPSBuZXcgRGV2aWNlSW5mbyh0aGlzLmRwZGJfLmdldERldmljZVBhcmFtcygpKTtcblxuICB0aGlzLnZpZXdlclNlbGVjdG9yXyA9IG5ldyBWaWV3ZXJTZWxlY3RvcigpO1xuICB0aGlzLnZpZXdlclNlbGVjdG9yXy5vbignY2hhbmdlJywgdGhpcy5vblZpZXdlckNoYW5nZWRfLmJpbmQodGhpcykpO1xuXG4gIC8vIFNldCB0aGUgY29ycmVjdCBpbml0aWFsIHZpZXdlci5cbiAgdGhpcy5kZXZpY2VJbmZvXy5zZXRWaWV3ZXIodGhpcy52aWV3ZXJTZWxlY3Rvcl8uZ2V0Q3VycmVudFZpZXdlcigpKTtcblxuICBpZiAoIVdlYlZSQ29uZmlnLlJPVEFURV9JTlNUUlVDVElPTlNfRElTQUJMRUQpIHtcbiAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18gPSBuZXcgUm90YXRlSW5zdHJ1Y3Rpb25zKCk7XG4gIH1cblxuICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgLy8gTGlzdGVuIGZvciByZXNpemUgZXZlbnRzIHRvIHdvcmthcm91bmQgdGhpcyBhd2Z1bCBTYWZhcmkgYnVnLlxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplXy5iaW5kKHRoaXMpKTtcbiAgfVxufVxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZSA9IG5ldyBWUkRpc3BsYXkoKTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRJbW1lZGlhdGVQb3NlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IHRoaXMucG9zZVNlbnNvcl8uZ2V0UG9zaXRpb24oKSxcbiAgICBvcmllbnRhdGlvbjogdGhpcy5wb3NlU2Vuc29yXy5nZXRPcmllbnRhdGlvbigpLFxuICAgIGxpbmVhclZlbG9jaXR5OiBudWxsLFxuICAgIGxpbmVhckFjY2VsZXJhdGlvbjogbnVsbCxcbiAgICBhbmd1bGFyVmVsb2NpdHk6IG51bGwsXG4gICAgYW5ndWxhckFjY2VsZXJhdGlvbjogbnVsbFxuICB9O1xufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5yZXNldFBvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NlU2Vuc29yXy5yZXNldFBvc2UoKTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZ2V0RXllUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHdoaWNoRXllKSB7XG4gIHZhciBvZmZzZXQgPSBbdGhpcy5kZXZpY2VJbmZvXy52aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgKiAwLjUsIDAuMCwgMC4wXTtcbiAgdmFyIGZpZWxkT2ZWaWV3O1xuXG4gIC8vIFRPRE86IEZvViBjYW4gYmUgYSBsaXR0bGUgZXhwZW5zaXZlIHRvIGNvbXB1dGUuIENhY2hlIHdoZW4gZGV2aWNlIHBhcmFtcyBjaGFuZ2UuXG4gIGlmICh3aGljaEV5ZSA9PSBFeWUuTEVGVCkge1xuICAgIG9mZnNldFswXSAqPSAtMS4wO1xuICAgIGZpZWxkT2ZWaWV3ID0gdGhpcy5kZXZpY2VJbmZvXy5nZXRGaWVsZE9mVmlld0xlZnRFeWUoKTtcbiAgfSBlbHNlIGlmICh3aGljaEV5ZSA9PSBFeWUuUklHSFQpIHtcbiAgICBmaWVsZE9mVmlldyA9IHRoaXMuZGV2aWNlSW5mb18uZ2V0RmllbGRPZlZpZXdSaWdodEV5ZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgZXllIHByb3ZpZGVkOiAlcycsIHdoaWNoRXllKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmllbGRPZlZpZXc6IGZpZWxkT2ZWaWV3LFxuICAgIG9mZnNldDogb2Zmc2V0LFxuICAgIC8vIFRPRE86IFNob3VsZCBiZSBhYmxlIHRvIHByb3ZpZGUgYmV0dGVyIHZhbHVlcyB0aGFuIHRoZXNlLlxuICAgIHJlbmRlcldpZHRoOiB0aGlzLmRldmljZUluZm9fLmRldmljZS53aWR0aCAqIDAuNSAqIHRoaXMuYnVmZmVyU2NhbGVfLFxuICAgIHJlbmRlckhlaWdodDogdGhpcy5kZXZpY2VJbmZvXy5kZXZpY2UuaGVpZ2h0ICogdGhpcy5idWZmZXJTY2FsZV8sXG4gIH07XG59O1xuXG5DYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uRGV2aWNlUGFyYW1zVXBkYXRlZF8gPSBmdW5jdGlvbihuZXdQYXJhbXMpIHtcbiAgaWYgKFV0aWwuaXNEZWJ1ZygpKSB7XG4gICAgY29uc29sZS5sb2coJ0RQREIgcmVwb3J0ZWQgdGhhdCBkZXZpY2UgcGFyYW1zIHdlcmUgdXBkYXRlZC4nKTtcbiAgfVxuICB0aGlzLmRldmljZUluZm9fLnVwZGF0ZURldmljZVBhcmFtcyhuZXdQYXJhbXMpO1xuXG4gIGlmICh0aGlzLmRpc3RvcnRlcl8pIHtcbiAgICB0aGlzLmRpc3RvcnRlcl8udXBkYXRlRGV2aWNlSW5mbyh0aGlzLmRldmljZUluZm9fKTtcbiAgfVxufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS51cGRhdGVCb3VuZHNfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5sYXllcl8gJiYgdGhpcy5kaXN0b3J0ZXJfICYmICh0aGlzLmxheWVyXy5sZWZ0Qm91bmRzIHx8IHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKSkge1xuICAgIHRoaXMuZGlzdG9ydGVyXy5zZXRUZXh0dXJlQm91bmRzKHRoaXMubGF5ZXJfLmxlZnRCb3VuZHMsIHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKTtcbiAgfVxufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5iZWdpblByZXNlbnRfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbCcpO1xuICBpZiAoIWdsKVxuICAgIGdsID0gdGhpcy5sYXllcl8uc291cmNlLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuICBpZiAoIWdsKVxuICAgIGdsID0gdGhpcy5sYXllcl8uc291cmNlLmdldENvbnRleHQoJ3dlYmdsMicpO1xuXG4gIGlmICghZ2wpXG4gICAgcmV0dXJuOyAvLyBDYW4ndCBkbyBkaXN0b3J0aW9uIHdpdGhvdXQgYSBXZWJHTCBjb250ZXh0LlxuXG4gIC8vIFByb3ZpZGVzIGEgd2F5IHRvIG9wdCBvdXQgb2YgZGlzdG9ydGlvblxuICBpZiAodGhpcy5sYXllcl8ucHJlZGlzdG9ydGVkKSB7XG4gICAgaWYgKCFXZWJWUkNvbmZpZy5DQVJEQk9BUkRfVUlfRElTQUJMRUQpIHtcbiAgICAgIGdsLmNhbnZhcy53aWR0aCA9IFV0aWwuZ2V0U2NyZWVuV2lkdGgoKSAqIHRoaXMuYnVmZmVyU2NhbGVfO1xuICAgICAgZ2wuY2FudmFzLmhlaWdodCA9IFV0aWwuZ2V0U2NyZWVuSGVpZ2h0KCkgKiB0aGlzLmJ1ZmZlclNjYWxlXztcbiAgICAgIHRoaXMuY2FyZGJvYXJkVUlfID0gbmV3IENhcmRib2FyZFVJKGdsKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gQ3JlYXRlIGEgbmV3IGRpc3RvcnRlciBmb3IgdGhlIHRhcmdldCBjb250ZXh0XG4gICAgdGhpcy5kaXN0b3J0ZXJfID0gbmV3IENhcmRib2FyZERpc3RvcnRlcihnbCk7XG4gICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7XG4gICAgdGhpcy5jYXJkYm9hcmRVSV8gPSB0aGlzLmRpc3RvcnRlcl8uY2FyZGJvYXJkVUk7XG4gIH1cblxuICBpZiAodGhpcy5jYXJkYm9hcmRVSV8pIHtcbiAgICB0aGlzLmNhcmRib2FyZFVJXy5saXN0ZW4oZnVuY3Rpb24oZSkge1xuICAgICAgLy8gT3B0aW9ucyBjbGlja2VkLlxuICAgICAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8uc2hvdyh0aGlzLmxheWVyXy5zb3VyY2UucGFyZW50RWxlbWVudCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24oZSkge1xuICAgICAgLy8gQmFjayBjbGlja2VkLlxuICAgICAgdGhpcy5leGl0UHJlc2VudCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgaWYgKHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXykge1xuICAgIGlmIChVdGlsLmlzTGFuZHNjYXBlTW9kZSgpICYmIFV0aWwuaXNNb2JpbGUoKSkge1xuICAgICAgLy8gSW4gbGFuZHNjYXBlIG1vZGUsIHRlbXBvcmFyaWx5IHNob3cgdGhlIFwicHV0IGludG8gQ2FyZGJvYXJkXCJcbiAgICAgIC8vIGludGVyc3RpdGlhbC4gT3RoZXJ3aXNlLCBkbyB0aGUgZGVmYXVsdCB0aGluZy5cbiAgICAgIHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXy5zaG93VGVtcG9yYXJpbHkoMzAwMCwgdGhpcy5sYXllcl8uc291cmNlLnBhcmVudEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGlzdGVuIGZvciBvcmllbnRhdGlvbiBjaGFuZ2UgZXZlbnRzIGluIG9yZGVyIHRvIHNob3cgaW50ZXJzdGl0aWFsLlxuICB0aGlzLm9yaWVudGF0aW9uSGFuZGxlciA9IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5vcmllbnRhdGlvbkhhbmRsZXIpO1xuXG4gIC8vIExpc3RlbiBmb3IgcHJlc2VudCBkaXNwbGF5IGNoYW5nZSBldmVudHMgaW4gb3JkZXIgdG8gdXBkYXRlIGRpc3RvcnRlciBkaW1lbnNpb25zXG4gIHRoaXMudnJkaXNwbGF5cHJlc2VudGNoYW5nZUhhbmRsZXIgPSB0aGlzLnVwZGF0ZUJvdW5kc18uYmluZCh0aGlzKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyKTtcblxuICAvLyBGaXJlIHRoaXMgZXZlbnQgaW5pdGlhbGx5LCB0byBnaXZlIGdlb21ldHJ5LWRpc3RvcnRpb24gY2xpZW50cyB0aGUgY2hhbmNlXG4gIC8vIHRvIGRvIHNvbWV0aGluZyBjdXN0b20uXG4gIHRoaXMuZmlyZVZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8oKTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZW5kUHJlc2VudF8gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuZGlzdG9ydGVyXykge1xuICAgIHRoaXMuZGlzdG9ydGVyXy5kZXN0cm95KCk7XG4gICAgdGhpcy5kaXN0b3J0ZXJfID0gbnVsbDtcbiAgfVxuICBpZiAodGhpcy5jYXJkYm9hcmRVSV8pIHtcbiAgICB0aGlzLmNhcmRib2FyZFVJXy5kZXN0cm95KCk7XG4gICAgdGhpcy5jYXJkYm9hcmRVSV8gPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXykge1xuICAgIHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXy5oaWRlKCk7XG4gIH1cbiAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8uaGlkZSgpO1xuXG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMub3JpZW50YXRpb25IYW5kbGVyKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyKTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuc3VibWl0RnJhbWUgPSBmdW5jdGlvbihwb3NlKSB7XG4gIGlmICh0aGlzLmRpc3RvcnRlcl8pIHtcbiAgICB0aGlzLnVwZGF0ZUJvdW5kc18oKTtcbiAgICB0aGlzLmRpc3RvcnRlcl8uc3VibWl0RnJhbWUoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmNhcmRib2FyZFVJXyAmJiB0aGlzLmxheWVyXykge1xuICAgIC8vIEhhY2sgZm9yIHByZWRpc3RvcnRlZDogdHJ1ZS5cbiAgICB2YXIgY2FudmFzID0gdGhpcy5sYXllcl8uc291cmNlLmdldENvbnRleHQoJ3dlYmdsJykuY2FudmFzO1xuICAgIGlmIChjYW52YXMud2lkdGggIT0gdGhpcy5sYXN0V2lkdGggfHwgY2FudmFzLmhlaWdodCAhPSB0aGlzLmxhc3RIZWlnaHQpIHtcbiAgICAgIHRoaXMuY2FyZGJvYXJkVUlfLm9uUmVzaXplKCk7XG4gICAgfVxuICAgIHRoaXMubGFzdFdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIHRoaXMubGFzdEhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAvLyBSZW5kZXIgdGhlIENhcmRib2FyZCBVSS5cbiAgICB0aGlzLmNhcmRib2FyZFVJXy5yZW5kZXIoKTtcbiAgfVxufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vbk9yaWVudGF0aW9uQ2hhbmdlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gSGlkZSB0aGUgdmlld2VyIHNlbGVjdG9yLlxuICB0aGlzLnZpZXdlclNlbGVjdG9yXy5oaWRlKCk7XG5cbiAgLy8gVXBkYXRlIHRoZSByb3RhdGUgaW5zdHJ1Y3Rpb25zLlxuICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7XG4gICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfLnVwZGF0ZSgpO1xuICB9XG5cbiAgdGhpcy5vblJlc2l6ZV8oKTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25SZXNpemVfID0gZnVuY3Rpb24oZSkge1xuICBpZiAodGhpcy5sYXllcl8pIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKTtcbiAgICAvLyBTaXplIHRoZSBDU1MgY2FudmFzLlxuICAgIC8vIEFkZGVkIHBhZGRpbmcgb24gcmlnaHQgYW5kIGJvdHRvbSBiZWNhdXNlIGlQaG9uZSA1IHdpbGwgbm90XG4gICAgLy8gaGlkZSB0aGUgVVJMIGJhciB1bmxlc3MgY29udGVudCBpcyBiaWdnZXIgdGhhbiB0aGUgc2NyZWVuLlxuICAgIC8vIFRoaXMgd2lsbCBub3QgYmUgdmlzaWJsZSBhcyBsb25nIGFzIHRoZSBjb250YWluZXIgZWxlbWVudCAoZS5nLiBib2R5KVxuICAgIC8vIGlzIHNldCB0byAnb3ZlcmZsb3c6IGhpZGRlbicuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBbXG4gICAgICAncG9zaXRpb246IGFic29sdXRlJyxcbiAgICAgICd0b3A6IDAnLFxuICAgICAgJ2xlZnQ6IDAnLFxuICAgICAgJ3dpZHRoOiAnICsgTWF0aC5tYXgoc2NyZWVuLndpZHRoLCBzY3JlZW4uaGVpZ2h0KSArICdweCcsXG4gICAgICAnaGVpZ2h0OiAnICsgTWF0aC5taW4oc2NyZWVuLmhlaWdodCwgc2NyZWVuLndpZHRoKSArICdweCcsXG4gICAgICAnYm9yZGVyOiAwJyxcbiAgICAgICdtYXJnaW46IDAnLFxuICAgICAgJ3BhZGRpbmc6IDAgMTBweCAxMHB4IDAnLFxuICAgIF07XG4gICAgZ2wuY2FudmFzLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBjc3NQcm9wZXJ0aWVzLmpvaW4oJzsgJykgKyAnOycpO1xuXG4gICAgVXRpbC5zYWZhcmlDc3NTaXplV29ya2Fyb3VuZChnbC5jYW52YXMpO1xuICB9XG59O1xuXG5DYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uVmlld2VyQ2hhbmdlZF8gPSBmdW5jdGlvbih2aWV3ZXIpIHtcbiAgdGhpcy5kZXZpY2VJbmZvXy5zZXRWaWV3ZXIodmlld2VyKTtcblxuICBpZiAodGhpcy5kaXN0b3J0ZXJfKSB7XG4gICAgLy8gVXBkYXRlIHRoZSBkaXN0b3J0aW9uIGFwcHJvcHJpYXRlbHkuXG4gICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7XG4gIH1cblxuICAvLyBGaXJlIGEgbmV3IGV2ZW50IGNvbnRhaW5pbmcgdmlld2VyIGFuZCBkZXZpY2UgcGFyYW1ldGVycyBmb3IgY2xpZW50cyB0aGF0XG4gIC8vIHdhbnQgdG8gaW1wbGVtZW50IHRoZWlyIG93biBnZW9tZXRyeS1iYXNlZCBkaXN0b3J0aW9uLlxuICB0aGlzLmZpcmVWUkRpc3BsYXlEZXZpY2VQYXJhbXNDaGFuZ2VfKCk7XG59O1xuXG5DYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmZpcmVWUkRpc3BsYXlEZXZpY2VQYXJhbXNDaGFuZ2VfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgndnJkaXNwbGF5ZGV2aWNlcGFyYW1zY2hhbmdlJywge1xuICAgIGRldGFpbDoge1xuICAgICAgdnJkaXNwbGF5OiB0aGlzLFxuICAgICAgZGV2aWNlSW5mbzogdGhpcy5kZXZpY2VJbmZvXyxcbiAgICB9XG4gIH0pO1xuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRib2FyZFZSRGlzcGxheTtcblxufSx7XCIuL2Jhc2UuanNcIjozLFwiLi9jYXJkYm9hcmQtZGlzdG9ydGVyLmpzXCI6NCxcIi4vY2FyZGJvYXJkLXVpLmpzXCI6NSxcIi4vZGV2aWNlLWluZm8uanNcIjo4LFwiLi9kcGRiL2RwZGIuanNcIjoxMixcIi4vcm90YXRlLWluc3RydWN0aW9ucy5qc1wiOjE2LFwiLi9zZW5zb3ItZnVzaW9uL2Z1c2lvbi1wb3NlLXNlbnNvci5qc1wiOjE4LFwiLi91dGlsLmpzXCI6MjIsXCIuL3ZpZXdlci1zZWxlY3Rvci5qc1wiOjIzfV0sNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuQ29weXJpZ2h0IChjKSAyMDE2LCBCcmFuZG9uIEpvbmVzLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG4vKlxuQ2FjaGVzIHNwZWNpZmllZCBHTCBzdGF0ZSwgcnVucyBhIGNhbGxiYWNrLCBhbmQgcmVzdG9yZXMgdGhlIGNhY2hlZCBzdGF0ZSB3aGVuXG5kb25lLlxuXG5FeGFtcGxlIHVzYWdlOlxuXG52YXIgc2F2ZWRTdGF0ZSA9IFtcbiAgZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkcsXG5cbiAgLy8gVEVYVFVSRV9CSU5ESU5HXzJEIG9yIF9DVUJFX01BUCBtdXN0IGFsd2F5cyBiZSBmb2xsb3dlZCBieSB0aGUgdGV4dXJlIHVuaXQuXG4gIGdsLlRFWFRVUkVfQklORElOR18yRCwgZ2wuVEVYVFVSRTAsXG5cbiAgZ2wuQ0xFQVJfQ09MT1IsXG5dO1xuLy8gQWZ0ZXIgdGhpcyBjYWxsIHRoZSBhcnJheSBidWZmZXIsIHRleHR1cmUgdW5pdCAwLCBhY3RpdmUgdGV4dHVyZSwgYW5kIGNsZWFyXG4vLyBjb2xvciB3aWxsIGJlIHJlc3RvcmVkLiBUaGUgdmlld3BvcnQgd2lsbCByZW1haW4gY2hhbmdlZCwgaG93ZXZlciwgYmVjYXVzZVxuLy8gZ2wuVklFV1BPUlQgd2FzIG5vdCBpbmNsdWRlZCBpbiB0aGUgc2F2ZWRTdGF0ZSBsaXN0LlxuV0dMVVByZXNlcnZlR0xTdGF0ZShnbCwgc2F2ZWRTdGF0ZSwgZnVuY3Rpb24oZ2wpIHtcbiAgZ2wudmlld3BvcnQoMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcbiAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIC4uLi4pO1xuXG4gIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAuLi4pO1xuXG4gIGdsLmNsZWFyQ29sb3IoMSwgMCwgMCwgMSk7XG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xufSk7XG5cbk5vdGUgdGhhdCB0aGlzIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBmYXN0LiBNYW5hZ2luZyBzdGF0ZSBpbiB5b3VyIG93biBjb2RlIHRvXG5hdm9pZCByZWR1bmRhbnQgc3RhdGUgc2V0dGluZyBhbmQgcXVlcnlpbmcgd2lsbCBhbHdheXMgYmUgZmFzdGVyLiBUaGlzIGZ1bmN0aW9uXG5pcyBtb3N0IHVzZWZ1bCBmb3IgY2FzZXMgd2hlcmUgeW91IG1heSBub3QgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgV2ViR0xcbmNhbGxzIGJlaW5nIG1hZGUsIHN1Y2ggYXMgdG9vbGluZyBvciBlZmZlY3QgaW5qZWN0b3JzLlxuKi9cblxuZnVuY3Rpb24gV0dMVVByZXNlcnZlR0xTdGF0ZShnbCwgYmluZGluZ3MsIGNhbGxiYWNrKSB7XG4gIGlmICghYmluZGluZ3MpIHtcbiAgICBjYWxsYmFjayhnbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGJvdW5kVmFsdWVzID0gW107XG5cbiAgdmFyIGFjdGl2ZVRleHR1cmUgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcbiAgICBzd2l0Y2ggKGJpbmRpbmcpIHtcbiAgICAgIGNhc2UgZ2wuVEVYVFVSRV9CSU5ESU5HXzJEOlxuICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVA6XG4gICAgICAgIHZhciB0ZXh0dXJlVW5pdCA9IGJpbmRpbmdzWysraV07XG4gICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlRFWFRVUkVfQklORElOR18yRCBvciBURVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVAgbXVzdCBiZSBmb2xsb3dlZCBieSBhIHZhbGlkIHRleHR1cmUgdW5pdFwiKTtcbiAgICAgICAgICBib3VuZFZhbHVlcy5wdXNoKG51bGwsIG51bGwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0aXZlVGV4dHVyZSkge1xuICAgICAgICAgIGFjdGl2ZVRleHR1cmUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQUNUSVZFX1RFWFRVUkUpO1xuICAgICAgICB9XG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgICAgICBib3VuZFZhbHVlcy5wdXNoKGdsLmdldFBhcmFtZXRlcihiaW5kaW5nKSwgbnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5BQ1RJVkVfVEVYVFVSRTpcbiAgICAgICAgYWN0aXZlVGV4dHVyZSA9IGdsLmdldFBhcmFtZXRlcihnbC5BQ1RJVkVfVEVYVFVSRSk7XG4gICAgICAgIGJvdW5kVmFsdWVzLnB1c2gobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYm91bmRWYWx1ZXMucHVzaChnbC5nZXRQYXJhbWV0ZXIoYmluZGluZykpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhnbCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgdmFyIGJvdW5kVmFsdWUgPSBib3VuZFZhbHVlc1tpXTtcbiAgICBzd2l0Y2ggKGJpbmRpbmcpIHtcbiAgICAgIGNhc2UgZ2wuQUNUSVZFX1RFWFRVUkU6XG4gICAgICAgIGJyZWFrOyAvLyBJZ25vcmUgdGhpcyBiaW5kaW5nLCBzaW5jZSB3ZSBzcGVjaWFsLWNhc2UgaXQgdG8gaGFwcGVuIGxhc3QuXG4gICAgICBjYXNlIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HOlxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYm91bmRWYWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5DT0xPUl9DTEVBUl9WQUxVRTpcbiAgICAgICAgZ2wuY2xlYXJDb2xvcihib3VuZFZhbHVlWzBdLCBib3VuZFZhbHVlWzFdLCBib3VuZFZhbHVlWzJdLCBib3VuZFZhbHVlWzNdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLkNPTE9SX1dSSVRFTUFTSzpcbiAgICAgICAgZ2wuY29sb3JNYXNrKGJvdW5kVmFsdWVbMF0sIGJvdW5kVmFsdWVbMV0sIGJvdW5kVmFsdWVbMl0sIGJvdW5kVmFsdWVbM10pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuQ1VSUkVOVF9QUk9HUkFNOlxuICAgICAgICBnbC51c2VQcm9ncmFtKGJvdW5kVmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORzpcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYm91bmRWYWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9CSU5ESU5HOlxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGJvdW5kVmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuUkVOREVSQlVGRkVSX0JJTkRJTkc6XG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBib3VuZFZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLlRFWFRVUkVfQklORElOR18yRDpcbiAgICAgICAgdmFyIHRleHR1cmVVbml0ID0gYmluZGluZ3NbKytpXTtcbiAgICAgICAgaWYgKHRleHR1cmVVbml0IDwgZ2wuVEVYVFVSRTAgfHwgdGV4dHVyZVVuaXQgPiBnbC5URVhUVVJFMzEpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBib3VuZFZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLlRFWFRVUkVfQklORElOR19DVUJFX01BUDpcbiAgICAgICAgdmFyIHRleHR1cmVVbml0ID0gYmluZGluZ3NbKytpXTtcbiAgICAgICAgaWYgKHRleHR1cmVVbml0IDwgZ2wuVEVYVFVSRTAgfHwgdGV4dHVyZVVuaXQgPiBnbC5URVhUVVJFMzEpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFX0NVQkVfTUFQLCBib3VuZFZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLlZJRVdQT1JUOlxuICAgICAgICBnbC52aWV3cG9ydChib3VuZFZhbHVlWzBdLCBib3VuZFZhbHVlWzFdLCBib3VuZFZhbHVlWzJdLCBib3VuZFZhbHVlWzNdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLkJMRU5EOlxuICAgICAgY2FzZSBnbC5DVUxMX0ZBQ0U6XG4gICAgICBjYXNlIGdsLkRFUFRIX1RFU1Q6XG4gICAgICBjYXNlIGdsLlNDSVNTT1JfVEVTVDpcbiAgICAgIGNhc2UgZ2wuU1RFTkNJTF9URVNUOlxuICAgICAgICBpZiAoYm91bmRWYWx1ZSkge1xuICAgICAgICAgIGdsLmVuYWJsZShiaW5kaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC5kaXNhYmxlKGJpbmRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBHTCByZXN0b3JlIGJlaGF2aW9yIGZvciAweFwiICsgYmluZGluZy50b1N0cmluZygxNikpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlVGV4dHVyZSkge1xuICAgICAgZ2wuYWN0aXZlVGV4dHVyZShhY3RpdmVUZXh0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXR0xVUHJlc2VydmVHTFN0YXRlO1xufSx7fV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgRGlzdG9ydGlvbiA9IF9kZXJlcV8oJy4vZGlzdG9ydGlvbi9kaXN0b3J0aW9uLmpzJyk7XG52YXIgTWF0aFV0aWwgPSBfZGVyZXFfKCcuL21hdGgtdXRpbC5qcycpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcblxuZnVuY3Rpb24gRGV2aWNlKHBhcmFtcykge1xuICB0aGlzLndpZHRoID0gcGFyYW1zLndpZHRoIHx8IFV0aWwuZ2V0U2NyZWVuV2lkdGgoKTtcbiAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0IHx8IFV0aWwuZ2V0U2NyZWVuSGVpZ2h0KCk7XG4gIHRoaXMud2lkdGhNZXRlcnMgPSBwYXJhbXMud2lkdGhNZXRlcnM7XG4gIHRoaXMuaGVpZ2h0TWV0ZXJzID0gcGFyYW1zLmhlaWdodE1ldGVycztcbiAgdGhpcy5iZXZlbE1ldGVycyA9IHBhcmFtcy5iZXZlbE1ldGVycztcbn1cblxuXG4vLyBGYWxsYmFjayBBbmRyb2lkIGRldmljZSAoYmFzZWQgb24gTmV4dXMgNSBtZWFzdXJlbWVudHMpIGZvciB1c2Ugd2hlblxuLy8gd2UgY2FuJ3QgcmVjb2duaXplIGFuIEFuZHJvaWQgZGV2aWNlLlxudmFyIERFRkFVTFRfQU5EUk9JRCA9IG5ldyBEZXZpY2Uoe1xuICB3aWR0aE1ldGVyczogMC4xMTAsXG4gIGhlaWdodE1ldGVyczogMC4wNjIsXG4gIGJldmVsTWV0ZXJzOiAwLjAwNFxufSk7XG5cbi8vIEZhbGxiYWNrIGlPUyBkZXZpY2UgKGJhc2VkIG9uIGlQaG9uZTYpIGZvciB1c2Ugd2hlblxuLy8gd2UgY2FuJ3QgcmVjb2duaXplIGFuIEFuZHJvaWQgZGV2aWNlLlxudmFyIERFRkFVTFRfSU9TID0gbmV3IERldmljZSh7XG4gIHdpZHRoTWV0ZXJzOiAwLjEwMzgsXG4gIGhlaWdodE1ldGVyczogMC4wNTg0LFxuICBiZXZlbE1ldGVyczogMC4wMDRcbn0pO1xuXG5cbnZhciBWaWV3ZXJzID0ge1xuICBDYXJkYm9hcmRWMTogbmV3IENhcmRib2FyZFZpZXdlcih7XG4gICAgaWQ6ICdDYXJkYm9hcmRWMScsXG4gICAgbGFiZWw6ICdDYXJkYm9hcmQgSS9PIDIwMTQnLFxuICAgIGZvdjogNDAsXG4gICAgaW50ZXJMZW5zRGlzdGFuY2U6IDAuMDYwLFxuICAgIGJhc2VsaW5lTGVuc0Rpc3RhbmNlOiAwLjAzNSxcbiAgICBzY3JlZW5MZW5zRGlzdGFuY2U6IDAuMDQyLFxuICAgIGRpc3RvcnRpb25Db2VmZmljaWVudHM6IFswLjQ0MSwgMC4xNTZdLFxuICAgIGludmVyc2VDb2VmZmljaWVudHM6IFstMC40NDEwMDM1LCAwLjQyNzU2MTU1LCAtMC40ODA0NDM5LCAwLjU0NjAxMzksXG4gICAgICAtMC41ODgyMTE4MywgMC41NzMzOTM4LCAtMC40ODMwMzIwMiwgMC4zMzI5OTA4MywgLTAuMTc1NzM4NDEsXG4gICAgICAwLjA2NTE3NzIsIC0wLjAxNDg4OTYzLCAwLjAwMTU1OTgzNF1cbiAgfSksXG4gIENhcmRib2FyZFYyOiBuZXcgQ2FyZGJvYXJkVmlld2VyKHtcbiAgICBpZDogJ0NhcmRib2FyZFYyJyxcbiAgICBsYWJlbDogJ0NhcmRib2FyZCBJL08gMjAxNScsXG4gICAgZm92OiA2MCxcbiAgICBpbnRlckxlbnNEaXN0YW5jZTogMC4wNjQsXG4gICAgYmFzZWxpbmVMZW5zRGlzdGFuY2U6IDAuMDM1LFxuICAgIHNjcmVlbkxlbnNEaXN0YW5jZTogMC4wMzksXG4gICAgZGlzdG9ydGlvbkNvZWZmaWNpZW50czogWzAuMzQsIDAuNTVdLFxuICAgIGludmVyc2VDb2VmZmljaWVudHM6IFstMC4zMzgzNjcwNCwgLTAuMTgxNjIxODUsIDAuODYyNjU1LCAtMS4yNDYyMDUxLFxuICAgICAgMS4wNTYwNjAyLCAtMC41ODIwODMxNywgMC4yMTYwOTA3OCwgLTAuMDU0NDQ4MjMsIDAuMDA5MTc3OTU2LFxuICAgICAgLTkuOTA0MTY5RS00LCA2LjE4MzUzNUUtNSwgLTEuNjk4MTgwM0UtNl1cbiAgfSlcbn07XG5cblxudmFyIERFRkFVTFRfTEVGVF9DRU5URVIgPSB7eDogMC41LCB5OiAwLjV9O1xudmFyIERFRkFVTFRfUklHSFRfQ0VOVEVSID0ge3g6IDAuNSwgeTogMC41fTtcblxuLyoqXG4gKiBNYW5hZ2VzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZXZpY2UgYW5kIHRoZSB2aWV3ZXIuXG4gKlxuICogZGV2aWNlUGFyYW1zIGluZGljYXRlcyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgZGV2aWNlIHRvIHVzZSAoZ2VuZXJhbGx5XG4gKiBvYnRhaW5lZCBmcm9tIGRwZGIuZ2V0RGV2aWNlUGFyYW1zKCkpLiBDYW4gYmUgbnVsbCB0byBtZWFuIG5vIGRldmljZVxuICogcGFyYW1zIHdlcmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIERldmljZUluZm8oZGV2aWNlUGFyYW1zKSB7XG4gIHRoaXMudmlld2VyID0gVmlld2Vycy5DYXJkYm9hcmRWMjtcbiAgdGhpcy51cGRhdGVEZXZpY2VQYXJhbXMoZGV2aWNlUGFyYW1zKTtcbiAgdGhpcy5kaXN0b3J0aW9uID0gbmV3IERpc3RvcnRpb24odGhpcy52aWV3ZXIuZGlzdG9ydGlvbkNvZWZmaWNpZW50cyk7XG59XG5cbkRldmljZUluZm8ucHJvdG90eXBlLnVwZGF0ZURldmljZVBhcmFtcyA9IGZ1bmN0aW9uKGRldmljZVBhcmFtcykge1xuICB0aGlzLmRldmljZSA9IHRoaXMuZGV0ZXJtaW5lRGV2aWNlXyhkZXZpY2VQYXJhbXMpIHx8IHRoaXMuZGV2aWNlO1xufTtcblxuRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RGV2aWNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmRldmljZTtcbn07XG5cbkRldmljZUluZm8ucHJvdG90eXBlLnNldFZpZXdlciA9IGZ1bmN0aW9uKHZpZXdlcikge1xuICB0aGlzLnZpZXdlciA9IHZpZXdlcjtcbiAgdGhpcy5kaXN0b3J0aW9uID0gbmV3IERpc3RvcnRpb24odGhpcy52aWV3ZXIuZGlzdG9ydGlvbkNvZWZmaWNpZW50cyk7XG59O1xuXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5kZXRlcm1pbmVEZXZpY2VfID0gZnVuY3Rpb24oZGV2aWNlUGFyYW1zKSB7XG4gIGlmICghZGV2aWNlUGFyYW1zKSB7XG4gICAgLy8gTm8gcGFyYW1ldGVycywgc28gdXNlIGEgZGVmYXVsdC5cbiAgICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1VzaW5nIGZhbGxiYWNrIGlPUyBkZXZpY2UgbWVhc3VyZW1lbnRzLicpO1xuICAgICAgcmV0dXJuIERFRkFVTFRfSU9TO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1VzaW5nIGZhbGxiYWNrIEFuZHJvaWQgZGV2aWNlIG1lYXN1cmVtZW50cy4nKTtcbiAgICAgIHJldHVybiBERUZBVUxUX0FORFJPSUQ7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSBkZXZpY2Ugc2NyZWVuIGRpbWVuc2lvbnMgYmFzZWQgb24gZGV2aWNlUGFyYW1zLlxuICB2YXIgTUVURVJTX1BFUl9JTkNIID0gMC4wMjU0O1xuICB2YXIgbWV0ZXJzUGVyUGl4ZWxYID0gTUVURVJTX1BFUl9JTkNIIC8gZGV2aWNlUGFyYW1zLnhkcGk7XG4gIHZhciBtZXRlcnNQZXJQaXhlbFkgPSBNRVRFUlNfUEVSX0lOQ0ggLyBkZXZpY2VQYXJhbXMueWRwaTtcbiAgdmFyIHdpZHRoID0gVXRpbC5nZXRTY3JlZW5XaWR0aCgpO1xuICB2YXIgaGVpZ2h0ID0gVXRpbC5nZXRTY3JlZW5IZWlnaHQoKTtcbiAgcmV0dXJuIG5ldyBEZXZpY2Uoe1xuICAgIHdpZHRoTWV0ZXJzOiBtZXRlcnNQZXJQaXhlbFggKiB3aWR0aCxcbiAgICBoZWlnaHRNZXRlcnM6IG1ldGVyc1BlclBpeGVsWSAqIGhlaWdodCxcbiAgICBiZXZlbE1ldGVyczogZGV2aWNlUGFyYW1zLmJldmVsTW0gKiAwLjAwMSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgZmllbGQgb2YgdmlldyBmb3IgdGhlIGxlZnQgZXllLlxuICovXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXREaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gIHZhciBkaXN0b3J0aW9uID0gdGhpcy5kaXN0b3J0aW9uO1xuXG4gIC8vIERldmljZS5oZWlnaHQgYW5kIGRldmljZS53aWR0aCBmb3IgZGV2aWNlIGluIHBvcnRyYWl0IG1vZGUsIHNvIHRyYW5zcG9zZS5cbiAgdmFyIGV5ZVRvU2NyZWVuRGlzdGFuY2UgPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuXG4gIHZhciBvdXRlckRpc3QgPSAoZGV2aWNlLndpZHRoTWV0ZXJzIC0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlKSAvIDI7XG4gIHZhciBpbm5lckRpc3QgPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyO1xuICB2YXIgYm90dG9tRGlzdCA9IHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycztcbiAgdmFyIHRvcERpc3QgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC0gYm90dG9tRGlzdDtcblxuICB2YXIgb3V0ZXJBbmdsZSA9IE1hdGhVdGlsLnJhZFRvRGVnICogTWF0aC5hdGFuKFxuICAgICAgZGlzdG9ydGlvbi5kaXN0b3J0KG91dGVyRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTtcbiAgdmFyIGlubmVyQW5nbGUgPSBNYXRoVXRpbC5yYWRUb0RlZyAqIE1hdGguYXRhbihcbiAgICAgIGRpc3RvcnRpb24uZGlzdG9ydChpbm5lckRpc3QgLyBleWVUb1NjcmVlbkRpc3RhbmNlKSk7XG4gIHZhciBib3R0b21BbmdsZSA9IE1hdGhVdGlsLnJhZFRvRGVnICogTWF0aC5hdGFuKFxuICAgICAgZGlzdG9ydGlvbi5kaXN0b3J0KGJvdHRvbURpc3QgLyBleWVUb1NjcmVlbkRpc3RhbmNlKSk7XG4gIHZhciB0b3BBbmdsZSA9IE1hdGhVdGlsLnJhZFRvRGVnICogTWF0aC5hdGFuKFxuICAgICAgZGlzdG9ydGlvbi5kaXN0b3J0KHRvcERpc3QgLyBleWVUb1NjcmVlbkRpc3RhbmNlKSk7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0RGVncmVlczogTWF0aC5taW4ob3V0ZXJBbmdsZSwgdmlld2VyLmZvdiksXG4gICAgcmlnaHREZWdyZWVzOiBNYXRoLm1pbihpbm5lckFuZ2xlLCB2aWV3ZXIuZm92KSxcbiAgICBkb3duRGVncmVlczogTWF0aC5taW4oYm90dG9tQW5nbGUsIHZpZXdlci5mb3YpLFxuICAgIHVwRGVncmVlczogTWF0aC5taW4odG9wQW5nbGUsIHZpZXdlci5mb3YpXG4gIH07XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHRhbi1hbmdsZXMgZnJvbSB0aGUgbWF4aW11bSBGT1YgZm9yIHRoZSBsZWZ0IGV5ZSBmb3IgdGhlXG4gKiBjdXJyZW50IGRldmljZSBhbmQgc2NyZWVuIHBhcmFtZXRlcnMuXG4gKi9cbkRldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVWaXNpYmxlVGFuQW5nbGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlO1xuICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjtcblxuICAvLyBUYW4tYW5nbGVzIGZyb20gdGhlIG1heCBGT1YuXG4gIHZhciBmb3ZMZWZ0ID0gTWF0aC50YW4oLU1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdik7XG4gIHZhciBmb3ZUb3AgPSBNYXRoLnRhbihNYXRoVXRpbC5kZWdUb1JhZCAqIHZpZXdlci5mb3YpO1xuICB2YXIgZm92UmlnaHQgPSBNYXRoLnRhbihNYXRoVXRpbC5kZWdUb1JhZCAqIHZpZXdlci5mb3YpO1xuICB2YXIgZm92Qm90dG9tID0gTWF0aC50YW4oLU1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdik7XG4gIC8vIFZpZXdwb3J0IHNpemUuXG4gIHZhciBoYWxmV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyA0O1xuICB2YXIgaGFsZkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyAyO1xuICAvLyBWaWV3cG9ydCBjZW50ZXIsIG1lYXN1cmVkIGZyb20gbGVmdCBsZW5zIHBvc2l0aW9uLlxuICB2YXIgdmVydGljYWxMZW5zT2Zmc2V0ID0gKHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycyAtIGhhbGZIZWlnaHQpO1xuICB2YXIgY2VudGVyWCA9IHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAvIDIgLSBoYWxmV2lkdGg7XG4gIHZhciBjZW50ZXJZID0gLXZlcnRpY2FsTGVuc09mZnNldDtcbiAgdmFyIGNlbnRlclogPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuICAvLyBUYW4tYW5nbGVzIG9mIHRoZSB2aWV3cG9ydCBlZGdlcywgYXMgc2VlbiB0aHJvdWdoIHRoZSBsZW5zLlxuICB2YXIgc2NyZWVuTGVmdCA9IGRpc3RvcnRpb24uZGlzdG9ydCgoY2VudGVyWCAtIGhhbGZXaWR0aCkgLyBjZW50ZXJaKTtcbiAgdmFyIHNjcmVlblRvcCA9IGRpc3RvcnRpb24uZGlzdG9ydCgoY2VudGVyWSArIGhhbGZIZWlnaHQpIC8gY2VudGVyWik7XG4gIHZhciBzY3JlZW5SaWdodCA9IGRpc3RvcnRpb24uZGlzdG9ydCgoY2VudGVyWCArIGhhbGZXaWR0aCkgLyBjZW50ZXJaKTtcbiAgdmFyIHNjcmVlbkJvdHRvbSA9IGRpc3RvcnRpb24uZGlzdG9ydCgoY2VudGVyWSAtIGhhbGZIZWlnaHQpIC8gY2VudGVyWik7XG4gIC8vIENvbXBhcmUgdGhlIHR3byBzZXRzIG9mIHRhbi1hbmdsZXMgYW5kIHRha2UgdGhlIHZhbHVlIGNsb3NlciB0byB6ZXJvIG9uIGVhY2ggc2lkZS5cbiAgdmFyIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG4gIHJlc3VsdFswXSA9IE1hdGgubWF4KGZvdkxlZnQsIHNjcmVlbkxlZnQpO1xuICByZXN1bHRbMV0gPSBNYXRoLm1pbihmb3ZUb3AsIHNjcmVlblRvcCk7XG4gIHJlc3VsdFsyXSA9IE1hdGgubWluKGZvdlJpZ2h0LCBzY3JlZW5SaWdodCk7XG4gIHJlc3VsdFszXSA9IE1hdGgubWF4KGZvdkJvdHRvbSwgc2NyZWVuQm90dG9tKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgdGFuLWFuZ2xlcyBmcm9tIHRoZSBtYXhpbXVtIEZPViBmb3IgdGhlIGxlZnQgZXllIGZvciB0aGVcbiAqIGN1cnJlbnQgZGV2aWNlIGFuZCBzY3JlZW4gcGFyYW1ldGVycywgYXNzdW1pbmcgbm8gbGVuc2VzLlxuICovXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRMZWZ0RXllTm9MZW5zVGFuQW5nbGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlO1xuICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjtcblxuICB2YXIgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcbiAgLy8gVGFuLWFuZ2xlcyBmcm9tIHRoZSBtYXggRk9WLlxuICB2YXIgZm92TGVmdCA9IGRpc3RvcnRpb24uZGlzdG9ydEludmVyc2UoTWF0aC50YW4oLU1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdikpO1xuICB2YXIgZm92VG9wID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbihNYXRoVXRpbC5kZWdUb1JhZCAqIHZpZXdlci5mb3YpKTtcbiAgdmFyIGZvdlJpZ2h0ID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbihNYXRoVXRpbC5kZWdUb1JhZCAqIHZpZXdlci5mb3YpKTtcbiAgdmFyIGZvdkJvdHRvbSA9IGRpc3RvcnRpb24uZGlzdG9ydEludmVyc2UoTWF0aC50YW4oLU1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdikpO1xuICAvLyBWaWV3cG9ydCBzaXplLlxuICB2YXIgaGFsZldpZHRoID0gZGV2aWNlLndpZHRoTWV0ZXJzIC8gNDtcbiAgdmFyIGhhbGZIZWlnaHQgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC8gMjtcbiAgLy8gVmlld3BvcnQgY2VudGVyLCBtZWFzdXJlZCBmcm9tIGxlZnQgbGVucyBwb3NpdGlvbi5cbiAgdmFyIHZlcnRpY2FsTGVuc09mZnNldCA9ICh2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnMgLSBoYWxmSGVpZ2h0KTtcbiAgdmFyIGNlbnRlclggPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyIC0gaGFsZldpZHRoO1xuICB2YXIgY2VudGVyWSA9IC12ZXJ0aWNhbExlbnNPZmZzZXQ7XG4gIHZhciBjZW50ZXJaID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTtcbiAgLy8gVGFuLWFuZ2xlcyBvZiB0aGUgdmlld3BvcnQgZWRnZXMsIGFzIHNlZW4gdGhyb3VnaCB0aGUgbGVucy5cbiAgdmFyIHNjcmVlbkxlZnQgPSAoY2VudGVyWCAtIGhhbGZXaWR0aCkgLyBjZW50ZXJaO1xuICB2YXIgc2NyZWVuVG9wID0gKGNlbnRlclkgKyBoYWxmSGVpZ2h0KSAvIGNlbnRlclo7XG4gIHZhciBzY3JlZW5SaWdodCA9IChjZW50ZXJYICsgaGFsZldpZHRoKSAvIGNlbnRlclo7XG4gIHZhciBzY3JlZW5Cb3R0b20gPSAoY2VudGVyWSAtIGhhbGZIZWlnaHQpIC8gY2VudGVyWjtcbiAgLy8gQ29tcGFyZSB0aGUgdHdvIHNldHMgb2YgdGFuLWFuZ2xlcyBhbmQgdGFrZSB0aGUgdmFsdWUgY2xvc2VyIHRvIHplcm8gb24gZWFjaCBzaWRlLlxuICByZXN1bHRbMF0gPSBNYXRoLm1heChmb3ZMZWZ0LCBzY3JlZW5MZWZ0KTtcbiAgcmVzdWx0WzFdID0gTWF0aC5taW4oZm92VG9wLCBzY3JlZW5Ub3ApO1xuICByZXN1bHRbMl0gPSBNYXRoLm1pbihmb3ZSaWdodCwgc2NyZWVuUmlnaHQpO1xuICByZXN1bHRbM10gPSBNYXRoLm1heChmb3ZCb3R0b20sIHNjcmVlbkJvdHRvbSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNjcmVlbiByZWN0YW5nbGUgdmlzaWJsZSBmcm9tIHRoZSBsZWZ0IGV5ZSBmb3IgdGhlXG4gKiBjdXJyZW50IGRldmljZSBhbmQgc2NyZWVuIHBhcmFtZXRlcnMuXG4gKi9cbkRldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVWaXNpYmxlU2NyZWVuUmVjdCA9IGZ1bmN0aW9uKHVuZGlzdG9ydGVkRnJ1c3R1bSkge1xuICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7XG4gIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTtcblxuICB2YXIgZGlzdCA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7XG4gIHZhciBleWVYID0gKGRldmljZS53aWR0aE1ldGVycyAtIHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSkgLyAyO1xuICB2YXIgZXllWSA9IHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycztcbiAgdmFyIGxlZnQgPSAodW5kaXN0b3J0ZWRGcnVzdHVtWzBdICogZGlzdCArIGV5ZVgpIC8gZGV2aWNlLndpZHRoTWV0ZXJzO1xuICB2YXIgdG9wID0gKHVuZGlzdG9ydGVkRnJ1c3R1bVsxXSAqIGRpc3QgKyBleWVZKSAvIGRldmljZS5oZWlnaHRNZXRlcnM7XG4gIHZhciByaWdodCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMl0gKiBkaXN0ICsgZXllWCkgLyBkZXZpY2Uud2lkdGhNZXRlcnM7XG4gIHZhciBib3R0b20gPSAodW5kaXN0b3J0ZWRGcnVzdHVtWzNdICogZGlzdCArIGV5ZVkpIC8gZGV2aWNlLmhlaWdodE1ldGVycztcbiAgcmV0dXJuIHtcbiAgICB4OiBsZWZ0LFxuICAgIHk6IGJvdHRvbSxcbiAgICB3aWR0aDogcmlnaHQgLSBsZWZ0LFxuICAgIGhlaWdodDogdG9wIC0gYm90dG9tXG4gIH07XG59O1xuXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRGaWVsZE9mVmlld0xlZnRFeWUgPSBmdW5jdGlvbihvcHRfaXNVbmRpc3RvcnRlZCkge1xuICByZXR1cm4gb3B0X2lzVW5kaXN0b3J0ZWQgPyB0aGlzLmdldFVuZGlzdG9ydGVkRmllbGRPZlZpZXdMZWZ0RXllKCkgOlxuICAgICAgdGhpcy5nZXREaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUoKTtcbn07XG5cbkRldmljZUluZm8ucHJvdG90eXBlLmdldEZpZWxkT2ZWaWV3UmlnaHRFeWUgPSBmdW5jdGlvbihvcHRfaXNVbmRpc3RvcnRlZCkge1xuICB2YXIgZm92ID0gdGhpcy5nZXRGaWVsZE9mVmlld0xlZnRFeWUob3B0X2lzVW5kaXN0b3J0ZWQpO1xuICByZXR1cm4ge1xuICAgIGxlZnREZWdyZWVzOiBmb3YucmlnaHREZWdyZWVzLFxuICAgIHJpZ2h0RGVncmVlczogZm92LmxlZnREZWdyZWVzLFxuICAgIHVwRGVncmVlczogZm92LnVwRGVncmVlcyxcbiAgICBkb3duRGVncmVlczogZm92LmRvd25EZWdyZWVzXG4gIH07XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdW5kaXN0b3J0ZWQgZmllbGQgb2YgdmlldyBmb3IgdGhlIGxlZnQgZXllLlxuICovXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRVbmRpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcCA9IHRoaXMuZ2V0VW5kaXN0b3J0ZWRQYXJhbXNfKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0RGVncmVlczogTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4ocC5vdXRlckRpc3QpLFxuICAgIHJpZ2h0RGVncmVlczogTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4ocC5pbm5lckRpc3QpLFxuICAgIGRvd25EZWdyZWVzOiBNYXRoVXRpbC5yYWRUb0RlZyAqIE1hdGguYXRhbihwLmJvdHRvbURpc3QpLFxuICAgIHVwRGVncmVlczogTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4ocC50b3BEaXN0KVxuICB9O1xufTtcblxuRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0VW5kaXN0b3J0ZWRWaWV3cG9ydExlZnRFeWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHAgPSB0aGlzLmdldFVuZGlzdG9ydGVkUGFyYW1zXygpO1xuICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7XG4gIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTtcblxuICAvLyBEaXN0YW5jZXMgc3RvcmVkIGluIGxvY2FsIHZhcmlhYmxlcyBhcmUgaW4gdGFuLWFuZ2xlIHVuaXRzIHVubGVzcyBvdGhlcndpc2VcbiAgLy8gbm90ZWQuXG4gIHZhciBleWVUb1NjcmVlbkRpc3RhbmNlID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTtcbiAgdmFyIHNjcmVlbldpZHRoID0gZGV2aWNlLndpZHRoTWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTtcbiAgdmFyIHNjcmVlbkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlO1xuICB2YXIgeFB4UGVyVGFuQW5nbGUgPSBkZXZpY2Uud2lkdGggLyBzY3JlZW5XaWR0aDtcbiAgdmFyIHlQeFBlclRhbkFuZ2xlID0gZGV2aWNlLmhlaWdodCAvIHNjcmVlbkhlaWdodDtcblxuICB2YXIgeCA9IE1hdGgucm91bmQoKHAuZXllUG9zWCAtIHAub3V0ZXJEaXN0KSAqIHhQeFBlclRhbkFuZ2xlKTtcbiAgdmFyIHkgPSBNYXRoLnJvdW5kKChwLmV5ZVBvc1kgLSBwLmJvdHRvbURpc3QpICogeVB4UGVyVGFuQW5nbGUpO1xuICByZXR1cm4ge1xuICAgIHg6IHgsXG4gICAgeTogeSxcbiAgICB3aWR0aDogTWF0aC5yb3VuZCgocC5leWVQb3NYICsgcC5pbm5lckRpc3QpICogeFB4UGVyVGFuQW5nbGUpIC0geCxcbiAgICBoZWlnaHQ6IE1hdGgucm91bmQoKHAuZXllUG9zWSArIHAudG9wRGlzdCkgKiB5UHhQZXJUYW5BbmdsZSkgLSB5XG4gIH07XG59O1xuXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRVbmRpc3RvcnRlZFBhcmFtc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gIHZhciBkaXN0b3J0aW9uID0gdGhpcy5kaXN0b3J0aW9uO1xuXG4gIC8vIE1vc3Qgb2YgdGhlc2UgdmFyaWFibGVzIGluIHRhbi1hbmdsZSB1bml0cy5cbiAgdmFyIGV5ZVRvU2NyZWVuRGlzdGFuY2UgPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuICB2YXIgaGFsZkxlbnNEaXN0YW5jZSA9IHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAvIDIgLyBleWVUb1NjcmVlbkRpc3RhbmNlO1xuICB2YXIgc2NyZWVuV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlO1xuICB2YXIgc2NyZWVuSGVpZ2h0ID0gZGV2aWNlLmhlaWdodE1ldGVycyAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7XG5cbiAgdmFyIGV5ZVBvc1ggPSBzY3JlZW5XaWR0aCAvIDIgLSBoYWxmTGVuc0Rpc3RhbmNlO1xuICB2YXIgZXllUG9zWSA9ICh2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnMpIC8gZXllVG9TY3JlZW5EaXN0YW5jZTtcblxuICB2YXIgbWF4Rm92ID0gdmlld2VyLmZvdjtcbiAgdmFyIHZpZXdlck1heCA9IGRpc3RvcnRpb24uZGlzdG9ydEludmVyc2UoTWF0aC50YW4oTWF0aFV0aWwuZGVnVG9SYWQgKiBtYXhGb3YpKTtcbiAgdmFyIG91dGVyRGlzdCA9IE1hdGgubWluKGV5ZVBvc1gsIHZpZXdlck1heCk7XG4gIHZhciBpbm5lckRpc3QgPSBNYXRoLm1pbihoYWxmTGVuc0Rpc3RhbmNlLCB2aWV3ZXJNYXgpO1xuICB2YXIgYm90dG9tRGlzdCA9IE1hdGgubWluKGV5ZVBvc1ksIHZpZXdlck1heCk7XG4gIHZhciB0b3BEaXN0ID0gTWF0aC5taW4oc2NyZWVuSGVpZ2h0IC0gZXllUG9zWSwgdmlld2VyTWF4KTtcblxuICByZXR1cm4ge1xuICAgIG91dGVyRGlzdDogb3V0ZXJEaXN0LFxuICAgIGlubmVyRGlzdDogaW5uZXJEaXN0LFxuICAgIHRvcERpc3Q6IHRvcERpc3QsXG4gICAgYm90dG9tRGlzdDogYm90dG9tRGlzdCxcbiAgICBleWVQb3NYOiBleWVQb3NYLFxuICAgIGV5ZVBvc1k6IGV5ZVBvc1lcbiAgfTtcbn07XG5cblxuZnVuY3Rpb24gQ2FyZGJvYXJkVmlld2VyKHBhcmFtcykge1xuICAvLyBBIG1hY2hpbmUgcmVhZGFibGUgSUQuXG4gIHRoaXMuaWQgPSBwYXJhbXMuaWQ7XG4gIC8vIEEgaHVtYW4gcmVhZGFibGUgbGFiZWwuXG4gIHRoaXMubGFiZWwgPSBwYXJhbXMubGFiZWw7XG5cbiAgLy8gRmllbGQgb2YgdmlldyBpbiBkZWdyZWVzIChwZXIgc2lkZSkuXG4gIHRoaXMuZm92ID0gcGFyYW1zLmZvdjtcblxuICAvLyBEaXN0YW5jZSBiZXR3ZWVuIGxlbnMgY2VudGVycyBpbiBtZXRlcnMuXG4gIHRoaXMuaW50ZXJMZW5zRGlzdGFuY2UgPSBwYXJhbXMuaW50ZXJMZW5zRGlzdGFuY2U7XG4gIC8vIERpc3RhbmNlIGJldHdlZW4gdmlld2VyIGJhc2VsaW5lIGFuZCBsZW5zIGNlbnRlciBpbiBtZXRlcnMuXG4gIHRoaXMuYmFzZWxpbmVMZW5zRGlzdGFuY2UgPSBwYXJhbXMuYmFzZWxpbmVMZW5zRGlzdGFuY2U7XG4gIC8vIFNjcmVlbi10by1sZW5zIGRpc3RhbmNlIGluIG1ldGVycy5cbiAgdGhpcy5zY3JlZW5MZW5zRGlzdGFuY2UgPSBwYXJhbXMuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuXG4gIC8vIERpc3RvcnRpb24gY29lZmZpY2llbnRzLlxuICB0aGlzLmRpc3RvcnRpb25Db2VmZmljaWVudHMgPSBwYXJhbXMuZGlzdG9ydGlvbkNvZWZmaWNpZW50cztcbiAgLy8gSW52ZXJzZSBkaXN0b3J0aW9uIGNvZWZmaWNpZW50cy5cbiAgLy8gVE9ETzogQ2FsY3VsYXRlIHRoZXNlIGZyb20gZGlzdG9ydGlvbkNvZWZmaWNpZW50cyBpbiB0aGUgZnV0dXJlLlxuICB0aGlzLmludmVyc2VDb2VmZmljaWVudHMgPSBwYXJhbXMuaW52ZXJzZUNvZWZmaWNpZW50cztcbn1cblxuLy8gRXhwb3J0IHZpZXdlciBpbmZvcm1hdGlvbi5cbkRldmljZUluZm8uVmlld2VycyA9IFZpZXdlcnM7XG5tb2R1bGUuZXhwb3J0cyA9IERldmljZUluZm87XG5cbn0se1wiLi9kaXN0b3J0aW9uL2Rpc3RvcnRpb24uanNcIjoxMCxcIi4vbWF0aC11dGlsLmpzXCI6MTQsXCIuL3V0aWwuanNcIjoyMn1dLDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBWUkRpc3BsYXkgPSBfZGVyZXFfKCcuL2Jhc2UuanMnKS5WUkRpc3BsYXk7XG52YXIgSE1EVlJEZXZpY2UgPSBfZGVyZXFfKCcuL2Jhc2UuanMnKS5ITURWUkRldmljZTtcbnZhciBQb3NpdGlvblNlbnNvclZSRGV2aWNlID0gX2RlcmVxXygnLi9iYXNlLmpzJykuUG9zaXRpb25TZW5zb3JWUkRldmljZTtcblxuLyoqXG4gKiBXcmFwcyBhIFZSRGlzcGxheSBhbmQgZXhwb3NlcyBpdCBhcyBhIEhNRFZSRGV2aWNlXG4gKi9cbmZ1bmN0aW9uIFZSRGlzcGxheUhNRERldmljZShkaXNwbGF5KSB7XG4gIHRoaXMuZGlzcGxheSA9IGRpc3BsYXk7XG5cbiAgdGhpcy5oYXJkd2FyZVVuaXRJZCA9IGRpc3BsYXkuZGlzcGxheUlkO1xuICB0aGlzLmRldmljZUlkID0gJ3dlYnZyLXBvbHlmaWxsOkhNRDonICsgZGlzcGxheS5kaXNwbGF5SWQ7XG4gIHRoaXMuZGV2aWNlTmFtZSA9IGRpc3BsYXkuZGlzcGxheU5hbWUgKyAnIChITUQpJztcbn1cblZSRGlzcGxheUhNRERldmljZS5wcm90b3R5cGUgPSBuZXcgSE1EVlJEZXZpY2UoKTtcblxuVlJEaXNwbGF5SE1ERGV2aWNlLnByb3RvdHlwZS5nZXRFeWVQYXJhbWV0ZXJzID0gZnVuY3Rpb24od2hpY2hFeWUpIHtcbiAgdmFyIGV5ZVBhcmFtZXRlcnMgPSB0aGlzLmRpc3BsYXkuZ2V0RXllUGFyYW1ldGVycyh3aGljaEV5ZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50RmllbGRPZlZpZXc6IGV5ZVBhcmFtZXRlcnMuZmllbGRPZlZpZXcsXG4gICAgbWF4aW11bUZpZWxkT2ZWaWV3OiBleWVQYXJhbWV0ZXJzLmZpZWxkT2ZWaWV3LFxuICAgIG1pbmltdW1GaWVsZE9mVmlldzogZXllUGFyYW1ldGVycy5maWVsZE9mVmlldyxcbiAgICByZWNvbW1lbmRlZEZpZWxkT2ZWaWV3OiBleWVQYXJhbWV0ZXJzLmZpZWxkT2ZWaWV3LFxuICAgIGV5ZVRyYW5zbGF0aW9uOiB7IHg6IGV5ZVBhcmFtZXRlcnMub2Zmc2V0WzBdLCB5OiBleWVQYXJhbWV0ZXJzLm9mZnNldFsxXSwgejogZXllUGFyYW1ldGVycy5vZmZzZXRbMl0gfSxcbiAgICByZW5kZXJSZWN0OiB7XG4gICAgICB4OiAod2hpY2hFeWUgPT0gJ3JpZ2h0JykgPyBleWVQYXJhbWV0ZXJzLnJlbmRlcldpZHRoIDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogZXllUGFyYW1ldGVycy5yZW5kZXJXaWR0aCxcbiAgICAgIGhlaWdodDogZXllUGFyYW1ldGVycy5yZW5kZXJIZWlnaHRcbiAgICB9XG4gIH07XG59O1xuXG5WUkRpc3BsYXlITUREZXZpY2UucHJvdG90eXBlLnNldEZpZWxkT2ZWaWV3ID1cbiAgICBmdW5jdGlvbihvcHRfZm92TGVmdCwgb3B0X2ZvdlJpZ2h0LCBvcHRfek5lYXIsIG9wdF96RmFyKSB7XG4gIC8vIE5vdCBzdXBwb3J0ZWQuIGdldEV5ZVBhcmFtZXRlcnMgcmVwb3J0cyB0aGF0IHRoZSBtaW4sIG1heCwgYW5kIHJlY29tbWVuZGVkXG4gIC8vIEZvViBpcyBhbGwgdGhlIHNhbWUsIHNvIG5vIGFkanVzdG1lbnQgY2FuIGJlIG1hZGUuXG59O1xuXG4vLyBUT0RPOiBOZWVkIHRvIGhvb2sgcmVxdWVzdEZ1bGxzY3JlZW4gdG8gc2VlIGlmIGEgd3JhcHBlZCBWUkRpc3BsYXkgd2FzIHBhc3NlZFxuLy8gaW4gYXMgYW4gb3B0aW9uLiBJZiBzbyB3ZSBzaG91bGQgcHJldmVudCB0aGUgZGVmYXVsdCBmdWxsc2NyZWVuIGJlaGF2aW9yIGFuZFxuLy8gY2FsbCBWUkRpc3BsYXkucmVxdWVzdFByZXNlbnQgaW5zdGVhZC5cblxuLyoqXG4gKiBXcmFwcyBhIFZSRGlzcGxheSBhbmQgZXhwb3NlcyBpdCBhcyBhIFBvc2l0aW9uU2Vuc29yVlJEZXZpY2VcbiAqL1xuZnVuY3Rpb24gVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2UoZGlzcGxheSkge1xuICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5O1xuXG4gIHRoaXMuaGFyZHdhcmVVbml0SWQgPSBkaXNwbGF5LmRpc3BsYXlJZDtcbiAgdGhpcy5kZXZpY2VJZCA9ICd3ZWJ2ci1wb2x5ZmlsbDpQb3NpdGlvblNlbnNvcjogJyArIGRpc3BsYXkuZGlzcGxheUlkO1xuICB0aGlzLmRldmljZU5hbWUgPSBkaXNwbGF5LmRpc3BsYXlOYW1lICsgJyAoUG9zaXRpb25TZW5zb3IpJztcbn1cblZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlLnByb3RvdHlwZSA9IG5ldyBQb3NpdGlvblNlbnNvclZSRGV2aWNlKCk7XG5cblZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcG9zZSA9IHRoaXMuZGlzcGxheS5nZXRQb3NlKCk7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IHBvc2UucG9zaXRpb24gPyB7IHg6IHBvc2UucG9zaXRpb25bMF0sIHk6IHBvc2UucG9zaXRpb25bMV0sIHo6IHBvc2UucG9zaXRpb25bMl0gfSA6IG51bGwsXG4gICAgb3JpZW50YXRpb246IHBvc2Uub3JpZW50YXRpb24gPyB7IHg6IHBvc2Uub3JpZW50YXRpb25bMF0sIHk6IHBvc2Uub3JpZW50YXRpb25bMV0sIHo6IHBvc2Uub3JpZW50YXRpb25bMl0sIHc6IHBvc2Uub3JpZW50YXRpb25bM10gfSA6IG51bGwsXG4gICAgbGluZWFyVmVsb2NpdHk6IG51bGwsXG4gICAgbGluZWFyQWNjZWxlcmF0aW9uOiBudWxsLFxuICAgIGFuZ3VsYXJWZWxvY2l0eTogbnVsbCxcbiAgICBhbmd1bGFyQWNjZWxlcmF0aW9uOiBudWxsXG4gIH07XG59O1xuXG5WUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZS5wcm90b3R5cGUucmVzZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wb3NpdGlvbkRldmljZS5yZXNldFBvc2UoKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMuVlJEaXNwbGF5SE1ERGV2aWNlID0gVlJEaXNwbGF5SE1ERGV2aWNlO1xubW9kdWxlLmV4cG9ydHMuVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2UgPSBWUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZTtcblxuXG59LHtcIi4vYmFzZS5qc1wiOjN9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFRPRE8oc211cyk6IEltcGxlbWVudCBjb2VmZmljaWVudCBpbnZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIERpc3RvcnRpb24oY29lZmZpY2llbnRzKSB7XG4gIHRoaXMuY29lZmZpY2llbnRzID0gY29lZmZpY2llbnRzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2UgZGlzdG9ydGlvbiBmb3IgYSByYWRpdXMuXG4gKiA8L3A+PHA+XG4gKiBBbGxvd3MgdG8gY29tcHV0ZSB0aGUgb3JpZ2luYWwgdW5kaXN0b3J0ZWQgcmFkaXVzIGZyb20gYSBkaXN0b3J0ZWQgb25lLlxuICogU2VlIGFsc28gZ2V0QXBwcm94aW1hdGVJbnZlcnNlRGlzdG9ydGlvbigpIGZvciBhIGZhc3RlciBidXQgcG90ZW50aWFsbHlcbiAqIGxlc3MgYWNjdXJhdGUgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgRGlzdG9ydGVkIHJhZGl1cyBmcm9tIHRoZSBsZW5zIGNlbnRlciBpbiB0YW4tYW5nbGUgdW5pdHMuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSB1bmRpc3RvcnRlZCByYWRpdXMgaW4gdGFuLWFuZ2xlIHVuaXRzLlxuICovXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0SW52ZXJzZSA9IGZ1bmN0aW9uKHJhZGl1cykge1xuICAvLyBTZWNhbnQgbWV0aG9kLlxuICB2YXIgcjAgPSAwO1xuICB2YXIgcjEgPSAxO1xuICB2YXIgZHIwID0gcmFkaXVzIC0gdGhpcy5kaXN0b3J0KHIwKTtcbiAgd2hpbGUgKE1hdGguYWJzKHIxIC0gcjApID4gMC4wMDAxIC8qKiAwLjFtbSAqLykge1xuICAgIHZhciBkcjEgPSByYWRpdXMgLSB0aGlzLmRpc3RvcnQocjEpO1xuICAgIHZhciByMiA9IHIxIC0gZHIxICogKChyMSAtIHIwKSAvIChkcjEgLSBkcjApKTtcbiAgICByMCA9IHIxO1xuICAgIHIxID0gcjI7XG4gICAgZHIwID0gZHIxO1xuICB9XG4gIHJldHVybiByMTtcbn07XG5cbi8qKlxuICogRGlzdG9ydHMgYSByYWRpdXMgYnkgaXRzIGRpc3RvcnRpb24gZmFjdG9yIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgbGVuc2VzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgUmFkaXVzIGZyb20gdGhlIGxlbnMgY2VudGVyIGluIHRhbi1hbmdsZSB1bml0cy5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGRpc3RvcnRlZCByYWRpdXMgaW4gdGFuLWFuZ2xlIHVuaXRzLlxuICovXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0ID0gZnVuY3Rpb24ocmFkaXVzKSB7XG4gIHZhciByMiA9IHJhZGl1cyAqIHJhZGl1cztcbiAgdmFyIHJldCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXQgPSByMiAqIChyZXQgKyB0aGlzLmNvZWZmaWNpZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChyZXQgKyAxKSAqIHJhZGl1cztcbn07XG5cbi8vIEZ1bmN0aW9ucyBiZWxvdyByb3VnaGx5IHBvcnRlZCBmcm9tXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlc2FtcGxlcy9jYXJkYm9hcmQtdW5pdHkvYmxvYi9tYXN0ZXIvQ2FyZGJvYXJkL1NjcmlwdHMvQ2FyZGJvYXJkUHJvZmlsZS5jcyNMNDEyXG5cbi8vIFNvbHZlcyBhIHNtYWxsIGxpbmVhciBlcXVhdGlvbiB2aWEgZGVzdHJ1Y3RpdmUgZ2F1c3NpYW5cbi8vIGVsaW1pbmF0aW9uIGFuZCBiYWNrIHN1YnN0aXR1dGlvbi4gIFRoaXMgaXNuJ3QgZ2VuZXJpYyBudW1lcmljXG4vLyBjb2RlLCBpdCdzIGp1c3QgYSBxdWljayBoYWNrIHRvIHdvcmsgd2l0aCB0aGUgZ2VuZXJhbGx5XG4vLyB3ZWxsLWJlaGF2ZWQgc3ltbWV0cmljIG1hdHJpY2VzIGZvciBsZWFzdC1zcXVhcmVzIGZpdHRpbmcuXG4vLyBOb3QgaW50ZW5kZWQgZm9yIHJldXNlLlxuLy9cbi8vIEBwYXJhbSBhIElucHV0IHBvc2l0aXZlIGRlZmluaXRlIHN5bW1ldHJpY2FsIG1hdHJpeC4gRGVzdHJveWVkXG4vLyAgICAgZHVyaW5nIGNhbGN1bGF0aW9uLlxuLy8gQHBhcmFtIHkgSW5wdXQgcmlnaHQtaGFuZC1zaWRlIHZhbHVlcy4gRGVzdHJveWVkIGR1cmluZyBjYWxjdWxhdGlvbi5cbi8vIEByZXR1cm4gUmVzdWx0aW5nIHggdmFsdWUgdmVjdG9yLlxuLy9cbkRpc3RvcnRpb24ucHJvdG90eXBlLnNvbHZlTGluZWFyXyA9IGZ1bmN0aW9uKGEsIHkpIHtcbiAgdmFyIG4gPSBhLmxlbmd0aDtcblxuICAvLyBHYXVzc2lhbiBlbGltaW5hdGlvbiAobm8gcm93IGV4Y2hhbmdlKSB0byB0cmlhbmd1bGFyIG1hdHJpeC5cbiAgLy8gVGhlIGlucHV0IG1hdHJpeCBpcyBhIEFeVCBBIHByb2R1Y3Qgd2hpY2ggc2hvdWxkIGJlIGEgcG9zaXRpdmVcbiAgLy8gZGVmaW5pdGUgc3ltbWV0cmljYWwgbWF0cml4LCBhbmQgaWYgSSByZW1lbWJlciBteSBsaW5lYXJcbiAgLy8gYWxnZWJyYSByaWdodCB0aGlzIGltcGxpZXMgdGhhdCB0aGUgcGl2b3RzIHdpbGwgYmUgbm9uemVybyBhbmRcbiAgLy8gY2FsY3VsYXRpb25zIHN1ZmZpY2llbnRseSBhY2N1cmF0ZSB3aXRob3V0IG5lZWRpbmcgcm93XG4gIC8vIGV4Y2hhbmdlLlxuICBmb3IgKHZhciBqID0gMDsgaiA8IG4gLSAxOyArK2opIHtcbiAgICBmb3IgKHZhciBrID0gaiArIDE7IGsgPCBuOyArK2spIHtcbiAgICAgIHZhciBwID0gYVtqXVtrXSAvIGFbal1bal07XG4gICAgICBmb3IgKHZhciBpID0gaiArIDE7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgYVtpXVtrXSAtPSBwICogYVtpXVtqXTtcbiAgICAgIH1cbiAgICAgIHlba10gLT0gcCAqIHlbal07XG4gICAgfVxuICB9XG4gIC8vIEZyb20gdGhpcyBwb2ludCBvbiwgb25seSB0aGUgbWF0cml4IGVsZW1lbnRzIGFbal1baV0gd2l0aCBpPj1qIGFyZVxuICAvLyB2YWxpZC4gVGhlIGVsaW1pbmF0aW9uIGRvZXNuJ3QgZmlsbCBpbiBlbGltaW5hdGVkIDAgdmFsdWVzLlxuXG4gIHZhciB4ID0gbmV3IEFycmF5KG4pO1xuXG4gIC8vIEJhY2sgc3Vic3RpdHV0aW9uLlxuICBmb3IgKHZhciBqID0gbiAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgdmFyIHYgPSB5W2pdO1xuICAgIGZvciAodmFyIGkgPSBqICsgMTsgaSA8IG47ICsraSkge1xuICAgICAgdiAtPSBhW2ldW2pdICogeFtpXTtcbiAgICB9XG4gICAgeFtqXSA9IHYgLyBhW2pdW2pdO1xuICB9XG5cbiAgcmV0dXJuIHg7XG59O1xuXG4vLyBTb2x2ZXMgYSBsZWFzdC1zcXVhcmVzIG1hdHJpeCBlcXVhdGlvbi4gIEdpdmVuIHRoZSBlcXVhdGlvbiBBICogeCA9IHksIGNhbGN1bGF0ZSB0aGVcbi8vIGxlYXN0LXNxdWFyZSBmaXQgeCA9IGludmVyc2UoQSAqIHRyYW5zcG9zZShBKSkgKiB0cmFuc3Bvc2UoQSkgKiB5LiAgVGhlIHdheSB0aGlzIHdvcmtzXG4vLyBpcyB0aGF0LCB3aGlsZSBBIGlzIHR5cGljYWxseSBub3QgYSBzcXVhcmUgbWF0cml4IChhbmQgaGVuY2Ugbm90IGludmVydGlibGUpLCBBICogdHJhbnNwb3NlKEEpXG4vLyBpcyBhbHdheXMgc3F1YXJlLiAgVGhhdCBpczpcbi8vICAgQSAqIHggPSB5XG4vLyAgIHRyYW5zcG9zZShBKSAqIChBICogeCkgPSB0cmFuc3Bvc2UoQSkgKiB5ICAgPC0gbXVsdGlwbHkgYm90aCBzaWRlcyBieSB0cmFuc3Bvc2UoQSlcbi8vICAgKHRyYW5zcG9zZShBKSAqIEEpICogeCA9IHRyYW5zcG9zZShBKSAqIHkgICA8LSBhc3NvY2lhdGl2aXR5XG4vLyAgIHggPSBpbnZlcnNlKHRyYW5zcG9zZShBKSAqIEEpICogdHJhbnNwb3NlKEEpICogeSAgPC0gc29sdmUgZm9yIHhcbi8vIE1hdHJpeCBBJ3Mgcm93IGNvdW50IChmaXJzdCBpbmRleCkgbXVzdCBtYXRjaCB5J3MgdmFsdWUgY291bnQuICBBJ3MgY29sdW1uIGNvdW50IChzZWNvbmQgaW5kZXgpXG4vLyBkZXRlcm1pbmVzIHRoZSBsZW5ndGggb2YgdGhlIHJlc3VsdCB2ZWN0b3IgeC5cbkRpc3RvcnRpb24ucHJvdG90eXBlLnNvbHZlTGVhc3RTcXVhcmVzXyA9IGZ1bmN0aW9uKG1hdEEsIHZlY1kpIHtcbiAgdmFyIGksIGosIGssIHN1bTtcbiAgdmFyIG51bVNhbXBsZXMgPSBtYXRBLmxlbmd0aDtcbiAgdmFyIG51bUNvZWZmaWNpZW50cyA9IG1hdEFbMF0ubGVuZ3RoO1xuICBpZiAobnVtU2FtcGxlcyAhPSB2ZWNZLkxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1hdHJpeCAvIHZlY3RvciBkaW1lbnNpb24gbWlzbWF0Y2hcIik7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdHJhbnNwb3NlKEEpICogQVxuICB2YXIgbWF0QVRBID0gbmV3IEFycmF5KG51bUNvZWZmaWNpZW50cyk7XG4gIGZvciAoayA9IDA7IGsgPCBudW1Db2VmZmljaWVudHM7ICsraykge1xuICAgIG1hdEFUQVtrXSA9IG5ldyBBcnJheShudW1Db2VmZmljaWVudHMpO1xuICAgIGZvciAoaiA9IDA7IGogPCBudW1Db2VmZmljaWVudHM7ICsraikge1xuICAgICAgc3VtID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1TYW1wbGVzOyArK2kpIHtcbiAgICAgICAgc3VtICs9IG1hdEFbal1baV0gKiBtYXRBW2tdW2ldO1xuICAgICAgfVxuICAgICAgbWF0QVRBW2tdW2pdID0gc3VtO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0cmFuc3Bvc2UoQSkgKiB5XG4gIHZhciB2ZWNBVFkgPSBuZXcgQXJyYXkobnVtQ29lZmZpY2llbnRzKTtcbiAgZm9yIChqID0gMDsgaiA8IG51bUNvZWZmaWNpZW50czsgKytqKSB7XG4gICAgc3VtID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtU2FtcGxlczsgKytpKSB7XG4gICAgICBzdW0gKz0gbWF0QVtqXVtpXSAqIHZlY1lbaV07XG4gICAgfVxuICAgIHZlY0FUWVtqXSA9IHN1bTtcbiAgfVxuXG4gIC8vIE5vdyBzb2x2ZSAoQSAqIHRyYW5zcG9zZShBKSkgKiB4ID0gdHJhbnNwb3NlKEEpICogeS5cbiAgcmV0dXJuIHRoaXMuc29sdmVMaW5lYXJfKG1hdEFUQSwgdmVjQVRZKTtcbn07XG5cbi8vLyBDYWxjdWxhdGVzIGFuIGFwcHJveGltYXRlIGludmVyc2UgdG8gdGhlIGdpdmVuIHJhZGlhbCBkaXN0b3J0aW9uIHBhcmFtZXRlcnMuXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5hcHByb3hpbWF0ZUludmVyc2UgPSBmdW5jdGlvbihtYXhSYWRpdXMsIG51bVNhbXBsZXMpIHtcbiAgbWF4UmFkaXVzID0gbWF4UmFkaXVzIHx8IDE7XG4gIG51bVNhbXBsZXMgPSBudW1TYW1wbGVzIHx8IDEwMDtcbiAgdmFyIG51bUNvZWZmaWNpZW50cyA9IDY7XG4gIHZhciBpLCBqO1xuXG4gIC8vIFIgKyBLMSpSXjMgKyBLMipSXjUgPSByLCB3aXRoIFIgPSBycCA9IGRpc3RvcnQocilcbiAgLy8gUmVwZWF0aW5nIGZvciBudW1TYW1wbGVzOlxuICAvLyAgIFsgUjBeMywgUjBeNSBdICogWyBLMSBdID0gWyByMCAtIFIwIF1cbiAgLy8gICBbIFIxXjMsIFIxXjUgXSAgIFsgSzIgXSAgIFsgcjEgLSBSMSBdXG4gIC8vICAgWyBSMl4zLCBSMl41IF0gICAgICAgICAgICBbIHIyIC0gUjIgXVxuICAvLyAgIFsgZXRjLi4uIF0gICAgICAgICAgICAgICAgWyBldGMuLi4gXVxuICAvLyBUaGF0IGlzOlxuICAvLyAgIG1hdEEgKiBbSzEsIEsyXSA9IHlcbiAgLy8gU29sdmU6XG4gIC8vICAgW0sxLCBLMl0gPSBpbnZlcnNlKHRyYW5zcG9zZShtYXRBKSAqIG1hdEEpICogdHJhbnNwb3NlKG1hdEEpICogeVxuICB2YXIgbWF0QSA9IG5ldyBBcnJheShudW1Db2VmZmljaWVudHMpO1xuICBmb3IgKGogPSAwOyBqIDwgbnVtQ29lZmZpY2llbnRzOyArK2opIHtcbiAgICBtYXRBW2pdID0gbmV3IEFycmF5KG51bVNhbXBsZXMpO1xuICB9XG4gIHZhciB2ZWNZID0gbmV3IEFycmF5KG51bVNhbXBsZXMpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBudW1TYW1wbGVzOyArK2kpIHtcbiAgICB2YXIgciA9IG1heFJhZGl1cyAqIChpICsgMSkgLyBudW1TYW1wbGVzO1xuICAgIHZhciBycCA9IHRoaXMuZGlzdG9ydChyKTtcbiAgICB2YXIgdiA9IHJwO1xuICAgIGZvciAoaiA9IDA7IGogPCBudW1Db2VmZmljaWVudHM7ICsraikge1xuICAgICAgdiAqPSBycCAqIHJwO1xuICAgICAgbWF0QVtqXVtpXSA9IHY7XG4gICAgfVxuICAgIHZlY1lbaV0gPSByIC0gcnA7XG4gIH1cblxuICB2YXIgaW52ZXJzZUNvZWZmaWNpZW50cyA9IHRoaXMuc29sdmVMZWFzdFNxdWFyZXNfKG1hdEEsIHZlY1kpO1xuXG4gIHJldHVybiBuZXcgRGlzdG9ydGlvbihpbnZlcnNlQ29lZmZpY2llbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGlzdG9ydGlvbjtcblxufSx7fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBEUERCIGNhY2hlLlxuICovXG52YXIgRFBEQl9DQUNIRSA9IHtcbiAgXCJmb3JtYXRcIjogMSxcbiAgXCJsYXN0X3VwZGF0ZWRcIjogXCIyMDE2LTAxLTIwVDAwOjE4OjM1WlwiLFxuICBcImRldmljZXNcIjogW1xuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcImFzdXMvKi9OZXh1cyA3LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgN1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzIwLjgsIDMyMy4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiYXN1cy8qL0FTVVNfWjAwQUQvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJBU1VTX1owMEFEXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MDMuMCwgNDA0LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiR29vZ2xlLy9QaXhlbCBYTC9cIiB9LFxuICAgICAgeyBcInVhXCI6IFwiUGl4ZWwgWExcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbNTM3LjksIDUzM10sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkdvb2dsZS8vUGl4ZWwvXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlBpeGVsXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWzQzMi42LCA0MzYuN10sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkhUQy8qL0hUQzY0MzVMVlcvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJIVEM2NDM1TFZXXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDkuNywgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiSFRDLyovSFRDIE9uZSBYTC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkhUQyBPbmUgWExcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMxNS4zLCAzMTQuNiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJodGMvKi9OZXh1cyA5LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgOVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDI4OS4wLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkhUQy8qL0hUQyBPbmUgTTkvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJIVEMgT25lIE05XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDIuNSwgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJIVEMvKi9IVEMgT25lX004LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiSFRDIE9uZV9NOFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDQ5LjcsIDQ0Ny40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiSFRDLyovSFRDIE9uZS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkhUQyBPbmVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiA0NzIuOCxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiSHVhd2VpLyovTmV4dXMgNlAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJOZXh1cyA2UFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTE1LjEsIDUxOC4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL05leHVzIDVYLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgNVhcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQyMi4wLCA0MTkuOSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9MR01TMzQ1LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTEdNUzM0NVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjIxLjcsIDIxOS4xIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTEctRDgwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkxHLUQ4MDBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQyMi4wLCA0MjQuMSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL0xHLUQ4NTAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJMRy1EODUwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MzcuOSwgNTQxLjkgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9WUzk4NSA0Ry8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlZTOTg1IDRHXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MzcuOSwgNTM1LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTmV4dXMgNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIk5leHVzIDUgXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDIuNCwgNDQ0LjggXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTmV4dXMgNC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIk5leHVzIDRcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMxOS44LCAzMTguNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9MRy1QNzY5LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTEctUDc2OVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjQwLjYsIDI0Ny41IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL0xHTVMzMjMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJMR01TMzIzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyMDYuNiwgMjA0LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTEdMUzk5Ni8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkxHTFM5OTZcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQwMy40LCA0MDEuNSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJNaWNyb21heC8qLzQ1NjBNTVgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCI0NTYwTU1YXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNDAuMCwgMjE5LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTWljcm9tYXgvKi9BMjUwLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTWljcm9tYXggQTI1MFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDgwLjAsIDQ0Ni40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIk1pY3JvbWF4LyovTWljcm9tYXggQVE0NTAxLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTWljcm9tYXggQVE0NTAxXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjQwLjAsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9EUk9JRCBSQVpSLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiRFJPSUQgUkFaUlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzY4LjEsIDI1Ni43IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQ4MzBDLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQ4MzBDXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNTQuMCwgMjU1LjkgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDEwMjEvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDEwMjFcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI1NC4wLCAyNTYuNyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDIzLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDIzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNTQuMCwgMjU2LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTAyOC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTAyOFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzI2LjYsIDMyNy42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDM0LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDM0XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzMjYuNiwgMzI4LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTA1My8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTA1M1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzE1LjMsIDMxNi4xIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxNTYyLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxNTYyXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MDMuNCwgNDAyLjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9OZXh1cyA2LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgNiBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ5NC4zLCA0ODkuNyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTA2My8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTA2M1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjk1LjAsIDI5Ni42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDY0LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDY0XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyOTUuMCwgMjk1LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTA5Mi8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTA5MlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDIyLjAsIDQyNC4xIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDEwOTUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDEwOTVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQyMi4wLCA0MjMuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL0c0LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTW90byBHICg0KVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDQwMS4wLFxuICAgIFwiYndcIjogNCxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJPbmVQbHVzLyovQTAwMDEvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJBMDAwMVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDAzLjQsIDQwMS4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIk9uZVBsdXMvKi9PTkUgRTEwMDUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJPTkUgRTEwMDVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0Mi40LCA0NDEuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJPbmVQbHVzLyovT05FIEEyMDA1LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiT05FIEEyMDA1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzOTEuOSwgNDA1LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiT1BQTy8qL1g5MDkvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYOTA5XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDIuNCwgNDQ0LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5MDgyLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiR1QtSTkwODJcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDE4NC43LCAxODUuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzM2MFAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HMzYwUFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMTk2LjcsIDIwNS40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9OZXh1cyBTLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgU1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjM0LjUsIDIyOS44IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1JOTMwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MzAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzMDQuOCwgMzAzLjkgXSxcbiAgICBcImJ3XCI6IDUsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tVDIzME5VLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tVDIzME5VXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjE2LjAsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NHSC1UMzk5LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU0dILVQzOTlcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDIxNy43LCAyMzEuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tTjkwMDUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1OOTAwNVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzg2LjQsIDM4Ny4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NBTVNVTkctU00tTjkwMEEvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTQU1TVU5HLVNNLU45MDBBXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzODYuNCwgMzg3LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5NTAwLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiR1QtSTk1MDBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0Mi41LCA0NDMuMyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1JOTUwNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5NTA1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogNDM5LjQsXG4gICAgXCJid1wiOiA0LFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HOTAwRi8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc5MDBGXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MTUuNiwgNDMxLjYgXSxcbiAgICBcImJ3XCI6IDUsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MDBNLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkwME1cIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQxNS42LCA0MzEuNiBdLFxuICAgIFwiYndcIjogNSxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzgwMEYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HODAwRlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDMyNi44LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkwNlMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTA2U1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTYyLjcsIDU3Mi40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1JOTMwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MzAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzMDYuNywgMzA0LjggXSxcbiAgICBcImJ3XCI6IDUsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLVQ1MzUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1UNTM1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAxNDIuNiwgMTM2LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tTjkyMEMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1OOTIwQ1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTE1LjEsIDUxOC40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1OOTIwVzgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1OOTIwVzhcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDUxNS4xLCA1MTguNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcbiAgICBcbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5MzAwSS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MzAwSVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzA0LjgsIDMwNS44IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1JOTE5NS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MTk1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNDkuNCwgMjU2LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU1BILUw1MjAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTUEgtTDUyMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjQ5LjQsIDI1NS45IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TQU1TVU5HLVNHSC1JNzE3LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU0FNU1VORy1TR0gtSTcxN1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDI4NS44LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU1BILUQ3MTAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTUEgtRDcxMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjE3LjcsIDIwNC4yIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1ONzEwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULU43MTAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjY1LjEsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TQ0gtSTYwNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNDSC1JNjA1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjY1LjEsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HYWxheHkgTmV4dXMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJHYWxheHkgTmV4dXNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMxNS4zLCAzMTQuMiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tTjkxMEgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1OOTEwSFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTE1LjEsIDUxOC4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1OOTEwQy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLU45MTBDXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MTUuMiwgNTIwLjIgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzEzME0vKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HMTMwTVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMTY1LjksIDE2NC44IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MjhJLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkyOElcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDUxNS4xLCA1MTguNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkyMEYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTIwRlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDU4MC42LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HOTIwUC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc5MjBQXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MjIuNSwgNTc3LjAgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MjVGLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkyNUZcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiA1ODAuNixcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkyNVYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTI1VlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTIyLjUsIDU3Ni42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HOTM1Ri8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc5MzVGXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogNTM0LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIlNvbnkvKi9DNjkwMy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkM2OTAzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDIuNSwgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJTb255LyovRDY2NTMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJENjY1M1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDI4LjYsIDQyNy42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIlNvbnkvKi9FNjY1My8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkU2NjUzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MjguNiwgNDI1LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiU29ueS8qL0U2ODUzLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiRTY4NTNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQwMy40LCA0MDEuOSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJTb255LyovU0dQMzIxLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU0dQMzIxXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyMjQuNywgMjI0LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJUQ1QvKi9BTENBVEVMIE9ORSBUT1VDSCBGaWVyY2UvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJBTENBVEVMIE9ORSBUT1VDSCBGaWVyY2VcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI0MC4wLCAyNDcuNSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJUSEwvKi90aGwgNTAwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcInRobCA1MDAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0ODAuMCwgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiWlRFLyovWlRFIEJsYWRlIEwyLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWlRFIEJsYWRlIEwyXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjQwLjAsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgNjQwLCA5NjAgXSB9IF0sXG4gICAgXCJkcGlcIjogWyAzMjUuMSwgMzI4LjQgXSxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgNjQwLCAxMTM2IF0gfSBdLFxuICAgIFwiZHBpXCI6IFsgMzE3LjEsIDMyMC4yIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJpb3NcIixcbiAgICBcInJ1bGVzXCI6IFsgeyBcInJlc1wiOiBbIDc1MCwgMTMzNCBdIH0gXSxcbiAgICBcImRwaVwiOiAzMjYuNCxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgMTI0MiwgMjIwOCBdIH0gXSxcbiAgICBcImRwaVwiOiBbIDQ1My42LCA0NTguNCBdLFxuICAgIFwiYndcIjogNCxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiaW9zXCIsXG4gICAgXCJydWxlc1wiOiBbIHsgXCJyZXNcIjogWyAxMTI1LCAyMDAxIF0gfSBdLFxuICAgIFwiZHBpXCI6IFsgNDEwLjksIDQxNS40IF0sXG4gICAgXCJid1wiOiA0LFxuICAgIFwiYWNcIjogMTAwMFxuICB9XG5dfTtcblxubW9kdWxlLmV4cG9ydHMgPSBEUERCX0NBQ0hFO1xuXG59LHt9XSwxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBPZmZsaW5lIGNhY2hlIG9mIHRoZSBEUERCLCB0byBiZSB1c2VkIHVudGlsIHdlIGxvYWQgdGhlIG9ubGluZSBvbmUgKGFuZFxuLy8gYXMgYSBmYWxsYmFjayBpbiBjYXNlIHdlIGNhbid0IGxvYWQgdGhlIG9ubGluZSBvbmUpLlxudmFyIERQREJfQ0FDSEUgPSBfZGVyZXFfKCcuL2RwZGItY2FjaGUuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi4vdXRpbC5qcycpO1xuXG4vLyBPbmxpbmUgRFBEQiBVUkwuXG52YXIgT05MSU5FX0RQREJfVVJMID0gJ2h0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9jYXJkYm9hcmQtZHBkYi9kcGRiLmpzb24nO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgZGV2aWNlIHBhcmFtZXRlcnMgYmFzZWQgb24gdGhlIERQREIgKERldmljZSBQYXJhbWV0ZXIgRGF0YWJhc2UpLlxuICogSW5pdGlhbGx5LCB1c2VzIHRoZSBjYWNoZWQgRFBEQiB2YWx1ZXMuXG4gKlxuICogSWYgZmV0Y2hPbmxpbmUgPT0gdHJ1ZSwgdGhlbiB0aGlzIG9iamVjdCB0cmllcyB0byBmZXRjaCB0aGUgb25saW5lIHZlcnNpb25cbiAqIG9mIHRoZSBEUERCIGFuZCB1cGRhdGVzIHRoZSBkZXZpY2UgaW5mbyBpZiBhIGJldHRlciBtYXRjaCBpcyBmb3VuZC5cbiAqIENhbGxzIHRoZSBvbkRldmljZVBhcmFtc1VwZGF0ZWQgY2FsbGJhY2sgd2hlbiB0aGVyZSBpcyBhbiB1cGRhdGUgdG8gdGhlXG4gKiBkZXZpY2UgaW5mb3JtYXRpb24uXG4gKi9cbmZ1bmN0aW9uIERwZGIoZmV0Y2hPbmxpbmUsIG9uRGV2aWNlUGFyYW1zVXBkYXRlZCkge1xuICAvLyBTdGFydCB3aXRoIHRoZSBvZmZsaW5lIERQREIgY2FjaGUgd2hpbGUgd2UgYXJlIGxvYWRpbmcgdGhlIHJlYWwgb25lLlxuICB0aGlzLmRwZGIgPSBEUERCX0NBQ0hFO1xuXG4gIC8vIENhbGN1bGF0ZSBkZXZpY2UgcGFyYW1zIGJhc2VkIG9uIHRoZSBvZmZsaW5lIHZlcnNpb24gb2YgdGhlIERQREIuXG4gIHRoaXMucmVjYWxjdWxhdGVEZXZpY2VQYXJhbXNfKCk7XG5cbiAgLy8gWEhSIHRvIGZldGNoIG9ubGluZSBEUERCIGZpbGUsIGlmIHJlcXVlc3RlZC5cbiAgaWYgKGZldGNoT25saW5lKSB7XG4gICAgLy8gU2V0IHRoZSBjYWxsYmFjay5cbiAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCA9IG9uRGV2aWNlUGFyYW1zVXBkYXRlZDtcblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgb2JqID0gdGhpcztcbiAgICB4aHIub3BlbignR0VUJywgT05MSU5FX0RQREJfVVJMLCB0cnVlKTtcbiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgb2JqLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDw9IDI5OSkge1xuICAgICAgICAvLyBTdWNjZXNzLlxuICAgICAgICBvYmouZHBkYiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgb2JqLnJlY2FsY3VsYXRlRGV2aWNlUGFyYW1zXygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRXJyb3IgbG9hZGluZyB0aGUgRFBEQi5cbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBvbmxpbmUgRFBEQiEnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB4aHIuc2VuZCgpO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIGN1cnJlbnQgZGV2aWNlIHBhcmFtZXRlcnMuXG5EcGRiLnByb3RvdHlwZS5nZXREZXZpY2VQYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGV2aWNlUGFyYW1zO1xufTtcblxuLy8gUmVjYWxjdWxhdGVzIHRoaXMgZGV2aWNlJ3MgcGFyYW1ldGVycyBiYXNlZCBvbiB0aGUgRFBEQi5cbkRwZGIucHJvdG90eXBlLnJlY2FsY3VsYXRlRGV2aWNlUGFyYW1zXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmV3RGV2aWNlUGFyYW1zID0gdGhpcy5jYWxjRGV2aWNlUGFyYW1zXygpO1xuICBpZiAobmV3RGV2aWNlUGFyYW1zKSB7XG4gICAgdGhpcy5kZXZpY2VQYXJhbXMgPSBuZXdEZXZpY2VQYXJhbXM7XG4gICAgLy8gSW52b2tlIGNhbGxiYWNrLCBpZiBpdCBpcyBzZXQuXG4gICAgaWYgKHRoaXMub25EZXZpY2VQYXJhbXNVcGRhdGVkKSB7XG4gICAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCh0aGlzLmRldmljZVBhcmFtcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWNhbGN1bGF0ZSBkZXZpY2UgcGFyYW1ldGVycy4nKTtcbiAgfVxufTtcblxuLy8gUmV0dXJucyBhIERldmljZVBhcmFtcyBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBiZXN0IGd1ZXNzIGFzIHRvIHRoaXNcbi8vIGRldmljZSdzIHBhcmFtZXRlcnMuIENhbiByZXR1cm4gbnVsbCBpZiB0aGUgZGV2aWNlIGRvZXMgbm90IG1hdGNoIGFueVxuLy8ga25vd24gZGV2aWNlcy5cbkRwZGIucHJvdG90eXBlLmNhbGNEZXZpY2VQYXJhbXNfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkYiA9IHRoaXMuZHBkYjsgLy8gc2hvcnRoYW5kXG4gIGlmICghZGIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEUERCIG5vdCBhdmFpbGFibGUuJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGRiLmZvcm1hdCAhPSAxKSB7XG4gICAgY29uc29sZS5lcnJvcignRFBEQiBoYXMgdW5leHBlY3RlZCBmb3JtYXQgdmVyc2lvbi4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIWRiLmRldmljZXMgfHwgIWRiLmRldmljZXMubGVuZ3RoKSB7XG4gICAgY29uc29sZS5lcnJvcignRFBEQiBkb2VzIG5vdCBoYXZlIGEgZGV2aWNlcyBzZWN0aW9uLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gR2V0IHRoZSBhY3R1YWwgdXNlciBhZ2VudCBhbmQgc2NyZWVuIGRpbWVuc2lvbnMgaW4gcGl4ZWxzLlxuICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbiAgdmFyIHdpZHRoID0gVXRpbC5nZXRTY3JlZW5XaWR0aCgpO1xuICB2YXIgaGVpZ2h0ID0gVXRpbC5nZXRTY3JlZW5IZWlnaHQoKTtcblxuICBpZiAoIWRiLmRldmljZXMpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEUERCIGhhcyBubyBkZXZpY2VzIHNlY3Rpb24uJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRiLmRldmljZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGV2aWNlID0gZGIuZGV2aWNlc1tpXTtcbiAgICBpZiAoIWRldmljZS5ydWxlcykge1xuICAgICAgY29uc29sZS53YXJuKCdEZXZpY2VbJyArIGkgKyAnXSBoYXMgbm8gcnVsZXMgc2VjdGlvbi4nKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChkZXZpY2UudHlwZSAhPSAnaW9zJyAmJiBkZXZpY2UudHlwZSAhPSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybignRGV2aWNlWycgKyBpICsgJ10gaGFzIGludmFsaWQgdHlwZS4nKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIFNlZSBpZiB0aGlzIGRldmljZSBpcyBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZS5cbiAgICBpZiAoVXRpbC5pc0lPUygpICE9IChkZXZpY2UudHlwZSA9PSAnaW9zJykpIGNvbnRpbnVlO1xuXG4gICAgLy8gU2VlIGlmIHRoaXMgZGV2aWNlIG1hdGNoZXMgYW55IG9mIHRoZSBydWxlczpcbiAgICB2YXIgbWF0Y2hlZCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGV2aWNlLnJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcnVsZSA9IGRldmljZS5ydWxlc1tqXTtcbiAgICAgIGlmICh0aGlzLm1hdGNoUnVsZV8ocnVsZSwgdXNlckFnZW50LCB3aWR0aCwgaGVpZ2h0KSkge1xuICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbWF0Y2hlZCkgY29udGludWU7XG5cbiAgICAvLyBkZXZpY2UuZHBpIG1pZ2h0IGJlIGFuIGFycmF5IG9mIFsgeGRwaSwgeWRwaV0gb3IganVzdCBhIHNjYWxhci5cbiAgICB2YXIgeGRwaSA9IGRldmljZS5kcGlbMF0gfHwgZGV2aWNlLmRwaTtcbiAgICB2YXIgeWRwaSA9IGRldmljZS5kcGlbMV0gfHwgZGV2aWNlLmRwaTtcblxuICAgIHJldHVybiBuZXcgRGV2aWNlUGFyYW1zKHsgeGRwaTogeGRwaSwgeWRwaTogeWRwaSwgYmV2ZWxNbTogZGV2aWNlLmJ3IH0pO1xuICB9XG5cbiAgY29uc29sZS53YXJuKCdObyBEUERCIGRldmljZSBtYXRjaC4nKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5EcGRiLnByb3RvdHlwZS5tYXRjaFJ1bGVfID0gZnVuY3Rpb24ocnVsZSwgdWEsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpIHtcbiAgLy8gV2UgY2FuIG9ubHkgbWF0Y2ggJ3VhJyBhbmQgJ3JlcycgcnVsZXMsIG5vdCBvdGhlciB0eXBlcyBsaWtlICdtZG1oJ1xuICAvLyAod2hpY2ggYXJlIG1lYW50IGZvciBuYXRpdmUgcGxhdGZvcm1zKS5cbiAgaWYgKCFydWxlLnVhICYmICFydWxlLnJlcykgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIG91ciB1c2VyIGFnZW50IHN0cmluZyBkb2Vzbid0IGNvbnRhaW4gdGhlIGluZGljYXRlZCB1c2VyIGFnZW50IHN0cmluZyxcbiAgLy8gdGhlIG1hdGNoIGZhaWxzLlxuICBpZiAocnVsZS51YSAmJiB1YS5pbmRleE9mKHJ1bGUudWEpIDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZSBydWxlIHNwZWNpZmllcyBzY3JlZW4gZGltZW5zaW9ucyB0aGF0IGRvbid0IGNvcnJlc3BvbmQgdG8gb3VycyxcbiAgLy8gdGhlIG1hdGNoIGZhaWxzLlxuICBpZiAocnVsZS5yZXMpIHtcbiAgICBpZiAoIXJ1bGUucmVzWzBdIHx8ICFydWxlLnJlc1sxXSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXNYID0gcnVsZS5yZXNbMF07XG4gICAgdmFyIHJlc1kgPSBydWxlLnJlc1sxXTtcbiAgICAvLyBDb21wYXJlIG1pbiBhbmQgbWF4IHNvIGFzIHRvIG1ha2UgdGhlIG9yZGVyIG5vdCBtYXR0ZXIsIGkuZS4sIGl0IHNob3VsZFxuICAgIC8vIGJlIHRydWUgdGhhdCA2NDB4NDgwID09IDQ4MHg2NDAuXG4gICAgaWYgKE1hdGgubWluKHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpICE9IE1hdGgubWluKHJlc1gsIHJlc1kpIHx8XG4gICAgICAgIChNYXRoLm1heChzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KSAhPSBNYXRoLm1heChyZXNYLCByZXNZKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gRGV2aWNlUGFyYW1zKHBhcmFtcykge1xuICB0aGlzLnhkcGkgPSBwYXJhbXMueGRwaTtcbiAgdGhpcy55ZHBpID0gcGFyYW1zLnlkcGk7XG4gIHRoaXMuYmV2ZWxNbSA9IHBhcmFtcy5iZXZlbE1tO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERwZGI7XG5cbn0se1wiLi4vdXRpbC5qc1wiOjIyLFwiLi9kcGRiLWNhY2hlLmpzXCI6MTF9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcbnZhciBXZWJWUlBvbHlmaWxsID0gX2RlcmVxXygnLi93ZWJ2ci1wb2x5ZmlsbC5qcycpLldlYlZSUG9seWZpbGw7XG5cbi8vIEluaXRpYWxpemUgYSBXZWJWUkNvbmZpZyBqdXN0IGluIGNhc2UuXG53aW5kb3cuV2ViVlJDb25maWcgPSBVdGlsLmV4dGVuZCh7XG4gIC8vIEZvcmNlcyBhdmFpbGFiaWxpdHkgb2YgVlIgbW9kZSwgZXZlbiBmb3Igbm9uLW1vYmlsZSBkZXZpY2VzLlxuICBGT1JDRV9FTkFCTEVfVlI6IGZhbHNlLFxuXG4gIC8vIENvbXBsZW1lbnRhcnkgZmlsdGVyIGNvZWZmaWNpZW50LiAwIGZvciBhY2NlbGVyb21ldGVyLCAxIGZvciBneXJvLlxuICBLX0ZJTFRFUjogMC45OCxcblxuICAvLyBIb3cgZmFyIGludG8gdGhlIGZ1dHVyZSB0byBwcmVkaWN0IGR1cmluZyBmYXN0IG1vdGlvbiAoaW4gc2Vjb25kcykuXG4gIFBSRURJQ1RJT05fVElNRV9TOiAwLjA0MCxcblxuICAvLyBGbGFnIHRvIGVuYWJsZSB0b3VjaCBwYW5uZXIuIEluIGNhc2UgeW91IGhhdmUgeW91ciBvd24gdG91Y2ggY29udHJvbHMuXG4gIFRPVUNIX1BBTk5FUl9ESVNBQkxFRDogdHJ1ZSxcblxuICAvLyBGbGFnIHRvIGRpc2FibGVkIHRoZSBVSSBpbiBWUiBNb2RlLlxuICBDQVJEQk9BUkRfVUlfRElTQUJMRUQ6IGZhbHNlLCAvLyBEZWZhdWx0OiBmYWxzZVxuXG4gIC8vIEZsYWcgdG8gZGlzYWJsZSB0aGUgaW5zdHJ1Y3Rpb25zIHRvIHJvdGF0ZSB5b3VyIGRldmljZS5cbiAgUk9UQVRFX0lOU1RSVUNUSU9OU19ESVNBQkxFRDogZmFsc2UsIC8vIERlZmF1bHQ6IGZhbHNlLlxuXG4gIC8vIEVuYWJsZSB5YXcgcGFubmluZyBvbmx5LCBkaXNhYmxpbmcgcm9sbCBhbmQgcGl0Y2guIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAvLyBmb3IgcGFub3JhbWFzIHdpdGggbm90aGluZyBpbnRlcmVzdGluZyBhYm92ZSBvciBiZWxvdy5cbiAgWUFXX09OTFk6IGZhbHNlLFxuXG4gIC8vIFRvIGRpc2FibGUga2V5Ym9hcmQgYW5kIG1vdXNlIGNvbnRyb2xzLCBpZiB5b3Ugd2FudCB0byB1c2UgeW91ciBvd25cbiAgLy8gaW1wbGVtZW50YXRpb24uXG4gIE1PVVNFX0tFWUJPQVJEX0NPTlRST0xTX0RJU0FCTEVEOiBmYWxzZSxcblxuICAvLyBQcmV2ZW50IHRoZSBwb2x5ZmlsbCBmcm9tIGluaXRpYWxpemluZyBpbW1lZGlhdGVseS4gUmVxdWlyZXMgdGhlIGFwcFxuICAvLyB0byBjYWxsIEluaXRpYWxpemVXZWJWUlBvbHlmaWxsKCkgYmVmb3JlIGl0IGNhbiBiZSB1c2VkLlxuICBERUZFUl9JTklUSUFMSVpBVElPTjogZmFsc2UsXG5cbiAgLy8gRW5hYmxlIHRoZSBkZXByZWNhdGVkIHZlcnNpb24gb2YgdGhlIEFQSSAobmF2aWdhdG9yLmdldFZSRGV2aWNlcykuXG4gIEVOQUJMRV9ERVBSRUNBVEVEX0FQSTogZmFsc2UsXG5cbiAgLy8gU2NhbGVzIHRoZSByZWNvbW1lbmRlZCBidWZmZXIgc2l6ZSByZXBvcnRlZCBieSBXZWJWUiwgd2hpY2ggY2FuIGltcHJvdmVcbiAgLy8gcGVyZm9ybWFuY2UuXG4gIC8vIFVQREFURSgyMDE2LTA1LTAzKTogU2V0dGluZyB0aGlzIHRvIDAuNSBieSBkZWZhdWx0IHNpbmNlIDEuMCBkb2VzIG5vdFxuICAvLyBwZXJmb3JtIHdlbGwgb24gbWFueSBtb2JpbGUgZGV2aWNlcy5cbiAgQlVGRkVSX1NDQUxFOiAwLjUsXG5cbiAgLy8gQWxsb3cgVlJEaXNwbGF5LnN1Ym1pdEZyYW1lIHRvIGNoYW5nZSBnbCBiaW5kaW5ncywgd2hpY2ggaXMgbW9yZVxuICAvLyBlZmZpY2llbnQgaWYgdGhlIGFwcGxpY2F0aW9uIGNvZGUgd2lsbCByZS1iaW5kIGl0cyByZXNvdXJjZXMgb24gdGhlXG4gIC8vIG5leHQgZnJhbWUgYW55d2F5LiBUaGlzIGhhcyBiZWVuIHNlZW4gdG8gY2F1c2UgcmVuZGVyaW5nIGdsaXRjaGVzIHdpdGhcbiAgLy8gVEhSRUUuanMuXG4gIC8vIERpcnR5IGJpbmRpbmdzIGluY2x1ZGU6IGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcsIGdsLkNVUlJFTlRfUFJPR1JBTSxcbiAgLy8gZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkcsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkcsXG4gIC8vIGFuZCBnbC5URVhUVVJFX0JJTkRJTkdfMkQgZm9yIHRleHR1cmUgdW5pdCAwLlxuICBESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1M6IGZhbHNlLFxuXG4gIC8vIFdoZW4gc2V0IHRvIHRydWUsIHRoaXMgd2lsbCBjYXVzZSBhIHBvbHlmaWxsZWQgVlJEaXNwbGF5IHRvIGFsd2F5cyBiZVxuICAvLyBhcHBlbmRlZCB0byB0aGUgbGlzdCByZXR1cm5lZCBieSBuYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cygpLCBldmVuIGlmIHRoYXRcbiAgLy8gbGlzdCBpbmNsdWRlcyBhIG5hdGl2ZSBWUkRpc3BsYXkuXG4gIEFMV0FZU19BUFBFTkRfUE9MWUZJTExfRElTUExBWTogZmFsc2Vcbn0sIHdpbmRvdy5XZWJWUkNvbmZpZyk7XG5cbmlmICghd2luZG93LldlYlZSQ29uZmlnLkRFRkVSX0lOSVRJQUxJWkFUSU9OKSB7XG4gIG5ldyBXZWJWUlBvbHlmaWxsKCk7XG59IGVsc2Uge1xuICB3aW5kb3cuSW5pdGlhbGl6ZVdlYlZSUG9seWZpbGwgPSBmdW5jdGlvbigpIHtcbiAgICBuZXcgV2ViVlJQb2x5ZmlsbCgpO1xuICB9XG59XG5cbn0se1wiLi91dGlsLmpzXCI6MjIsXCIuL3dlYnZyLXBvbHlmaWxsLmpzXCI6MjV9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgTWF0aFV0aWwgPSB3aW5kb3cuTWF0aFV0aWwgfHwge307XG5cbk1hdGhVdGlsLmRlZ1RvUmFkID0gTWF0aC5QSSAvIDE4MDtcbk1hdGhVdGlsLnJhZFRvRGVnID0gMTgwIC8gTWF0aC5QSTtcblxuLy8gU29tZSBtaW5pbWFsIG1hdGggZnVuY3Rpb25hbGl0eSBib3Jyb3dlZCBmcm9tIFRIUkVFLk1hdGggYW5kIHN0cmlwcGVkIGRvd25cbi8vIGZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBsaWJyYXJ5LlxuXG5cbk1hdGhVdGlsLlZlY3RvcjIgPSBmdW5jdGlvbiAoIHgsIHkgKSB7XG4gIHRoaXMueCA9IHggfHwgMDtcbiAgdGhpcy55ID0geSB8fCAwO1xufTtcblxuTWF0aFV0aWwuVmVjdG9yMi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXRoVXRpbC5WZWN0b3IyLFxuXG4gIHNldDogZnVuY3Rpb24gKCB4LCB5ICkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGNvcHk6IGZ1bmN0aW9uICggdiApIHtcbiAgICB0aGlzLnggPSB2Lng7XG4gICAgdGhpcy55ID0gdi55O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuICAgIHRoaXMueCA9IGEueCAtIGIueDtcbiAgICB0aGlzLnkgPSBhLnkgLSBiLnk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbk1hdGhVdGlsLlZlY3RvcjMgPSBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG4gIHRoaXMueCA9IHggfHwgMDtcbiAgdGhpcy55ID0geSB8fCAwO1xuICB0aGlzLnogPSB6IHx8IDA7XG59O1xuXG5NYXRoVXRpbC5WZWN0b3IzLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hdGhVdGlsLlZlY3RvcjMsXG5cbiAgc2V0OiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjb3B5OiBmdW5jdGlvbiAoIHYgKSB7XG4gICAgdGhpcy54ID0gdi54O1xuICAgIHRoaXMueSA9IHYueTtcbiAgICB0aGlzLnogPSB2Lno7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBsZW5ndGg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKTtcbiAgfSxcblxuICBub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NhbGFyID0gdGhpcy5sZW5ndGgoKTtcblxuICAgIGlmICggc2NhbGFyICE9PSAwICkge1xuICAgICAgdmFyIGludlNjYWxhciA9IDEgLyBzY2FsYXI7XG5cbiAgICAgIHRoaXMubXVsdGlwbHlTY2FsYXIoaW52U2NhbGFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy54ID0gMDtcbiAgICAgIHRoaXMueSA9IDA7XG4gICAgICB0aGlzLnogPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcbiAgICB0aGlzLnggKj0gc2NhbGFyO1xuICAgIHRoaXMueSAqPSBzY2FsYXI7XG4gICAgdGhpcy56ICo9IHNjYWxhcjtcbiAgfSxcblxuICBhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcbiAgICB2YXIgeCA9IHRoaXMueDtcbiAgICB2YXIgeSA9IHRoaXMueTtcbiAgICB2YXIgeiA9IHRoaXMuejtcblxuICAgIHZhciBxeCA9IHEueDtcbiAgICB2YXIgcXkgPSBxLnk7XG4gICAgdmFyIHF6ID0gcS56O1xuICAgIHZhciBxdyA9IHEudztcblxuICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG4gICAgdmFyIGl4ID0gIHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgICB2YXIgaXkgPSAgcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICAgIHZhciBpeiA9ICBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG4gICAgdmFyIGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cbiAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG4gICAgdGhpcy54ID0gaXggKiBxdyArIGl3ICogLSBxeCArIGl5ICogLSBxeiAtIGl6ICogLSBxeTtcbiAgICB0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtIHF5ICsgaXogKiAtIHF4IC0gaXggKiAtIHF6O1xuICAgIHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC0gcXogKyBpeCAqIC0gcXkgLSBpeSAqIC0gcXg7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBkb3Q6IGZ1bmN0aW9uICggdiApIHtcbiAgICByZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xuICB9LFxuXG4gIGNyb3NzVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuICAgIHZhciBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xuICAgIHZhciBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xuXG4gICAgdGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG4gICAgdGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG4gICAgdGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbk1hdGhVdGlsLlF1YXRlcm5pb24gPSBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG4gIHRoaXMueCA9IHggfHwgMDtcbiAgdGhpcy55ID0geSB8fCAwO1xuICB0aGlzLnogPSB6IHx8IDA7XG4gIHRoaXMudyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTtcbn07XG5cbk1hdGhVdGlsLlF1YXRlcm5pb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWF0aFV0aWwuUXVhdGVybmlvbixcblxuICBzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcbiAgICB0aGlzLncgPSB3O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgY29weTogZnVuY3Rpb24gKCBxdWF0ZXJuaW9uICkge1xuICAgIHRoaXMueCA9IHF1YXRlcm5pb24ueDtcbiAgICB0aGlzLnkgPSBxdWF0ZXJuaW9uLnk7XG4gICAgdGhpcy56ID0gcXVhdGVybmlvbi56O1xuICAgIHRoaXMudyA9IHF1YXRlcm5pb24udztcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHNldEZyb21FdWxlclhZWjogZnVuY3Rpb24oIHgsIHksIHogKSB7XG4gICAgdmFyIGMxID0gTWF0aC5jb3MoIHggLyAyICk7XG4gICAgdmFyIGMyID0gTWF0aC5jb3MoIHkgLyAyICk7XG4gICAgdmFyIGMzID0gTWF0aC5jb3MoIHogLyAyICk7XG4gICAgdmFyIHMxID0gTWF0aC5zaW4oIHggLyAyICk7XG4gICAgdmFyIHMyID0gTWF0aC5zaW4oIHkgLyAyICk7XG4gICAgdmFyIHMzID0gTWF0aC5zaW4oIHogLyAyICk7XG5cbiAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcbiAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBzZXRGcm9tRXVsZXJZWFo6IGZ1bmN0aW9uKCB4LCB5LCB6ICkge1xuICAgIHZhciBjMSA9IE1hdGguY29zKCB4IC8gMiApO1xuICAgIHZhciBjMiA9IE1hdGguY29zKCB5IC8gMiApO1xuICAgIHZhciBjMyA9IE1hdGguY29zKCB6IC8gMiApO1xuICAgIHZhciBzMSA9IE1hdGguc2luKCB4IC8gMiApO1xuICAgIHZhciBzMiA9IE1hdGguc2luKCB5IC8gMiApO1xuICAgIHZhciBzMyA9IE1hdGguc2luKCB6IC8gMiApO1xuXG4gICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICB0aGlzLnogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG4gICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc2V0RnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHtcbiAgICAvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvYW5nbGVUb1F1YXRlcm5pb24vaW5kZXguaHRtXG4gICAgLy8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuICAgIHZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cbiAgICB0aGlzLnggPSBheGlzLnggKiBzO1xuICAgIHRoaXMueSA9IGF4aXMueSAqIHM7XG4gICAgdGhpcy56ID0gYXhpcy56ICogcztcbiAgICB0aGlzLncgPSBNYXRoLmNvcyggaGFsZkFuZ2xlICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBtdWx0aXBseTogZnVuY3Rpb24gKCBxICkge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHRoaXMsIHEgKTtcbiAgfSxcblxuICBtdWx0aXBseVF1YXRlcm5pb25zOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG4gICAgLy8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtXG5cbiAgICB2YXIgcWF4ID0gYS54LCBxYXkgPSBhLnksIHFheiA9IGEueiwgcWF3ID0gYS53O1xuICAgIHZhciBxYnggPSBiLngsIHFieSA9IGIueSwgcWJ6ID0gYi56LCBxYncgPSBiLnc7XG5cbiAgICB0aGlzLnggPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XG4gICAgdGhpcy55ID0gcWF5ICogcWJ3ICsgcWF3ICogcWJ5ICsgcWF6ICogcWJ4IC0gcWF4ICogcWJ6O1xuICAgIHRoaXMueiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcbiAgICB0aGlzLncgPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBpbnZlcnNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy54ICo9IC0xO1xuICAgIHRoaXMueSAqPSAtMTtcbiAgICB0aGlzLnogKj0gLTE7XG5cbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgbm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGwgPSBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyApO1xuXG4gICAgaWYgKCBsID09PSAwICkge1xuICAgICAgdGhpcy54ID0gMDtcbiAgICAgIHRoaXMueSA9IDA7XG4gICAgICB0aGlzLnogPSAwO1xuICAgICAgdGhpcy53ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IDEgLyBsO1xuXG4gICAgICB0aGlzLnggPSB0aGlzLnggKiBsO1xuICAgICAgdGhpcy55ID0gdGhpcy55ICogbDtcbiAgICAgIHRoaXMueiA9IHRoaXMueiAqIGw7XG4gICAgICB0aGlzLncgPSB0aGlzLncgKiBsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHNsZXJwOiBmdW5jdGlvbiAoIHFiLCB0ICkge1xuICAgIGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuICAgIGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cbiAgICB2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcblxuICAgIC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cbiAgICB2YXIgY29zSGFsZlRoZXRhID0gdyAqIHFiLncgKyB4ICogcWIueCArIHkgKiBxYi55ICsgeiAqIHFiLno7XG5cbiAgICBpZiAoIGNvc0hhbGZUaGV0YSA8IDAgKSB7XG4gICAgICB0aGlzLncgPSAtIHFiLnc7XG4gICAgICB0aGlzLnggPSAtIHFiLng7XG4gICAgICB0aGlzLnkgPSAtIHFiLnk7XG4gICAgICB0aGlzLnogPSAtIHFiLno7XG5cbiAgICAgIGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvcHkoIHFiICk7XG4gICAgfVxuXG4gICAgaWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkge1xuICAgICAgdGhpcy53ID0gdztcbiAgICAgIHRoaXMueCA9IHg7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgICAgdGhpcy56ID0gejtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGhhbGZUaGV0YSA9IE1hdGguYWNvcyggY29zSGFsZlRoZXRhICk7XG4gICAgdmFyIHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCggMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhICk7XG5cbiAgICBpZiAoIE1hdGguYWJzKCBzaW5IYWxmVGhldGEgKSA8IDAuMDAxICkge1xuICAgICAgdGhpcy53ID0gMC41ICogKCB3ICsgdGhpcy53ICk7XG4gICAgICB0aGlzLnggPSAwLjUgKiAoIHggKyB0aGlzLnggKTtcbiAgICAgIHRoaXMueSA9IDAuNSAqICggeSArIHRoaXMueSApO1xuICAgICAgdGhpcy56ID0gMC41ICogKCB6ICsgdGhpcy56ICk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciByYXRpb0EgPSBNYXRoLnNpbiggKCAxIC0gdCApICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGEsXG4gICAgcmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuICAgIHRoaXMudyA9ICggdyAqIHJhdGlvQSArIHRoaXMudyAqIHJhdGlvQiApO1xuICAgIHRoaXMueCA9ICggeCAqIHJhdGlvQSArIHRoaXMueCAqIHJhdGlvQiApO1xuICAgIHRoaXMueSA9ICggeSAqIHJhdGlvQSArIHRoaXMueSAqIHJhdGlvQiApO1xuICAgIHRoaXMueiA9ICggeiAqIHJhdGlvQSArIHRoaXMueiAqIHJhdGlvQiApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc2V0RnJvbVVuaXRWZWN0b3JzOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaHR0cDovL2xvbGVuZ2luZS5uZXQvYmxvZy8yMDE0LzAyLzI0L3F1YXRlcm5pb24tZnJvbS10d28tdmVjdG9ycy1maW5hbFxuICAgIC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxuXG4gICAgdmFyIHYxLCByO1xuICAgIHZhciBFUFMgPSAwLjAwMDAwMTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoIHZGcm9tLCB2VG8gKSB7XG4gICAgICBpZiAoIHYxID09PSB1bmRlZmluZWQgKSB2MSA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG5cbiAgICAgIHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuICAgICAgaWYgKCByIDwgRVBTICkge1xuICAgICAgICByID0gMDtcblxuICAgICAgICBpZiAoIE1hdGguYWJzKCB2RnJvbS54ICkgPiBNYXRoLmFicyggdkZyb20ueiApICkge1xuICAgICAgICAgIHYxLnNldCggLSB2RnJvbS55LCB2RnJvbS54LCAwICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdjEuc2V0KCAwLCAtIHZGcm9tLnosIHZGcm9tLnkgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdjEuY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMueCA9IHYxLng7XG4gICAgICB0aGlzLnkgPSB2MS55O1xuICAgICAgdGhpcy56ID0gdjEuejtcbiAgICAgIHRoaXMudyA9IHI7XG5cbiAgICAgIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSgpLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoVXRpbDtcblxufSx7fV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFZSRGlzcGxheSA9IF9kZXJlcV8oJy4vYmFzZS5qcycpLlZSRGlzcGxheTtcbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4vbWF0aC11dGlsLmpzJyk7XG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xuXG4vLyBIb3cgbXVjaCB0byByb3RhdGUgcGVyIGtleSBzdHJva2UuXG52YXIgS0VZX1NQRUVEID0gMC4xNTtcbnZhciBLRVlfQU5JTUFUSU9OX0RVUkFUSU9OID0gODA7XG5cbi8vIEhvdyBtdWNoIHRvIHJvdGF0ZSBmb3IgbW91c2UgZXZlbnRzLlxudmFyIE1PVVNFX1NQRUVEX1ggPSAwLjU7XG52YXIgTU9VU0VfU1BFRURfWSA9IDAuMztcblxuLyoqXG4gKiBWUkRpc3BsYXkgYmFzZWQgb24gbW91c2UgYW5kIGtleWJvYXJkIGlucHV0LiBEZXNpZ25lZCBmb3IgZGVza3RvcHMvbGFwdG9wc1xuICogd2hlcmUgb3JpZW50YXRpb24gZXZlbnRzIGFyZW4ndCBzdXBwb3J0ZWQuIENhbm5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBNb3VzZUtleWJvYXJkVlJEaXNwbGF5KCkge1xuICB0aGlzLmRpc3BsYXlOYW1lID0gJ01vdXNlIGFuZCBLZXlib2FyZCBWUkRpc3BsYXkgKHdlYnZyLXBvbHlmaWxsKSc7XG5cbiAgdGhpcy5jYXBhYmlsaXRpZXMuaGFzT3JpZW50YXRpb24gPSB0cnVlO1xuXG4gIC8vIEF0dGFjaCB0byBtb3VzZSBhbmQga2V5Ym9hcmQgZXZlbnRzLlxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duXy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmVfLmJpbmQodGhpcykpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXBfLmJpbmQodGhpcykpO1xuXG4gIC8vIFwiUHJpdmF0ZVwiIG1lbWJlcnMuXG4gIHRoaXMucGhpXyA9IDA7XG4gIHRoaXMudGhldGFfID0gMDtcblxuICAvLyBWYXJpYWJsZXMgZm9yIGtleWJvYXJkLWJhc2VkIHJvdGF0aW9uIGFuaW1hdGlvbi5cbiAgdGhpcy50YXJnZXRBbmdsZV8gPSBudWxsO1xuICB0aGlzLmFuZ2xlQW5pbWF0aW9uXyA9IG51bGw7XG5cbiAgLy8gU3RhdGUgdmFyaWFibGVzIGZvciBjYWxjdWxhdGlvbnMuXG4gIHRoaXMub3JpZW50YXRpb25fID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcblxuICAvLyBWYXJpYWJsZXMgZm9yIG1vdXNlLWJhc2VkIHJvdGF0aW9uLlxuICB0aGlzLnJvdGF0ZVN0YXJ0XyA9IG5ldyBNYXRoVXRpbC5WZWN0b3IyKCk7XG4gIHRoaXMucm90YXRlRW5kXyA9IG5ldyBNYXRoVXRpbC5WZWN0b3IyKCk7XG4gIHRoaXMucm90YXRlRGVsdGFfID0gbmV3IE1hdGhVdGlsLlZlY3RvcjIoKTtcbiAgdGhpcy5pc0RyYWdnaW5nXyA9IGZhbHNlO1xuXG4gIHRoaXMub3JpZW50YXRpb25PdXRfID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcbn1cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlID0gbmV3IFZSRGlzcGxheSgpO1xuXG5Nb3VzZUtleWJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRJbW1lZGlhdGVQb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub3JpZW50YXRpb25fLnNldEZyb21FdWxlcllYWih0aGlzLnBoaV8sIHRoaXMudGhldGFfLCAwKTtcblxuICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IHRoaXMub3JpZW50YXRpb25fLng7XG4gIHRoaXMub3JpZW50YXRpb25PdXRfWzFdID0gdGhpcy5vcmllbnRhdGlvbl8ueTtcbiAgdGhpcy5vcmllbnRhdGlvbk91dF9bMl0gPSB0aGlzLm9yaWVudGF0aW9uXy56O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IHRoaXMub3JpZW50YXRpb25fLnc7XG5cbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogbnVsbCxcbiAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbk91dF8sXG4gICAgbGluZWFyVmVsb2NpdHk6IG51bGwsXG4gICAgbGluZWFyQWNjZWxlcmF0aW9uOiBudWxsLFxuICAgIGFuZ3VsYXJWZWxvY2l0eTogbnVsbCxcbiAgICBhbmd1bGFyQWNjZWxlcmF0aW9uOiBudWxsXG4gIH07XG59O1xuXG5Nb3VzZUtleWJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vbktleURvd25fID0gZnVuY3Rpb24oZSkge1xuICAvLyBUcmFjayBXQVNEIGFuZCBhcnJvdyBrZXlzLlxuICBpZiAoZS5rZXlDb2RlID09IDM4KSB7IC8vIFVwIGtleS5cbiAgICB0aGlzLmFuaW1hdGVQaGlfKHRoaXMucGhpXyArIEtFWV9TUEVFRCk7XG4gIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDM5KSB7IC8vIFJpZ2h0IGtleS5cbiAgICB0aGlzLmFuaW1hdGVUaGV0YV8odGhpcy50aGV0YV8gLSBLRVlfU1BFRUQpO1xuICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSA0MCkgeyAvLyBEb3duIGtleS5cbiAgICB0aGlzLmFuaW1hdGVQaGlfKHRoaXMucGhpXyAtIEtFWV9TUEVFRCk7XG4gIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDM3KSB7IC8vIExlZnQga2V5LlxuICAgIHRoaXMuYW5pbWF0ZVRoZXRhXyh0aGlzLnRoZXRhXyArIEtFWV9TUEVFRCk7XG4gIH1cbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmFuaW1hdGVUaGV0YV8gPSBmdW5jdGlvbih0YXJnZXRBbmdsZSkge1xuICB0aGlzLmFuaW1hdGVLZXlUcmFuc2l0aW9uc18oJ3RoZXRhXycsIHRhcmdldEFuZ2xlKTtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmFuaW1hdGVQaGlfID0gZnVuY3Rpb24odGFyZ2V0QW5nbGUpIHtcbiAgLy8gUHJldmVudCBsb29raW5nIHRvbyBmYXIgdXAgb3IgZG93bi5cbiAgdGFyZ2V0QW5nbGUgPSBVdGlsLmNsYW1wKHRhcmdldEFuZ2xlLCAtTWF0aC5QSS8yLCBNYXRoLlBJLzIpO1xuICB0aGlzLmFuaW1hdGVLZXlUcmFuc2l0aW9uc18oJ3BoaV8nLCB0YXJnZXRBbmdsZSk7XG59O1xuXG4vKipcbiAqIFN0YXJ0IGFuIGFuaW1hdGlvbiB0byB0cmFuc2l0aW9uIGFuIGFuZ2xlIGZyb20gb25lIHZhbHVlIHRvIGFub3RoZXIuXG4gKi9cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmFuaW1hdGVLZXlUcmFuc2l0aW9uc18gPSBmdW5jdGlvbihhbmdsZU5hbWUsIHRhcmdldEFuZ2xlKSB7XG4gIC8vIElmIGFuIGFuaW1hdGlvbiBpcyBjdXJyZW50bHkgcnVubmluZywgY2FuY2VsIGl0LlxuICBpZiAodGhpcy5hbmdsZUFuaW1hdGlvbl8pIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuZ2xlQW5pbWF0aW9uXyk7XG4gIH1cbiAgdmFyIHN0YXJ0QW5nbGUgPSB0aGlzW2FuZ2xlTmFtZV07XG4gIHZhciBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAvLyBTZXQgdXAgYW4gaW50ZXJ2YWwgdGltZXIgdG8gcGVyZm9ybSB0aGUgYW5pbWF0aW9uLlxuICB0aGlzLmFuZ2xlQW5pbWF0aW9uXyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIC8vIE9uY2Ugd2UncmUgZmluaXNoZWQgdGhlIGFuaW1hdGlvbiwgd2UncmUgZG9uZS5cbiAgICB2YXIgZWxhcHNlZCA9IG5ldyBEYXRlKCkgLSBzdGFydFRpbWU7XG4gICAgaWYgKGVsYXBzZWQgPj0gS0VZX0FOSU1BVElPTl9EVVJBVElPTikge1xuICAgICAgdGhpc1thbmdsZU5hbWVdID0gdGFyZ2V0QW5nbGU7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuZ2xlQW5pbWF0aW9uXyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGxvb3Agd2l0aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICB0aGlzLmFuZ2xlQW5pbWF0aW9uXyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlLmJpbmQodGhpcykpXG4gICAgLy8gTGluZWFybHkgaW50ZXJwb2xhdGUgdGhlIGFuZ2xlIHNvbWUgYW1vdW50LlxuICAgIHZhciBwZXJjZW50ID0gZWxhcHNlZCAvIEtFWV9BTklNQVRJT05fRFVSQVRJT047XG4gICAgdGhpc1thbmdsZU5hbWVdID0gc3RhcnRBbmdsZSArICh0YXJnZXRBbmdsZSAtIHN0YXJ0QW5nbGUpICogcGVyY2VudDtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uTW91c2VEb3duXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5yb3RhdGVTdGFydF8uc2V0KGUuY2xpZW50WCwgZS5jbGllbnRZKTtcbiAgdGhpcy5pc0RyYWdnaW5nXyA9IHRydWU7XG59O1xuXG4vLyBWZXJ5IHNpbWlsYXIgdG8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbXJmbGl4LzgzNTEwMjBcbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uTW91c2VNb3ZlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKCF0aGlzLmlzRHJhZ2dpbmdfICYmICF0aGlzLmlzUG9pbnRlckxvY2tlZF8oKSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBTdXBwb3J0IHBvaW50ZXIgbG9jayBBUEkuXG4gIGlmICh0aGlzLmlzUG9pbnRlckxvY2tlZF8oKSkge1xuICAgIHZhciBtb3ZlbWVudFggPSBlLm1vdmVtZW50WCB8fCBlLm1vek1vdmVtZW50WCB8fCAwO1xuICAgIHZhciBtb3ZlbWVudFkgPSBlLm1vdmVtZW50WSB8fCBlLm1vek1vdmVtZW50WSB8fCAwO1xuICAgIHRoaXMucm90YXRlRW5kXy5zZXQodGhpcy5yb3RhdGVTdGFydF8ueCAtIG1vdmVtZW50WCwgdGhpcy5yb3RhdGVTdGFydF8ueSAtIG1vdmVtZW50WSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yb3RhdGVFbmRfLnNldChlLmNsaWVudFgsIGUuY2xpZW50WSk7XG4gIH1cbiAgLy8gQ2FsY3VsYXRlIGhvdyBtdWNoIHdlIG1vdmVkIGluIG1vdXNlIHNwYWNlLlxuICB0aGlzLnJvdGF0ZURlbHRhXy5zdWJWZWN0b3JzKHRoaXMucm90YXRlRW5kXywgdGhpcy5yb3RhdGVTdGFydF8pO1xuICB0aGlzLnJvdGF0ZVN0YXJ0Xy5jb3B5KHRoaXMucm90YXRlRW5kXyk7XG5cbiAgLy8gS2VlcCB0cmFjayBvZiB0aGUgY3VtdWxhdGl2ZSBldWxlciBhbmdsZXMuXG4gIHRoaXMucGhpXyArPSAyICogTWF0aC5QSSAqIHRoaXMucm90YXRlRGVsdGFfLnkgLyBzY3JlZW4uaGVpZ2h0ICogTU9VU0VfU1BFRURfWTtcbiAgdGhpcy50aGV0YV8gKz0gMiAqIE1hdGguUEkgKiB0aGlzLnJvdGF0ZURlbHRhXy54IC8gc2NyZWVuLndpZHRoICogTU9VU0VfU1BFRURfWDtcblxuICAvLyBQcmV2ZW50IGxvb2tpbmcgdG9vIGZhciB1cCBvciBkb3duLlxuICB0aGlzLnBoaV8gPSBVdGlsLmNsYW1wKHRoaXMucGhpXywgLU1hdGguUEkvMiwgTWF0aC5QSS8yKTtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uTW91c2VVcF8gPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMuaXNEcmFnZ2luZ18gPSBmYWxzZTtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmlzUG9pbnRlckxvY2tlZF8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50IHx8IGRvY3VtZW50Lm1velBvaW50ZXJMb2NrRWxlbWVudCB8fFxuICAgICAgZG9jdW1lbnQud2Via2l0UG9pbnRlckxvY2tFbGVtZW50O1xuICByZXR1cm4gZWwgIT09IHVuZGVmaW5lZDtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLnJlc2V0UG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBoaV8gPSAwO1xuICB0aGlzLnRoZXRhXyA9IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlS2V5Ym9hcmRWUkRpc3BsYXk7XG5cbn0se1wiLi9iYXNlLmpzXCI6MyxcIi4vbWF0aC11dGlsLmpzXCI6MTQsXCIuL3V0aWwuanNcIjoyMn1dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG5cbmZ1bmN0aW9uIFJvdGF0ZUluc3RydWN0aW9ucygpIHtcbiAgdGhpcy5sb2FkSWNvbl8oKTtcblxuICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgcyA9IG92ZXJsYXkuc3R5bGU7XG4gIHMucG9zaXRpb24gPSAnZml4ZWQnO1xuICBzLnRvcCA9IDA7XG4gIHMucmlnaHQgPSAwO1xuICBzLmJvdHRvbSA9IDA7XG4gIHMubGVmdCA9IDA7XG4gIHMuYmFja2dyb3VuZENvbG9yID0gJ2dyYXknO1xuICBzLmZvbnRGYW1pbHkgPSAnc2Fucy1zZXJpZic7XG4gIC8vIEZvcmNlIHRoaXMgdG8gYmUgYWJvdmUgdGhlIGZ1bGxzY3JlZW4gY2FudmFzLCB3aGljaCBpcyBhdCB6SW5kZXg6IDk5OTk5OS5cbiAgcy56SW5kZXggPSAxMDAwMDAwO1xuXG4gIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgaW1nLnNyYyA9IHRoaXMuaWNvbjtcbiAgdmFyIHMgPSBpbWcuc3R5bGU7XG4gIHMubWFyZ2luTGVmdCA9ICcyNSUnO1xuICBzLm1hcmdpblRvcCA9ICcyNSUnO1xuICBzLndpZHRoID0gJzUwJSc7XG4gIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaW1nKTtcblxuICB2YXIgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgcyA9IHRleHQuc3R5bGU7XG4gIHMudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gIHMuZm9udFNpemUgPSAnMTZweCc7XG4gIHMubGluZUhlaWdodCA9ICcyNHB4JztcbiAgcy5tYXJnaW4gPSAnMjRweCAyNSUnO1xuICBzLndpZHRoID0gJzUwJSc7XG4gIHRleHQuaW5uZXJIVE1MID0gJ1BsYWNlIHlvdXIgcGhvbmUgaW50byB5b3VyIENhcmRib2FyZCB2aWV3ZXIuJztcbiAgb3ZlcmxheS5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICB2YXIgc25hY2tiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIHMgPSBzbmFja2Jhci5zdHlsZTtcbiAgcy5iYWNrZ3JvdW5kQ29sb3IgPSAnI0NGRDhEQyc7XG4gIHMucG9zaXRpb24gPSAnZml4ZWQnO1xuICBzLmJvdHRvbSA9IDA7XG4gIHMud2lkdGggPSAnMTAwJSc7XG4gIHMuaGVpZ2h0ID0gJzQ4cHgnO1xuICBzLnBhZGRpbmcgPSAnMTRweCAyNHB4JztcbiAgcy5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gIHMuY29sb3IgPSAnIzY1NkE2Qic7XG4gIG92ZXJsYXkuYXBwZW5kQ2hpbGQoc25hY2tiYXIpO1xuXG4gIHZhciBzbmFja2JhclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc25hY2tiYXJUZXh0LnN0eWxlLmZsb2F0ID0gJ2xlZnQnO1xuICBzbmFja2JhclRleHQuaW5uZXJIVE1MID0gJ05vIENhcmRib2FyZCB2aWV3ZXI/JztcblxuICB2YXIgc25hY2tiYXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIHNuYWNrYmFyQnV0dG9uLmhyZWYgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9nZXQvY2FyZGJvYXJkL2dldC1jYXJkYm9hcmQvJztcbiAgc25hY2tiYXJCdXR0b24uaW5uZXJIVE1MID0gJ2dldCBvbmUnO1xuICBzbmFja2JhckJ1dHRvbi50YXJnZXQgPSAnX2JsYW5rJztcbiAgdmFyIHMgPSBzbmFja2JhckJ1dHRvbi5zdHlsZTtcbiAgcy5mbG9hdCA9ICdyaWdodCc7XG4gIHMuZm9udFdlaWdodCA9IDYwMDtcbiAgcy50ZXh0VHJhbnNmb3JtID0gJ3VwcGVyY2FzZSc7XG4gIHMuYm9yZGVyTGVmdCA9ICcxcHggc29saWQgZ3JheSc7XG4gIHMucGFkZGluZ0xlZnQgPSAnMjRweCc7XG4gIHMudGV4dERlY29yYXRpb24gPSAnbm9uZSc7XG4gIHMuY29sb3IgPSAnIzY1NkE2Qic7XG5cbiAgc25hY2tiYXIuYXBwZW5kQ2hpbGQoc25hY2tiYXJUZXh0KTtcbiAgc25hY2tiYXIuYXBwZW5kQ2hpbGQoc25hY2tiYXJCdXR0b24pO1xuXG4gIHRoaXMub3ZlcmxheSA9IG92ZXJsYXk7XG4gIHRoaXMudGV4dCA9IHRleHQ7XG5cbiAgdGhpcy5oaWRlKCk7XG59XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICBpZiAoIXBhcmVudCAmJiAhdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7XG4gIH0gZWxzZSBpZiAocGFyZW50KSB7XG4gICAgaWYgKHRoaXMub3ZlcmxheS5wYXJlbnRFbGVtZW50ICYmIHRoaXMub3ZlcmxheS5wYXJlbnRFbGVtZW50ICE9IHBhcmVudClcbiAgICAgIHRoaXMub3ZlcmxheS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMub3ZlcmxheSk7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5KTtcbiAgfVxuXG4gIHRoaXMub3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICB2YXIgaW1nID0gdGhpcy5vdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xuICB2YXIgcyA9IGltZy5zdHlsZTtcblxuICBpZiAoVXRpbC5pc0xhbmRzY2FwZU1vZGUoKSkge1xuICAgIHMud2lkdGggPSAnMjAlJztcbiAgICBzLm1hcmdpbkxlZnQgPSAnNDAlJztcbiAgICBzLm1hcmdpblRvcCA9ICczJSc7XG4gIH0gZWxzZSB7XG4gICAgcy53aWR0aCA9ICc1MCUnO1xuICAgIHMubWFyZ2luTGVmdCA9ICcyNSUnO1xuICAgIHMubWFyZ2luVG9wID0gJzI1JSc7XG4gIH1cbn07XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbn07XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuc2hvd1RlbXBvcmFyaWx5ID0gZnVuY3Rpb24obXMsIHBhcmVudCkge1xuICB0aGlzLnNob3cocGFyZW50KTtcbiAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy5oaWRlLmJpbmQodGhpcyksIG1zKTtcbn07XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuZGlzYWJsZVNob3dUZW1wb3JhcmlseSA9IGZ1bmN0aW9uKCkge1xuICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG59O1xuXG5Sb3RhdGVJbnN0cnVjdGlvbnMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRpc2FibGVTaG93VGVtcG9yYXJpbHkoKTtcbiAgLy8gSW4gcG9ydHJhaXQgVlIgbW9kZSwgdGVsbCB0aGUgdXNlciB0byByb3RhdGUgdG8gbGFuZHNjYXBlLiBPdGhlcndpc2UsIGhpZGVcbiAgLy8gdGhlIGluc3RydWN0aW9ucy5cbiAgaWYgKCFVdGlsLmlzTGFuZHNjYXBlTW9kZSgpICYmIFV0aWwuaXNNb2JpbGUoKSkge1xuICAgIHRoaXMuc2hvdygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaGlkZSgpO1xuICB9XG59O1xuXG5Sb3RhdGVJbnN0cnVjdGlvbnMucHJvdG90eXBlLmxvYWRJY29uXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBFbmNvZGVkIGFzc2V0X3NyYy9yb3RhdGUtaW5zdHJ1Y3Rpb25zLnN2Z1xuICB0aGlzLmljb24gPSBVdGlsLmJhc2U2NCgnaW1hZ2Uvc3ZnK3htbCcsICdQRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpVlZSR0xUZ2lJSE4wWVc1a1lXeHZibVU5SW01dklqOCtDanh6ZG1jZ2QybGtkR2c5SWpFNU9IQjRJaUJvWldsbmFIUTlJakkwTUhCNElpQjJhV1YzUW05NFBTSXdJREFnTVRrNElESTBNQ0lnZG1WeWMybHZiajBpTVM0eElpQjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIaHRiRzV6T25oc2FXNXJQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaHNhVzVySWlCNGJXeHVjenB6YTJWMFkyZzlJbWgwZEhBNkx5OTNkM2N1WW05b1pXMXBZVzVqYjJScGJtY3VZMjl0TDNOclpYUmphQzl1Y3lJK0NpQWdJQ0E4SVMwdElFZGxibVZ5WVhSdmNqb2dVMnRsZEdOb0lETXVNeTR6SUNneE1qQTRNU2tnTFNCb2RIUndPaTh2ZDNkM0xtSnZhR1Z0YVdGdVkyOWthVzVuTG1OdmJTOXphMlYwWTJnZ0xTMCtDaUFnSUNBOGRHbDBiR1UrZEhKaGJuTnBkR2x2Ymp3dmRHbDBiR1UrQ2lBZ0lDQThaR1Z6WXo1RGNtVmhkR1ZrSUhkcGRHZ2dVMnRsZEdOb0xqd3ZaR1Z6WXo0S0lDQWdJRHhrWldaelBqd3ZaR1ZtY3o0S0lDQWdJRHhuSUdsa1BTSlFZV2RsTFRFaUlITjBjbTlyWlQwaWJtOXVaU0lnYzNSeWIydGxMWGRwWkhSb1BTSXhJaUJtYVd4c1BTSnViMjVsSWlCbWFXeHNMWEoxYkdVOUltVjJaVzV2WkdRaUlITnJaWFJqYURwMGVYQmxQU0pOVTFCaFoyVWlQZ29nSUNBZ0lDQWdJRHhuSUdsa1BTSjBjbUZ1YzJsMGFXOXVJaUJ6YTJWMFkyZzZkSGx3WlQwaVRWTkJjblJpYjJGeVpFZHliM1Z3SWo0S0lDQWdJQ0FnSUNBZ0lDQWdQR2NnYVdROUlrbHRjRzl5ZEdWa0xVeGhlV1Z5Y3kxRGIzQjVMVFF0S3kxSmJYQnZjblJsWkMxTVlYbGxjbk10UTI5d2VTMHJMVWx0Y0c5eWRHVmtMVXhoZVdWeWN5MURiM0I1TFRJdFEyOXdlU0lnYzJ0bGRHTm9PblI1Y0dVOUlrMVRUR0Y1WlhKSGNtOTFjQ0krQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WnlCcFpEMGlTVzF3YjNKMFpXUXRUR0Y1WlhKekxVTnZjSGt0TkNJZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9NQzR3TURBd01EQXNJREV3Tnk0d01EQXdNREFwSWlCemEyVjBZMmc2ZEhsd1pUMGlUVk5UYUdGd1pVZHliM1Z3SWo0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVFE1TGpZeU5Td3lMalV5TnlCRE1UUTVMall5TlN3eUxqVXlOeUF4TlRVdU9EQTFMRFl1TURrMklERTFOaTR6TmpJc05pNDBNVGdnVERFMU5pNHpOaklzTnk0ek1EUWdRekUxTmk0ek5qSXNOeTQwT0RFZ01UVTJMak0zTlN3M0xqWTJOQ0F4TlRZdU5DdzNMamcxTXlCRE1UVTJMalF4TERjdU9UTTBJREUxTmk0ME1pdzRMakF4TlNBeE5UWXVOREkzTERndU1EazFJRU14TlRZdU5UWTNMRGt1TlRFZ01UVTNMalF3TVN3eE1TNHdPVE1nTVRVNExqVXpNaXd4TWk0d09UUWdUREUyTkM0eU5USXNNVGN1TVRVMklFd3hOalF1TXpNekxERTNMakEyTmlCRE1UWTBMak16TXl3eE55NHdOallnTVRZNExqY3hOU3d4TkM0MU16WWdNVFk1TGpVMk9Dd3hOQzR3TkRJZ1F6RTNNUzR3TWpVc01UUXVPRGd6SURFNU5TNDFNemdzTWprdU1ETTFJREU1TlM0MU16Z3NNamt1TURNMUlFd3hPVFV1TlRNNExEZ3pMakF6TmlCRE1UazFMalV6T0N3NE15NDRNRGNnTVRrMUxqRTFNaXc0TkM0eU5UTWdNVGswTGpVNUxEZzBMakkxTXlCRE1UazBMak0xTnl3NE5DNHlOVE1nTVRrMExqQTVOU3c0TkM0eE56Y2dNVGt6TGpneE9DdzROQzR3TVRjZ1RERTJPUzQ0TlRFc056QXVNVGM1SUV3eE5qa3VPRE0zTERjd0xqSXdNeUJNTVRReUxqVXhOU3c0TlM0NU56Z2dUREUwTVM0Mk5qVXNPRFF1TmpVMUlFTXhNell1T1RNMExEZ3pMakV5TmlBeE16RXVPVEUzTERneExqa3hOU0F4TWpZdU56RTBMRGd4TGpBME5TQkRNVEkyTGpjd09TdzRNUzR3TmlBeE1qWXVOekEzTERneExqQTJPU0F4TWpZdU56QTNMRGd4TGpBMk9TQk1NVEl4TGpZMExEazRMakF6SUV3eE1UTXVOelE1TERFd01pNDFPRFlnVERFeE15NDNNVElzTVRBeUxqVXlNeUJNTVRFekxqY3hNaXd4TXpBdU1URXpJRU14TVRNdU56RXlMREV6TUM0NE9EVWdNVEV6TGpNeU5pd3hNekV1TXpNZ01URXlMamMyTkN3eE16RXVNek1nUXpFeE1pNDFNeklzTVRNeExqTXpJREV4TWk0eU5qa3NNVE14TGpJMU5DQXhNVEV1T1RreUxERXpNUzR3T1RRZ1REWTVMalV4T1N3eE1EWXVOVGN5SUVNMk9DNDFOamtzTVRBMkxqQXlNeUEyTnk0M09Ua3NNVEEwTGpZNU5TQTJOeTQzT1Rrc01UQXpMall3TlNCTU5qY3VOems1TERFd01pNDFOeUJNTmpjdU56YzRMREV3TWk0Mk1UY2dRelkzTGpJM0xERXdNaTR6T1RNZ05qWXVOalE0TERFd01pNHlORGtnTmpVdU9UWXlMREV3TWk0eU1UZ2dRelkxTGpnM05Td3hNREl1TWpFMElEWTFMamM0T0N3eE1ESXVNakV5SURZMUxqY3dNU3d4TURJdU1qRXlJRU0yTlM0Mk1EWXNNVEF5TGpJeE1pQTJOUzQxTVRFc01UQXlMakl4TlNBMk5TNDBNVFlzTVRBeUxqSXhPU0JETmpVdU1UazFMREV3TWk0eU1qa2dOalF1T1RjMExERXdNaTR5TXpVZ05qUXVOelUwTERFd01pNHlNelVnUXpZMExqTXpNU3d4TURJdU1qTTFJRFl6TGpreE1Td3hNREl1TWpFMklEWXpMalE1T0N3eE1ESXVNVGM0SUVNMk1TNDRORE1zTVRBeUxqQXlOU0EyTUM0eU9UZ3NNVEF4TGpVM09DQTFPUzR3T1RRc01UQXdMamc0TWlCTU1USXVOVEU0TERjekxqazVNaUJNTVRJdU5USXpMRGMwTGpBd05DQk1NaTR5TkRVc05UVXVNalUwSUVNeExqSTBOQ3cxTXk0ME1qY2dNaTR3TURRc05URXVNRE00SURNdU9UUXpMRFE1TGpreE9DQk1OVGt1T1RVMExERTNMalUzTXlCRE5qQXVOakkyTERFM0xqRTROU0EyTVM0ek5Td3hOeTR3TURFZ05qSXVNRFV6TERFM0xqQXdNU0JETmpNdU16YzVMREUzTGpBd01TQTJOQzQyTWpVc01UY3VOallnTmpVdU1qZ3NNVGd1T0RVMElFdzJOUzR5T0RVc01UZ3VPRFV4SUV3Mk5TNDFNVElzTVRrdU1qWTBJRXcyTlM0MU1EWXNNVGt1TWpZNElFTTJOUzQ1TURrc01qQXVNREF6SURZMkxqUXdOU3d5TUM0Mk9DQTJOaTQ1T0RNc01qRXVNamcySUV3Mk55NHlOaXd5TVM0MU5UWWdRelk1TGpFM05Dd3lNeTQwTURZZ056RXVOekk0TERJMExqTTFOeUEzTkM0ek56TXNNalF1TXpVM0lFTTNOaTR6TWpJc01qUXVNelUzSURjNExqTXlNU3d5TXk0NE5DQTRNQzR4TkRnc01qSXVOemcxSUVNNE1DNHhOakVzTWpJdU56ZzFJRGczTGpRMk55d3hPQzQxTmpZZ09EY3VORFkzTERFNExqVTJOaUJET0RndU1UTTVMREU0TGpFM09DQTRPQzQ0TmpNc01UY3VPVGswSURnNUxqVTJOaXd4Tnk0NU9UUWdRemt3TGpnNU1pd3hOeTQ1T1RRZ09USXVNVE00TERFNExqWTFNaUE1TWk0M09USXNNVGt1T0RRM0lFdzVOaTR3TkRJc01qVXVOemMxSUV3NU5pNHdOalFzTWpVdU56VTNJRXd4TURJdU9EUTVMREk1TGpZM05DQk1NVEF5TGpjME5Dd3lPUzQwT1RJZ1RERTBPUzQyTWpVc01pNDFNamNnVFRFME9TNDJNalVzTUM0NE9USWdRekUwT1M0ek5ETXNNQzQ0T1RJZ01UUTVMakEyTWl3d0xqazJOU0F4TkRndU9ERXNNUzR4TVNCTU1UQXlMalkwTVN3eU55NDJOallnVERrM0xqSXpNU3d5TkM0MU5ESWdURGswTGpJeU5pd3hPUzR3TmpFZ1F6a3pMak14TXl3eE55NHpPVFFnT1RFdU5USTNMREUyTGpNMU9TQTRPUzQxTmpZc01UWXVNelU0SUVNNE9DNDFOVFVzTVRZdU16VTRJRGczTGpVME5pd3hOaTQyTXpJZ09EWXVOalE1TERFM0xqRTFJRU00TXk0NE56Z3NNVGd1TnpVZ056a3VOamczTERJeExqRTJPU0EzT1M0ek56UXNNakV1TXpRMUlFTTNPUzR6TlRrc01qRXVNelV6SURjNUxqTTBOU3d5TVM0ek5qRWdOemt1TXpNc01qRXVNelk1SUVNM055NDNPVGdzTWpJdU1qVTBJRGMyTGpBNE5Dd3lNaTQzTWpJZ056UXVNemN6TERJeUxqY3lNaUJETnpJdU1EZ3hMREl5TGpjeU1pQTJPUzQ1TlRrc01qRXVPRGtnTmpndU16azNMREl3TGpNNElFdzJPQzR4TkRVc01qQXVNVE0xSUVNMk55NDNNRFlzTVRrdU5qY3lJRFkzTGpNeU15d3hPUzR4TlRZZ05qY3VNREEyTERFNExqWXdNU0JETmpZdU9UZzRMREU0TGpVMU9TQTJOaTQ1Tmpnc01UZ3VOVEU1SURZMkxqazBOaXd4T0M0ME56a2dURFkyTGpjeE9Td3hPQzR3TmpVZ1F6WTJMalk1TERFNExqQXhNaUEyTmk0Mk5UZ3NNVGN1T1RZZ05qWXVOakkwTERFM0xqa3hNU0JETmpVdU5qZzJMREUyTGpNek55QTJNeTQ1TlRFc01UVXVNelkySURZeUxqQTFNeXd4TlM0ek5qWWdRell4TGpBME1pd3hOUzR6TmpZZ05qQXVNRE16TERFMUxqWTBJRFU1TGpFek5pd3hOaTR4TlRnZ1RETXVNVEkxTERRNExqVXdNaUJETUM0ME1qWXNOVEF1TURZeElDMHdMall4TXl3MU15NDBORElnTUM0NE1URXNOVFl1TURRZ1RERXhMakE0T1N3M05DNDNPU0JETVRFdU1qWTJMRGMxTGpFeE15QXhNUzQxTXpjc056VXVNelV6SURFeExqZzFMRGMxTGpRNU5DQk1OVGd1TWpjMkxERXdNaTR5T1RnZ1F6VTVMalkzT1N3eE1ETXVNVEE0SURZeExqUXpNeXd4TURNdU5qTWdOak11TXpRNExERXdNeTQ0TURZZ1F6WXpMamd4TWl3eE1ETXVPRFE0SURZMExqSTROU3d4TURNdU9EY2dOalF1TnpVMExERXdNeTQ0TnlCRE5qVXNNVEF6TGpnM0lEWTFMakkwT1N3eE1ETXVPRFkwSURZMUxqUTVOQ3d4TURNdU9EVXlJRU0yTlM0MU5qTXNNVEF6TGpnME9TQTJOUzQyTXpJc01UQXpMamcwTnlBMk5TNDNNREVzTVRBekxqZzBOeUJETmpVdU56WTBMREV3TXk0NE5EY2dOalV1T0RJNExERXdNeTQ0TkRrZ05qVXVPRGtzTVRBekxqZzFNaUJETmpVdU9UZzJMREV3TXk0NE5UWWdOall1TURnc01UQXpMamcyTXlBMk5pNHhOek1zTVRBekxqZzNOQ0JETmpZdU1qZ3lMREV3TlM0ME5qY2dOamN1TXpNeUxERXdOeTR4T1RjZ05qZ3VOekF5TERFd055NDVPRGdnVERFeE1TNHhOelFzTVRNeUxqVXhJRU14TVRFdU5qazRMREV6TWk0NE1USWdNVEV5TGpJek1pd3hNekl1T1RZMUlERXhNaTQzTmpRc01UTXlMamsyTlNCRE1URTBMakkyTVN3eE16SXVPVFkxSURFeE5TNHpORGNzTVRNeExqYzJOU0F4TVRVdU16UTNMREV6TUM0eE1UTWdUREV4TlM0ek5EY3NNVEF6TGpVMU1TQk1NVEl5TGpRMU9DdzVPUzQwTkRZZ1F6RXlNaTQ0TVRrc09Ua3VNak0zSURFeU15NHdPRGNzT1RndU9EazRJREV5TXk0eU1EY3NPVGd1TkRrNElFd3hNamN1T0RZMUxEZ3lMamt3TlNCRE1UTXlMakkzT1N3NE15NDNNRElnTVRNMkxqVTFOeXc0TkM0M05UTWdNVFF3TGpZd055dzROaTR3TXpNZ1RERTBNUzR4TkN3NE5pNDROaklnUXpFME1TNDBOVEVzT0RjdU16UTJJREUwTVM0NU56Y3NPRGN1TmpFeklERTBNaTQxTVRZc09EY3VOakV6SUVNeE5ESXVOemswTERnM0xqWXhNeUF4TkRNdU1EYzJMRGczTGpVME1pQXhORE11TXpNekxEZzNMak01TXlCTU1UWTVMamcyTlN3M01pNHdOellnVERFNU15dzROUzQwTXpNZ1F6RTVNeTQxTWpNc09EVXVOek0xSURFNU5DNHdOVGdzT0RVdU9EZzRJREU1TkM0MU9TdzROUzQ0T0RnZ1F6RTVOaTR3T0Rjc09EVXVPRGc0SURFNU55NHhOek1zT0RRdU5qZzVJREU1Tnk0eE56TXNPRE11TURNMklFd3hPVGN1TVRjekxESTVMakF6TlNCRE1UazNMakUzTXl3eU9DNDBOVEVnTVRrMkxqZzJNU3d5Tnk0NU1URWdNVGsyTGpNMU5Td3lOeTQyTVRrZ1F6RTVOaTR6TlRVc01qY3VOakU1SURFM01TNDRORE1zTVRNdU5EWTNJREUzTUM0ek9EVXNNVEl1TmpJMklFTXhOekF1TVRNeUxERXlMalE0SURFMk9TNDROU3d4TWk0ME1EY2dNVFk1TGpVMk9Dd3hNaTQwTURjZ1F6RTJPUzR5T0RVc01USXVOREEzSURFMk9TNHdNRElzTVRJdU5EZ3hJREUyT0M0M05Ea3NNVEl1TmpJM0lFTXhOamd1TVRRekxERXlMamszT0NBeE5qVXVOelUyTERFMExqTTFOeUF4TmpRdU5ESTBMREUxTGpFeU5TQk1NVFU1TGpZeE5Td3hNQzQ0TnlCRE1UVTRMamM1Tml3eE1DNHhORFVnTVRVNExqRTFOQ3c0TGprek55QXhOVGd1TURVMExEY3VPVE0wSUVNeE5UZ3VNRFExTERjdU9ETTNJREUxT0M0d016UXNOeTQzTXprZ01UVTRMakF5TVN3M0xqWTBJRU14TlRndU1EQTFMRGN1TlRJeklERTFOeTQ1T1Rnc055NDBNU0F4TlRjdU9UazRMRGN1TXpBMElFd3hOVGN1T1RrNExEWXVOREU0SUVNeE5UY3VPVGs0TERVdU9ETTBJREUxTnk0Mk9EWXNOUzR5T1RVZ01UVTNMakU0TVN3MUxqQXdNaUJETVRVMkxqWXlOQ3cwTGpZNElERTFNQzQwTkRJc01TNHhNVEVnTVRVd0xqUTBNaXd4TGpFeE1TQkRNVFV3TGpFNE9Td3dMamsyTlNBeE5Ea3VPVEEzTERBdU9Ea3lJREUwT1M0Mk1qVXNNQzQ0T1RJaUlHbGtQU0pHYVd4c0xURWlJR1pwYkd3OUlpTTBOVFZCTmpRaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5PVFl1TURJM0xESTFMall6TmlCTU1UUXlMall3TXl3MU1pNDFNamNnUXpFME15NDRNRGNzTlRNdU1qSXlJREUwTkM0MU9ESXNOVFF1TVRFMElERTBOQzQ0TkRVc05UVXVNRFk0SUV3eE5EUXVPRE0xTERVMUxqQTNOU0JNTmpNdU5EWXhMREV3TWk0d05UY2dURFl6TGpRMkxERXdNaTR3TlRjZ1F6WXhMamd3Tml3eE1ERXVPVEExSURZd0xqSTJNU3d4TURFdU5EVTNJRFU1TGpBMU55d3hNREF1TnpZeUlFd3hNaTQwT0RFc056TXVPRGN4SUV3NU5pNHdNamNzTWpVdU5qTTJJaUJwWkQwaVJtbHNiQzB5SWlCbWFXeHNQU0lqUmtGR1FVWkJJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRZekxqUTJNU3d4TURJdU1UYzBJRU0yTXk0ME5UTXNNVEF5TGpFM05DQTJNeTQwTkRZc01UQXlMakUzTkNBMk15NDBNemtzTVRBeUxqRTNNaUJETmpFdU56UTJMREV3TWk0d01UWWdOakF1TWpFeExERXdNUzQxTmpNZ05UZ3VPVGs0TERFd01DNDROak1nVERFeUxqUXlNaXczTXk0NU56TWdRekV5TGpNNE5pdzNNeTQ1TlRJZ01USXVNelkwTERjekxqa3hOQ0F4TWk0ek5qUXNOek11T0RjeElFTXhNaTR6TmpRc056TXVPRE1nTVRJdU16ZzJMRGN6TGpjNU1TQXhNaTQwTWpJc056TXVOemNnVERrMUxqazJPQ3d5TlM0MU16VWdRemsyTGpBd05Dd3lOUzQxTVRRZ09UWXVNRFE1TERJMUxqVXhOQ0E1Tmk0d09EVXNNalV1TlRNMUlFd3hOREl1TmpZeExEVXlMalF5TmlCRE1UUXpMamc0T0N3MU15NHhNelFnTVRRMExqWTRNaXcxTkM0d016Z2dNVFEwTGprMU55dzFOUzR3TXpjZ1F6RTBOQzQ1Tnl3MU5TNHdPRE1nTVRRMExqazFNeXcxTlM0eE16TWdNVFEwTGpreE5TdzFOUzR4TmpFZ1F6RTBOQzQ1TVRFc05UVXVNVFkxSURFME5DNDRPVGdzTlRVdU1UYzBJREUwTkM0NE9UUXNOVFV1TVRjM0lFdzJNeTQxTVRrc01UQXlMakUxT0NCRE5qTXVOVEF4TERFd01pNHhOamtnTmpNdU5EZ3hMREV3TWk0eE56UWdOak11TkRZeExERXdNaTR4TnpRZ1REWXpMalEyTVN3eE1ESXVNVGMwSUZvZ1RURXlMamN4TkN3M015NDROekVnVERVNUxqRXhOU3d4TURBdU5qWXhJRU0yTUM0eU9UTXNNVEF4TGpNME1TQTJNUzQzT0RZc01UQXhMamM0TWlBMk15NDBNelVzTVRBeExqa3pOeUJNTVRRMExqY3dOeXcxTlM0d01UVWdRekUwTkM0ME1qZ3NOVFF1TVRBNElERTBNeTQyT0RJc05UTXVNamcxSURFME1pNDFORFFzTlRJdU5qSTRJRXc1Tmk0d01qY3NNalV1TnpjeElFd3hNaTQzTVRRc056TXVPRGN4SUV3eE1pNDNNVFFzTnpNdU9EY3hJRm9pSUdsa1BTSkdhV3hzTFRNaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UUTRMak15Tnl3MU9DNDBOekVnUXpFME9DNHhORFVzTlRndU5EZ2dNVFEzTGprMk1pdzFPQzQwT0NBeE5EY3VOemd4TERVNExqUTNNaUJETVRRMUxqZzROeXcxT0M0ek9Ea2dNVFEwTGpRM09TdzFOeTQwTXpRZ01UUTBMall6Tml3MU5pNHpOQ0JETVRRMExqWTRPU3cxTlM0NU5qY2dNVFEwTGpZMk5DdzFOUzQxT1RjZ01UUTBMalUyTkN3MU5TNHlNelVnVERZekxqUTJNU3d4TURJdU1EVTNJRU0yTkM0d09Ea3NNVEF5TGpFeE5TQTJOQzQzTXpNc01UQXlMakV6SURZMUxqTTNPU3d4TURJdU1EazVJRU0yTlM0MU5qRXNNVEF5TGpBNUlEWTFMamMwTXl3eE1ESXVNRGtnTmpVdU9USTFMREV3TWk0d09UZ2dRelkzTGpneE9Td3hNREl1TVRneElEWTVMakl5Tnl3eE1ETXVNVE0ySURZNUxqQTNMREV3TkM0eU15Qk1NVFE0TGpNeU55dzFPQzQwTnpFaUlHbGtQU0pHYVd4c0xUUWlJR1pwYkd3OUlpTkdSa1pHUmtZaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5Oamt1TURjc01UQTBMak0wTnlCRE5qa3VNRFE0TERFd05DNHpORGNnTmprdU1ESTFMREV3TkM0ek5DQTJPUzR3TURVc01UQTBMak15TnlCRE5qZ3VPVFk0TERFd05DNHpNREVnTmpndU9UUTRMREV3TkM0eU5UY2dOamd1T1RVMUxERXdOQzR5TVRNZ1F6WTVMREV3TXk0NE9UWWdOamd1T0RrNExERXdNeTQxTnpZZ05qZ3VOalU0TERFd015NHlPRGdnUXpZNExqRTFNeXd4TURJdU5qYzRJRFkzTGpFd015d3hNREl1TWpZMklEWTFMamt5TERFd01pNHlNVFFnUXpZMUxqYzBNaXd4TURJdU1qQTJJRFkxTGpVMk15d3hNREl1TWpBM0lEWTFMak00TlN3eE1ESXVNakUxSUVNMk5DNDNORElzTVRBeUxqSTBOaUEyTkM0d09EY3NNVEF5TGpJek1pQTJNeTQwTlN3eE1ESXVNVGMwSUVNMk15NHpPVGtzTVRBeUxqRTJPU0EyTXk0ek5UZ3NNVEF5TGpFek1pQTJNeTR6TkRjc01UQXlMakE0TWlCRE5qTXVNek0yTERFd01pNHdNek1nTmpNdU16VTRMREV3TVM0NU9ERWdOak11TkRBeUxERXdNUzQ1TlRZZ1RERTBOQzQxTURZc05UVXVNVE0wSUVNeE5EUXVOVE0zTERVMUxqRXhOaUF4TkRRdU5UYzFMRFUxTGpFeE15QXhORFF1TmpBNUxEVTFMakV5TnlCRE1UUTBMalkwTWl3MU5TNHhOREVnTVRRMExqWTJPQ3cxTlM0eE55QXhORFF1TmpjM0xEVTFMakl3TkNCRE1UUTBMamM0TVN3MU5TNDFPRFVnTVRRMExqZ3dOaXcxTlM0NU56SWdNVFEwTGpjMU1TdzFOaTR6TlRjZ1F6RTBOQzQzTURZc05UWXVOamN6SURFME5DNDRNRGdzTlRZdU9UazBJREUwTlM0d05EY3NOVGN1TWpneUlFTXhORFV1TlRVekxEVTNMamc1TWlBeE5EWXVOakF5TERVNExqTXdNeUF4TkRjdU56ZzJMRFU0TGpNMU5TQkRNVFEzTGprMk5DdzFPQzR6TmpNZ01UUTRMakUwTXl3MU9DNHpOak1nTVRRNExqTXlNU3cxT0M0ek5UUWdRekUwT0M0ek56Y3NOVGd1TXpVeUlERTBPQzQwTWpRc05UZ3VNemczSURFME9DNDBNemtzTlRndU5ETTRJRU14TkRndU5EVTBMRFU0TGpRNUlERTBPQzQwTXpJc05UZ3VOVFExSURFME9DNHpPRFVzTlRndU5UY3lJRXcyT1M0eE1qa3NNVEEwTGpNek1TQkROamt1TVRFeExERXdOQzR6TkRJZ05qa3VNRGtzTVRBMExqTTBOeUEyT1M0d055d3hNRFF1TXpRM0lFdzJPUzR3Tnl3eE1EUXVNelEzSUZvZ1RUWTFMalkyTlN3eE1ERXVPVGMxSUVNMk5TNDNOVFFzTVRBeExqazNOU0EyTlM0NE5ESXNNVEF4TGprM055QTJOUzQ1TXl3eE1ERXVPVGd4SUVNMk55NHhPVFlzTVRBeUxqQXpOeUEyT0M0eU9ETXNNVEF5TGpRMk9TQTJPQzQ0TXpnc01UQXpMakV6T1NCRE5qa3VNRFkxTERFd015NDBNVE1nTmprdU1UZzRMREV3TXk0M01UUWdOamt1TVRrNExERXdOQzR3TWpFZ1RERTBOeTQ0T0RNc05UZ3VOVGt5SUVNeE5EY3VPRFEzTERVNExqVTVNaUF4TkRjdU9ERXhMRFU0TGpVNU1TQXhORGN1TnpjMkxEVTRMalU0T1NCRE1UUTJMalV3T1N3MU9DNDFNek1nTVRRMUxqUXlNaXcxT0M0eElERTBOQzQ0Tmpjc05UY3VORE14SUVNeE5EUXVOVGcxTERVM0xqQTVNU0F4TkRRdU5EWTFMRFUyTGpjd055QXhORFF1TlRJc05UWXVNekkwSUVNeE5EUXVOVFl6TERVMkxqQXlNU0F4TkRRdU5UVXlMRFUxTGpjeE5pQXhORFF1TkRnNExEVTFMalF4TkNCTU5qTXVPRFEyTERFd01TNDVOeUJETmpRdU16VXpMREV3TWk0d01ESWdOalF1T0RZM0xERXdNaTR3TURZZ05qVXVNemMwTERFd01TNDVPRElnUXpZMUxqUTNNU3d4TURFdU9UYzNJRFkxTGpVMk9Dd3hNREV1T1RjMUlEWTFMalkyTlN3eE1ERXVPVGMxSUV3Mk5TNDJOalVzTVRBeExqazNOU0JhSWlCcFpEMGlSbWxzYkMwMUlpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUSXVNakE0TERVMUxqRXpOQ0JETVM0eU1EY3NOVE11TXpBM0lERXVPVFkzTERVd0xqa3hOeUF6TGprd05pdzBPUzQzT1RjZ1REVTVMamt4Tnl3eE55NDBOVE1nUXpZeExqZzFOaXd4Tmk0ek16TWdOalF1TWpReExERTJMamt3TnlBMk5TNHlORE1zTVRndU56TTBJRXcyTlM0ME56VXNNVGt1TVRRMElFTTJOUzQ0TnpJc01Ua3VPRGd5SURZMkxqTTJPQ3d5TUM0MU5pQTJOaTQ1TkRVc01qRXVNVFkxSUV3Mk55NHlNak1zTWpFdU5ETTFJRU0zTUM0MU5EZ3NNalF1TmpRNUlEYzFMamd3Tml3eU5TNHhOVEVnT0RBdU1URXhMREl5TGpZMk5TQk1PRGN1TkRNc01UZ3VORFExSUVNNE9TNHpOeXd4Tnk0ek1qWWdPVEV1TnpVMExERTNMamc1T1NBNU1pNDNOVFVzTVRrdU56STNJRXc1Tmk0d01EVXNNalV1TmpVMUlFd3hNaTQwT0RZc056TXVPRGcwSUV3eUxqSXdPQ3cxTlM0eE16UWdXaUlnYVdROUlrWnBiR3d0TmlJZ1ptbHNiRDBpSTBaQlJrRkdRU0krUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE1pNDBPRFlzTnpRdU1EQXhJRU14TWk0ME56WXNOelF1TURBeElERXlMalEyTlN3M015NDVPVGtnTVRJdU5EVTFMRGN6TGprNU5pQkRNVEl1TkRJMExEY3pMams0T0NBeE1pNHpPVGtzTnpNdU9UWTNJREV5TGpNNE5DdzNNeTQ1TkNCTU1pNHhNRFlzTlRVdU1Ua2dRekV1TURjMUxEVXpMak14SURFdU9EVTNMRFV3TGpnME5TQXpMamcwT0N3ME9TNDJPVFlnVERVNUxqZzFPQ3d4Tnk0ek5USWdRell3TGpVeU5Td3hOaTQ1TmpjZ05qRXVNamN4TERFMkxqYzJOQ0EyTWk0d01UWXNNVFl1TnpZMElFTTJNeTQwTXpFc01UWXVOelkwSURZMExqWTJOaXd4Tnk0ME5qWWdOalV1TXpJM0xERTRMalkwTmlCRE5qVXVNek0zTERFNExqWTFOQ0EyTlM0ek5EVXNNVGd1TmpZeklEWTFMak0xTVN3eE9DNDJOelFnVERZMUxqVTNPQ3d4T1M0d09EZ2dRelkxTGpVNE5Dd3hPUzR4SURZMUxqVTRPU3d4T1M0eE1USWdOalV1TlRreExERTVMakV5TmlCRE5qVXVPVGcxTERFNUxqZ3pPQ0EyTmk0ME5qa3NNakF1TkRrM0lEWTNMakF6TERJeExqQTROU0JNTmpjdU16QTFMREl4TGpNMU1TQkROamt1TVRVeExESXpMakV6TnlBM01TNDJORGtzTWpRdU1USWdOelF1TXpNMkxESTBMakV5SUVNM05pNHpNVE1zTWpRdU1USWdOemd1TWprc01qTXVOVGd5SURnd0xqQTFNeXd5TWk0MU5qTWdRemd3TGpBMk5Dd3lNaTQxTlRjZ09EQXVNRGMyTERJeUxqVTFNeUE0TUM0d09EZ3NNakl1TlRVZ1REZzNMak0zTWl3eE9DNHpORFFnUXpnNExqQXpPQ3d4Tnk0NU5Ua2dPRGd1TnpnMExERTNMamMxTmlBNE9TNDFNamtzTVRjdU56VTJJRU01TUM0NU5UWXNNVGN1TnpVMklEa3lMakl3TVN3eE9DNDBOeklnT1RJdU9EVTRMREU1TGpZM0lFdzVOaTR4TURjc01qVXVOVGs1SUVNNU5pNHhNemdzTWpVdU5qVTBJRGsyTGpFeE9Dd3lOUzQzTWpRZ09UWXVNRFl6TERJMUxqYzFOaUJNTVRJdU5UUTFMRGN6TGprNE5TQkRNVEl1TlRJMkxEY3pMams1TmlBeE1pNDFNRFlzTnpRdU1EQXhJREV5TGpRNE5pdzNOQzR3TURFZ1RERXlMalE0Tml3M05DNHdNREVnV2lCTk5qSXVNREUyTERFMkxqazVOeUJETmpFdU16RXlMREUyTGprNU55QTJNQzQyTURZc01UY3VNVGtnTlRrdU9UYzFMREUzTGpVMU5DQk1NeTQ1TmpVc05Ea3VPRGs1SUVNeUxqQTRNeXcxTUM0NU9EVWdNUzR6TkRFc05UTXVNekE0SURJdU16RXNOVFV1TURjNElFd3hNaTQxTXpFc056TXVOekl6SUV3NU5TNDRORGdzTWpVdU5qRXhJRXc1TWk0Mk5UTXNNVGt1TnpneUlFTTVNaTR3TXpnc01UZ3VOallnT1RBdU9EY3NNVGN1T1RrZ09Ea3VOVEk1TERFM0xqazVJRU00T0M0NE1qVXNNVGN1T1RrZ09EZ3VNVEU1TERFNExqRTRNaUE0Tnk0ME9Ea3NNVGd1TlRRM0lFdzRNQzR4TnpJc01qSXVOemN5SUVNNE1DNHhOakVzTWpJdU56YzRJRGd3TGpFME9Td3lNaTQzT0RJZ09EQXVNVE0zTERJeUxqYzROU0JETnpndU16UTJMREl6TGpneE1TQTNOaTR6TkRFc01qUXVNelUwSURjMExqTXpOaXd5TkM0ek5UUWdRemN4TGpVNE9Dd3lOQzR6TlRRZ05qa3VNRE16TERJekxqTTBOeUEyTnk0eE5ESXNNakV1TlRFNUlFdzJOaTQ0TmpRc01qRXVNalE1SUVNMk5pNHlOemNzTWpBdU5qTTBJRFkxTGpjM05Dd3hPUzQ1TkRjZ05qVXVNelkzTERFNUxqSXdNeUJETmpVdU16WXNNVGt1TVRreUlEWTFMak0xTml3eE9TNHhOemtnTmpVdU16VTBMREU1TGpFMk5pQk1OalV1TVRZekxERTRMamd4T1NCRE5qVXVNVFUwTERFNExqZ3hNU0EyTlM0eE5EWXNNVGd1T0RBeElEWTFMakUwTERFNExqYzVJRU0yTkM0MU1qVXNNVGN1TmpZM0lEWXpMak0xTnl3eE5pNDVPVGNnTmpJdU1ERTJMREUyTGprNU55Qk1Oakl1TURFMkxERTJMams1TnlCYUlpQnBaRDBpUm1sc2JDMDNJaUJtYVd4c1BTSWpOakEzUkRoQ0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVFF5TGpRek5DdzBPQzQ0TURnZ1REUXlMalF6TkN3ME9DNDRNRGdnUXpNNUxqa3lOQ3cwT0M0NE1EY2dNemN1TnpNM0xEUTNMalUxSURNMkxqVTRNaXcwTlM0ME5ETWdRek0wTGpjM01TdzBNaTR4TXprZ016WXVNVFEwTERNM0xqZ3dPU0F6T1M0Mk5ERXNNelV1TnpnNUlFdzFNUzQ1TXpJc01qZ3VOamt4SUVNMU15NHhNRE1zTWpndU1ERTFJRFUwTGpReE15d3lOeTQyTlRnZ05UVXVOekl4TERJM0xqWTFPQ0JETlRndU1qTXhMREkzTGpZMU9DQTJNQzQwTVRnc01qZ3VPVEUySURZeExqVTNNeXd6TVM0d01qTWdRell6TGpNNE5Dd3pOQzR6TWpjZ05qSXVNREV5TERNNExqWTFOeUExT0M0MU1UUXNOREF1TmpjM0lFdzBOaTR5TWpNc05EY3VOemMxSUVNME5TNHdOVE1zTkRndU5EVWdORE11TnpReUxEUTRMamd3T0NBME1pNDBNelFzTkRndU9EQTRJRXcwTWk0ME16UXNORGd1T0RBNElGb2dUVFUxTGpjeU1Td3lPQzR4TWpVZ1F6VTBMalE1TlN3eU9DNHhNalVnTlRNdU1qWTFMREk0TGpRMk1TQTFNaTR4TmpZc01qa3VNRGsySUV3ek9TNDROelVzTXpZdU1UazBJRU16Tmk0MU9UWXNNemd1TURnM0lETTFMak13TWl3ME1pNHhNellnTXpZdU9Ua3lMRFExTGpJeE9DQkRNemd1TURZekxEUTNMakUzTXlBME1DNHdPVGdzTkRndU16UWdOREl1TkRNMExEUTRMak0wSUVNME15NDJOakVzTkRndU16UWdORFF1T0Rrc05EZ3VNREExSURRMUxqazVMRFEzTGpNM0lFdzFPQzR5T0RFc05EQXVNamN5SUVNMk1TNDFOaXd6T0M0ek56a2dOakl1T0RVekxETTBMak16SURZeExqRTJOQ3d6TVM0eU5EZ2dRell3TGpBNU1pd3lPUzR5T1RNZ05UZ3VNRFU0TERJNExqRXlOU0ExTlM0M01qRXNNamd1TVRJMUlFdzFOUzQzTWpFc01qZ3VNVEkxSUZvaUlHbGtQU0pHYVd4c0xUZ2lJR1pwYkd3OUlpTTJNRGRFT0VJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVFE1TGpVNE9Dd3lMalF3TnlCRE1UUTVMalU0T0N3eUxqUXdOeUF4TlRVdU56WTRMRFV1T1RjMUlERTFOaTR6TWpVc05pNHlPVGNnVERFMU5pNHpNalVzTnk0eE9EUWdRekUxTmk0ek1qVXNOeTR6TmlBeE5UWXVNek00TERjdU5UUTBJREUxTmk0ek5qSXNOeTQzTXpNZ1F6RTFOaTR6TnpNc055NDRNVFFnTVRVMkxqTTRNaXczTGpnNU5DQXhOVFl1TXprc055NDVOelVnUXpFMU5pNDFNeXc1TGpNNUlERTFOeTR6TmpNc01UQXVPVGN6SURFMU9DNDBPVFVzTVRFdU9UYzBJRXd4TmpVdU9Ea3hMREU0TGpVeE9TQkRNVFkyTGpBMk9Dd3hPQzQyTnpVZ01UWTJMakkwT1N3eE9DNDRNVFFnTVRZMkxqUXpNaXd4T0M0NU16UWdRekUyT0M0d01URXNNVGt1T1RjMElERTJPUzR6T0RJc01Ua3VOQ0F4TmprdU5EazBMREUzTGpZMU1pQkRNVFk1TGpVME15d3hOaTQ0TmpnZ01UWTVMalUxTVN3eE5pNHdOVGNnTVRZNUxqVXhOeXd4TlM0eU1qTWdUREUyT1M0MU1UUXNNVFV1TURZeklFd3hOamt1TlRFMExERXpMamt4TWlCRE1UY3dMamM0TERFMExqWTBNaUF4T1RVdU5UQXhMREk0TGpreE5TQXhPVFV1TlRBeExESTRMamt4TlNCTU1UazFMalV3TVN3NE1pNDVNVFVnUXpFNU5TNDFNREVzT0RRdU1EQTFJREU1TkM0M016RXNPRFF1TkRRMUlERTVNeTQzT0RFc09ETXVPRGszSUV3eE5URXVNekE0TERVNUxqTTNOQ0JETVRVd0xqTTFPQ3cxT0M0NE1qWWdNVFE1TGpVNE9DdzFOeTQwT1RjZ01UUTVMalU0T0N3MU5pNDBNRGdnVERFME9TNDFPRGdzTWpJdU16YzFJaUJwWkQwaVJtbHNiQzA1SWlCbWFXeHNQU0lqUmtGR1FVWkJJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFNU5DNDFOVE1zT0RRdU1qVWdRekU1TkM0eU9UWXNPRFF1TWpVZ01UazBMakF4TXl3NE5DNHhOalVnTVRrekxqY3lNaXc0TXk0NU9UY2dUREUxTVM0eU5TdzFPUzQwTnpZZ1F6RTFNQzR5Tmprc05UZ3VPVEE1SURFME9TNDBOekVzTlRjdU5UTXpJREUwT1M0ME56RXNOVFl1TkRBNElFd3hORGt1TkRjeExESXlMak0zTlNCTU1UUTVMamN3TlN3eU1pNHpOelVnVERFME9TNDNNRFVzTlRZdU5EQTRJRU14TkRrdU56QTFMRFUzTGpRMU9TQXhOVEF1TkRVc05UZ3VOelEwSURFMU1TNHpOallzTlRrdU1qYzBJRXd4T1RNdU9ETTVMRGd6TGpjNU5TQkRNVGswTGpJMk15dzROQzR3TkNBeE9UUXVOalUxTERnMExqQTRNeUF4T1RRdU9UUXlMRGd6TGpreE55QkRNVGsxTGpJeU55dzRNeTQzTlRNZ01UazFMak00TkN3NE15NHpPVGNnTVRrMUxqTTROQ3c0TWk0NU1UVWdUREU1TlM0ek9EUXNNamd1T1RneUlFTXhPVFF1TVRBeUxESTRMakkwTWlBeE56SXVNVEEwTERFMUxqVTBNaUF4TmprdU5qTXhMREUwTGpFeE5DQk1NVFk1TGpZek5Dd3hOUzR5TWlCRE1UWTVMalkyT0N3eE5pNHdOVElnTVRZNUxqWTJMREUyTGpnM05DQXhOamt1TmpFc01UY3VOalU1SUVNeE5qa3VOVFUyTERFNExqVXdNeUF4TmprdU1qRTBMREU1TGpFeU15QXhOamd1TmpRM0xERTVMalF3TlNCRE1UWTRMakF5T0N3eE9TNDNNVFFnTVRZM0xqRTVOeXd4T1M0MU56Z2dNVFkyTGpNMk55d3hPUzR3TXpJZ1F6RTJOaTR4T0RFc01UZ3VPVEE1SURFMk5TNDVPVFVzTVRndU56WTJJREUyTlM0NE1UUXNNVGd1TmpBMklFd3hOVGd1TkRFM0xERXlMakEyTWlCRE1UVTNMakkxT1N3eE1TNHdNellnTVRVMkxqUXhPQ3c1TGpRek55QXhOVFl1TWpjMExEY3VPVGcySUVNeE5UWXVNalkyTERjdU9UQTNJREUxTmk0eU5UY3NOeTQ0TWpjZ01UVTJMakkwTnl3M0xqYzBPQ0JETVRVMkxqSXlNU3czTGpVMU5TQXhOVFl1TWpBNUxEY3VNelkxSURFMU5pNHlNRGtzTnk0eE9EUWdUREUxTmk0eU1Ea3NOaTR6TmpRZ1F6RTFOUzR6TnpVc05TNDRPRE1nTVRRNUxqVXlPU3d5TGpVd09DQXhORGt1TlRJNUxESXVOVEE0SUV3eE5Ea3VOalEyTERJdU16QTJJRU14TkRrdU5qUTJMREl1TXpBMklERTFOUzQ0TWpjc05TNDROelFnTVRVMkxqTTROQ3cyTGpFNU5pQk1NVFUyTGpRME1pdzJMakl6SUV3eE5UWXVORFF5TERjdU1UZzBJRU14TlRZdU5EUXlMRGN1TXpVMUlERTFOaTQwTlRRc055NDFNelVnTVRVMkxqUTNPQ3czTGpjeE55QkRNVFUyTGpRNE9TdzNMamdnTVRVMkxqUTVPU3czTGpnNE1pQXhOVFl1TlRBM0xEY3VPVFl6SUVNeE5UWXVOalExTERrdU16VTRJREUxTnk0ME5UVXNNVEF1T0RrNElERTFPQzQxTnpJc01URXVPRGcySUV3eE5qVXVPVFk1TERFNExqUXpNU0JETVRZMkxqRTBNaXd4T0M0MU9EUWdNVFkyTGpNeE9Td3hPQzQzTWlBeE5qWXVORGsyTERFNExqZ3pOeUJETVRZM0xqSTFOQ3d4T1M0ek16WWdNVFk0TERFNUxqUTJOeUF4TmpndU5UUXpMREU1TGpFNU5pQkRNVFk1TGpBek15d3hPQzQ1TlRNZ01UWTVMak15T1N3eE9DNDBNREVnTVRZNUxqTTNOeXd4Tnk0Mk5EVWdRekUyT1M0ME1qY3NNVFl1T0RZM0lERTJPUzQwTXpRc01UWXVNRFUwSURFMk9TNDBNREVzTVRVdU1qSTRJRXd4TmprdU16azNMREUxTGpBMk5TQk1NVFk1TGpNNU55d3hNeTQzTVNCTU1UWTVMalUzTWl3eE15NDRNU0JETVRjd0xqZ3pPU3d4TkM0MU5ERWdNVGsxTGpVMU9Td3lPQzQ0TVRRZ01UazFMalUxT1N3eU9DNDRNVFFnVERFNU5TNDJNVGdzTWpndU9EUTNJRXd4T1RVdU5qRTRMRGd5TGpreE5TQkRNVGsxTGpZeE9DdzRNeTQwT0RRZ01UazFMalF5TERnekxqa3hNU0F4T1RVdU1EVTVMRGcwTGpFeE9TQkRNVGswTGprd09DdzROQzR5TURZZ01UazBMamN6Tnl3NE5DNHlOU0F4T1RRdU5UVXpMRGcwTGpJMUlpQnBaRDBpUm1sc2JDMHhNQ0lnWm1sc2JEMGlJell3TjBRNFFpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TkRVdU5qZzFMRFUyTGpFMk1TQk1NVFk1TGpnc056QXVNRGd6SUV3eE5ETXVPREl5TERnMUxqQTRNU0JNTVRReUxqTTJMRGcwTGpjM05DQkRNVE0xTGpneU5pdzRNaTQyTURRZ01USTRMamN6TWl3NE1TNHdORFlnTVRJeExqTTBNU3c0TUM0eE5UZ2dRekV4Tmk0NU56WXNOemt1TmpNMElERXhNaTQyTnpnc09ERXVNalUwSURFeE1TNDNORE1zT0RNdU56YzRJRU14TVRFdU5UQTJMRGcwTGpReE5DQXhNVEV1TlRBekxEZzFMakEzTVNBeE1URXVOek15TERnMUxqY3dOaUJETVRFekxqSTNMRGc1TGprM015QXhNVFV1T1RZNExEazBMakEyT1NBeE1Ua3VOekkzTERrM0xqZzBNU0JNTVRJd0xqSTFPU3c1T0M0Mk9EWWdRekV5TUM0eU5pdzVPQzQyT0RVZ09UUXVNamd5TERFeE15NDJPRE1nT1RRdU1qZ3lMREV4TXk0Mk9ETWdURGN3TGpFMk55dzVPUzQzTmpFZ1RERTBOUzQyT0RVc05UWXVNVFl4SWlCcFpEMGlSbWxzYkMweE1TSWdabWxzYkQwaUkwWkdSa1pHUmlJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMDVOQzR5T0RJc01URXpMamd4T0NCTU9UUXVNakl6TERFeE15NDNPRFVnVERZNUxqa3pNeXc1T1M0M05qRWdURGN3TGpFd09DdzVPUzQyTmlCTU1UUTFMalk0TlN3MU5pNHdNallnVERFME5TNDNORE1zTlRZdU1EVTVJRXd4TnpBdU1ETXpMRGN3TGpBNE15Qk1NVFF6TGpnME1pdzROUzR5TURVZ1RERTBNeTQzT1Rjc09EVXVNVGsxSUVNeE5ETXVOemN5TERnMUxqRTVJREUwTWk0ek16WXNPRFF1T0RnNElERTBNaTR6TXpZc09EUXVPRGc0SUVNeE16VXVOemczTERneUxqY3hOQ0F4TWpndU56SXpMRGd4TGpFMk15QXhNakV1TXpJM0xEZ3dMakkzTkNCRE1USXdMamM0T0N3NE1DNHlNRGtnTVRJd0xqSXpOaXc0TUM0eE56Y2dNVEU1TGpZNE9TdzRNQzR4TnpjZ1F6RXhOUzQ1TXpFc09EQXVNVGMzSURFeE1pNDJNelVzT0RFdU56QTRJREV4TVM0NE5USXNPRE11T0RFNUlFTXhNVEV1TmpJMExEZzBMalF6TWlBeE1URXVOakl4TERnMUxqQTFNeUF4TVRFdU9EUXlMRGcxTGpZMk55QkRNVEV6TGpNM055dzRPUzQ1TWpVZ01URTJMakExT0N3NU15NDVPVE1nTVRFNUxqZ3hMRGszTGpjMU9DQk1NVEU1TGpneU5pdzVOeTQzTnprZ1RERXlNQzR6TlRJc09UZ3VOakUwSUVNeE1qQXVNelUwTERrNExqWXhOeUF4TWpBdU16VTJMRGs0TGpZeUlERXlNQzR6TlRnc09UZ3VOakkwSUV3eE1qQXVOREl5TERrNExqY3lOaUJNTVRJd0xqTXhOeXc1T0M0M09EY2dRekV5TUM0eU5qUXNPVGd1T0RFNElEazBMalU1T1N3eE1UTXVOak0xSURrMExqTTBMREV4TXk0M09EVWdURGswTGpJNE1pd3hNVE11T0RFNElFdzVOQzR5T0RJc01URXpMamd4T0NCYUlFMDNNQzQwTURFc09Ua3VOell4SUV3NU5DNHlPRElzTVRFekxqVTBPU0JNTVRFNUxqQTROQ3c1T1M0eU1qa2dRekV4T1M0Mk15dzVPQzQ1TVRRZ01URTVMamt6TERrNExqYzBJREV5TUM0eE1ERXNPVGd1TmpVMElFd3hNVGt1TmpNMUxEazNMamt4TkNCRE1URTFMamcyTkN3NU5DNHhNamNnTVRFekxqRTJPQ3c1TUM0d016TWdNVEV4TGpZeU1pdzROUzQzTkRZZ1F6RXhNUzR6T0RJc09EVXVNRGM1SURFeE1TNHpPRFlzT0RRdU5EQTBJREV4TVM0Mk16TXNPRE11TnpNNElFTXhNVEl1TkRRNExEZ3hMalV6T1NBeE1UVXVPRE0yTERjNUxqazBNeUF4TVRrdU5qZzVMRGM1TGprME15QkRNVEl3TGpJME5pdzNPUzQ1TkRNZ01USXdMamd3Tml3M09TNDVOellnTVRJeExqTTFOU3c0TUM0d05ESWdRekV5T0M0M05qY3NPREF1T1RNeklERXpOUzQ0TkRZc09ESXVORGczSURFME1pNHpPVFlzT0RRdU5qWXpJRU14TkRNdU1qTXlMRGcwTGpnek9DQXhORE11TmpFeExEZzBMamt4TnlBeE5ETXVOemcyTERnMExqazJOeUJNTVRZNUxqVTJOaXczTUM0d09ETWdUREUwTlM0Mk9EVXNOVFl1TWprMUlFdzNNQzQwTURFc09Ua3VOell4SUV3M01DNDBNREVzT1RrdU56WXhJRm9pSUdsa1BTSkdhV3hzTFRFeUlpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTJOeTR5TXl3eE9DNDVOemtnVERFMk55NHlNeXcyT1M0NE5TQk1NVE01TGprd09TdzROUzQyTWpNZ1RERXpNeTQwTkRnc056RXVORFUySUVNeE16SXVOVE00TERZNUxqUTJJREV6TUM0d01pdzJPUzQzTVRnZ01USTNMamd5TkN3M01pNHdNeUJETVRJMkxqYzJPU3czTXk0eE5DQXhNalV1T1RNeExEYzBMalU0TlNBeE1qVXVORGswTERjMkxqQTBPQ0JNTVRFNUxqQXpOQ3c1Tnk0Mk56WWdURGt4TGpjeE1pd3hNVE11TkRVZ1REa3hMamN4TWl3Mk1pNDFOemtnVERFMk55NHlNeXd4T0M0NU56a2lJR2xrUFNKR2FXeHNMVEV6SWlCbWFXeHNQU0lqUmtaR1JrWkdJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRreExqY3hNaXd4TVRNdU5UWTNJRU01TVM0Mk9USXNNVEV6TGpVMk55QTVNUzQyTnpJc01URXpMalUyTVNBNU1TNDJOVE1zTVRFekxqVTFNU0JET1RFdU5qRTRMREV4TXk0MU15QTVNUzQxT1RVc01URXpMalE1TWlBNU1TNDFPVFVzTVRFekxqUTFJRXc1TVM0MU9UVXNOakl1TlRjNUlFTTVNUzQxT1RVc05qSXVOVE0zSURreExqWXhPQ3cyTWk0ME9Ua2dPVEV1TmpVekxEWXlMalEzT0NCTU1UWTNMakUzTWl3eE9DNDROemdnUXpFMk55NHlNRGdzTVRndU9EVTNJREUyTnk0eU5USXNNVGd1T0RVM0lERTJOeTR5T0Rnc01UZ3VPRGM0SUVNeE5qY3VNekkwTERFNExqZzVPU0F4TmpjdU16UTNMREU0TGprek55QXhOamN1TXpRM0xERTRMamszT1NCTU1UWTNMak0wTnl3Mk9TNDROU0JETVRZM0xqTTBOeXcyT1M0NE9URWdNVFkzTGpNeU5DdzJPUzQ1TXlBeE5qY3VNamc0TERZNUxqazFJRXd4TXprdU9UWTNMRGcxTGpjeU5TQkRNVE01TGprek9TdzROUzQzTkRFZ01UTTVMamt3TlN3NE5TNDNORFVnTVRNNUxqZzNNeXc0TlM0M016VWdRekV6T1M0NE5ESXNPRFV1TnpJMUlERXpPUzQ0TVRZc09EVXVOekF5SURFek9TNDRNRElzT0RVdU5qY3lJRXd4TXpNdU16UXlMRGN4TGpVd05DQkRNVE15TGprMk55dzNNQzQyT0RJZ01UTXlMakk0TERjd0xqSXlPU0F4TXpFdU5EQTRMRGN3TGpJeU9TQkRNVE13TGpNeE9TdzNNQzR5TWprZ01USTVMakEwTkN3M01DNDVNVFVnTVRJM0xqa3dPQ3czTWk0eE1TQkRNVEkyTGpnM05DdzNNeTR5SURFeU5pNHdNelFzTnpRdU5qUTNJREV5TlM0Mk1EWXNOell1TURneUlFd3hNVGt1TVRRMkxEazNMamN3T1NCRE1URTVMakV6Tnl3NU55NDNNemdnTVRFNUxqRXhPQ3c1Tnk0M05qSWdNVEU1TGpBNU1pdzVOeTQzTnpjZ1REa3hMamMzTERFeE15NDFOVEVnUXpreExqYzFNaXd4TVRNdU5UWXhJRGt4TGpjek1pd3hNVE11TlRZM0lEa3hMamN4TWl3eE1UTXVOVFkzSUV3NU1TNDNNVElzTVRFekxqVTJOeUJhSUUwNU1TNDRNamtzTmpJdU5qUTNJRXc1TVM0NE1qa3NNVEV6TGpJME9DQk1NVEU0TGprek5TdzVOeTQxT1RnZ1RERXlOUzR6T0RJc056WXVNREUxSUVNeE1qVXVPREkzTERjMExqVXlOU0F4TWpZdU5qWTBMRGN6TGpBNE1TQXhNamN1TnpNNUxEY3hMamsxSUVNeE1qZ3VPVEU1TERjd0xqY3dPQ0F4TXpBdU1qVTJMRFk1TGprNU5pQXhNekV1TkRBNExEWTVMams1TmlCRE1UTXlMak0zTnl3Mk9TNDVPVFlnTVRNekxqRXpPU3czTUM0ME9UY2dNVE16TGpVMU5DdzNNUzQwTURjZ1RERXpPUzQ1TmpFc09EVXVORFU0SUV3eE5qY3VNVEV6TERZNUxqYzRNaUJNTVRZM0xqRXhNeXd4T1M0eE9ERWdURGt4TGpneU9TdzJNaTQyTkRjZ1REa3hMamd5T1N3Mk1pNDJORGNnV2lJZ2FXUTlJa1pwYkd3dE1UUWlJR1pwYkd3OUlpTTJNRGRFT0VJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVFk0TGpVME15d3hPUzR5TVRNZ1RERTJPQzQxTkRNc056QXVNRGd6SUV3eE5ERXVNakl4TERnMUxqZzFOeUJNTVRNMExqYzJNU3czTVM0Mk9Ea2dRekV6TXk0NE5URXNOamt1TmprMElERXpNUzR6TXpNc05qa3VPVFV4SURFeU9TNHhNemNzTnpJdU1qWXpJRU14TWpndU1EZ3lMRGN6TGpNM05DQXhNamN1TWpRMExEYzBMamd4T1NBeE1qWXVPREEzTERjMkxqSTRNaUJNTVRJd0xqTTBOaXc1Tnk0NU1Ea2dURGt6TGpBeU5Td3hNVE11TmpneklFdzVNeTR3TWpVc05qSXVPREV6SUV3eE5qZ3VOVFF6TERFNUxqSXhNeUlnYVdROUlrWnBiR3d0TVRVaUlHWnBiR3c5SWlOR1JrWkdSa1lpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk9UTXVNREkxTERFeE15NDRJRU01TXk0d01EVXNNVEV6TGpnZ09USXVPVGcwTERFeE15NDNPVFVnT1RJdU9UWTJMREV4TXk0M09EVWdRemt5TGprek1Td3hNVE11TnpZMElEa3lMamt3T0N3eE1UTXVOekkxSURreUxqa3dPQ3d4TVRNdU5qZzBJRXc1TWk0NU1EZ3NOakl1T0RFeklFTTVNaTQ1TURnc05qSXVOemN4SURreUxqa3pNU3cyTWk0M016TWdPVEl1T1RZMkxEWXlMamN4TWlCTU1UWTRMalE0TkN3eE9TNHhNVElnUXpFMk9DNDFNaXd4T1M0d09TQXhOamd1TlRZMUxERTVMakE1SURFMk9DNDJNREVzTVRrdU1URXlJRU14TmpndU5qTTNMREU1TGpFek1pQXhOamd1TmpZc01Ua3VNVGN4SURFMk9DNDJOaXd4T1M0eU1USWdUREUyT0M0Mk5pdzNNQzR3T0RNZ1F6RTJPQzQyTml3M01DNHhNalVnTVRZNExqWXpOeXczTUM0eE5qUWdNVFk0TGpZd01TdzNNQzR4T0RRZ1RERTBNUzR5T0N3NE5TNDVOVGdnUXpFME1TNHlOVEVzT0RVdU9UYzFJREUwTVM0eU1UY3NPRFV1T1RjNUlERTBNUzR4T0RZc09EVXVPVFk0SUVNeE5ERXVNVFUwTERnMUxqazFPQ0F4TkRFdU1USTVMRGcxTGprek5pQXhOREV1TVRFMUxEZzFMamt3TmlCTU1UTTBMalkxTlN3M01TNDNNemdnUXpFek5DNHlPQ3czTUM0NU1UVWdNVE16TGpVNU15dzNNQzQwTmpNZ01UTXlMamN5TERjd0xqUTJNeUJETVRNeExqWXpNaXczTUM0ME5qTWdNVE13TGpNMU55dzNNUzR4TkRnZ01USTVMakl5TVN3M01pNHpORFFnUXpFeU9DNHhPRFlzTnpNdU5ETXpJREV5Tnk0ek5EY3NOelF1T0RneElERXlOaTQ1TVRrc056WXVNekUxSUV3eE1qQXVORFU0TERrM0xqazBNeUJETVRJd0xqUTFMRGszTGprM01pQXhNakF1TkRNeExEazNMams1TmlBeE1qQXVOREExTERrNExqQXhJRXc1TXk0d09ETXNNVEV6TGpjNE5TQkRPVE11TURZMUxERXhNeTQzT1RVZ09UTXVNRFExTERFeE15NDRJRGt6TGpBeU5Td3hNVE11T0NCTU9UTXVNREkxTERFeE15NDRJRm9nVFRrekxqRTBNaXcyTWk0NE9ERWdURGt6TGpFME1pd3hNVE11TkRneElFd3hNakF1TWpRNExEazNMamd6TWlCTU1USTJMalk1TlN3M05pNHlORGdnUXpFeU55NHhOQ3czTkM0M05UZ2dNVEkzTGprM055dzNNeTR6TVRVZ01USTVMakExTWl3M01pNHhPRE1nUXpFek1DNHlNekVzTnpBdU9UUXlJREV6TVM0MU5qZ3NOekF1TWpJNUlERXpNaTQzTWl3M01DNHlNamtnUXpFek15NDJPRGtzTnpBdU1qSTVJREV6TkM0ME5USXNOekF1TnpNeElERXpOQzQ0Tmpjc056RXVOalF4SUV3eE5ERXVNamMwTERnMUxqWTVNaUJNTVRZNExqUXlOaXczTUM0d01UWWdUREUyT0M0ME1qWXNNVGt1TkRFMUlFdzVNeTR4TkRJc05qSXVPRGd4SUV3NU15NHhORElzTmpJdU9EZ3hJRm9pSUdsa1BTSkdhV3hzTFRFMklpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTJPUzQ0TERjd0xqQTRNeUJNTVRReUxqUTNPQ3c0TlM0NE5UY2dUREV6Tmk0d01UZ3NOekV1TmpnNUlFTXhNelV1TVRBNExEWTVMalk1TkNBeE16SXVOVGtzTmprdU9UVXhJREV6TUM0ek9UTXNOekl1TWpZeklFTXhNamt1TXpNNUxEY3pMak0zTkNBeE1qZ3VOU3czTkM0NE1Ua2dNVEk0TGpBMk5DdzNOaTR5T0RJZ1RERXlNUzQyTURNc09UY3VPVEE1SUV3NU5DNHlPRElzTVRFekxqWTRNeUJNT1RRdU1qZ3lMRFl5TGpneE15Qk1NVFk1TGpnc01Ua3VNakV6SUV3eE5qa3VPQ3czTUM0d09ETWdXaUlnYVdROUlrWnBiR3d0TVRjaUlHWnBiR3c5SWlOR1FVWkJSa0VpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk9UUXVNamd5TERFeE15NDVNVGNnUXprMExqSTBNU3d4TVRNdU9URTNJRGswTGpJd01Td3hNVE11T1RBM0lEazBMakUyTlN3eE1UTXVPRGcySUVNNU5DNHdPVE1zTVRFekxqZzBOU0E1TkM0d05EZ3NNVEV6TGpjMk55QTVOQzR3TkRnc01URXpMalk0TkNCTU9UUXVNRFE0TERZeUxqZ3hNeUJET1RRdU1EUTRMRFl5TGpjeklEazBMakE1TXl3Mk1pNDJOVElnT1RRdU1UWTFMRFl5TGpZeE1TQk1NVFk1TGpZNE15d3hPUzR3TVNCRE1UWTVMamMxTlN3eE9DNDVOamtnTVRZNUxqZzBOQ3d4T0M0NU5qa2dNVFk1TGpreE55d3hPUzR3TVNCRE1UWTVMams0T1N3eE9TNHdOVElnTVRjd0xqQXpNeXd4T1M0eE1qa2dNVGN3TGpBek15d3hPUzR5TVRJZ1RERTNNQzR3TXpNc056QXVNRGd6SUVNeE56QXVNRE16TERjd0xqRTJOaUF4TmprdU9UZzVMRGN3TGpJME5DQXhOamt1T1RFM0xEY3dMakk0TlNCTU1UUXlMalU1TlN3NE5pNHdOaUJETVRReUxqVXpPQ3c0Tmk0d09USWdNVFF5TGpRMk9TdzROaTR4SURFME1pNDBNRGNzT0RZdU1EZ2dRekUwTWk0ek5EUXNPRFl1TURZZ01UUXlMakk1TXl3NE5pNHdNVFFnTVRReUxqSTJOaXc0TlM0NU5UUWdUREV6TlM0NE1EVXNOekV1TnpnMklFTXhNelV1TkRRMUxEY3dMams1TnlBeE16UXVPREV6TERjd0xqVTRJREV6TXk0NU56Y3NOekF1TlRnZ1F6RXpNaTQ1TWpFc056QXVOVGdnTVRNeExqWTNOaXczTVM0eU5USWdNVE13TGpVMk1pdzNNaTQwTWpRZ1F6RXlPUzQxTkN3M015NDFNREVnTVRJNExqY3hNU3czTkM0NU16RWdNVEk0TGpJNE55dzNOaTR6TkRnZ1RERXlNUzQ0TWpjc09UY3VPVGMySUVNeE1qRXVPREVzT1RndU1ETTBJREV5TVM0M056RXNPVGd1TURneUlERXlNUzQzTWl3NU9DNHhNVElnVERrMExqTTVPQ3d4TVRNdU9EZzJJRU01TkM0ek5qSXNNVEV6TGprd055QTVOQzR6TWpJc01URXpMamt4TnlBNU5DNHlPRElzTVRFekxqa3hOeUJNT1RRdU1qZ3lMREV4TXk0NU1UY2dXaUJOT1RRdU5URTFMRFl5TGprME9DQk1PVFF1TlRFMUxERXhNeTR5TnprZ1RERXlNUzQwTURZc09UY3VOelUwSUV3eE1qY3VPRFFzTnpZdU1qRTFJRU14TWpndU1qa3NOelF1TnpBNElERXlPUzR4TXpjc056TXVNalEzSURFek1DNHlNalFzTnpJdU1UQXpJRU14TXpFdU5ESTFMRGN3TGpnek9DQXhNekl1TnprekxEY3dMakV4TWlBeE16TXVPVGMzTERjd0xqRXhNaUJETVRNMExqazVOU3czTUM0eE1USWdNVE0xTGpjNU5TdzNNQzQyTXpnZ01UTTJMakl6TERjeExqVTVNaUJNTVRReUxqVTROQ3c0TlM0MU1qWWdUREUyT1M0MU5qWXNOamt1T1RRNElFd3hOamt1TlRZMkxERTVMall4TnlCTU9UUXVOVEUxTERZeUxqazBPQ0JNT1RRdU5URTFMRFl5TGprME9DQmFJaUJwWkQwaVJtbHNiQzB4T0NJZ1ptbHNiRDBpSXpZd04wUTRRaUkrUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE1Ea3VPRGswTERreUxqazBNeUJNTVRBNUxqZzVOQ3c1TWk0NU5ETWdRekV3T0M0eE1pdzVNaTQ1TkRNZ01UQTJMalkxTXl3NU1pNHlNVGdnTVRBMUxqWTFMRGt3TGpneU15QkRNVEExTGpVNE15dzVNQzQzTXpFZ01UQTFMalU1TXl3NU1DNDJNU0F4TURVdU5qY3pMRGt3TGpVeU9TQkRNVEExTGpjMU15dzVNQzQwTkRnZ01UQTFMamc0TERrd0xqUTBJREV3TlM0NU56UXNPVEF1TlRBMklFTXhNRFl1TnpVMExEa3hMakExTXlBeE1EY3VOamM1TERreExqTXpNeUF4TURndU56STBMRGt4TGpNek15QkRNVEV3TGpBME55dzVNUzR6TXpNZ01URXhMalEzT0N3NU1DNDRPVFFnTVRFeUxqazRMRGt3TGpBeU55QkRNVEU0TGpJNU1TdzROaTQ1TmlBeE1qSXVOakV4TERjNUxqVXdPU0F4TWpJdU5qRXhMRGN6TGpReE5pQkRNVEl5TGpZeE1TdzNNUzQwT0RrZ01USXlMakUyT1N3Mk9TNDROVFlnTVRJeExqTXpNeXcyT0M0Mk9USWdRekV5TVM0eU5qWXNOamd1TmlBeE1qRXVNamMyTERZNExqUTNNeUF4TWpFdU16VTJMRFk0TGpNNU1pQkRNVEl4TGpRek5pdzJPQzR6TVRFZ01USXhMalUyTXl3Mk9DNHlPVGtnTVRJeExqWTFOaXcyT0M0ek5qVWdRekV5TXk0ek1qY3NOamt1TlRNM0lERXlOQzR5TkRjc056RXVOelEySURFeU5DNHlORGNzTnpRdU5UZzBJRU14TWpRdU1qUTNMRGd3TGpneU5pQXhNVGt1T0RJeExEZzRMalEwTnlBeE1UUXVNemd5TERreExqVTROeUJETVRFeUxqZ3dPQ3c1TWk0ME9UVWdNVEV4TGpJNU9DdzVNaTQ1TkRNZ01UQTVMamc1TkN3NU1pNDVORE1nVERFd09TNDRPVFFzT1RJdU9UUXpJRm9nVFRFd05pNDVNalVzT1RFdU5EQXhJRU14TURjdU56TTRMRGt5TGpBMU1pQXhNRGd1TnpRMUxEa3lMakkzT0NBeE1Ea3VPRGt6TERreUxqSTNPQ0JNTVRBNUxqZzVOQ3c1TWk0eU56Z2dRekV4TVM0eU1UVXNPVEl1TWpjNElERXhNaTQyTkRjc09URXVPVFV4SURFeE5DNHhORGdzT1RFdU1EZzBJRU14TVRrdU5EVTVMRGc0TGpBeE55QXhNak11Tnpnc09EQXVOakl4SURFeU15NDNPQ3czTkM0MU1qZ2dRekV5TXk0M09DdzNNaTQxTkRrZ01USXpMak14Tnl3M01DNDVNamtnTVRJeUxqUTFOQ3cyT1M0M05qY2dRekV5TWk0NE5qVXNOekF1T0RBeUlERXlNeTR3Tnprc056SXVNRFF5SURFeU15NHdOemtzTnpNdU5EQXlJRU14TWpNdU1EYzVMRGM1TGpZME5TQXhNVGd1TmpVekxEZzNMakk0TlNBeE1UTXVNakUwTERrd0xqUXlOU0JETVRFeExqWTBMRGt4TGpNek5DQXhNVEF1TVRNc09URXVOelF5SURFd09DNDNNalFzT1RFdU56UXlJRU14TURndU1EZ3pMRGt4TGpjME1pQXhNRGN1TkRneExEa3hMalU1TXlBeE1EWXVPVEkxTERreExqUXdNU0JNTVRBMkxqa3lOU3c1TVM0ME1ERWdXaUlnYVdROUlrWnBiR3d0TVRraUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URXpMakE1Tnl3NU1DNHlNeUJETVRFNExqUTRNU3c0Tnk0eE1qSWdNVEl5TGpnME5TdzNPUzQxT1RRZ01USXlMamcwTlN3M015NDBNVFlnUXpFeU1pNDRORFVzTnpFdU16WTFJREV5TWk0ek5qSXNOamt1TnpJMElERXlNUzQxTWpJc05qZ3VOVFUySUVNeE1Ua3VOek00TERZM0xqTXdOQ0F4TVRjdU1UUTRMRFkzTGpNMk1pQXhNVFF1TWpZMUxEWTVMakF5TmlCRE1UQTRMamc0TVN3M01pNHhNelFnTVRBMExqVXhOeXczT1M0Mk5qSWdNVEEwTGpVeE55dzROUzQ0TkNCRE1UQTBMalV4Tnl3NE55NDRPVEVnTVRBMUxEZzVMalV6TWlBeE1EVXVPRFFzT1RBdU55QkRNVEEzTGpZeU5DdzVNUzQ1TlRJZ01URXdMakl4TkN3NU1TNDRPVFFnTVRFekxqQTVOeXc1TUM0eU15SWdhV1E5SWtacGJHd3RNakFpSUdacGJHdzlJaU5HUVVaQlJrRWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRBNExqY3lOQ3c1TVM0Mk1UUWdUREV3T0M0M01qUXNPVEV1TmpFMElFTXhNRGN1TlRneUxEa3hMall4TkNBeE1EWXVOVFkyTERreExqUXdNU0F4TURVdU56QTFMRGt3TGpjNU55QkRNVEExTGpZNE5DdzVNQzQzT0RNZ01UQTFMalkyTlN3NU1DNDRNVEVnTVRBMUxqWTFMRGt3TGpjNUlFTXhNRFF1TnpVMkxEZzVMalUwTmlBeE1EUXVNamd6TERnM0xqZzBNaUF4TURRdU1qZ3pMRGcxTGpneE55QkRNVEEwTGpJNE15dzNPUzQxTnpVZ01UQTRMamN3T1N3M01TNDVOVE1nTVRFMExqRTBPQ3cyT0M0NE1USWdRekV4TlM0M01qSXNOamN1T1RBMElERXhOeTR5TXpJc05qY3VORFE1SURFeE9DNDJNemdzTmpjdU5EUTVJRU14TVRrdU56Z3NOamN1TkRRNUlERXlNQzQzT1RZc05qY3VOelU0SURFeU1TNDJOVFlzTmpndU16WXlJRU14TWpFdU5qYzRMRFk0TGpNM055QXhNakV1TmprM0xEWTRMak01TnlBeE1qRXVOekV5TERZNExqUXhPQ0JETVRJeUxqWXdOaXcyT1M0Mk5qSWdNVEl6TGpBM09TdzNNUzR6T1NBeE1qTXVNRGM1TERjekxqUXhOU0JETVRJekxqQTNPU3czT1M0Mk5UZ2dNVEU0TGpZMU15dzROeTR4T1RnZ01URXpMakl4TkN3NU1DNHpNemdnUXpFeE1TNDJOQ3c1TVM0eU5EY2dNVEV3TGpFekxEa3hMall4TkNBeE1EZ3VOekkwTERreExqWXhOQ0JNTVRBNExqY3lOQ3c1TVM0Mk1UUWdXaUJOTVRBMkxqQXdOaXc1TUM0MU1EVWdRekV3Tmk0M09DdzVNUzR3TXpjZ01UQTNMalk1TkN3NU1TNHlPREVnTVRBNExqY3lOQ3c1TVM0eU9ERWdRekV4TUM0d05EY3NPVEV1TWpneElERXhNUzQwTnpnc09UQXVPRFk0SURFeE1pNDVPQ3c1TUM0d01ERWdRekV4T0M0eU9URXNPRFl1T1RNMUlERXlNaTQyTVRFc056a3VORGsySURFeU1pNDJNVEVzTnpNdU5EQXpJRU14TWpJdU5qRXhMRGN4TGpRNU5DQXhNakl1TVRjM0xEWTVMamc0SURFeU1TNHpOVFlzTmpndU56RTRJRU14TWpBdU5UZ3lMRFk0TGpFNE5TQXhNVGt1TmpZNExEWTNMamt4T1NBeE1UZ3VOak00TERZM0xqa3hPU0JETVRFM0xqTXhOU3cyTnk0NU1Ua2dNVEUxTGpnNE15dzJPQzR6TmlBeE1UUXVNemd5TERZNUxqSXlOeUJETVRBNUxqQTNNU3czTWk0eU9UTWdNVEEwTGpjMU1TdzNPUzQzTXpNZ01UQTBMamMxTVN3NE5TNDRNallnUXpFd05DNDNOVEVzT0RjdU56TTFJREV3TlM0eE9EVXNPRGt1TXpReklERXdOaTR3TURZc09UQXVOVEExSUV3eE1EWXVNREEyTERrd0xqVXdOU0JhSWlCcFpEMGlSbWxzYkMweU1TSWdabWxzYkQwaUl6WXdOMFE0UWlJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMHhORGt1TXpFNExEY3VNall5SUV3eE16a3VNek0wTERFMkxqRTBJRXd4TlRVdU1qSTNMREkzTGpFM01TQk1NVFl3TGpneE5pd3lNUzR3TlRrZ1RERTBPUzR6TVRnc055NHlOaklpSUdsa1BTSkdhV3hzTFRJeUlpQm1hV3hzUFNJalJrRkdRVVpCSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTJPUzQyTnpZc01UTXVPRFFnVERFMU9TNDVNamdzTVRrdU5EWTNJRU14TlRZdU1qZzJMREl4TGpVM0lERTFNQzQwTERJeExqVTRJREUwTmk0M09ERXNNVGt1TkRreElFTXhORE11TVRZeExERTNMalF3TWlBeE5ETXVNVGdzTVRRdU1EQXpJREUwTmk0NE1qSXNNVEV1T1NCTU1UVTJMak14Tnl3MkxqSTVNaUJNTVRRNUxqVTRPQ3d5TGpRd055Qk1OamN1TnpVeUxEUTVMalEzT0NCTU1URXpMalkzTlN3M05TNDVPVElnVERFeE5pNDNOVFlzTnpRdU1qRXpJRU14TVRjdU16ZzNMRGN6TGpnME9DQXhNVGN1TmpJMUxEY3pMak14TlNBeE1UY3VNemMwTERjeUxqZ3lNeUJETVRFMUxqQXhOeXcyT0M0eE9URWdNVEUwTGpjNE1TdzJNeTR5TnpjZ01URTJMalk1TVN3MU9DNDFOakVnUXpFeU1pNHpNamtzTkRRdU5qUXhJREUwTVM0eUxETXpMamMwTmlBeE5qVXVNekE1TERNd0xqUTVNU0JETVRjekxqUTNPQ3d5T1M0ek9EZ2dNVGd4TGprNE9Td3lPUzQxTWpRZ01Ua3dMakF4TXl3ek1DNDRPRFVnUXpFNU1DNDROalVzTXpFdU1ETWdNVGt4TGpjNE9Td3pNQzQ0T1RNZ01Ua3lMalF5TERNd0xqVXlPQ0JNTVRrMUxqVXdNU3d5T0M0M05TQk1NVFk1TGpZM05pd3hNeTQ0TkNJZ2FXUTlJa1pwYkd3dE1qTWlJR1pwYkd3OUlpTkdRVVpCUmtFaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVEV6TGpZM05TdzNOaTQwTlRrZ1F6RXhNeTQxT1RRc056WXVORFU1SURFeE15NDFNVFFzTnpZdU5ETTRJREV4TXk0ME5ESXNOell1TXprM0lFdzJOeTQxTVRnc05Ea3VPRGd5SUVNMk55NHpOelFzTkRrdU56azVJRFkzTGpJNE5DdzBPUzQyTkRVZ05qY3VNamcxTERRNUxqUTNPQ0JETmpjdU1qZzFMRFE1TGpNeE1TQTJOeTR6TnpRc05Ea3VNVFUzSURZM0xqVXhPU3cwT1M0d056TWdUREUwT1M0ek5UVXNNaTR3TURJZ1F6RTBPUzQwT1Rrc01TNDVNVGtnTVRRNUxqWTNOeXd4TGpreE9TQXhORGt1T0RJeExESXVNREF5SUV3eE5UWXVOVFVzTlM0NE9EY2dRekUxTmk0M056UXNOaTR3TVRjZ01UVTJMamcxTERZdU16QXlJREUxTmk0M01qSXNOaTQxTWpZZ1F6RTFOaTQxT1RJc05pNDNORGtnTVRVMkxqTXdOeXcyTGpneU5pQXhOVFl1TURnekxEWXVOamsySUV3eE5Ea3VOVGczTERJdU9UUTJJRXcyT0M0Mk9EY3NORGt1TkRjNUlFd3hNVE11TmpjMUxEYzFMalExTWlCTU1URTJMalV5TXl3M015NDRNRGdnUXpFeE5pNDNNVFVzTnpNdU5qazNJREV4Tnk0eE5ETXNOek11TXprNUlERXhOaTQ1TlRnc056TXVNRE0xSUVNeE1UUXVOVFF5TERZNExqSTROeUF4TVRRdU15dzJNeTR5TWpFZ01URTJMakkxT0N3MU9DNHpPRFVnUXpFeE9TNHdOalFzTlRFdU5EVTRJREV5TlM0eE5ETXNORFV1TVRReklERXpNeTQ0TkN3ME1DNHhNaklnUXpFME1pNDBPVGNzTXpVdU1USTBJREUxTXk0ek5UZ3NNekV1TmpNeklERTJOUzR5TkRjc016QXVNREk0SUVNeE56TXVORFExTERJNExqa3lNU0F4T0RJdU1ETTNMREk1TGpBMU9DQXhPVEF1TURreExETXdMalF5TlNCRE1Ua3dMamd6TERNd0xqVTFJREU1TVM0Mk5USXNNekF1TkRNeUlERTVNaTR4T0RZc016QXVNVEkwSUV3eE9UUXVOVFkzTERJNExqYzFJRXd4TmprdU5EUXlMREUwTGpJME5DQkRNVFk1TGpJeE9Td3hOQzR4TVRVZ01UWTVMakUwTWl3eE15NDRNamtnTVRZNUxqSTNNU3d4TXk0Mk1EWWdRekUyT1M0MExERXpMak00TWlBeE5qa3VOamcxTERFekxqTXdOaUF4TmprdU9UQTVMREV6TGpRek5TQk1NVGsxTGpjek5Dd3lPQzR6TkRVZ1F6RTVOUzQ0Tnprc01qZ3VOREk0SURFNU5TNDVOamdzTWpndU5UZ3pJREU1TlM0NU5qZ3NNamd1TnpVZ1F6RTVOUzQ1Tmpnc01qZ3VPVEUySURFNU5TNDROemtzTWprdU1EY3hJREU1TlM0M016UXNNamt1TVRVMElFd3hPVEl1TmpVekxETXdMamt6TXlCRE1Ua3hMamt6TWl3ek1TNHpOU0F4T1RBdU9Ea3NNekV1TlRBNElERTRPUzQ1TXpVc016RXVNelEySUVNeE9ERXVPVGN5TERJNUxqazVOU0F4TnpNdU5EYzRMREk1TGpnMklERTJOUzR6TnpJc016QXVPVFUwSUVNeE5UTXVOakF5TERNeUxqVTBNeUF4TkRJdU9EWXNNelV1T1RreklERXpOQzR6TURjc05EQXVPVE14SUVNeE1qVXVOemt6TERRMUxqZzBOeUF4TVRrdU9EVXhMRFV5TGpBd05DQXhNVGN1TVRJMExEVTRMamN6TmlCRE1URTFMakkzTERZekxqTXhOQ0F4TVRVdU5UQXhMRFk0TGpFeE1pQXhNVGN1Tnprc056SXVOakV4SUVNeE1UZ3VNVFlzTnpNdU16TTJJREV4Tnk0NE5EVXNOelF1TVRJMElERXhOaTQ1T1N3M05DNDJNVGNnVERFeE15NDVNRGtzTnpZdU16azNJRU14TVRNdU9ETTJMRGMyTGpRek9DQXhNVE11TnpVMkxEYzJMalExT1NBeE1UTXVOamMxTERjMkxqUTFPU0lnYVdROUlrWnBiR3d0TWpRaUlHWnBiR3c5SWlNME5UVkJOalFpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UVXpMak14Tml3eU1TNHlOemtnUXpFMU1DNDVNRE1zTWpFdU1qYzVJREUwT0M0ME9UVXNNakF1TnpVeElERTBOaTQyTmpRc01Ua3VOamt6SUVNeE5EUXVPRFEyTERFNExqWTBOQ0F4TkRNdU9EUTBMREUzTGpJek1pQXhORE11T0RRMExERTFMamN4T0NCRE1UUXpMamcwTkN3eE5DNHhPVEVnTVRRMExqZzJMREV5TGpjMk15QXhORFl1TnpBMUxERXhMalk1T0NCTU1UVTJMakU1T0N3MkxqQTVNU0JETVRVMkxqTXdPU3cyTGpBeU5TQXhOVFl1TkRVeUxEWXVNRFl5SURFMU5pNDFNVGdzTmk0eE56TWdRekUxTmk0MU9ETXNOaTR5T0RRZ01UVTJMalUwTnl3MkxqUXlOeUF4TlRZdU5ETTJMRFl1TkRreklFd3hORFl1T1RRc01USXVNVEF5SUVNeE5EVXVNalEwTERFekxqQTRNU0F4TkRRdU16RXlMREUwTGpNMk5TQXhORFF1TXpFeUxERTFMamN4T0NCRE1UUTBMak14TWl3eE55NHdOVGdnTVRRMUxqSXpMREU0TGpNeU5pQXhORFl1T0RrM0xERTVMakk0T1NCRE1UVXdMalEwTml3eU1TNHpNemdnTVRVMkxqSTBMREl4TGpNeU55QXhOVGt1T0RFeExERTVMakkyTlNCTU1UWTVMalUxT1N3eE15NDJNemNnUXpFMk9TNDJOeXd4TXk0MU56TWdNVFk1TGpneE15d3hNeTQyTVRFZ01UWTVMamczT0N3eE15NDNNak1nUXpFMk9TNDVORE1zTVRNdU9ETTBJREUyT1M0NU1EUXNNVE11T1RjM0lERTJPUzQzT1RNc01UUXVNRFF5SUV3eE5qQXVNRFExTERFNUxqWTNJRU14TlRndU1UZzNMREl3TGpjME1pQXhOVFV1TnpRNUxESXhMakkzT1NBeE5UTXVNekUyTERJeExqSTNPU0lnYVdROUlrWnBiR3d0TWpVaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URXpMalkzTlN3M05TNDVPVElnVERZM0xqYzJNaXcwT1M0ME9EUWlJR2xrUFNKR2FXeHNMVEkySWlCbWFXeHNQU0lqTkRVMVFUWTBJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFeE15NDJOelVzTnpZdU16UXlJRU14TVRNdU5qRTFMRGMyTGpNME1pQXhNVE11TlRVMUxEYzJMak15TnlBeE1UTXVOU3czTmk0eU9UVWdURFkzTGpVNE55dzBPUzQzT0RjZ1F6WTNMalF4T1N3ME9TNDJPU0EyTnk0ek5qSXNORGt1TkRjMklEWTNMalExT1N3ME9TNHpNRGtnUXpZM0xqVTFOaXcwT1M0eE5ERWdOamN1Tnpjc05Ea3VNRGd6SURZM0xqa3pOeXcwT1M0eE9DQk1NVEV6TGpnMUxEYzFMalk0T0NCRE1URTBMakF4T0N3M05TNDNPRFVnTVRFMExqQTNOU3czTmlBeE1UTXVPVGM0TERjMkxqRTJOeUJETVRFekxqa3hOQ3czTmk0eU56a2dNVEV6TGpjNU5pdzNOaTR6TkRJZ01URXpMalkzTlN3M05pNHpORElpSUdsa1BTSkdhV3hzTFRJM0lpQm1hV3hzUFNJak5EVTFRVFkwSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUWTNMamMyTWl3ME9TNDBPRFFnVERZM0xqYzJNaXd4TURNdU5EZzFJRU0yTnk0M05qSXNNVEEwTGpVM05TQTJPQzQxTXpJc01UQTFMamt3TXlBMk9TNDBPRElzTVRBMkxqUTFNaUJNTVRFeExqazFOU3d4TXpBdU9UY3pJRU14TVRJdU9UQTFMREV6TVM0MU1qSWdNVEV6TGpZM05Td3hNekV1TURneklERXhNeTQyTnpVc01USTVMams1TXlCTU1URXpMalkzTlN3M05TNDVPVElpSUdsa1BTSkdhV3hzTFRJNElpQm1hV3hzUFNJalJrRkdRVVpCSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURXhNaTQzTWpjc01UTXhMalUyTVNCRE1URXlMalF6TERFek1TNDFOakVnTVRFeUxqRXdOeXd4TXpFdU5EWTJJREV4TVM0M09Dd3hNekV1TWpjMklFdzJPUzR6TURjc01UQTJMamMxTlNCRE5qZ3VNalEwTERFd05pNHhORElnTmpjdU5ERXlMREV3TkM0M01EVWdOamN1TkRFeUxERXdNeTQwT0RVZ1REWTNMalF4TWl3ME9TNDBPRFFnUXpZM0xqUXhNaXcwT1M0eU9TQTJOeTQxTmprc05Ea3VNVE0wSURZM0xqYzJNaXcwT1M0eE16UWdRelkzTGprMU5pdzBPUzR4TXpRZ05qZ3VNVEV6TERRNUxqSTVJRFk0TGpFeE15dzBPUzQwT0RRZ1REWTRMakV4TXl3eE1ETXVORGcxSUVNMk9DNHhNVE1zTVRBMExqUTBOU0EyT0M0NE1pd3hNRFV1TmpZMUlEWTVMalkxTnl3eE1EWXVNVFE0SUV3eE1USXVNVE1zTVRNd0xqWTNJRU14TVRJdU5EYzBMREV6TUM0NE5qZ2dNVEV5TGpjNU1Td3hNekF1T1RFeklERXhNeXd4TXpBdU56a3lJRU14TVRNdU1qQTJMREV6TUM0Mk56TWdNVEV6TGpNeU5Td3hNekF1TXpneElERXhNeTR6TWpVc01USTVMams1TXlCTU1URXpMak15TlN3M05TNDVPVElnUXpFeE15NHpNalVzTnpVdU56azRJREV4TXk0ME9ESXNOelV1TmpReElERXhNeTQyTnpVc056VXVOalF4SUVNeE1UTXVPRFk1TERjMUxqWTBNU0F4TVRRdU1ESTFMRGMxTGpjNU9DQXhNVFF1TURJMUxEYzFMams1TWlCTU1URTBMakF5TlN3eE1qa3VPVGt6SUVNeE1UUXVNREkxTERFek1DNDJORGdnTVRFekxqYzROaXd4TXpFdU1UUTNJREV4TXk0ek5Td3hNekV1TXprNUlFTXhNVE11TVRZeUxERXpNUzQxTURjZ01URXlMamsxTWl3eE16RXVOVFl4SURFeE1pNDNNamNzTVRNeExqVTJNU0lnYVdROUlrWnBiR3d0TWpraUlHWnBiR3c5SWlNME5UVkJOalFpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URXlMamcyTERRd0xqVXhNaUJETVRFeUxqZzJMRFF3TGpVeE1pQXhNVEl1T0RZc05EQXVOVEV5SURFeE1pNDROVGtzTkRBdU5URXlJRU14TVRBdU5UUXhMRFF3TGpVeE1pQXhNRGd1TXpZc016a3VPVGtnTVRBMkxqY3hOeXd6T1M0d05ERWdRekV3TlM0d01USXNNemd1TURVM0lERXdOQzR3TnpRc016WXVOekkySURFd05DNHdOelFzTXpVdU1qa3lJRU14TURRdU1EYzBMRE16TGpnME55QXhNRFV1TURJMkxETXlMalV3TVNBeE1EWXVOelUwTERNeExqVXdOQ0JNTVRFNExqYzVOU3d5TkM0MU5URWdRekV5TUM0ME5qTXNNak11TlRnNUlERXlNaTQyTmprc01qTXVNRFU0SURFeU5TNHdNRGNzTWpNdU1EVTRJRU14TWpjdU16STFMREl6TGpBMU9DQXhNamt1TlRBMkxESXpMalU0TVNBeE16RXVNVFVzTWpRdU5UTWdRekV6TWk0NE5UUXNNalV1TlRFMElERXpNeTQzT1RNc01qWXVPRFExSURFek15NDNPVE1zTWpndU1qYzRJRU14TXpNdU56a3pMREk1TGpjeU5DQXhNekl1T0RReExETXhMakEyT1NBeE16RXVNVEV6TERNeUxqQTJOeUJNTVRFNUxqQTNNU3d6T1M0d01Ua2dRekV4Tnk0ME1ETXNNemt1T1RneUlERXhOUzR4T1Rjc05EQXVOVEV5SURFeE1pNDROaXcwTUM0MU1USWdUREV4TWk0NE5pdzBNQzQxTVRJZ1dpQk5NVEkxTGpBd055d3lNeTQzTlRrZ1F6RXlNaTQzT1N3eU15NDNOVGtnTVRJd0xqY3dPU3d5TkM0eU5UWWdNVEU1TGpFME5pd3lOUzR4TlRnZ1RERXdOeTR4TURRc016SXVNVEVnUXpFd05TNDJNRElzTXpJdU9UYzRJREV3TkM0M056UXNNelF1TVRBNElERXdOQzQzTnpRc016VXVNamt5SUVNeE1EUXVOemMwTERNMkxqUTJOU0F4TURVdU5UZzVMRE0zTGpVNE1TQXhNRGN1TURZM0xETTRMalF6TkNCRE1UQTRMall3TlN3ek9TNHpNak1nTVRFd0xqWTJNeXd6T1M0NE1USWdNVEV5TGpnMU9Td3pPUzQ0TVRJZ1RERXhNaTQ0Tml3ek9TNDRNVElnUXpFeE5TNHdOellzTXprdU9ERXlJREV4Tnk0eE5UZ3NNemt1TXpFMUlERXhPQzQzTWpFc016Z3VOREV6SUV3eE16QXVOell5TERNeExqUTJJRU14TXpJdU1qWTBMRE13TGpVNU15QXhNek11TURreUxESTVMalEyTXlBeE16TXVNRGt5TERJNExqSTNPQ0JETVRNekxqQTVNaXd5Tnk0eE1EWWdNVE15TGpJM09Dd3lOUzQ1T1NBeE16QXVPQ3d5TlM0eE16WWdRekV5T1M0eU5qRXNNalF1TWpRNElERXlOeTR5TURRc01qTXVOelU1SURFeU5TNHdNRGNzTWpNdU56VTVJRXd4TWpVdU1EQTNMREl6TGpjMU9TQmFJaUJwWkQwaVJtbHNiQzB6TUNJZ1ptbHNiRDBpSXpZd04wUTRRaUkrUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE5qVXVOak1zTVRZdU1qRTVJRXd4TlRrdU9EazJMREU1TGpVeklFTXhOVFl1TnpJNUxESXhMak0xT0NBeE5URXVOakVzTWpFdU16WTNJREUwT0M0ME5qTXNNVGt1TlRVZ1F6RTBOUzR6TVRZc01UY3VOek16SURFME5TNHpNeklzTVRRdU56YzRJREUwT0M0ME9Ua3NNVEl1T1RRNUlFd3hOVFF1TWpNekxEa3VOak01SUV3eE5qVXVOak1zTVRZdU1qRTVJaUJwWkQwaVJtbHNiQzB6TVNJZ1ptbHNiRDBpSTBaQlJrRkdRU0krUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE5UUXVNak16TERFd0xqUTBPQ0JNTVRZMExqSXlPQ3d4Tmk0eU1Ua2dUREUxT1M0MU5EWXNNVGd1T1RJeklFTXhOVGd1TVRFeUxERTVMamMxSURFMU5pNHhPVFFzTWpBdU1qQTJJREUxTkM0eE5EY3NNakF1TWpBMklFTXhOVEl1TVRFNExESXdMakl3TmlBeE5UQXVNakkwTERFNUxqYzFOeUF4TkRndU9ERTBMREU0TGprME15QkRNVFEzTGpVeU5Dd3hPQzR4T1RrZ01UUTJMamd4TkN3eE55NHlORGtnTVRRMkxqZ3hOQ3d4Tmk0eU5qa2dRekUwTmk0NE1UUXNNVFV1TWpjNElERTBOeTQxTXpjc01UUXVNekUwSURFME9DNDROU3d4TXk0MU5UWWdUREUxTkM0eU16TXNNVEF1TkRRNElFMHhOVFF1TWpNekxEa3VOak01SUV3eE5EZ3VORGs1TERFeUxqazBPU0JETVRRMUxqTXpNaXd4TkM0M056Z2dNVFExTGpNeE5pd3hOeTQzTXpNZ01UUTRMalEyTXl3eE9TNDFOU0JETVRVd0xqQXpNU3d5TUM0ME5UVWdNVFV5TGpBNE5pd3lNQzQ1TURjZ01UVTBMakUwTnl3eU1DNDVNRGNnUXpFMU5pNHlNalFzTWpBdU9UQTNJREUxT0M0ek1EWXNNakF1TkRRM0lERTFPUzQ0T1RZc01Ua3VOVE1nVERFMk5TNDJNeXd4Tmk0eU1Ua2dUREUxTkM0eU16TXNPUzQyTXpraUlHbGtQU0pHYVd4c0xUTXlJaUJtYVd4c1BTSWpOakEzUkRoQ0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEUwTlM0ME5EVXNOekl1TmpZM0lFd3hORFV1TkRRMUxEY3lMalkyTnlCRE1UUXpMalkzTWl3M01pNDJOamNnTVRReUxqSXdOQ3czTVM0NE1UY2dNVFF4TGpJd01pdzNNQzQwTWpJZ1F6RTBNUzR4TXpVc056QXVNek1nTVRReExqRTBOU3czTUM0eE5EY2dNVFF4TGpJeU5TdzNNQzR3TmpZZ1F6RTBNUzR6TURVc05qa3VPVGcxSURFME1TNDBNeklzTmprdU9UUTJJREUwTVM0MU1qVXNOekF1TURFeElFTXhOREl1TXpBMkxEY3dMalUxT1NBeE5ETXVNak14TERjd0xqZ3lNeUF4TkRRdU1qYzJMRGN3TGpneU1pQkRNVFExTGpVNU9DdzNNQzQ0TWpJZ01UUTNMakF6TERjd0xqTTNOaUF4TkRndU5UTXlMRFk1TGpVd09TQkRNVFV6TGpnME1pdzJOaTQwTkRNZ01UVTRMakUyTXl3MU9DNDVPRGNnTVRVNExqRTJNeXcxTWk0NE9UUWdRekUxT0M0eE5qTXNOVEF1T1RZM0lERTFOeTQzTWpFc05Ea3VNek15SURFMU5pNDRPRFFzTkRndU1UWTRJRU14TlRZdU9ERTRMRFE0TGpBM05pQXhOVFl1T0RJNExEUTNMamswT0NBeE5UWXVPVEE0TERRM0xqZzJOeUJETVRVMkxqazRPQ3cwTnk0M09EWWdNVFUzTGpFeE5DdzBOeTQzTnpRZ01UVTNMakl3T0N3ME55NDROQ0JETVRVNExqZzNPQ3cwT1M0d01USWdNVFU1TGpjNU9DdzFNUzR5TWlBeE5Ua3VOems0TERVMExqQTFPU0JETVRVNUxqYzVPQ3cyTUM0ek1ERWdNVFUxTGpNM015dzJPQzR3TkRZZ01UUTVMamt6TXl3M01TNHhPRFlnUXpFME9DNHpOaXczTWk0d09UUWdNVFEyTGpnMUxEY3lMalkyTnlBeE5EVXVORFExTERjeUxqWTJOeUJNTVRRMUxqUTBOU3czTWk0Mk5qY2dXaUJOTVRReUxqUTNOaXczTVNCRE1UUXpMakk1TERjeExqWTFNU0F4TkRRdU1qazJMRGN5TGpBd01pQXhORFV1TkRRMUxEY3lMakF3TWlCRE1UUTJMamMyTnl3M01pNHdNRElnTVRRNExqRTVPQ3czTVM0MU5TQXhORGt1Tnl3M01DNDJPRElnUXpFMU5TNHdNU3cyTnk0Mk1UY2dNVFU1TGpNek1TdzJNQzR4TlRrZ01UVTVMak16TVN3MU5DNHdOalVnUXpFMU9TNHpNekVzTlRJdU1EZzFJREUxT0M0NE5qZ3NOVEF1TkRNMUlERTFPQzR3TURZc05Ea3VNamN5SUVNeE5UZ3VOREUzTERVd0xqTXdOeUF4TlRndU5qTXNOVEV1TlRNeUlERTFPQzQyTXl3MU1pNDRPVElnUXpFMU9DNDJNeXcxT1M0eE16UWdNVFUwTGpJd05TdzJOaTQzTmpjZ01UUTRMamMyTlN3Mk9TNDVNRGNnUXpFME55NHhPVElzTnpBdU9ERTJJREUwTlM0Mk9ERXNOekV1TWpneklERTBOQzR5TnpZc056RXVNamd6SUVNeE5ETXVOak0wTERjeExqSTRNeUF4TkRNdU1ETXpMRGN4TGpFNU1pQXhOREl1TkRjMkxEY3hJRXd4TkRJdU5EYzJMRGN4SUZvaUlHbGtQU0pHYVd4c0xUTXpJaUJtYVd4c1BTSWpOakEzUkRoQ0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEUwT0M0Mk5EZ3NOamt1TnpBMElFTXhOVFF1TURNeUxEWTJMalU1TmlBeE5UZ3VNemsyTERVNUxqQTJPQ0F4TlRndU16azJMRFV5TGpnNU1TQkRNVFU0TGpNNU5pdzFNQzQ0TXprZ01UVTNMamt4TXl3ME9TNHhPVGdnTVRVM0xqQTNOQ3cwT0M0d015QkRNVFUxTGpJNE9TdzBOaTQzTnpnZ01UVXlMalk1T1N3ME5pNDRNellnTVRRNUxqZ3hOaXcwT0M0MU1ERWdRekUwTkM0ME16TXNOVEV1TmpBNUlERTBNQzR3Tmpnc05Ua3VNVE0zSURFME1DNHdOamdzTmpVdU16RTBJRU14TkRBdU1EWTRMRFkzTGpNMk5TQXhOREF1TlRVeUxEWTVMakF3TmlBeE5ERXVNemt4TERjd0xqRTNOQ0JETVRRekxqRTNOaXczTVM0ME1qY2dNVFExTGpjMk5TdzNNUzR6TmprZ01UUTRMalkwT0N3Mk9TNDNNRFFpSUdsa1BTSkdhV3hzTFRNMElpQm1hV3hzUFNJalJrRkdRVVpCSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTBOQzR5TnpZc056RXVNamMySUV3eE5EUXVNamMyTERjeExqSTNOaUJETVRRekxqRXpNeXczTVM0eU56WWdNVFF5TGpFeE9DdzNNQzQ1TmprZ01UUXhMakkxTnl3M01DNHpOalVnUXpFME1TNHlNellzTnpBdU16VXhJREUwTVM0eU1UY3NOekF1TXpNeUlERTBNUzR5TURJc056QXVNekV4SUVNeE5EQXVNekEzTERZNUxqQTJOeUF4TXprdU9ETTFMRFkzTGpNek9TQXhNemt1T0RNMUxEWTFMak14TkNCRE1UTTVMamd6TlN3MU9TNHdOek1nTVRRMExqSTJMRFV4TGpRek9TQXhORGt1Tnl3ME9DNHlPVGdnUXpFMU1TNHlOek1zTkRjdU16a2dNVFV5TGpjNE5DdzBOaTQ1TWprZ01UVTBMakU0T1N3ME5pNDVNamtnUXpFMU5TNHpNeklzTkRZdU9USTVJREUxTmk0ek5EY3NORGN1TWpNMklERTFOeTR5TURnc05EY3VPRE01SUVNeE5UY3VNakk1TERRM0xqZzFOQ0F4TlRjdU1qUTRMRFEzTGpnM015QXhOVGN1TWpZekxEUTNMamc1TkNCRE1UVTRMakUxTnl3ME9TNHhNemdnTVRVNExqWXpMRFV3TGpnMk5TQXhOVGd1TmpNc05USXVPRGt4SUVNeE5UZ3VOak1zTlRrdU1UTXlJREUxTkM0eU1EVXNOall1TnpZMklERTBPQzQzTmpVc05qa3VPVEEzSUVNeE5EY3VNVGt5TERjd0xqZ3hOU0F4TkRVdU5qZ3hMRGN4TGpJM05pQXhORFF1TWpjMkxEY3hMakkzTmlCTU1UUTBMakkzTml3M01TNHlOellnV2lCTk1UUXhMalUxT0N3M01DNHhNRFFnUXpFME1pNHpNekVzTnpBdU5qTTNJREUwTXk0eU5EVXNOekV1TURBMUlERTBOQzR5TnpZc056RXVNREExSUVNeE5EVXVOVGs0TERjeExqQXdOU0F4TkRjdU1ETXNOekF1TkRZM0lERTBPQzQxTXpJc05qa3VOaUJETVRVekxqZzBNaXcyTmk0MU16UWdNVFU0TGpFMk15dzFPUzR3TXpNZ01UVTRMakUyTXl3MU1pNDVNemtnUXpFMU9DNHhOak1zTlRFdU1ETXhJREUxTnk0M01qa3NORGt1TXpnMUlERTFOaTQ1TURjc05EZ3VNakl6SUVNeE5UWXVNVE16TERRM0xqWTVNU0F4TlRVdU1qRTVMRFEzTGpRd09TQXhOVFF1TVRnNUxEUTNMalF3T1NCRE1UVXlMamcyTnl3ME55NDBNRGtnTVRVeExqUXpOU3cwTnk0NE5ESWdNVFE1TGprek15dzBPQzQzTURrZ1F6RTBOQzQyTWpNc05URXVOemMxSURFME1DNHpNRElzTlRrdU1qY3pJREUwTUM0ek1ESXNOalV1TXpZMklFTXhOREF1TXpBeUxEWTNMakkzTmlBeE5EQXVOek0yTERZNExqazBNaUF4TkRFdU5UVTRMRGN3TGpFd05DQk1NVFF4TGpVMU9DdzNNQzR4TURRZ1dpSWdhV1E5SWtacGJHd3RNelVpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRVd0xqY3lMRFkxTGpNMk1TQk1NVFV3TGpNMU55dzJOUzR3TmpZZ1F6RTFNUzR4TkRjc05qUXVNRGt5SURFMU1TNDROamtzTmpNdU1EUWdNVFV5TGpVd05TdzJNUzQ1TXpnZ1F6RTFNeTR6TVRNc05qQXVOVE01SURFMU15NDVOemdzTlRrdU1EWTNJREUxTkM0ME9ESXNOVGN1TlRZeklFd3hOVFF1T1RJMUxEVTNMamN4TWlCRE1UVTBMalF4TWl3MU9TNHlORFVnTVRVekxqY3pNeXcyTUM0M05EVWdNVFV5TGpreExEWXlMakUzTWlCRE1UVXlMakkyTWl3Mk15NHlPVFVnTVRVeExqVXlOU3cyTkM0ek5qZ2dNVFV3TGpjeUxEWTFMak0yTVNJZ2FXUTlJa1pwYkd3dE16WWlJR1pwYkd3OUlpTTJNRGRFT0VJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVEUxTGpreE55dzROQzQxTVRRZ1RERXhOUzQxTlRRc09EUXVNaklnUXpFeE5pNHpORFFzT0RNdU1qUTFJREV4Tnk0d05qWXNPREl1TVRrMElERXhOeTQzTURJc09ERXVNRGt5SUVNeE1UZ3VOVEVzTnprdU5qa3lJREV4T1M0eE56VXNOemd1TWpJZ01URTVMalkzT0N3M05pNDNNVGNnVERFeU1DNHhNakVzTnpZdU9EWTFJRU14TVRrdU5qQTRMRGM0TGpNNU9DQXhNVGd1T1RNc056a3VPRGs1SURFeE9DNHhNRFlzT0RFdU16STJJRU14TVRjdU5EVTRMRGd5TGpRME9DQXhNVFl1TnpJeUxEZ3pMalV5TVNBeE1UVXVPVEUzTERnMExqVXhOQ0lnYVdROUlrWnBiR3d0TXpjaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URTBMREV6TUM0ME56WWdUREV4TkN3eE16QXVNREE0SUV3eE1UUXNOell1TURVeUlFd3hNVFFzTnpVdU5UZzBJRXd4TVRRc056WXVNRFV5SUV3eE1UUXNNVE13TGpBd09DQk1NVEUwTERFek1DNDBOellpSUdsa1BTSkdhV3hzTFRNNElpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJjK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFp5QnBaRDBpU1cxd2IzSjBaV1F0VEdGNVpYSnpMVU52Y0hraUlIUnlZVzV6Wm05eWJUMGlkSEpoYm5Oc1lYUmxLRFl5TGpBd01EQXdNQ3dnTUM0d01EQXdNREFwSWlCemEyVjBZMmc2ZEhsd1pUMGlUVk5UYUdGd1pVZHliM1Z3SWo0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVGt1T0RJeUxETTNMalEzTkNCRE1Ua3VPRE01TERNM0xqTXpPU0F4T1M0M05EY3NNemN1TVRrMElERTVMalUxTlN3ek55NHdPRElnUXpFNUxqSXlPQ3d6Tmk0NE9UUWdNVGd1TnpJNUxETTJMamczTWlBeE9DNDBORFlzTXpjdU1ETTNJRXd4TWk0ME16UXNOREF1TlRBNElFTXhNaTR6TURNc05EQXVOVGcwSURFeUxqSTBMRFF3TGpZNE5pQXhNaTR5TkRNc05EQXVOemt6SUVNeE1pNHlORFVzTkRBdU9USTFJREV5TGpJME5TdzBNUzR5TlRRZ01USXVNalExTERReExqTTNNU0JNTVRJdU1qUTFMRFF4TGpReE5DQk1NVEl1TWpNNExEUXhMalUwTWlCRE9DNHhORGdzTkRNdU9EZzNJRFV1TmpRM0xEUTFMak15TVNBMUxqWTBOeXcwTlM0ek1qRWdRelV1TmpRMkxEUTFMak15TVNBekxqVTNMRFEyTGpNMk55QXlMamcyTERVd0xqVXhNeUJETWk0NE5pdzFNQzQxTVRNZ01TNDVORGdzTlRjdU5EYzBJREV1T1RZeUxEY3dMakkxT0NCRE1TNDVOemNzT0RJdU9ESTRJREl1TlRZNExEZzNMak15T0NBekxqRXlPU3c1TVM0Mk1Ea2dRek11TXpRNUxEa3pMakk1TXlBMkxqRXpMRGt6TGpjek5DQTJMakV6TERrekxqY3pOQ0JETmk0ME5qRXNPVE11TnpjMElEWXVPREk0TERrekxqY3dOeUEzTGpJeExEa3pMalE0TmlCTU9ESXVORGd6TERRNUxqa3pOU0JET0RRdU1qa3hMRFE0TGpnMk5pQTROUzR4TlN3ME5pNHlNVFlnT0RVdU5UTTVMRFF6TGpZMU1TQkRPRFl1TnpVeUxETTFMalkyTVNBNE55NHlNVFFzTVRBdU5qY3pJRGcxTGpJMk5Dd3pMamMzTXlCRE9EVXVNRFk0TERNdU1EZ2dPRFF1TnpVMExESXVOamtnT0RRdU16azJMREl1TkRreElFdzRNaTR6TVN3eExqY3dNU0JET0RFdU5UZ3pMREV1TnpJNUlEZ3dMamc1TkN3eUxqRTJPQ0E0TUM0M056WXNNaTR5TXpZZ1F6Z3dMall6Tml3eUxqTXhOeUEwTVM0NE1EY3NNalF1TlRnMUlESXdMakF6TWl3ek55NHdOeklnVERFNUxqZ3lNaXd6Tnk0ME56UWlJR2xrUFNKR2FXeHNMVEVpSUdacGJHdzlJaU5HUmtaR1JrWWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOT0RJdU16RXhMREV1TnpBeElFdzROQzR6T1RZc01pNDBPVEVnUXpnMExqYzFOQ3d5TGpZNUlEZzFMakEyT0N3ekxqQTRJRGcxTGpJMk5Dd3pMamMzTXlCRE9EY3VNakV6TERFd0xqWTNNeUE0Tmk0M05URXNNelV1TmpZZ09EVXVOVE01TERRekxqWTFNU0JET0RVdU1UUTVMRFEyTGpJeE5pQTROQzR5T1N3ME9DNDROallnT0RJdU5EZ3pMRFE1TGprek5TQk1OeTR5TVN3NU15NDBPRFlnUXpZdU9EazNMRGt6TGpZMk55QTJMalU1TlN3NU15NDNORFFnTmk0ek1UUXNPVE11TnpRMElFdzJMakV6TVN3NU15NDNNek1nUXpZdU1UTXhMRGt6TGpjek5DQXpMak0wT1N3NU15NHlPVE1nTXk0eE1qZ3NPVEV1TmpBNUlFTXlMalUyT0N3NE55NHpNamNnTVM0NU56Y3NPREl1T0RJNElERXVPVFl6TERjd0xqSTFPQ0JETVM0NU5EZ3NOVGN1TkRjMElESXVPRFlzTlRBdU5URXpJREl1T0RZc05UQXVOVEV6SUVNekxqVTNMRFEyTGpNMk55QTFMalkwTnl3ME5TNHpNakVnTlM0Mk5EY3NORFV1TXpJeElFTTFMalkwTnl3ME5TNHpNakVnT0M0eE5EZ3NORE11T0RnM0lERXlMakl6T0N3ME1TNDFORElnVERFeUxqSTBOU3cwTVM0ME1UUWdUREV5TGpJME5TdzBNUzR6TnpFZ1F6RXlMakkwTlN3ME1TNHlOVFFnTVRJdU1qUTFMRFF3TGpreU5TQXhNaTR5TkRNc05EQXVOemt6SUVNeE1pNHlOQ3cwTUM0Mk9EWWdNVEl1TXpBeUxEUXdMalU0TXlBeE1pNDBNelFzTkRBdU5UQTRJRXd4T0M0ME5EWXNNemN1TURNMklFTXhPQzQxTnpRc016WXVPVFl5SURFNExqYzBOaXd6Tmk0NU1qWWdNVGd1T1RJM0xETTJMamt5TmlCRE1Ua3VNVFExTERNMkxqa3lOaUF4T1M0ek56WXNNell1T1RjNUlERTVMalUxTkN3ek55NHdPRElnUXpFNUxqYzBOeXd6Tnk0eE9UUWdNVGt1T0RNNUxETTNMak0wSURFNUxqZ3lNaXd6Tnk0ME56UWdUREl3TGpBek15d3pOeTR3TnpJZ1F6UXhMamd3Tml3eU5DNDFPRFVnT0RBdU5qTTJMREl1TXpFNElEZ3dMamMzTnl3eUxqSXpOaUJET0RBdU9EazBMREl1TVRZNElEZ3hMalU0TXl3eExqY3lPU0E0TWk0ek1URXNNUzQzTURFZ1RUZ3lMak14TVN3d0xqY3dOQ0JNT0RJdU1qY3lMREF1TnpBMUlFTTRNUzQyTlRRc01DNDNNamdnT0RBdU9UZzVMREF1T1RRNUlEZ3dMakk1T0N3eExqTTJNU0JNT0RBdU1qYzNMREV1TXpjeklFTTRNQzR4TWprc01TNDBOVGdnTlRrdU56WTRMREV6TGpFek5TQXhPUzQzTlRnc016WXVNRGM1SUVNeE9TNDFMRE0xTGprNE1TQXhPUzR5TVRRc016VXVPVEk1SURFNExqa3lOeXd6TlM0NU1qa2dRekU0TGpVMk1pd3pOUzQ1TWprZ01UZ3VNakl6TERNMkxqQXhNeUF4Tnk0NU5EY3NNell1TVRjeklFd3hNUzQ1TXpVc016a3VOalEwSUVNeE1TNDBPVE1zTXprdU9EazVJREV4TGpJek5pdzBNQzR6TXpRZ01URXVNalEyTERRd0xqZ3hJRXd4TVM0eU5EY3NOREF1T1RZZ1REVXVNVFkzTERRMExqUTBOeUJETkM0M09UUXNORFF1TmpRMklESXVOakkxTERRMUxqazNPQ0F4TGpnM055dzFNQzR6TkRVZ1RERXVPRGN4TERVd0xqTTROQ0JETVM0NE5qSXNOVEF1TkRVMElEQXVPVFV4TERVM0xqVTFOeUF3TGprMk5TdzNNQzR5TlRrZ1F6QXVPVGM1TERneUxqZzNPU0F4TGpVMk9DdzROeTR6TnpVZ01pNHhNemNzT1RFdU56STBJRXd5TGpFek9TdzVNUzQzTXprZ1F6SXVORFEzTERrMExqQTVOQ0ExTGpZeE5DdzVOQzQyTmpJZ05TNDVOelVzT1RRdU56RTVJRXcyTGpBd09TdzVOQzQzTWpNZ1F6WXVNVEVzT1RRdU56TTJJRFl1TWpFekxEazBMamMwTWlBMkxqTXhOQ3c1TkM0M05ESWdRell1Tnprc09UUXVOelF5SURjdU1qWXNPVFF1TmpFZ055NDNNU3c1TkM0ek5TQk1PREl1T1RnekxEVXdMamM1T0NCRE9EUXVOemswTERRNUxqY3lOeUE0TlM0NU9ESXNORGN1TXpjMUlEZzJMalV5TlN3ME15NDRNREVnUXpnM0xqY3hNU3d6TlM0NU9EY2dPRGd1TWpVNUxERXdMamN3TlNBNE5pNHlNalFzTXk0MU1ESWdRemcxTGprM01Td3lMall3T1NBNE5TNDFNaXd4TGprM05TQTROQzQ0T0RFc01TNDJNaUJNT0RRdU56UTVMREV1TlRVNElFdzRNaTQyTmpRc01DNDNOamtnUXpneUxqVTFNU3d3TGpjeU5TQTRNaTQwTXpFc01DNDNNRFFnT0RJdU16RXhMREF1TnpBMElpQnBaRDBpUm1sc2JDMHlJaUJtYVd4c1BTSWpORFUxUVRZMElqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVFkyTGpJMk55d3hNUzQxTmpVZ1REWTNMamMyTWl3eE1TNDVPVGtnVERFeExqUXlNeXcwTkM0ek1qVWlJR2xrUFNKR2FXeHNMVE1pSUdacGJHdzlJaU5HUmtaR1JrWWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRJdU1qQXlMRGt3TGpVME5TQkRNVEl1TURJNUxEa3dMalUwTlNBeE1TNDROaklzT1RBdU5EVTFJREV4TGpjMk9TdzVNQzR5T1RVZ1F6RXhMall6TWl3NU1DNHdOVGNnTVRFdU56RXpMRGc1TGpjMU1pQXhNUzQ1TlRJc09Ea3VOakUwSUV3ek1DNHpPRGtzTnpndU9UWTVJRU16TUM0Mk1qZ3NOemd1T0RNeElETXdMamt6TXl3M09DNDVNVE1nTXpFdU1EY3hMRGM1TGpFMU1pQkRNekV1TWpBNExEYzVMak01SURNeExqRXlOeXczT1M0Mk9UWWdNekF1T0RnNExEYzVMamd6TXlCTU1USXVORFV4TERrd0xqUTNPQ0JNTVRJdU1qQXlMRGt3TGpVME5TSWdhV1E5SWtacGJHd3ROQ0lnWm1sc2JEMGlJell3TjBRNFFpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TXk0M05qUXNOREl1TmpVMElFd3hNeTQyTlRZc05ESXVOVGt5SUV3eE15NDNNRElzTkRJdU5ESXhJRXd4T0M0NE16Y3NNemt1TkRVM0lFd3hPUzR3TURjc016a3VOVEF5SUV3eE9DNDVOaklzTXprdU5qY3pJRXd4TXk0NE1qY3NOREl1TmpNM0lFd3hNeTQzTmpRc05ESXVOalUwSWlCcFpEMGlSbWxzYkMwMUlpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUZ3VOVElzT1RBdU16YzFJRXc0TGpVeUxEUTJMalF5TVNCTU9DNDFPRE1zTkRZdU16ZzFJRXczTlM0NE5DdzNMalUxTkNCTU56VXVPRFFzTlRFdU5UQTRJRXczTlM0M056Z3NOVEV1TlRRMElFdzRMalV5TERrd0xqTTNOU0JNT0M0MU1pdzVNQzR6TnpVZ1dpQk5PQzQzTnl3ME5pNDFOalFnVERndU56Y3NPRGt1T1RRMElFdzNOUzQxT1RFc05URXVNelkxSUV3M05TNDFPVEVzTnk0NU9EVWdURGd1Tnpjc05EWXVOVFkwSUV3NExqYzNMRFEyTGpVMk5DQmFJaUJwWkQwaVJtbHNiQzAySWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRJMExqazROaXc0TXk0eE9ESWdRekkwTGpjMU5pdzRNeTR6TXpFZ01qUXVNemMwTERnekxqVTJOaUF5TkM0eE16Y3NPRE11TnpBMUlFd3hNaTQyTXpJc09UQXVOREEySUVNeE1pNHpPVFVzT1RBdU5UUTFJREV5TGpReU5pdzVNQzQyTlRnZ01USXVOeXc1TUM0Mk5UZ2dUREV6TGpJMk5TdzVNQzQyTlRnZ1F6RXpMalUwTERrd0xqWTFPQ0F4TXk0NU5UZ3NPVEF1TlRRMUlERTBMakU1TlN3NU1DNDBNRFlnVERJMUxqY3NPRE11TnpBMUlFTXlOUzQ1TXpjc09ETXVOVFkySURJMkxqRXlPQ3c0TXk0ME5USWdNall1TVRJMUxEZ3pMalEwT1NCRE1qWXVNVEl5TERnekxqUTBOeUF5Tmk0eE1Ua3NPRE11TWpJZ01qWXVNVEU1TERneUxqazBOaUJETWpZdU1URTVMRGd5TGpZM01pQXlOUzQ1TXpFc09ESXVOVFk1SURJMUxqY3dNU3c0TWk0M01Ua2dUREkwTGprNE5pdzRNeTR4T0RJaUlHbGtQU0pHYVd4c0xUY2lJR1pwYkd3OUlpTTJNRGRFT0VJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVE11TWpZMkxEa3dMamM0TWlCTU1USXVOeXc1TUM0M09ESWdRekV5TGpVc09UQXVOemd5SURFeUxqTTROQ3c1TUM0M01qWWdNVEl1TXpVMExEa3dMall4TmlCRE1USXVNekkwTERrd0xqVXdOaUF4TWk0ek9UY3NPVEF1TXprNUlERXlMalUyT1N3NU1DNHlPVGtnVERJMExqQTNOQ3c0TXk0MU9UY2dRekkwTGpNeExEZ3pMalExT1NBeU5DNDJPRGtzT0RNdU1qSTJJREkwTGpreE9DdzRNeTR3TnpnZ1RESTFMall6TXl3NE1pNDJNVFFnUXpJMUxqY3lNeXc0TWk0MU5UVWdNalV1T0RFekxEZ3lMalV5TlNBeU5TNDRPVGtzT0RJdU5USTFJRU15Tmk0d056RXNPREl1TlRJMUlESTJMakkwTkN3NE1pNDJOVFVnTWpZdU1qUTBMRGd5TGprME5pQkRNall1TWpRMExEZ3pMakUySURJMkxqSTBOU3c0TXk0ek1Ea2dNall1TWpRM0xEZ3pMak00TXlCTU1qWXVNalV6TERnekxqTTROeUJNTWpZdU1qUTVMRGd6TGpRMU5pQkRNall1TWpRMkxEZ3pMalV6TVNBeU5pNHlORFlzT0RNdU5UTXhJREkxTGpjMk15dzRNeTQ0TVRJZ1RERTBMakkxT0N3NU1DNDFNVFFnUXpFMExEa3dMalkyTlNBeE15NDFOalFzT1RBdU56Z3lJREV6TGpJMk5pdzVNQzQzT0RJZ1RERXpMakkyTml3NU1DNDNPRElnV2lCTk1USXVOalkyTERrd0xqVXpNaUJNTVRJdU55dzVNQzQxTXpNZ1RERXpMakkyTml3NU1DNDFNek1nUXpFekxqVXhPQ3c1TUM0MU16TWdNVE11T1RFMUxEa3dMalF5TlNBeE5DNHhNeklzT1RBdU1qazVJRXd5TlM0Mk16Y3NPRE11TlRrM0lFTXlOUzQ0TURVc09ETXVORGs1SURJMUxqa3pNU3c0TXk0ME1qUWdNalV1T1RrNExEZ3pMak00TXlCRE1qVXVPVGswTERnekxqSTVPU0F5TlM0NU9UUXNPRE11TVRZMUlESTFMams1TkN3NE1pNDVORFlnVERJMUxqZzVPU3c0TWk0M056VWdUREkxTGpjMk9DdzRNaTQ0TWpRZ1RESTFMakExTkN3NE15NHlPRGNnUXpJMExqZ3lNaXc0TXk0ME16Y2dNalF1TkRNNExEZ3pMalkzTXlBeU5DNHlMRGd6TGpneE1pQk1NVEl1TmprMUxEa3dMalV4TkNCTU1USXVOalkyTERrd0xqVXpNaUJNTVRJdU5qWTJMRGt3TGpVek1pQmFJaUJwWkQwaVJtbHNiQzA0SWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFekxqSTJOaXc0T1M0NE56RWdUREV5TGpjc09Ea3VPRGN4SUVNeE1pNDFMRGc1TGpnM01TQXhNaTR6T0RRc09Ea3VPREUxSURFeUxqTTFOQ3c0T1M0M01EVWdRekV5TGpNeU5DdzRPUzQxT1RVZ01USXVNemszTERnNUxqUTRPQ0F4TWk0MU5qa3NPRGt1TXpnNElFd3lOQzR3TnpRc09ESXVOamcySUVNeU5DNHpNeklzT0RJdU5UTTFJREkwTGpjMk9DdzRNaTQwTVRnZ01qVXVNRFkzTERneUxqUXhPQ0JNTWpVdU5qTXlMRGd5TGpReE9DQkRNalV1T0RNeUxEZ3lMalF4T0NBeU5TNDVORGdzT0RJdU5EYzBJREkxTGprM09DdzRNaTQxT0RRZ1F6STJMakF3T0N3NE1pNDJPVFFnTWpVdU9UTTFMRGd5TGpnd01TQXlOUzQzTmpNc09ESXVPVEF4SUV3eE5DNHlOVGdzT0RrdU5qQXpJRU14TkN3NE9TNDNOVFFnTVRNdU5UWTBMRGc1TGpnM01TQXhNeTR5TmpZc09Ea3VPRGN4SUV3eE15NHlOallzT0RrdU9EY3hJRm9nVFRFeUxqWTJOaXc0T1M0Mk1qRWdUREV5TGpjc09Ea3VOakl5SUV3eE15NHlOallzT0RrdU5qSXlJRU14TXk0MU1UZ3NPRGt1TmpJeUlERXpMamt4TlN3NE9TNDFNVFVnTVRRdU1UTXlMRGc1TGpNNE9DQk1NalV1TmpNM0xEZ3lMalk0TmlCTU1qVXVOalkzTERneUxqWTJPQ0JNTWpVdU5qTXlMRGd5TGpZMk55Qk1NalV1TURZM0xEZ3lMalkyTnlCRE1qUXVPREUxTERneUxqWTJOeUF5TkM0ME1UZ3NPREl1TnpjMUlESTBMaklzT0RJdU9UQXhJRXd4TWk0Mk9UVXNPRGt1TmpBeklFd3hNaTQyTmpZc09Ea3VOakl4SUV3eE1pNDJOallzT0RrdU5qSXhJRm9pSUdsa1BTSkdhV3hzTFRraUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1USXVNemNzT1RBdU9EQXhJRXd4TWk0ek55dzRPUzQxTlRRZ1RERXlMak0zTERrd0xqZ3dNU0lnYVdROUlrWnBiR3d0TVRBaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk5pNHhNeXc1TXk0NU1ERWdRelV1TXpjNUxEa3pMamd3T0NBMExqZ3hOaXc1TXk0eE5qUWdOQzQyT1RFc09USXVOVEkxSUVNekxqZzJMRGc0TGpJNE55QXpMalUwTERnekxqYzBNeUF6TGpVeU5pdzNNUzR4TnpNZ1F6TXVOVEV4TERVNExqTTRPU0EwTGpReU15dzFNUzQwTWpnZ05DNDBNak1zTlRFdU5ESTRJRU0xTGpFek5DdzBOeTR5T0RJZ055NHlNU3cwTmk0eU16WWdOeTR5TVN3ME5pNHlNellnUXpjdU1qRXNORFl1TWpNMklEZ3hMalkyTnl3ekxqSTFJRGd5TGpBMk9Td3pMakF4TnlCRE9ESXVNamt5TERJdU9EZzRJRGcwTGpVMU5pd3hMalF6TXlBNE5TNHlOalFzTXk0NU5DQkRPRGN1TWpFMExERXdMamcwSURnMkxqYzFNaXd6TlM0NE1qY2dPRFV1TlRNNUxEUXpMamd4T0NCRE9EVXVNVFVzTkRZdU16Z3pJRGcwTGpJNU1TdzBPUzR3TXpNZ09ESXVORGd6TERVd0xqRXdNU0JNTnk0eU1TdzVNeTQyTlRNZ1F6WXVPREk0TERrekxqZzNOQ0EyTGpRMk1TdzVNeTQ1TkRFZ05pNHhNeXc1TXk0NU1ERWdRell1TVRNc09UTXVPVEF4SURNdU16UTVMRGt6TGpRMklETXVNVEk1TERreExqYzNOaUJETWk0MU5qZ3NPRGN1TkRrMUlERXVPVGMzTERneUxqazVOU0F4TGprMk1pdzNNQzQwTWpVZ1F6RXVPVFE0TERVM0xqWTBNU0F5TGpnMkxEVXdMalk0SURJdU9EWXNOVEF1TmpnZ1F6TXVOVGNzTkRZdU5UTTBJRFV1TmpRM0xEUTFMalE0T1NBMUxqWTBOeXcwTlM0ME9Ea2dRelV1TmpRMkxEUTFMalE0T1NBNExqQTJOU3cwTkM0d09USWdNVEl1TWpRMUxEUXhMalkzT1NCTU1UTXVNVEUyTERReExqVTJJRXd4T1M0M01UVXNNemN1TnpNZ1RERTVMamMyTVN3ek55NHlOamtnVERZdU1UTXNPVE11T1RBeElpQnBaRDBpUm1sc2JDMHhNU0lnWm1sc2JEMGlJMFpCUmtGR1FTSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazAyTGpNeE55dzVOQzR4TmpFZ1REWXVNVEF5TERrMExqRTBPQ0JNTmk0eE1ERXNPVFF1TVRRNElFdzFMamcxTnl3NU5DNHhNREVnUXpVdU1UTTRMRGt6TGprME5TQXpMakE0TlN3NU15NHpOalVnTWk0NE9ERXNPVEV1T0RBNUlFTXlMak14TXl3NE55NDBOamtnTVM0M01qY3NPREl1T1RrMklERXVOekV6TERjd0xqUXlOU0JETVM0Mk9Ua3NOVGN1TnpjeElESXVOakEwTERVd0xqY3hPQ0F5TGpZeE15dzFNQzQyTkRnZ1F6TXVNek00TERRMkxqUXhOeUExTGpRME5TdzBOUzR6TVNBMUxqVXpOU3cwTlM0eU5qWWdUREV5TGpFMk15dzBNUzQwTXprZ1RERXpMakF6TXl3ME1TNHpNaUJNTVRrdU5EYzVMRE0zTGpVM09DQk1NVGt1TlRFekxETTNMakkwTkNCRE1Ua3VOVEkyTERNM0xqRXdOeUF4T1M0Mk5EY3NNemN1TURBNElERTVMamM0Tml3ek55NHdNakVnUXpFNUxqa3lNaXd6Tnk0d016UWdNakF1TURJekxETTNMakUxTmlBeU1DNHdNRGtzTXpjdU1qa3pJRXd4T1M0NU5Td3pOeTQ0T0RJZ1RERXpMakU1T0N3ME1TNDRNREVnVERFeUxqTXlPQ3cwTVM0NU1Ua2dURFV1TnpjeUxEUTFMamN3TkNCRE5TNDNOREVzTkRVdU56SWdNeTQzT0RJc05EWXVOemN5SURNdU1UQTJMRFV3TGpjeU1pQkRNeTR3T1Rrc05UQXVOemd5SURJdU1UazRMRFUzTGpnd09DQXlMakl4TWl3M01DNDBNalFnUXpJdU1qSTJMRGd5TGprMk15QXlMamd3T1N3NE55NDBNaUF6TGpNM015dzVNUzQzTWprZ1F6TXVORFkwTERreUxqUXlJRFF1TURZeUxEa3lMamc0TXlBMExqWTRNaXc1TXk0eE9ERWdRelF1TlRZMkxEa3lMams0TkNBMExqUTROaXc1TWk0M056WWdOQzQwTkRZc09USXVOVGN5SUVNekxqWTJOU3c0T0M0MU9EZ2dNeTR5T1RFc09EUXVNemNnTXk0eU56WXNOekV1TVRjeklFTXpMakkyTWl3MU9DNDFNaUEwTGpFMk55dzFNUzQwTmpZZ05DNHhOellzTlRFdU16azJJRU0wTGprd01TdzBOeTR4TmpVZ055NHdNRGdzTkRZdU1EVTVJRGN1TURrNExEUTJMakF4TkNCRE55NHdPVFFzTkRZdU1ERTFJRGd4TGpVME1pd3pMakF6TkNBNE1TNDVORFFzTWk0NE1ESWdURGd4TGprM01pd3lMamM0TlNCRE9ESXVPRGMyTERJdU1qUTNJRGd6TGpZNU1pd3lMakE1TnlBNE5DNHpNeklzTWk0ek5USWdRemcwTGpnNE55d3lMalUzTXlBNE5TNHlPREVzTXk0d09EVWdPRFV1TlRBMExETXVPRGN5SUVNNE55NDFNVGdzTVRFZ09EWXVPVFkwTERNMkxqQTVNU0E0TlM0M09EVXNORE11T0RVMUlFTTROUzR5Tnpnc05EY3VNVGsySURnMExqSXhMRFE1TGpNM0lEZ3lMall4TERVd0xqTXhOeUJNTnk0ek16VXNPVE11T0RZNUlFTTJMams1T1N3NU5DNHdOak1nTmk0Mk5UZ3NPVFF1TVRZeElEWXVNekUzTERrMExqRTJNU0JNTmk0ek1UY3NPVFF1TVRZeElGb2dUVFl1TVRjc09UTXVOalUwSUVNMkxqUTJNeXc1TXk0Mk9TQTJMamMzTkN3NU15NDJNVGNnTnk0d09EVXNPVE11TkRNM0lFdzRNaTR6TlRnc05Ea3VPRGcySUVNNE5DNHhPREVzTkRndU9EQTRJRGcwTGprMkxEUTFMamszTVNBNE5TNHlPVElzTkRNdU56Z2dRemcyTGpRMk5pd3pOaTR3TkRrZ09EY3VNREl6TERFeExqQTROU0E0TlM0d01qUXNOQzR3TURnZ1F6ZzBMamcwTml3ekxqTTNOeUE0TkM0MU5URXNNaTQ1TnpZZ09EUXVNVFE0TERJdU9ERTJJRU00TXk0Mk5qUXNNaTQyTWpNZ09ESXVPVGd5TERJdU56WTBJRGd5TGpJeU55d3pMakl4TXlCTU9ESXVNVGt6TERNdU1qTTBJRU00TVM0M09URXNNeTQwTmpZZ055NHpNelVzTkRZdU5EVXlJRGN1TXpNMUxEUTJMalExTWlCRE55NHpNRFFzTkRZdU5EWTVJRFV1TXpRMkxEUTNMalV5TVNBMExqWTJPU3cxTVM0ME56RWdRelF1TmpZeUxEVXhMalV6SURNdU56WXhMRFU0TGpVMU5pQXpMamMzTlN3M01TNHhOek1nUXpNdU56a3NPRFF1TXpJNElEUXVNVFl4TERnNExqVXlOQ0EwTGprek5pdzVNaTQwTnpZZ1F6VXVNREkyTERreUxqa3pOeUExTGpReE1pdzVNeTQwTlRrZ05TNDVOek1zT1RNdU5qRTFJRU0yTGpBNE55dzVNeTQyTkNBMkxqRTFPQ3c1TXk0Mk5USWdOaTR4Tmprc09UTXVOalUwSUV3MkxqRTNMRGt6TGpZMU5DQk1OaTR4Tnl3NU15NDJOVFFnV2lJZ2FXUTlJa1pwYkd3dE1USWlJR1pwYkd3OUlpTTBOVFZCTmpRaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5OeTR6TVRjc05qZ3VPVGd5SUVNM0xqZ3dOaXcyT0M0M01ERWdPQzR5TURJc05qZ3VPVEkySURndU1qQXlMRFk1TGpRNE55QkRPQzR5TURJc056QXVNRFEzSURjdU9EQTJMRGN3TGpjeklEY3VNekUzTERjeExqQXhNaUJETmk0NE1qa3NOekV1TWprMElEWXVORE16TERjeExqQTJPU0EyTGpRek15dzNNQzQxTURnZ1F6WXVORE16TERZNUxqazBPQ0EyTGpneU9TdzJPUzR5TmpVZ055NHpNVGNzTmpndU9UZ3lJaUJwWkQwaVJtbHNiQzB4TXlJZ1ptbHNiRDBpSTBaR1JrWkdSaUkrUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWswMkxqa3lMRGN4TGpFek15QkROaTQyTXpFc056RXVNVE16SURZdU5ETXpMRGN3TGprd05TQTJMalF6TXl3M01DNDFNRGdnUXpZdU5ETXpMRFk1TGprME9DQTJMamd5T1N3Mk9TNHlOalVnTnk0ek1UY3NOamd1T1RneUlFTTNMalEyTERZNExqa2dOeTQxT1RVc05qZ3VPRFl4SURjdU56RTBMRFk0TGpnMk1TQkRPQzR3TURNc05qZ3VPRFl4SURndU1qQXlMRFk1TGpBNUlEZ3VNakF5TERZNUxqUTROeUJET0M0eU1ESXNOekF1TURRM0lEY3VPREEyTERjd0xqY3pJRGN1TXpFM0xEY3hMakF4TWlCRE55NHhOelFzTnpFdU1EazBJRGN1TURNNUxEY3hMakV6TXlBMkxqa3lMRGN4TGpFek15Qk5OeTQzTVRRc05qZ3VOamMwSUVNM0xqVTFOeXcyT0M0Mk56UWdOeTR6T1RJc05qZ3VOekl6SURjdU1qSTBMRFk0TGpneU1TQkROaTQyTnpZc05qa3VNVE00SURZdU1qUTJMRFk1TGpnM09TQTJMakkwTml3M01DNDFNRGdnUXpZdU1qUTJMRGN3TGprNU5DQTJMalV4Tnl3M01TNHpNaUEyTGpreUxEY3hMak15SUVNM0xqQTNPQ3czTVM0ek1pQTNMakkwTXl3M01TNHlOekVnTnk0ME1URXNOekV1TVRjMElFTTNMamsxT1N3M01DNDROVGNnT0M0ek9Ea3NOekF1TVRFM0lEZ3VNemc1TERZNUxqUTROeUJET0M0ek9Ea3NOamt1TURBeElEZ3VNVEUzTERZNExqWTNOQ0EzTGpjeE5DdzJPQzQyTnpRaUlHbGtQU0pHYVd4c0xURTBJaUJtYVd4c1BTSWpPREE1TjBFeUlqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVFl1T1RJc056QXVPVFEzSUVNMkxqWTBPU3czTUM0NU5EY2dOaTQyTWpFc056QXVOalFnTmk0Mk1qRXNOekF1TlRBNElFTTJMall5TVN3M01DNHdNVGNnTmk0NU9ESXNOamt1TXpreUlEY3VOREV4TERZNUxqRTBOU0JETnk0MU1qRXNOamt1TURneUlEY3VOakkxTERZNUxqQTBPU0EzTGpjeE5DdzJPUzR3TkRrZ1F6Y3VPVGcyTERZNUxqQTBPU0E0TGpBeE5TdzJPUzR6TlRVZ09DNHdNVFVzTmprdU5EZzNJRU00TGpBeE5TdzJPUzQ1TnpnZ055NDJOVElzTnpBdU5qQXpJRGN1TWpJMExEY3dMamcxTVNCRE55NHhNVFVzTnpBdU9URTBJRGN1TURFc056QXVPVFEzSURZdU9USXNOekF1T1RRM0lFMDNMamN4TkN3Mk9DNDROakVnUXpjdU5UazFMRFk0TGpnMk1TQTNMalEyTERZNExqa2dOeTR6TVRjc05qZ3VPVGd5SUVNMkxqZ3lPU3cyT1M0eU5qVWdOaTQwTXpNc05qa3VPVFE0SURZdU5ETXpMRGN3TGpVd09DQkROaTQwTXpNc056QXVPVEExSURZdU5qTXhMRGN4TGpFek15QTJMamt5TERjeExqRXpNeUJETnk0d016a3NOekV1TVRNeklEY3VNVGMwTERjeExqQTVOQ0EzTGpNeE55dzNNUzR3TVRJZ1F6Y3VPREEyTERjd0xqY3pJRGd1TWpBeUxEY3dMakEwTnlBNExqSXdNaXcyT1M0ME9EY2dRemd1TWpBeUxEWTVMakE1SURndU1EQXpMRFk0TGpnMk1TQTNMamN4TkN3Mk9DNDROakVpSUdsa1BTSkdhV3hzTFRFMUlpQm1hV3hzUFNJak9EQTVOMEV5SWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUY3VORFEwTERnMUxqTTFJRU0zTGpjd09DdzROUzR4T1RnZ055NDVNakVzT0RVdU16RTVJRGN1T1RJeExEZzFMall5TWlCRE55NDVNakVzT0RVdU9USTFJRGN1TnpBNExEZzJMakk1TWlBM0xqUTBOQ3c0Tmk0ME5EUWdRemN1TVRneExEZzJMalU1TnlBMkxqazJOeXc0Tmk0ME56VWdOaTQ1Tmpjc09EWXVNVGN6SUVNMkxqazJOeXc0TlM0NE56RWdOeTR4T0RFc09EVXVOVEF5SURjdU5EUTBMRGcxTGpNMUlpQnBaRDBpUm1sc2JDMHhOaUlnWm1sc2JEMGlJMFpHUmtaR1JpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazAzTGpJekxEZzJMalV4SUVNM0xqQTNOQ3c0Tmk0MU1TQTJMamsyTnl3NE5pNHpPRGNnTmk0NU5qY3NPRFl1TVRjeklFTTJMamsyTnl3NE5TNDROekVnTnk0eE9ERXNPRFV1TlRBeUlEY3VORFEwTERnMUxqTTFJRU0zTGpVeU1TdzROUzR6TURVZ055NDFPVFFzT0RVdU1qZzBJRGN1TmpVNExEZzFMakk0TkNCRE55NDRNVFFzT0RVdU1qZzBJRGN1T1RJeExEZzFMalF3T0NBM0xqa3lNU3c0TlM0Mk1qSWdRemN1T1RJeExEZzFMamt5TlNBM0xqY3dPQ3c0Tmk0eU9USWdOeTQwTkRRc09EWXVORFEwSUVNM0xqTTJOeXc0Tmk0ME9Ea2dOeTR5T1RRc09EWXVOVEVnTnk0eU15dzROaTQxTVNCTk55NDJOVGdzT0RVdU1EazRJRU0zTGpVMU9DdzROUzR3T1RnZ055NDBOVFVzT0RVdU1USTNJRGN1TXpVeExEZzFMakU0T0NCRE55NHdNekVzT0RVdU16Y3pJRFl1TnpneExEZzFMamd3TmlBMkxqYzRNU3c0Tmk0eE56TWdRell1TnpneExEZzJMalE0TWlBMkxqazJOaXc0Tmk0Mk9UY2dOeTR5TXl3NE5pNDJPVGNnUXpjdU16TXNPRFl1TmprM0lEY3VORE16TERnMkxqWTJOaUEzTGpVek9DdzROaTQyTURjZ1F6Y3VPRFU0TERnMkxqUXlNaUE0TGpFd09DdzROUzQ1T0RrZ09DNHhNRGdzT0RVdU5qSXlJRU00TGpFd09DdzROUzR6TVRNZ055NDVNak1zT0RVdU1EazRJRGN1TmpVNExEZzFMakE1T0NJZ2FXUTlJa1pwYkd3dE1UY2lJR1pwYkd3OUlpTTRNRGszUVRJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5OeTR5TXl3NE5pNHpNaklnVERjdU1UVTBMRGcyTGpFM015QkROeTR4TlRRc09EVXVPVE00SURjdU16TXpMRGcxTGpZeU9TQTNMalV6T0N3NE5TNDFNVElnVERjdU5qVTRMRGcxTGpRM01TQk1OeTQzTXpRc09EVXVOakl5SUVNM0xqY3pOQ3c0TlM0NE5UWWdOeTQxTlRVc09EWXVNVFkwSURjdU16VXhMRGcyTGpJNE1pQk1OeTR5TXl3NE5pNHpNaklnVFRjdU5qVTRMRGcxTGpJNE5DQkROeTQxT1RRc09EVXVNamcwSURjdU5USXhMRGcxTGpNd05TQTNMalEwTkN3NE5TNHpOU0JETnk0eE9ERXNPRFV1TlRBeUlEWXVPVFkzTERnMUxqZzNNU0EyTGprMk55dzROaTR4TnpNZ1F6WXVPVFkzTERnMkxqTTROeUEzTGpBM05DdzROaTQxTVNBM0xqSXpMRGcyTGpVeElFTTNMakk1TkN3NE5pNDFNU0EzTGpNMk55dzROaTQwT0RrZ055NDBORFFzT0RZdU5EUTBJRU0zTGpjd09DdzROaTR5T1RJZ055NDVNakVzT0RVdU9USTFJRGN1T1RJeExEZzFMall5TWlCRE55NDVNakVzT0RVdU5EQTRJRGN1T0RFMExEZzFMakk0TkNBM0xqWTFPQ3c0TlM0eU9EUWlJR2xrUFNKR2FXeHNMVEU0SWlCbWFXeHNQU0lqT0RBNU4wRXlJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRjM0xqSTNPQ3czTGpjMk9TQk1OemN1TWpjNExEVXhMalF6TmlCTU1UQXVNakE0TERrd0xqRTJJRXd4TUM0eU1EZ3NORFl1TkRreklFdzNOeTR5Tnpnc055NDNOamtpSUdsa1BTSkdhV3hzTFRFNUlpQm1hV3hzUFNJak5EVTFRVFkwSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURXdMakE0TXl3NU1DNHpOelVnVERFd0xqQTRNeXcwTmk0ME1qRWdUREV3TGpFME5pdzBOaTR6T0RVZ1REYzNMalF3TXl3M0xqVTFOQ0JNTnpjdU5EQXpMRFV4TGpVd09DQk1OemN1TXpReExEVXhMalUwTkNCTU1UQXVNRGd6TERrd0xqTTNOU0JNTVRBdU1EZ3pMRGt3TGpNM05TQmFJRTB4TUM0ek16TXNORFl1TlRZMElFd3hNQzR6TXpNc09Ea3VPVFEwSUV3M055NHhOVFFzTlRFdU16WTFJRXczTnk0eE5UUXNOeTQ1T0RVZ1RERXdMak16TXl3ME5pNDFOalFnVERFd0xqTXpNeXcwTmk0MU5qUWdXaUlnYVdROUlrWnBiR3d0TWpBaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2Wno0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE1qVXVOek0zTERnNExqWTBOeUJNTVRFNExqQTVPQ3c1TVM0NU9ERWdUREV4T0M0d09UZ3NPRFFnVERFd05pNDJNemtzT0RndU56RXpJRXd4TURZdU5qTTVMRGsyTGprNE1pQk1PVGtzTVRBd0xqTXhOU0JNTVRFeUxqTTJPU3d4TURNdU9UWXhJRXd4TWpVdU56TTNMRGc0TGpZME55SWdhV1E5SWtsdGNHOXlkR1ZrTFV4aGVXVnljeTFEYjNCNUxUSWlJR1pwYkd3OUlpTTBOVFZCTmpRaUlITnJaWFJqYURwMGVYQmxQU0pOVTFOb1lYQmxSM0p2ZFhBaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdQQzluUGdvZ0lDQWdJQ0FnSUR3dlp6NEtJQ0FnSUR3dlp6NEtQQzl6ZG1jKycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSb3RhdGVJbnN0cnVjdGlvbnM7XG5cbn0se1wiLi91dGlsLmpzXCI6MjJ9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgU2Vuc29yU2FtcGxlID0gX2RlcmVxXygnLi9zZW5zb3Itc2FtcGxlLmpzJyk7XG52YXIgTWF0aFV0aWwgPSBfZGVyZXFfKCcuLi9tYXRoLXV0aWwuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi4vdXRpbC5qcycpO1xuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGEgc2ltcGxlIGNvbXBsZW1lbnRhcnkgZmlsdGVyLCB3aGljaCBmdXNlcyBneXJvc2NvcGUgYW5kXG4gKiBhY2NlbGVyb21ldGVyIGRhdGEgZnJvbSB0aGUgJ2RldmljZW1vdGlvbicgZXZlbnQuXG4gKlxuICogQWNjZWxlcm9tZXRlciBkYXRhIGlzIHZlcnkgbm9pc3ksIGJ1dCBzdGFibGUgb3ZlciB0aGUgbG9uZyB0ZXJtLlxuICogR3lyb3Njb3BlIGRhdGEgaXMgc21vb3RoLCBidXQgdGVuZHMgdG8gZHJpZnQgb3ZlciB0aGUgbG9uZyB0ZXJtLlxuICpcbiAqIFRoaXMgZnVzaW9uIGlzIHJlbGF0aXZlbHkgc2ltcGxlOlxuICogMS4gR2V0IG9yaWVudGF0aW9uIGVzdGltYXRlcyBmcm9tIGFjY2VsZXJvbWV0ZXIgYnkgYXBwbHlpbmcgYSBsb3ctcGFzcyBmaWx0ZXJcbiAqICAgIG9uIHRoYXQgZGF0YS5cbiAqIDIuIEdldCBvcmllbnRhdGlvbiBlc3RpbWF0ZXMgZnJvbSBneXJvc2NvcGUgYnkgaW50ZWdyYXRpbmcgb3ZlciB0aW1lLlxuICogMy4gQ29tYmluZSB0aGUgdHdvIGVzdGltYXRlcywgd2VpZ2hpbmcgKDEpIGluIHRoZSBsb25nIHRlcm0sIGJ1dCAoMikgZm9yIHRoZVxuICogICAgc2hvcnQgdGVybS5cbiAqL1xuZnVuY3Rpb24gQ29tcGxlbWVudGFyeUZpbHRlcihrRmlsdGVyKSB7XG4gIHRoaXMua0ZpbHRlciA9IGtGaWx0ZXI7XG5cbiAgLy8gUmF3IHNlbnNvciBtZWFzdXJlbWVudHMuXG4gIHRoaXMuY3VycmVudEFjY2VsTWVhc3VyZW1lbnQgPSBuZXcgU2Vuc29yU2FtcGxlKCk7XG4gIHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTtcbiAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTtcblxuICAvLyBTZXQgZGVmYXVsdCBsb29rIGRpcmVjdGlvbiB0byBiZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rpb24uXG4gIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICB0aGlzLmZpbHRlclEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigtMSwgMCwgMCwgMSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maWx0ZXJRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oMSwgMCwgMCwgMSk7XG4gIH1cbiAgdGhpcy5wcmV2aW91c0ZpbHRlclEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0aGlzLnByZXZpb3VzRmlsdGVyUS5jb3B5KHRoaXMuZmlsdGVyUSk7XG5cbiAgLy8gT3JpZW50YXRpb24gYmFzZWQgb24gdGhlIGFjY2VsZXJvbWV0ZXIuXG4gIHRoaXMuYWNjZWxRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgLy8gV2hldGhlciBvciBub3QgdGhlIG9yaWVudGF0aW9uIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICB0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCA9IGZhbHNlO1xuICAvLyBSdW5uaW5nIGVzdGltYXRlIG9mIGdyYXZpdHkgYmFzZWQgb24gdGhlIGN1cnJlbnQgb3JpZW50YXRpb24uXG4gIHRoaXMuZXN0aW1hdGVkR3Jhdml0eSA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIC8vIE1lYXN1cmVkIGdyYXZpdHkgYmFzZWQgb24gYWNjZWxlcm9tZXRlci5cbiAgdGhpcy5tZWFzdXJlZEdyYXZpdHkgPSBuZXcgTWF0aFV0aWwuVmVjdG9yMygpO1xuXG4gIC8vIERlYnVnIG9ubHkgcXVhdGVybmlvbiBvZiBneXJvLWJhc2VkIG9yaWVudGF0aW9uLlxuICB0aGlzLmd5cm9JbnRlZ3JhbFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xufVxuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRBY2NlbE1lYXN1cmVtZW50ID0gZnVuY3Rpb24odmVjdG9yLCB0aW1lc3RhbXBTKSB7XG4gIHRoaXMuY3VycmVudEFjY2VsTWVhc3VyZW1lbnQuc2V0KHZlY3RvciwgdGltZXN0YW1wUyk7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRHeXJvTWVhc3VyZW1lbnQgPSBmdW5jdGlvbih2ZWN0b3IsIHRpbWVzdGFtcFMpIHtcbiAgdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpO1xuXG4gIHZhciBkZWx0YVQgPSB0aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTO1xuICBpZiAoVXRpbC5pc1RpbWVzdGFtcERlbHRhVmFsaWQoZGVsdGFUKSkge1xuICAgIHRoaXMucnVuXygpO1xuICB9XG5cbiAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC5jb3B5KHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCk7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5ydW5fID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKCF0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCkge1xuICAgIHRoaXMuYWNjZWxRID0gdGhpcy5hY2NlbFRvUXVhdGVybmlvbl8odGhpcy5jdXJyZW50QWNjZWxNZWFzdXJlbWVudC5zYW1wbGUpO1xuICAgIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5hY2NlbFEpO1xuICAgIHRoaXMuaXNPcmllbnRhdGlvbkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGVsdGFUID0gdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnRpbWVzdGFtcFMgLVxuICAgICAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTO1xuXG4gIC8vIENvbnZlcnQgZ3lybyByb3RhdGlvbiB2ZWN0b3IgdG8gYSBxdWF0ZXJuaW9uIGRlbHRhLlxuICB2YXIgZ3lyb0RlbHRhUSA9IHRoaXMuZ3lyb1RvUXVhdGVybmlvbkRlbHRhXyh0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQuc2FtcGxlLCBkZWx0YVQpO1xuICB0aGlzLmd5cm9JbnRlZ3JhbFEubXVsdGlwbHkoZ3lyb0RlbHRhUSk7XG5cbiAgLy8gZmlsdGVyXzEgPSBLICogKGZpbHRlcl8wICsgZ3lybyAqIGRUKSArICgxIC0gSykgKiBhY2NlbC5cbiAgdGhpcy5maWx0ZXJRLmNvcHkodGhpcy5wcmV2aW91c0ZpbHRlclEpO1xuICB0aGlzLmZpbHRlclEubXVsdGlwbHkoZ3lyb0RlbHRhUSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBjdXJyZW50IGVzdGltYXRlZCBncmF2aXR5IGFuZCB0aGUgcmVhbFxuICAvLyBncmF2aXR5IHZlY3RvciBmcm9tIGFjY2VsZXJvbWV0ZXIuXG4gIHZhciBpbnZGaWx0ZXJRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgaW52RmlsdGVyUS5jb3B5KHRoaXMuZmlsdGVyUSk7XG4gIGludkZpbHRlclEuaW52ZXJzZSgpO1xuXG4gIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS5zZXQoMCwgMCwgLTEpO1xuICB0aGlzLmVzdGltYXRlZEdyYXZpdHkuYXBwbHlRdWF0ZXJuaW9uKGludkZpbHRlclEpO1xuICB0aGlzLmVzdGltYXRlZEdyYXZpdHkubm9ybWFsaXplKCk7XG5cbiAgdGhpcy5tZWFzdXJlZEdyYXZpdHkuY29weSh0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50LnNhbXBsZSk7XG4gIHRoaXMubWVhc3VyZWRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIC8vIENvbXBhcmUgZXN0aW1hdGVkIGdyYXZpdHkgd2l0aCBtZWFzdXJlZCBncmF2aXR5LCBnZXQgdGhlIGRlbHRhIHF1YXRlcm5pb25cbiAgLy8gYmV0d2VlbiB0aGUgdHdvLlxuICB2YXIgZGVsdGFRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgZGVsdGFRLnNldEZyb21Vbml0VmVjdG9ycyh0aGlzLmVzdGltYXRlZEdyYXZpdHksIHRoaXMubWVhc3VyZWRHcmF2aXR5KTtcbiAgZGVsdGFRLmludmVyc2UoKTtcblxuICBpZiAoVXRpbC5pc0RlYnVnKCkpIHtcbiAgICBjb25zb2xlLmxvZygnRGVsdGE6ICVkIGRlZywgR19lc3Q6ICglcywgJXMsICVzKSwgR19tZWFzOiAoJXMsICVzLCAlcyknLFxuICAgICAgICAgICAgICAgIE1hdGhVdGlsLnJhZFRvRGVnICogVXRpbC5nZXRRdWF0ZXJuaW9uQW5nbGUoZGVsdGFRKSxcbiAgICAgICAgICAgICAgICAodGhpcy5lc3RpbWF0ZWRHcmF2aXR5LngpLnRvRml4ZWQoMSksXG4gICAgICAgICAgICAgICAgKHRoaXMuZXN0aW1hdGVkR3Jhdml0eS55KS50b0ZpeGVkKDEpLFxuICAgICAgICAgICAgICAgICh0aGlzLmVzdGltYXRlZEdyYXZpdHkueikudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueCkudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueSkudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueikudG9GaXhlZCgxKSk7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIFNMRVJQIHRhcmdldDogY3VycmVudCBvcmllbnRhdGlvbiBwbHVzIHRoZSBtZWFzdXJlZC1lc3RpbWF0ZWRcbiAgLy8gcXVhdGVybmlvbiBkZWx0YS5cbiAgdmFyIHRhcmdldFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0YXJnZXRRLmNvcHkodGhpcy5maWx0ZXJRKTtcbiAgdGFyZ2V0US5tdWx0aXBseShkZWx0YVEpO1xuXG4gIC8vIFNMRVJQIGZhY3RvcjogMCBpcyBwdXJlIGd5cm8sIDEgaXMgcHVyZSBhY2NlbC5cbiAgdGhpcy5maWx0ZXJRLnNsZXJwKHRhcmdldFEsIDEgLSB0aGlzLmtGaWx0ZXIpO1xuXG4gIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5maWx0ZXJRKTtcbn07XG5cbkNvbXBsZW1lbnRhcnlGaWx0ZXIucHJvdG90eXBlLmdldE9yaWVudGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbHRlclE7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hY2NlbFRvUXVhdGVybmlvbl8gPSBmdW5jdGlvbihhY2NlbCkge1xuICB2YXIgbm9ybUFjY2VsID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcbiAgbm9ybUFjY2VsLmNvcHkoYWNjZWwpO1xuICBub3JtQWNjZWwubm9ybWFsaXplKCk7XG4gIHZhciBxdWF0ID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgcXVhdC5zZXRGcm9tVW5pdFZlY3RvcnMobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgLTEpLCBub3JtQWNjZWwpO1xuICBxdWF0LmludmVyc2UoKTtcbiAgcmV0dXJuIHF1YXQ7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5neXJvVG9RdWF0ZXJuaW9uRGVsdGFfID0gZnVuY3Rpb24oZ3lybywgZHQpIHtcbiAgLy8gRXh0cmFjdCBheGlzIGFuZCBhbmdsZSBmcm9tIHRoZSBneXJvc2NvcGUgZGF0YS5cbiAgdmFyIHF1YXQgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB2YXIgYXhpcyA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIGF4aXMuY29weShneXJvKTtcbiAgYXhpcy5ub3JtYWxpemUoKTtcbiAgcXVhdC5zZXRGcm9tQXhpc0FuZ2xlKGF4aXMsIGd5cm8ubGVuZ3RoKCkgKiBkdCk7XG4gIHJldHVybiBxdWF0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBsZW1lbnRhcnlGaWx0ZXI7XG5cbn0se1wiLi4vbWF0aC11dGlsLmpzXCI6MTQsXCIuLi91dGlsLmpzXCI6MjIsXCIuL3NlbnNvci1zYW1wbGUuanNcIjoyMH1dLDE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQ29tcGxlbWVudGFyeUZpbHRlciA9IF9kZXJlcV8oJy4vY29tcGxlbWVudGFyeS1maWx0ZXIuanMnKTtcbnZhciBQb3NlUHJlZGljdG9yID0gX2RlcmVxXygnLi9wb3NlLXByZWRpY3Rvci5qcycpO1xudmFyIFRvdWNoUGFubmVyID0gX2RlcmVxXygnLi4vdG91Y2gtcGFubmVyLmpzJyk7XG52YXIgTWF0aFV0aWwgPSBfZGVyZXFfKCcuLi9tYXRoLXV0aWwuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi4vdXRpbC5qcycpO1xuXG4vKipcbiAqIFRoZSBwb3NlIHNlbnNvciwgaW1wbGVtZW50ZWQgdXNpbmcgRGV2aWNlTW90aW9uIEFQSXMuXG4gKi9cbmZ1bmN0aW9uIEZ1c2lvblBvc2VTZW5zb3IoKSB7XG4gIHRoaXMuZGV2aWNlSWQgPSAnd2VidnItcG9seWZpbGw6ZnVzZWQnO1xuICB0aGlzLmRldmljZU5hbWUgPSAnVlIgUG9zaXRpb24gRGV2aWNlICh3ZWJ2ci1wb2x5ZmlsbDpmdXNlZCknO1xuXG4gIHRoaXMuYWNjZWxlcm9tZXRlciA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIHRoaXMuZ3lyb3Njb3BlID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcblxuICB0aGlzLnN0YXJ0KCk7XG5cbiAgdGhpcy5maWx0ZXIgPSBuZXcgQ29tcGxlbWVudGFyeUZpbHRlcihXZWJWUkNvbmZpZy5LX0ZJTFRFUik7XG4gIHRoaXMucG9zZVByZWRpY3RvciA9IG5ldyBQb3NlUHJlZGljdG9yKFdlYlZSQ29uZmlnLlBSRURJQ1RJT05fVElNRV9TKTtcbiAgdGhpcy50b3VjaFBhbm5lciA9IG5ldyBUb3VjaFBhbm5lcigpO1xuXG4gIHRoaXMuZmlsdGVyVG9Xb3JsZFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuXG4gIC8vIFNldCB0aGUgZmlsdGVyIHRvIHdvcmxkIHRyYW5zZm9ybSwgZGVwZW5kaW5nIG9uIE9TLlxuICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBNYXRoVXRpbC5WZWN0b3IzKDEsIDAsIDApLCBNYXRoLlBJIC8gMik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBNYXRoVXRpbC5WZWN0b3IzKDEsIDAsIDApLCAtTWF0aC5QSSAvIDIpO1xuICB9XG5cbiAgdGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0aGlzLndvcmxkVG9TY3JlZW5RID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgdGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgdGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRLnNldEZyb21BeGlzQW5nbGUobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLXdpbmRvdy5vcmllbnRhdGlvbiAqIE1hdGguUEkgLyAxODApO1xuXG4gIHRoaXMuc2V0U2NyZWVuVHJhbnNmb3JtXygpO1xuICAvLyBBZGp1c3QgdGhpcyBmaWx0ZXIgZm9yIGJlaW5nIGluIGxhbmRzY2FwZSBtb2RlLlxuICBpZiAoVXRpbC5pc0xhbmRzY2FwZU1vZGUoKSkge1xuICAgIHRoaXMuZmlsdGVyVG9Xb3JsZFEubXVsdGlwbHkodGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEpO1xuICB9XG5cbiAgLy8gS2VlcCB0cmFjayBvZiBhIHJlc2V0IHRyYW5zZm9ybSBmb3IgcmVzZXRTZW5zb3IuXG4gIHRoaXMucmVzZXRRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcblxuICB0aGlzLmlzRmlyZWZveEFuZHJvaWQgPSBVdGlsLmlzRmlyZWZveEFuZHJvaWQoKTtcbiAgdGhpcy5pc0lPUyA9IFV0aWwuaXNJT1MoKTtcblxuICB0aGlzLm9yaWVudGF0aW9uT3V0XyA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG59XG5cbkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgUG9zZVNlbnNvciBkb2Vzbid0IHN1cHBvcnQgcG9zaXRpb25cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5nZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBDb252ZXJ0IGZyb20gZmlsdGVyIHNwYWNlIHRvIHRoZSB0aGUgc2FtZSBzeXN0ZW0gdXNlZCBieSB0aGVcbiAgLy8gZGV2aWNlb3JpZW50YXRpb24gZXZlbnQuXG4gIHZhciBvcmllbnRhdGlvbiA9IHRoaXMuZmlsdGVyLmdldE9yaWVudGF0aW9uKCk7XG5cbiAgLy8gUHJlZGljdCBvcmllbnRhdGlvbi5cbiAgdGhpcy5wcmVkaWN0ZWRRID0gdGhpcy5wb3NlUHJlZGljdG9yLmdldFByZWRpY3Rpb24ob3JpZW50YXRpb24sIHRoaXMuZ3lyb3Njb3BlLCB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyk7XG5cbiAgLy8gQ29udmVydCB0byBUSFJFRSBjb29yZGluYXRlIHN5c3RlbTogLVogZm9yd2FyZCwgWSB1cCwgWCByaWdodC5cbiAgdmFyIG91dCA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG4gIG91dC5jb3B5KHRoaXMuZmlsdGVyVG9Xb3JsZFEpO1xuICBvdXQubXVsdGlwbHkodGhpcy5yZXNldFEpO1xuICBpZiAoIVdlYlZSQ29uZmlnLlRPVUNIX1BBTk5FUl9ESVNBQkxFRCkge1xuICAgIG91dC5tdWx0aXBseSh0aGlzLnRvdWNoUGFubmVyLmdldE9yaWVudGF0aW9uKCkpO1xuICB9XG4gIG91dC5tdWx0aXBseSh0aGlzLnByZWRpY3RlZFEpO1xuICBvdXQubXVsdGlwbHkodGhpcy53b3JsZFRvU2NyZWVuUSk7XG5cbiAgLy8gSGFuZGxlIHRoZSB5YXctb25seSBjYXNlLlxuICBpZiAoV2ViVlJDb25maWcuWUFXX09OTFkpIHtcbiAgICAvLyBNYWtlIGEgcXVhdGVybmlvbiB0aGF0IG9ubHkgdHVybnMgYXJvdW5kIHRoZSBZLWF4aXMuXG4gICAgb3V0LnggPSAwO1xuICAgIG91dC56ID0gMDtcbiAgICBvdXQubm9ybWFsaXplKCk7XG4gIH1cblxuICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IG91dC54O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1sxXSA9IG91dC55O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1syXSA9IG91dC56O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IG91dC53O1xuICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbk91dF87XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5yZXNldFBvc2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gUmVkdWNlIHRvIGludmVydGVkIHlhdy1vbmx5LlxuICB0aGlzLnJlc2V0US5jb3B5KHRoaXMuZmlsdGVyLmdldE9yaWVudGF0aW9uKCkpO1xuICB0aGlzLnJlc2V0US54ID0gMDtcbiAgdGhpcy5yZXNldFEueSA9IDA7XG4gIHRoaXMucmVzZXRRLnogKj0gLTE7XG4gIHRoaXMucmVzZXRRLm5vcm1hbGl6ZSgpO1xuXG4gIC8vIFRha2UgaW50byBhY2NvdW50IGV4dHJhIHRyYW5zZm9ybWF0aW9ucyBpbiBsYW5kc2NhcGUgbW9kZS5cbiAgaWYgKFV0aWwuaXNMYW5kc2NhcGVNb2RlKCkpIHtcbiAgICB0aGlzLnJlc2V0US5tdWx0aXBseSh0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUSk7XG4gIH1cblxuICAvLyBUYWtlIGludG8gYWNjb3VudCBvcmlnaW5hbCBwb3NlLlxuICB0aGlzLnJlc2V0US5tdWx0aXBseSh0aGlzLm9yaWdpbmFsUG9zZUFkanVzdFEpO1xuXG4gIGlmICghV2ViVlJDb25maWcuVE9VQ0hfUEFOTkVSX0RJU0FCTEVEKSB7XG4gICAgdGhpcy50b3VjaFBhbm5lci5yZXNldFNlbnNvcigpO1xuICB9XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbkRldmljZU1vdGlvbl8gPSBmdW5jdGlvbihkZXZpY2VNb3Rpb24pIHtcbiAgdGhpcy51cGRhdGVEZXZpY2VNb3Rpb25fKGRldmljZU1vdGlvbik7XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS51cGRhdGVEZXZpY2VNb3Rpb25fID0gZnVuY3Rpb24oZGV2aWNlTW90aW9uKSB7XG4gIHZhciBhY2NHcmF2aXR5ID0gZGV2aWNlTW90aW9uLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7XG4gIHZhciByb3RSYXRlID0gZGV2aWNlTW90aW9uLnJvdGF0aW9uUmF0ZTtcbiAgdmFyIHRpbWVzdGFtcFMgPSBkZXZpY2VNb3Rpb24udGltZVN0YW1wIC8gMTAwMDtcblxuICAvLyBGaXJlZm94IEFuZHJvaWQgdGltZVN0YW1wIHJldHVybnMgb25lIHRob3VzYW5kdGggb2YgYSBtaWxsaXNlY29uZC5cbiAgaWYgKHRoaXMuaXNGaXJlZm94QW5kcm9pZCkge1xuICAgIHRpbWVzdGFtcFMgLz0gMTAwMDtcbiAgfVxuXG4gIHZhciBkZWx0YVMgPSB0aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c1RpbWVzdGFtcFM7XG4gIGlmIChkZWx0YVMgPD0gVXRpbC5NSU5fVElNRVNURVAgfHwgZGVsdGFTID4gVXRpbC5NQVhfVElNRVNURVApIHtcbiAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgdGltZXN0YW1wcyBkZXRlY3RlZC4gVGltZSBzdGVwIGJldHdlZW4gc3VjY2Vzc2l2ZSAnICtcbiAgICAgICAgICAgICAgICAgJ2d5cm9zY29wZSBzZW5zb3Igc2FtcGxlcyBpcyB2ZXJ5IHNtYWxsIG9yIG5vdCBtb25vdG9uaWMnKTtcbiAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuYWNjZWxlcm9tZXRlci5zZXQoLWFjY0dyYXZpdHkueCwgLWFjY0dyYXZpdHkueSwgLWFjY0dyYXZpdHkueik7XG4gIHRoaXMuZ3lyb3Njb3BlLnNldChyb3RSYXRlLmFscGhhLCByb3RSYXRlLmJldGEsIHJvdFJhdGUuZ2FtbWEpO1xuXG4gIC8vIFdpdGggaU9TIGFuZCBGaXJlZm94IEFuZHJvaWQsIHJvdGF0aW9uUmF0ZSBpcyByZXBvcnRlZCBpbiBkZWdyZWVzLFxuICAvLyBzbyB3ZSBmaXJzdCBjb252ZXJ0IHRvIHJhZGlhbnMuXG4gIGlmICh0aGlzLmlzSU9TIHx8IHRoaXMuaXNGaXJlZm94QW5kcm9pZCkge1xuICAgIHRoaXMuZ3lyb3Njb3BlLm11bHRpcGx5U2NhbGFyKE1hdGguUEkgLyAxODApO1xuICB9XG5cbiAgdGhpcy5maWx0ZXIuYWRkQWNjZWxNZWFzdXJlbWVudCh0aGlzLmFjY2VsZXJvbWV0ZXIsIHRpbWVzdGFtcFMpO1xuICB0aGlzLmZpbHRlci5hZGRHeXJvTWVhc3VyZW1lbnQodGhpcy5neXJvc2NvcGUsIHRpbWVzdGFtcFMpO1xuXG4gIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUztcbn07XG5cbkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLm9uT3JpZW50YXRpb25DaGFuZ2VfID0gZnVuY3Rpb24oc2NyZWVuT3JpZW50YXRpb24pIHtcbiAgdGhpcy5zZXRTY3JlZW5UcmFuc2Zvcm1fKCk7XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgb25seSBuZWVkZWQgaWYgd2UgYXJlIGluIGFuIGNyb3NzIG9yaWdpbiBpZnJhbWUgb24gaU9TIHRvIHdvcmsgYXJvdW5kXG4gKiB0aGlzIGlzc3VlOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTUyMjk5LlxuICovXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbk1lc3NhZ2VfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIG1lc3NhZ2UgPSBldmVudC5kYXRhO1xuXG4gIC8vIElmIHRoZXJlJ3Mgbm8gbWVzc2FnZSB0eXBlLCBpZ25vcmUgaXQuXG4gIGlmICghbWVzc2FnZSB8fCAhbWVzc2FnZS50eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWdub3JlIGFsbCBtZXNzYWdlcyB0aGF0IGFyZW4ndCBkZXZpY2Vtb3Rpb24uXG4gIHZhciB0eXBlID0gbWVzc2FnZS50eXBlLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0eXBlICE9PSAnZGV2aWNlbW90aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBkZXZpY2UgbW90aW9uLlxuICB0aGlzLnVwZGF0ZURldmljZU1vdGlvbl8obWVzc2FnZS5kZXZpY2VNb3Rpb25FdmVudCk7XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5zZXRTY3JlZW5UcmFuc2Zvcm1fID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud29ybGRUb1NjcmVlblEuc2V0KDAsIDAsIDAsIDEpO1xuICBzd2l0Y2ggKHdpbmRvdy5vcmllbnRhdGlvbikge1xuICAgIGNhc2UgMDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTA6XG4gICAgICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldEZyb21BeGlzQW5nbGUobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgMSksIC1NYXRoLlBJIC8gMik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC05MDpcbiAgICAgIHRoaXMud29ybGRUb1NjcmVlblEuc2V0RnJvbUF4aXNBbmdsZShuZXcgTWF0aFV0aWwuVmVjdG9yMygwLCAwLCAxKSwgTWF0aC5QSSAvIDIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODA6XG4gICAgICAvLyBUT0RPLlxuICAgICAgYnJlYWs7XG4gIH1cbiAgdGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEuY29weSh0aGlzLndvcmxkVG9TY3JlZW5RKTtcbiAgdGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEuaW52ZXJzZSgpO1xufTtcblxuRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbkRldmljZU1vdGlvbkNhbGxiYWNrXyA9IHRoaXMub25EZXZpY2VNb3Rpb25fLmJpbmQodGhpcyk7XG4gIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrXyA9IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKTtcbiAgdGhpcy5vbk1lc3NhZ2VDYWxsYmFja18gPSB0aGlzLm9uTWVzc2FnZV8uYmluZCh0aGlzKTtcblxuICAvLyBPbmx5IGxpc3RlbiBmb3IgcG9zdE1lc3NhZ2VzIGlmIHdlJ3JlIGluIGFuIGlPUyBhbmQgZW1iZWRkZWQgaW5zaWRlIGEgY3Jvc3NcbiAgLy8gZG9tYWluIElGcmFtZS4gSW4gdGhpcyBjYXNlLCB0aGUgcG9seWZpbGwgY2FuIHN0aWxsIHdvcmsgaWYgdGhlIGNvbnRhaW5pbmdcbiAgLy8gcGFnZSBzZW5kcyBzeW50aGV0aWMgZGV2aWNlbW90aW9uIGV2ZW50cy4gRm9yIGFuIGV4YW1wbGUgb2YgdGhpcywgc2VlXG4gIC8vIGlmcmFtZS1tZXNzYWdlLXNlbmRlci5qcyBpbiBWUiBWaWV3OiBodHRwczovL2dvby5nbC9YRHR2RlpcbiAgaWYgKFV0aWwuaXNJT1MoKSAmJiBVdGlsLmlzSW5zaWRlQ3Jvc3NEb21haW5JRnJhbWUoKSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbk1lc3NhZ2VDYWxsYmFja18pO1xuICB9XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrXyk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2Vtb3Rpb24nLCB0aGlzLm9uRGV2aWNlTW90aW9uQ2FsbGJhY2tfKTtcbn07XG5cbkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RldmljZW1vdGlvbicsIHRoaXMub25EZXZpY2VNb3Rpb25DYWxsYmFja18pO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFja18pO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub25NZXNzYWdlQ2FsbGJhY2tfKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVzaW9uUG9zZVNlbnNvcjtcblxufSx7XCIuLi9tYXRoLXV0aWwuanNcIjoxNCxcIi4uL3RvdWNoLXBhbm5lci5qc1wiOjIxLFwiLi4vdXRpbC5qc1wiOjIyLFwiLi9jb21wbGVtZW50YXJ5LWZpbHRlci5qc1wiOjE3LFwiLi9wb3NlLXByZWRpY3Rvci5qc1wiOjE5fV0sMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4uL21hdGgtdXRpbCcpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuLi91dGlsJyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gb3JpZW50YXRpb24gYW5kIHRoZSBneXJvc2NvcGUgZGF0YSwgcHJlZGljdHMgdGhlIGZ1dHVyZSBvcmllbnRhdGlvblxuICogb2YgdGhlIGhlYWQuIFRoaXMgbWFrZXMgcmVuZGVyaW5nIGFwcGVhciBmYXN0ZXIuXG4gKlxuICogQWxzbyBzZWU6IGh0dHA6Ly9tc2wuY3MudWl1Yy5lZHUvfmxhdmFsbGUvcGFwZXJzL0xhdlllckthdEFudDE0LnBkZlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmVkaWN0aW9uVGltZVMgdGltZSBmcm9tIGhlYWQgbW92ZW1lbnQgdG8gdGhlIGFwcGVhcmFuY2Ugb2ZcbiAqIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlLlxuICovXG5mdW5jdGlvbiBQb3NlUHJlZGljdG9yKHByZWRpY3Rpb25UaW1lUykge1xuICB0aGlzLnByZWRpY3Rpb25UaW1lUyA9IHByZWRpY3Rpb25UaW1lUztcblxuICAvLyBUaGUgcXVhdGVybmlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAgdGhpcy5wcmV2aW91c1EgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICAvLyBQcmV2aW91cyB0aW1lIGEgcHJlZGljdGlvbiBvY2N1cnJlZC5cbiAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSBudWxsO1xuXG4gIC8vIFRoZSBkZWx0YSBxdWF0ZXJuaW9uIHRoYXQgYWRqdXN0cyB0aGUgY3VycmVudCBwb3NlLlxuICB0aGlzLmRlbHRhUSA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG4gIC8vIFRoZSBvdXRwdXQgcXVhdGVybmlvbi5cbiAgdGhpcy5vdXRRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbn1cblxuUG9zZVByZWRpY3Rvci5wcm90b3R5cGUuZ2V0UHJlZGljdGlvbiA9IGZ1bmN0aW9uKGN1cnJlbnRRLCBneXJvLCB0aW1lc3RhbXBTKSB7XG4gIGlmICghdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMpIHtcbiAgICB0aGlzLnByZXZpb3VzUS5jb3B5KGN1cnJlbnRRKTtcbiAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7XG4gICAgcmV0dXJuIGN1cnJlbnRRO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGF4aXMgYW5kIGFuZ2xlIGJhc2VkIG9uIGd5cm9zY29wZSByb3RhdGlvbiByYXRlIGRhdGEuXG4gIHZhciBheGlzID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcbiAgYXhpcy5jb3B5KGd5cm8pO1xuICBheGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHZhciBhbmd1bGFyU3BlZWQgPSBneXJvLmxlbmd0aCgpO1xuXG4gIC8vIElmIHdlJ3JlIHJvdGF0aW5nIHNsb3dseSwgZG9uJ3QgZG8gcHJlZGljdGlvbi5cbiAgaWYgKGFuZ3VsYXJTcGVlZCA8IE1hdGhVdGlsLmRlZ1RvUmFkICogMjApIHtcbiAgICBpZiAoVXRpbC5pc0RlYnVnKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdNb3Zpbmcgc2xvd2x5LCBhdCAlcyBkZWcvczogbm8gcHJlZGljdGlvbicsXG4gICAgICAgICAgICAgICAgICAoTWF0aFV0aWwucmFkVG9EZWcgKiBhbmd1bGFyU3BlZWQpLnRvRml4ZWQoMSkpO1xuICAgIH1cbiAgICB0aGlzLm91dFEuY29weShjdXJyZW50USk7XG4gICAgdGhpcy5wcmV2aW91c1EuY29weShjdXJyZW50USk7XG4gICAgcmV0dXJuIHRoaXMub3V0UTtcbiAgfVxuXG4gIC8vIEdldCB0aGUgcHJlZGljdGVkIGFuZ2xlIGJhc2VkIG9uIHRoZSB0aW1lIGRlbHRhIGFuZCBsYXRlbmN5LlxuICB2YXIgZGVsdGFUID0gdGltZXN0YW1wUyAtIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTO1xuICB2YXIgcHJlZGljdEFuZ2xlID0gYW5ndWxhclNwZWVkICogdGhpcy5wcmVkaWN0aW9uVGltZVM7XG5cbiAgdGhpcy5kZWx0YVEuc2V0RnJvbUF4aXNBbmdsZShheGlzLCBwcmVkaWN0QW5nbGUpO1xuICB0aGlzLm91dFEuY29weSh0aGlzLnByZXZpb3VzUSk7XG4gIHRoaXMub3V0US5tdWx0aXBseSh0aGlzLmRlbHRhUSk7XG5cbiAgdGhpcy5wcmV2aW91c1EuY29weShjdXJyZW50USk7XG4gIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUztcblxuICByZXR1cm4gdGhpcy5vdXRRO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvc2VQcmVkaWN0b3I7XG5cbn0se1wiLi4vbWF0aC11dGlsXCI6MTQsXCIuLi91dGlsXCI6MjJ9XSwyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5mdW5jdGlvbiBTZW5zb3JTYW1wbGUoc2FtcGxlLCB0aW1lc3RhbXBTKSB7XG4gIHRoaXMuc2V0KHNhbXBsZSwgdGltZXN0YW1wUyk7XG59O1xuXG5TZW5zb3JTYW1wbGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHNhbXBsZSwgdGltZXN0YW1wUykge1xuICB0aGlzLnNhbXBsZSA9IHNhbXBsZTtcbiAgdGhpcy50aW1lc3RhbXBTID0gdGltZXN0YW1wUztcbn07XG5cblNlbnNvclNhbXBsZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKHNlbnNvclNhbXBsZSkge1xuICB0aGlzLnNldChzZW5zb3JTYW1wbGUuc2FtcGxlLCBzZW5zb3JTYW1wbGUudGltZXN0YW1wUyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbnNvclNhbXBsZTtcblxufSx7fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4vbWF0aC11dGlsLmpzJyk7XG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xuXG52YXIgUk9UQVRFX1NQRUVEID0gMC41O1xuLyoqXG4gKiBQcm92aWRlcyBhIHF1YXRlcm5pb24gcmVzcG9uc2libGUgZm9yIHByZS1wYW5uaW5nIHRoZSBzY2VuZSBiZWZvcmUgZnVydGhlclxuICogdHJhbnNmb3JtYXRpb25zIGR1ZSB0byBkZXZpY2Ugc2Vuc29ycy5cbiAqL1xuZnVuY3Rpb24gVG91Y2hQYW5uZXIoKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnRfLmJpbmQodGhpcykpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZV8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZF8uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5pc1RvdWNoaW5nID0gZmFsc2U7XG4gIHRoaXMucm90YXRlU3RhcnQgPSBuZXcgTWF0aFV0aWwuVmVjdG9yMigpO1xuICB0aGlzLnJvdGF0ZUVuZCA9IG5ldyBNYXRoVXRpbC5WZWN0b3IyKCk7XG4gIHRoaXMucm90YXRlRGVsdGEgPSBuZXcgTWF0aFV0aWwuVmVjdG9yMigpO1xuXG4gIHRoaXMudGhldGEgPSAwO1xuICB0aGlzLm9yaWVudGF0aW9uID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbn1cblxuVG91Y2hQYW5uZXIucHJvdG90eXBlLmdldE9yaWVudGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub3JpZW50YXRpb24uc2V0RnJvbUV1bGVyWFlaKDAsIDAsIHRoaXMudGhldGEpO1xuICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbjtcbn07XG5cblRvdWNoUGFubmVyLnByb3RvdHlwZS5yZXNldFNlbnNvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRoZXRhID0gMDtcbn07XG5cblRvdWNoUGFubmVyLnByb3RvdHlwZS5vblRvdWNoU3RhcnRfID0gZnVuY3Rpb24oZSkge1xuICAvLyBPbmx5IHJlc3BvbmQgaWYgdGhlcmUgaXMgZXhhY3RseSBvbmUgdG91Y2guXG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoICE9IDEpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yb3RhdGVTdGFydC5zZXQoZS50b3VjaGVzWzBdLnBhZ2VYLCBlLnRvdWNoZXNbMF0ucGFnZVkpO1xuICB0aGlzLmlzVG91Y2hpbmcgPSB0cnVlO1xufTtcblxuVG91Y2hQYW5uZXIucHJvdG90eXBlLm9uVG91Y2hNb3ZlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKCF0aGlzLmlzVG91Y2hpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yb3RhdGVFbmQuc2V0KGUudG91Y2hlc1swXS5wYWdlWCwgZS50b3VjaGVzWzBdLnBhZ2VZKTtcbiAgdGhpcy5yb3RhdGVEZWx0YS5zdWJWZWN0b3JzKHRoaXMucm90YXRlRW5kLCB0aGlzLnJvdGF0ZVN0YXJ0KTtcbiAgdGhpcy5yb3RhdGVTdGFydC5jb3B5KHRoaXMucm90YXRlRW5kKTtcblxuICAvLyBPbiBpT1MsIGRpcmVjdGlvbiBpcyBpbnZlcnRlZC5cbiAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgIHRoaXMucm90YXRlRGVsdGEueCAqPSAtMTtcbiAgfVxuXG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgdGhpcy50aGV0YSArPSAyICogTWF0aC5QSSAqIHRoaXMucm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBST1RBVEVfU1BFRUQ7XG59O1xuXG5Ub3VjaFBhbm5lci5wcm90b3R5cGUub25Ub3VjaEVuZF8gPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMuaXNUb3VjaGluZyA9IGZhbHNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaFBhbm5lcjtcblxufSx7XCIuL21hdGgtdXRpbC5qc1wiOjE0LFwiLi91dGlsLmpzXCI6MjJ9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgb2JqZWN0QXNzaWduID0gX2RlcmVxXygnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgVXRpbCA9IHdpbmRvdy5VdGlsIHx8IHt9O1xuXG5VdGlsLk1JTl9USU1FU1RFUCA9IDAuMDAxO1xuVXRpbC5NQVhfVElNRVNURVAgPSAxO1xuXG5VdGlsLmJhc2U2NCA9IGZ1bmN0aW9uKG1pbWVUeXBlLCBiYXNlNjQpIHtcbiAgcmV0dXJuICdkYXRhOicgKyBtaW1lVHlwZSArICc7YmFzZTY0LCcgKyBiYXNlNjQ7XG59O1xuXG5VdGlsLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn07XG5cblV0aWwubGVycCA9IGZ1bmN0aW9uKGEsIGIsIHQpIHtcbiAgcmV0dXJuIGEgKyAoKGIgLSBhKSAqIHQpO1xufTtcblxuVXRpbC5pc0lPUyA9IChmdW5jdGlvbigpIHtcbiAgdmFyIGlzSU9TID0gL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpc0lPUztcbiAgfTtcbn0pKCk7XG5cblV0aWwuaXNTYWZhcmkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBpc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNTYWZhcmk7XG4gIH07XG59KSgpO1xuXG5VdGlsLmlzRmlyZWZveEFuZHJvaWQgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBpc0ZpcmVmb3hBbmRyb2lkID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xICYmXG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSAhPT0gLTE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNGaXJlZm94QW5kcm9pZDtcbiAgfTtcbn0pKCk7XG5cblV0aWwuaXNMYW5kc2NhcGVNb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAod2luZG93Lm9yaWVudGF0aW9uID09IDkwIHx8IHdpbmRvdy5vcmllbnRhdGlvbiA9PSAtOTApO1xufTtcblxuLy8gSGVscGVyIG1ldGhvZCB0byB2YWxpZGF0ZSB0aGUgdGltZSBzdGVwcyBvZiBzZW5zb3IgdGltZXN0YW1wcy5cblV0aWwuaXNUaW1lc3RhbXBEZWx0YVZhbGlkID0gZnVuY3Rpb24odGltZXN0YW1wRGVsdGFTKSB7XG4gIGlmIChpc05hTih0aW1lc3RhbXBEZWx0YVMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0aW1lc3RhbXBEZWx0YVMgPD0gVXRpbC5NSU5fVElNRVNURVApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRpbWVzdGFtcERlbHRhUyA+IFV0aWwuTUFYX1RJTUVTVEVQKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuVXRpbC5nZXRTY3JlZW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5tYXgod2luZG93LnNjcmVlbi53aWR0aCwgd2luZG93LnNjcmVlbi5oZWlnaHQpICpcbiAgICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xufTtcblxuVXRpbC5nZXRTY3JlZW5IZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgubWluKHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbn07XG5cblV0aWwucmVxdWVzdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgIGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblV0aWwuZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuVXRpbC5nZXRGdWxsc2NyZWVuRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuICAgICAgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcbn07XG5cblV0aWwubGlua1Byb2dyYW0gPSBmdW5jdGlvbihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSwgYXR0cmliTG9jYXRpb25NYXApIHtcbiAgLy8gTm8gZXJyb3IgY2hlY2tpbmcgZm9yIGJyZXZpdHkuXG4gIHZhciB2ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG4gIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNvdXJjZSk7XG4gIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyKTtcblxuICB2YXIgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNvdXJjZSk7XG4gIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuXG4gIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcblxuICBmb3IgKHZhciBhdHRyaWJOYW1lIGluIGF0dHJpYkxvY2F0aW9uTWFwKVxuICAgIGdsLmJpbmRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBhdHRyaWJMb2NhdGlvbk1hcFthdHRyaWJOYW1lXSwgYXR0cmliTmFtZSk7XG5cbiAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cbiAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgcmV0dXJuIHByb2dyYW07XG59O1xuXG5VdGlsLmdldFByb2dyYW1Vbmlmb3JtcyA9IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gIHZhciB1bmlmb3JtcyA9IHt9O1xuICB2YXIgdW5pZm9ybUNvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICB2YXIgdW5pZm9ybU5hbWUgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmlmb3JtQ291bnQ7IGkrKykge1xuICAgIHZhciB1bmlmb3JtSW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XG4gICAgdW5pZm9ybU5hbWUgPSB1bmlmb3JtSW5mby5uYW1lLnJlcGxhY2UoJ1swXScsICcnKTtcbiAgICB1bmlmb3Jtc1t1bmlmb3JtTmFtZV0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdW5pZm9ybU5hbWUpO1xuICB9XG4gIHJldHVybiB1bmlmb3Jtcztcbn07XG5cblV0aWwub3J0aG9NYXRyaXggPSBmdW5jdGlvbiAob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCksXG4gICAgICBidCA9IDEgLyAoYm90dG9tIC0gdG9wKSxcbiAgICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn07XG5cblV0aWwuY29weUFycmF5ID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVzdCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHNvdXJjZS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBkZXN0W2ldID0gc291cmNlW2ldO1xuICB9XG59O1xuXG5VdGlsLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjaGVjayA9IGZhbHNlO1xuICAoZnVuY3Rpb24oYSl7aWYoLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QoYSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoYS5zdWJzdHIoMCw0KSkpY2hlY2sgPSB0cnVlfSkobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhKTtcbiAgcmV0dXJuIGNoZWNrO1xufTtcblxuVXRpbC5leHRlbmQgPSBvYmplY3RBc3NpZ247XG5cblV0aWwuc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgLy8gVE9ETyhzbXVzKTogUmVtb3ZlIHRoaXMgd29ya2Fyb3VuZCB3aGVuIFNhZmFyaSBmb3IgaU9TIGlzIGZpeGVkLlxuICAvLyBpT1Mgb25seSB3b3JrYXJvdW5kIChmb3IgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1MjU1NikuXG4gIC8vXG4gIC8vIFwiVG8gdGhlIGxhc3QgSSBncmFwcGxlIHdpdGggdGhlZTtcbiAgLy8gIGZyb20gaGVsbCdzIGhlYXJ0IEkgc3RhYiBhdCB0aGVlO1xuICAvLyAgZm9yIGhhdGUncyBzYWtlIEkgc3BpdCBteSBsYXN0IGJyZWF0aCBhdCB0aGVlLlwiXG4gIC8vIC0tIE1vYnkgRGljaywgYnkgSGVybWFuIE1lbHZpbGxlXG4gIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICB2YXIgd2lkdGggPSBjYW52YXMuc3R5bGUud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IGNhbnZhcy5zdHlsZS5oZWlnaHQ7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gKHBhcnNlSW50KHdpZHRoKSArIDEpICsgJ3B4JztcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gKHBhcnNlSW50KGhlaWdodCkpICsgJ3B4JztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH0sIDEwMCk7XG4gIH1cblxuICAvLyBEZWJ1ZyBvbmx5LlxuICB3aW5kb3cuVXRpbCA9IFV0aWw7XG4gIHdpbmRvdy5jYW52YXMgPSBjYW52YXM7XG59O1xuXG5VdGlsLmlzRGVidWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ2RlYnVnJyk7XG59O1xuXG5VdGlsLmdldFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCBcIlxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLywgXCJcXFxcXVwiKTtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIiksXG4gICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpO1xuICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IFwiXCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbn07XG5cblV0aWwuZnJhbWVEYXRhRnJvbVBvc2UgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBwaU92ZXIxODAgPSBNYXRoLlBJIC8gMTgwLjA7XG4gIHZhciByYWQ0NSA9IE1hdGguUEkgKiAwLjI1O1xuXG4gIC8vIEJvcnJvd2VkIGZyb20gZ2xNYXRyaXguXG4gIGZ1bmN0aW9uIG1hdDRfcGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXcob3V0LCBmb3YsIG5lYXIsIGZhcikge1xuICAgIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdiA/IChmb3YudXBEZWdyZWVzICogcGlPdmVyMTgwKSA6IHJhZDQ1KSxcbiAgICBkb3duVGFuID0gTWF0aC50YW4oZm92ID8gKGZvdi5kb3duRGVncmVlcyAqIHBpT3ZlcjE4MCkgOiByYWQ0NSksXG4gICAgbGVmdFRhbiA9IE1hdGgudGFuKGZvdiA/IChmb3YubGVmdERlZ3JlZXMgKiBwaU92ZXIxODApIDogcmFkNDUpLFxuICAgIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92ID8gKGZvdi5yaWdodERlZ3JlZXMgKiBwaU92ZXIxODApIDogcmFkNDUpLFxuICAgIHhTY2FsZSA9IDIuMCAvIChsZWZ0VGFuICsgcmlnaHRUYW4pLFxuICAgIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuXG4gICAgb3V0WzBdID0geFNjYWxlO1xuICAgIG91dFsxXSA9IDAuMDtcbiAgICBvdXRbMl0gPSAwLjA7XG4gICAgb3V0WzNdID0gMC4wO1xuICAgIG91dFs0XSA9IDAuMDtcbiAgICBvdXRbNV0gPSB5U2NhbGU7XG4gICAgb3V0WzZdID0gMC4wO1xuICAgIG91dFs3XSA9IDAuMDtcbiAgICBvdXRbOF0gPSAtKChsZWZ0VGFuIC0gcmlnaHRUYW4pICogeFNjYWxlICogMC41KTtcbiAgICBvdXRbOV0gPSAoKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjUpO1xuICAgIG91dFsxMF0gPSBmYXIgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzExXSA9IC0xLjA7XG4gICAgb3V0WzEyXSA9IDAuMDtcbiAgICBvdXRbMTNdID0gMC4wO1xuICAgIG91dFsxNF0gPSAoZmFyICogbmVhcikgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzE1XSA9IDAuMDtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0NF9mcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcbiAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgICB2YXIgeCA9IHFbMF0sIHkgPSBxWzFdLCB6ID0gcVsyXSwgdyA9IHFbM10sXG4gICAgICAgIHgyID0geCArIHgsXG4gICAgICAgIHkyID0geSArIHksXG4gICAgICAgIHoyID0geiArIHosXG5cbiAgICAgICAgeHggPSB4ICogeDIsXG4gICAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgICB4eiA9IHggKiB6MixcbiAgICAgICAgeXkgPSB5ICogeTIsXG4gICAgICAgIHl6ID0geSAqIHoyLFxuICAgICAgICB6eiA9IHogKiB6MixcbiAgICAgICAgd3ggPSB3ICogeDIsXG4gICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgb3V0WzFdID0geHkgKyB3ejtcbiAgICBvdXRbMl0gPSB4eiAtIHd5O1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0geHkgLSB3ejtcbiAgICBvdXRbNV0gPSAxIC0gKHh4ICsgenopO1xuICAgIG91dFs2XSA9IHl6ICsgd3g7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSB4eiArIHd5O1xuICAgIG91dFs5XSA9IHl6IC0gd3g7XG4gICAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IHZbMF07XG4gICAgb3V0WzEzXSA9IHZbMV07XG4gICAgb3V0WzE0XSA9IHZbMl07XG4gICAgb3V0WzE1XSA9IDE7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1hdDRfdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIHZhciB4ID0gdlswXSwgeSA9IHZbMV0sIHogPSB2WzJdLFxuICAgICAgICBhMDAsIGEwMSwgYTAyLCBhMDMsXG4gICAgICAgIGExMCwgYTExLCBhMTIsIGExMyxcbiAgICAgICAgYTIwLCBhMjEsIGEyMiwgYTIzO1xuXG4gICAgaWYgKGEgPT09IG91dCkge1xuICAgICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgICAgb3V0WzE0XSA9IGFbMl0gKiB4ICsgYVs2XSAqIHkgKyBhWzEwXSAqIHogKyBhWzE0XTtcbiAgICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEwMCA9IGFbMF07IGEwMSA9IGFbMV07IGEwMiA9IGFbMl07IGEwMyA9IGFbM107XG4gICAgICBhMTAgPSBhWzRdOyBhMTEgPSBhWzVdOyBhMTIgPSBhWzZdOyBhMTMgPSBhWzddO1xuICAgICAgYTIwID0gYVs4XTsgYTIxID0gYVs5XTsgYTIyID0gYVsxMF07IGEyMyA9IGFbMTFdO1xuXG4gICAgICBvdXRbMF0gPSBhMDA7IG91dFsxXSA9IGEwMTsgb3V0WzJdID0gYTAyOyBvdXRbM10gPSBhMDM7XG4gICAgICBvdXRbNF0gPSBhMTA7IG91dFs1XSA9IGExMTsgb3V0WzZdID0gYTEyOyBvdXRbN10gPSBhMTM7XG4gICAgICBvdXRbOF0gPSBhMjA7IG91dFs5XSA9IGEyMTsgb3V0WzEwXSA9IGEyMjsgb3V0WzExXSA9IGEyMztcblxuICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdO1xuICAgICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWF0NF9pbnZlcnQob3V0LCBhKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM10sXG4gICAgICAgIGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN10sXG4gICAgICAgIGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXSxcbiAgICAgICAgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV0sXG5cbiAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxuICAgICAgICBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsXG4gICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCxcbiAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxuICAgICAgICBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsXG4gICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMixcbiAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxuICAgICAgICBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsXG4gICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCxcbiAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxuICAgICAgICBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsXG4gICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMixcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgICAgIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIHZhciBkZWZhdWx0T3JpZW50YXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAwLCAxXSk7XG4gIHZhciBkZWZhdWx0UG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAwXSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlRXllTWF0cmljZXMocHJvamVjdGlvbiwgdmlldywgcG9zZSwgcGFyYW1ldGVycywgdnJEaXNwbGF5KSB7XG4gICAgbWF0NF9wZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhwcm9qZWN0aW9uLCBwYXJhbWV0ZXJzID8gcGFyYW1ldGVycy5maWVsZE9mVmlldyA6IG51bGwsIHZyRGlzcGxheS5kZXB0aE5lYXIsIHZyRGlzcGxheS5kZXB0aEZhcik7XG5cbiAgICB2YXIgb3JpZW50YXRpb24gPSBwb3NlLm9yaWVudGF0aW9uIHx8IGRlZmF1bHRPcmllbnRhdGlvbjtcbiAgICB2YXIgcG9zaXRpb24gPSBwb3NlLnBvc2l0aW9uIHx8IGRlZmF1bHRQb3NpdGlvbjtcblxuICAgIG1hdDRfZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24odmlldywgb3JpZW50YXRpb24sIHBvc2l0aW9uKTtcbiAgICBpZiAocGFyYW1ldGVycylcbiAgICAgIG1hdDRfdHJhbnNsYXRlKHZpZXcsIHZpZXcsIHBhcmFtZXRlcnMub2Zmc2V0KTtcbiAgICBtYXQ0X2ludmVydCh2aWV3LCB2aWV3KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihmcmFtZURhdGEsIHBvc2UsIHZyRGlzcGxheSkge1xuICAgIGlmICghZnJhbWVEYXRhIHx8ICFwb3NlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZnJhbWVEYXRhLnBvc2UgPSBwb3NlO1xuICAgIGZyYW1lRGF0YS50aW1lc3RhbXAgPSBwb3NlLnRpbWVzdGFtcDtcblxuICAgIHVwZGF0ZUV5ZU1hdHJpY2VzKFxuICAgICAgICBmcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXgsIGZyYW1lRGF0YS5sZWZ0Vmlld01hdHJpeCxcbiAgICAgICAgcG9zZSwgdnJEaXNwbGF5LmdldEV5ZVBhcmFtZXRlcnMoXCJsZWZ0XCIpLCB2ckRpc3BsYXkpO1xuICAgIHVwZGF0ZUV5ZU1hdHJpY2VzKFxuICAgICAgICBmcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4LCBmcmFtZURhdGEucmlnaHRWaWV3TWF0cml4LFxuICAgICAgICBwb3NlLCB2ckRpc3BsYXkuZ2V0RXllUGFyYW1ldGVycyhcInJpZ2h0XCIpLCB2ckRpc3BsYXkpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59KSgpO1xuXG5VdGlsLmlzSW5zaWRlQ3Jvc3NEb21haW5JRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzRnJhbWVkID0gKHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wKTtcbiAgdmFyIHJlZkRvbWFpbiA9IFV0aWwuZ2V0RG9tYWluRnJvbVVybChkb2N1bWVudC5yZWZlcnJlcik7XG4gIHZhciB0aGlzRG9tYWluID0gVXRpbC5nZXREb21haW5Gcm9tVXJsKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICByZXR1cm4gaXNGcmFtZWQgJiYgKHJlZkRvbWFpbiAhPT0gdGhpc0RvbWFpbik7XG59O1xuXG4vLyBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIzOTQ1MDI3LlxuVXRpbC5nZXREb21haW5Gcm9tVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gIHZhciBkb21haW47XG4gIC8vIEZpbmQgJiByZW1vdmUgcHJvdG9jb2wgKGh0dHAsIGZ0cCwgZXRjLikgYW5kIGdldCBkb21haW4uXG4gIGlmICh1cmwuaW5kZXhPZihcIjovL1wiKSA+IC0xKSB7XG4gICAgZG9tYWluID0gdXJsLnNwbGl0KCcvJylbMl07XG4gIH1cbiAgZWxzZSB7XG4gICAgZG9tYWluID0gdXJsLnNwbGl0KCcvJylbMF07XG4gIH1cblxuICAvL2ZpbmQgJiByZW1vdmUgcG9ydCBudW1iZXJcbiAgZG9tYWluID0gZG9tYWluLnNwbGl0KCc6JylbMF07XG5cbiAgcmV0dXJuIGRvbWFpbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsO1xuXG59LHtcIm9iamVjdC1hc3NpZ25cIjoyfV0sMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIERldmljZUluZm8gPSBfZGVyZXFfKCcuL2RldmljZS1pbmZvLmpzJyk7XG52YXIgRXZlbnRFbWl0dGVyMyA9IF9kZXJlcV8oJ2V2ZW50ZW1pdHRlcjMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG5cbnZhciBERUZBVUxUX1ZJRVdFUiA9ICdDYXJkYm9hcmRWMSc7XG52YXIgVklFV0VSX0tFWSA9ICdXRUJWUl9DQVJEQk9BUkRfVklFV0VSJztcbnZhciBDTEFTU19OQU1FID0gJ3dlYnZyLXBvbHlmaWxsLXZpZXdlci1zZWxlY3Rvcic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZpZXdlciBzZWxlY3RvciB3aXRoIHRoZSBvcHRpb25zIHNwZWNpZmllZC4gU3VwcG9ydHMgYmVpbmcgc2hvd25cbiAqIGFuZCBoaWRkZW4uIEdlbmVyYXRlcyBldmVudHMgd2hlbiB2aWV3ZXIgcGFyYW1ldGVycyBjaGFuZ2UuIEFsc28gc3VwcG9ydHNcbiAqIHNhdmluZyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGluZGV4IGluIGxvY2FsU3RvcmFnZS5cbiAqL1xuZnVuY3Rpb24gVmlld2VyU2VsZWN0b3IoKSB7XG4gIC8vIFRyeSB0byBsb2FkIHRoZSBzZWxlY3RlZCBrZXkgZnJvbSBsb2NhbCBzdG9yYWdlLiBJZiBub25lIGV4aXN0cywgdXNlIHRoZVxuICAvLyBkZWZhdWx0IGtleS5cbiAgdHJ5IHtcbiAgICB0aGlzLnNlbGVjdGVkS2V5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oVklFV0VSX0tFWSkgfHwgREVGQVVMVF9WSUVXRVI7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgdmlld2VyIHByb2ZpbGU6ICVzJywgZXJyb3IpO1xuICB9XG4gIHRoaXMuZGlhbG9nID0gdGhpcy5jcmVhdGVEaWFsb2dfKERldmljZUluZm8uVmlld2Vycyk7XG4gIHRoaXMucm9vdCA9IG51bGw7XG59XG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyMygpO1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKHJvb3QpIHtcbiAgdGhpcy5yb290ID0gcm9vdDtcblxuICByb290LmFwcGVuZENoaWxkKHRoaXMuZGlhbG9nKTtcblxuICAvLyBFbnN1cmUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtIGlzIGNoZWNrZWQuXG4gIHZhciBzZWxlY3RlZCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5zZWxlY3RlZEtleSk7XG4gIHNlbGVjdGVkLmNoZWNrZWQgPSB0cnVlO1xuXG4gIC8vIFNob3cgdGhlIFVJLlxuICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LmNvbnRhaW5zKHRoaXMuZGlhbG9nKSkge1xuICAgIHRoaXMucm9vdC5yZW1vdmVDaGlsZCh0aGlzLmRpYWxvZyk7XG4gIH1cbiAgdGhpcy5kaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5nZXRDdXJyZW50Vmlld2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBEZXZpY2VJbmZvLlZpZXdlcnNbdGhpcy5zZWxlY3RlZEtleV07XG59O1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRLZXlfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnB1dCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZmllbGRdOmNoZWNrZWQnKTtcbiAgaWYgKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LmlkO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLm9uU2F2ZV8gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZWxlY3RlZEtleSA9IHRoaXMuZ2V0U2VsZWN0ZWRLZXlfKCk7XG4gIGlmICghdGhpcy5zZWxlY3RlZEtleSB8fCAhRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldKSB7XG4gICAgY29uc29sZS5lcnJvcignVmlld2VyU2VsZWN0b3Iub25TYXZlXzogdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZW1pdCgnY2hhbmdlJywgRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldKTtcblxuICAvLyBBdHRlbXB0IHRvIHNhdmUgdGhlIHZpZXdlciBwcm9maWxlLCBidXQgZmFpbHMgaW4gcHJpdmF0ZSBtb2RlLlxuICB0cnkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFZJRVdFUl9LRVksIHRoaXMuc2VsZWN0ZWRLZXkpO1xuICB9IGNhdGNoKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNhdmUgdmlld2VyIHByb2ZpbGU6ICVzJywgZXJyb3IpO1xuICB9XG4gIHRoaXMuaGlkZSgpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBkaWFsb2cuXG4gKi9cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5jcmVhdGVEaWFsb2dfID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUUpO1xuICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgLy8gQ3JlYXRlIGFuIG92ZXJsYXkgdGhhdCBkaW1zIHRoZSBiYWNrZ3JvdW5kLCBhbmQgd2hpY2ggZ29lcyBhd2F5IHdoZW4geW91XG4gIC8vIHRhcCBpdC5cbiAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIHMgPSBvdmVybGF5LnN0eWxlO1xuICBzLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgcy5sZWZ0ID0gMDtcbiAgcy50b3AgPSAwO1xuICBzLndpZHRoID0gJzEwMCUnO1xuICBzLmhlaWdodCA9ICcxMDAlJztcbiAgcy5iYWNrZ3JvdW5kID0gJ3JnYmEoMCwgMCwgMCwgMC4zKSc7XG4gIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGUuYmluZCh0aGlzKSk7XG5cbiAgdmFyIHdpZHRoID0gMjgwO1xuICB2YXIgZGlhbG9nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzID0gZGlhbG9nLnN0eWxlO1xuICBzLmJveFNpemluZyA9ICdib3JkZXItYm94JztcbiAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIHMudG9wID0gJzI0cHgnO1xuICBzLmxlZnQgPSAnNTAlJztcbiAgcy5tYXJnaW5MZWZ0ID0gKC13aWR0aC8yKSArICdweCc7XG4gIHMud2lkdGggPSB3aWR0aCArICdweCc7XG4gIHMucGFkZGluZyA9ICcyNHB4JztcbiAgcy5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICBzLmJhY2tncm91bmQgPSAnI2ZhZmFmYSc7XG4gIHMuZm9udEZhbWlseSA9IFwiJ1JvYm90bycsIHNhbnMtc2VyaWZcIjtcbiAgcy5ib3hTaGFkb3cgPSAnMHB4IDVweCAyMHB4ICM2NjYnO1xuXG4gIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUgxXygnU2VsZWN0IHlvdXIgdmlld2VyJykpO1xuICBmb3IgKHZhciBpZCBpbiBvcHRpb25zKSB7XG4gICAgZGlhbG9nLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlQ2hvaWNlXyhpZCwgb3B0aW9uc1tpZF0ubGFiZWwpKTtcbiAgfVxuICBkaWFsb2cuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVCdXR0b25fKCdTYXZlJywgdGhpcy5vblNhdmVfLmJpbmQodGhpcykpKTtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaWFsb2cpO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59O1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlSDFfID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICB2YXIgcyA9IGgxLnN0eWxlO1xuICBzLmNvbG9yID0gJ2JsYWNrJztcbiAgcy5mb250U2l6ZSA9ICcyMHB4JztcbiAgcy5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuICBzLm1hcmdpblRvcCA9IDA7XG4gIHMubWFyZ2luQm90dG9tID0gJzI0cHgnO1xuICBoMS5pbm5lckhUTUwgPSBuYW1lO1xuICByZXR1cm4gaDE7XG59O1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlQ2hvaWNlXyA9IGZ1bmN0aW9uKGlkLCBuYW1lKSB7XG4gIC8qXG4gIDxkaXYgY2xhc3M9XCJjaG9pY2VcIj5cbiAgPGlucHV0IGlkPVwidjFcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZmllbGRcIiB2YWx1ZT1cInYxXCI+XG4gIDxsYWJlbCBmb3I9XCJ2MVwiPkNhcmRib2FyZCBWMTwvbGFiZWw+XG4gIDwvZGl2PlxuICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS5tYXJnaW5Ub3AgPSAnOHB4JztcbiAgZGl2LnN0eWxlLmNvbG9yID0gJ2JsYWNrJztcblxuICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dC5zdHlsZS5mb250U2l6ZSA9ICczMHB4JztcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3JhZGlvJyk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBpZCk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdmaWVsZCcpO1xuXG4gIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gIGxhYmVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnNHB4JztcbiAgbGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBpZCk7XG4gIGxhYmVsLmlubmVySFRNTCA9IG5hbWU7XG5cbiAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcbiAgZGl2LmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICByZXR1cm4gZGl2O1xufTtcblxuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmNyZWF0ZUJ1dHRvbl8gPSBmdW5jdGlvbihsYWJlbCwgb25jbGljaykge1xuICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGJ1dHRvbi5pbm5lckhUTUwgPSBsYWJlbDtcbiAgdmFyIHMgPSBidXR0b24uc3R5bGU7XG4gIHMuZmxvYXQgPSAncmlnaHQnO1xuICBzLnRleHRUcmFuc2Zvcm0gPSAndXBwZXJjYXNlJztcbiAgcy5jb2xvciA9ICcjMTA5NGY3JztcbiAgcy5mb250U2l6ZSA9ICcxNHB4JztcbiAgcy5sZXR0ZXJTcGFjaW5nID0gMDtcbiAgcy5ib3JkZXIgPSAwO1xuICBzLmJhY2tncm91bmQgPSAnbm9uZSc7XG4gIHMubWFyZ2luVG9wID0gJzE2cHgnO1xuXG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uY2xpY2spO1xuXG4gIHJldHVybiBidXR0b247XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdlclNlbGVjdG9yO1xuXG59LHtcIi4vZGV2aWNlLWluZm8uanNcIjo4LFwiLi91dGlsLmpzXCI6MjIsXCJldmVudGVtaXR0ZXIzXCI6MX1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG5cbi8qKlxuICogQW5kcm9pZCBhbmQgaU9TIGNvbXBhdGlibGUgd2FrZWxvY2sgaW1wbGVtZW50YXRpb24uXG4gKlxuICogUmVmYWN0b3JlZCB0aGFua3MgdG8gZGtvdmFsZXZALlxuICovXG5mdW5jdGlvbiBBbmRyb2lkV2FrZUxvY2soKSB7XG4gIHZhciB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBmdW5jdGlvbigpIHtcbiAgICB2aWRlby5wbGF5KCk7XG4gIH0pO1xuXG4gIHRoaXMucmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh2aWRlby5wYXVzZWQpIHtcbiAgICAgIC8vIEJhc2U2NCB2ZXJzaW9uIG9mIHZpZGVvc19zcmMvbm8tc2xlZXAtMTIwcy5tcDQuXG4gICAgICB2aWRlby5zcmMgPSBVdGlsLmJhc2U2NCgndmlkZW8vbXA0JywgJ0FBQUFHR1owZVhCcGMyOXRBQUFBQUcxd05ERmhkbU14QUFBSUEyMXZiM1lBQUFCc2JYWm9aQUFBQUFEU2E5djYwbXZiK2dBQlg1QUFsdy9nQUFFQUFBRUFBQUFBQUFBQUFBQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUlBQUFka2RISmhhd0FBQUZ4MGEyaGtBQUFBQWRKcjIvclNhOXY2QUFBQUFRQUFBQUFBbHcvZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBUUFBQUFIQUFBQUFBQUpHVmtkSE1BQUFBY1pXeHpkQUFBQUFBQUFBQUJBSmNQNEFBQUFBQUFBUUFBQUFBRzNHMWthV0VBQUFBZ2JXUm9aQUFBQUFEU2E5djYwbXZiK2dBUFFrQUdqbmVBRmNjQUFBQUFBQzFvWkd4eUFBQUFBQUFBQUFCMmFXUmxBQUFBQUFBQUFBQUFBQUFBVm1sa1pXOUlZVzVrYkdWeUFBQUFCb2R0YVc1bUFBQUFGSFp0YUdRQUFBQUJBQUFBQUFBQUFBQUFBQUFrWkdsdVpnQUFBQnhrY21WbUFBQUFBQUFBQUFFQUFBQU1kWEpzSUFBQUFBRUFBQVpIYzNSaWJBQUFBSmR6ZEhOa0FBQUFBQUFBQUFFQUFBQ0hZWFpqTVFBQUFBQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNQUJ3QVNBQUFBRWdBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCai8vd0FBQURGaGRtTkRBV1FBQy8vaEFCbG5aQUFMck5sZmxsdzRRQUFBQXdCQUFBQURBS1BGQ21XQUFRQUZhT3Zzc2l3QUFBQVljM1IwY3dBQUFBQUFBQUFCQUFBQWJnQVBRa0FBQUFBVWMzUnpjd0FBQUFBQUFBQUJBQUFBQVFBQUE0QmpkSFJ6QUFBQUFBQUFBRzRBQUFBQkFEMEpBQUFBQUFFQWVoSUFBQUFBQVFBOUNRQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBVEV0QUFBQUFBUUFlaElBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQVRFdEFBQUFBQVFBZWhJQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBVEV0QUFBQUFBUUFlaElBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQVRFdEFBQUFBQVFBZWhJQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBVEV0QUFBQUFBUUFlaElBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQUxjYkFBQUFBSEhOMGMyTUFBQUFBQUFBQUFRQUFBQUVBQUFCdUFBQUFBUUFBQWN4emRITjZBQUFBQUFBQUFBQUFBQUJ1QUFBRENRQUFBQmdBQUFBT0FBQUFEZ0FBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCSUFBQUFPQUFBQURBQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQklBQUFBT0FBQUFEQUFBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCSUFBQUFPQUFBQURBQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQklBQUFBT0FBQUFEQUFBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCSUFBQUFPQUFBQURBQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQk1BQUFBVWMzUmpid0FBQUFBQUFBQUJBQUFJS3dBQUFDdDFaSFJoQUFBQUk2bGxibU1BRndBQWRteGpJREl1TWk0eElITjBjbVZoYlNCdmRYUndkWFFBQUFBSWQybGtaUUFBQ1JSdFpHRjBBQUFDcmdYLy82dmNSZW05NXRsSXQ1WXMyQ0RaSSs3dmVESTJOQ0F0SUdOdmNtVWdNVFF5SUMwZ1NDNHlOalF2VFZCRlJ5MDBJRUZXUXlCamIyUmxZeUF0SUVOdmNIbHNaV1owSURJd01ETXRNakF4TkNBdElHaDBkSEE2THk5M2QzY3VkbWxrWlc5c1lXNHViM0puTDNneU5qUXVhSFJ0YkNBdElHOXdkR2x2Ym5NNklHTmhZbUZqUFRFZ2NtVm1QVE1nWkdWaWJHOWphejB4T2pBNk1DQmhibUZzZVhObFBUQjRNem93ZURFeklHMWxQV2hsZUNCemRXSnRaVDAzSUhCemVUMHhJSEJ6ZVY5eVpEMHhMakF3T2pBdU1EQWdiV2w0WldSZmNtVm1QVEVnYldWZmNtRnVaMlU5TVRZZ1kyaHliMjFoWDIxbFBURWdkSEpsYkd4cGN6MHhJRGg0T0dSamREMHhJR054YlQwd0lHUmxZV1I2YjI1bFBUSXhMREV4SUdaaGMzUmZjSE5yYVhBOU1TQmphSEp2YldGZmNYQmZiMlptYzJWMFBTMHlJSFJvY21WaFpITTlNVElnYkc5dmEyRm9aV0ZrWDNSb2NtVmhaSE05TVNCemJHbGpaV1JmZEdoeVpXRmtjejB3SUc1eVBUQWdaR1ZqYVcxaGRHVTlNU0JwYm5SbGNteGhZMlZrUFRBZ1lteDFjbUY1WDJOdmJYQmhkRDB3SUdOdmJuTjBjbUZwYm1Wa1gybHVkSEpoUFRBZ1ltWnlZVzFsY3oweklHSmZjSGx5WVcxcFpEMHlJR0pmWVdSaGNIUTlNU0JpWDJKcFlYTTlNQ0JrYVhKbFkzUTlNU0IzWldsbmFIUmlQVEVnYjNCbGJsOW5iM0E5TUNCM1pXbG5hSFJ3UFRJZ2EyVjVhVzUwUFRJMU1DQnJaWGxwYm5SZmJXbHVQVEVnYzJObGJtVmpkWFE5TkRBZ2FXNTBjbUZmY21WbWNtVnphRDB3SUhKalgyeHZiMnRoYUdWaFpEMDBNQ0J5WXoxaFluSWdiV0owY21WbFBURWdZbWwwY21GMFpUMHhNREFnY21GMFpYUnZiRDB4TGpBZ2NXTnZiWEE5TUM0Mk1DQnhjRzFwYmoweE1DQnhjRzFoZUQwMU1TQnhjSE4wWlhBOU5DQnBjRjl5WVhScGJ6MHhMalF3SUdGeFBURTZNUzR3TUFDQUFBQUFVMldJaEFBUS84bHRsT2UrY1RadUdrS2crYVJ0dWl2Y0RaMHBCc2ZzRWk5cC9pMXlVOUR4UzJscTRkWFRpblZpRjFVUkJLWGduektCZC9VaDFia2hIdE1yd3JSY09Kc2xEMDFVQitmeWFMNmVmK0RCQUFBQUZFR2FKR3hCRDVCK3YrYSs0UXFGM01nQlh6OU1BQUFBQ2tHZVFuaUgvKzk0cjZFQUFBQUtBWjVoZEVOLzhReXR3QUFBQUFnQm5tTnFRMy9FZ1FBQUFBNUJtbWhKcUVGb21Vd0lJZi8rNFFBQUFBcEJub1pGRVN3Ly83NkJBQUFBQ0FHZXBYUkRmOFNCQUFBQUNBR2VwMnBEZjhTQUFBQUFEa0dhckVtb1FXeVpUQWdoLy83Z0FBQUFDa0dleWtVVkxELy92b0VBQUFBSUFaN3BkRU4veElBQUFBQUlBWjdyYWtOL3hJQUFBQUFPUVpyd1NhaEJiSmxNQ0NILy91RUFBQUFLUVo4T1JSVXNQLysrZ1FBQUFBZ0JueTEwUTMvRWdRQUFBQWdCbnk5cVEzL0VnQUFBQUE1Qm16UkpxRUZzbVV3SUlmLys0QUFBQUFwQm4xSkZGU3cvLzc2QkFBQUFDQUdmY1hSRGY4U0FBQUFBQ0FHZmMycERmOFNBQUFBQURrR2JlRW1vUVd5WlRBZ2gvLzdoQUFBQUNrR2Zsa1VWTEQvL3ZvQUFBQUFJQVorMWRFTi94SUVBQUFBSUFaKzNha04veElFQUFBQU9RWnU4U2FoQmJKbE1DQ0gvL3VBQUFBQUtRWi9hUlJVc1AvKytnUUFBQUFnQm4vbDBRMy9FZ0FBQUFBZ0JuL3RxUTMvRWdRQUFBQTVCbStCSnFFRnNtVXdJSWYvKzRRQUFBQXBCbmg1RkZTdy8vNzZBQUFBQUNBR2VQWFJEZjhTQUFBQUFDQUdlUDJwRGY4U0JBQUFBRGtHYUpFbW9RV3laVEFnaC8vN2dBQUFBQ2tHZVFrVVZMRC8vdm9FQUFBQUlBWjVoZEVOL3hJQUFBQUFJQVo1amFrTi94SUVBQUFBT1FacG9TYWhCYkpsTUNDSC8vdUVBQUFBS1FaNkdSUlVzUC8rK2dRQUFBQWdCbnFWMFEzL0VnUUFBQUFnQm5xZHFRMy9FZ0FBQUFBNUJtcXhKcUVGc21Vd0lJZi8rNEFBQUFBcEJuc3BGRlN3Ly83NkJBQUFBQ0FHZTZYUkRmOFNBQUFBQUNBR2U2MnBEZjhTQUFBQUFEa0dhOEVtb1FXeVpUQWdoLy83aEFBQUFDa0dmRGtVVkxELy92b0VBQUFBSUFaOHRkRU4veElFQUFBQUlBWjh2YWtOL3hJQUFBQUFPUVpzMFNhaEJiSmxNQ0NILy91QUFBQUFLUVo5U1JSVXNQLysrZ1FBQUFBZ0JuM0YwUTMvRWdBQUFBQWdCbjNOcVEzL0VnQUFBQUE1Qm0zaEpxRUZzbVV3SUlmLys0UUFBQUFwQm41WkZGU3cvLzc2QUFBQUFDQUdmdFhSRGY4U0JBQUFBQ0FHZnQycERmOFNCQUFBQURrR2J2RW1vUVd5WlRBZ2gvLzdnQUFBQUNrR2Yya1VWTEQvL3ZvRUFBQUFJQVovNWRFTi94SUFBQUFBSUFaLzdha04veElFQUFBQU9RWnZnU2FoQmJKbE1DQ0gvL3VFQUFBQUtRWjRlUlJVc1AvKytnQUFBQUFnQm5qMTBRMy9FZ0FBQUFBZ0JuajlxUTMvRWdRQUFBQTVCbWlSSnFFRnNtVXdJSWYvKzRBQUFBQXBCbmtKRkZTdy8vNzZCQUFBQUNBR2VZWFJEZjhTQUFBQUFDQUdlWTJwRGY4U0JBQUFBRGtHYWFFbW9RV3laVEFnaC8vN2hBQUFBQ2tHZWhrVVZMRC8vdm9FQUFBQUlBWjZsZEVOL3hJRUFBQUFJQVo2bmFrTi94SUFBQUFBT1FacXNTYWhCYkpsTUNDSC8vdUFBQUFBS1FaN0tSUlVzUC8rK2dRQUFBQWdCbnVsMFEzL0VnQUFBQUFnQm51dHFRMy9FZ0FBQUFBNUJtdkJKcUVGc21Vd0lJZi8rNFFBQUFBcEJudzVGRlN3Ly83NkJBQUFBQ0FHZkxYUkRmOFNCQUFBQUNBR2ZMMnBEZjhTQUFBQUFEa0diTkVtb1FXeVpUQWdoLy83Z0FBQUFDa0dmVWtVVkxELy92b0VBQUFBSUFaOXhkRU4veElBQUFBQUlBWjl6YWtOL3hJQUFBQUFPUVp0NFNhaEJiSmxNQ0NILy91RUFBQUFLUVorV1JSVXNQLysrZ0FBQUFBZ0JuN1YwUTMvRWdRQUFBQWdCbjdkcVEzL0VnUUFBQUE1Qm03eEpxRUZzbVV3SUlmLys0QUFBQUFwQm45cEZGU3cvLzc2QkFBQUFDQUdmK1hSRGY4U0FBQUFBQ0FHZisycERmOFNCQUFBQURrR2I0RW1vUVd5WlRBZ2gvLzdoQUFBQUNrR2VIa1VWTEQvL3ZvQUFBQUFJQVo0OWRFTi94SUFBQUFBSUFaNC9ha04veElFQUFBQU9RWm9rU2FoQmJKbE1DQ0gvL3VBQUFBQUtRWjVDUlJVc1AvKytnUUFBQUFnQm5tRjBRMy9FZ0FBQUFBZ0JubU5xUTMvRWdRQUFBQTVCbW1oSnFFRnNtVXdJSWYvKzRRQUFBQXBCbm9aRkZTdy8vNzZCQUFBQUNBR2VwWFJEZjhTQkFBQUFDQUdlcDJwRGY4U0FBQUFBRGtHYXJFbW9RV3laVEFnaC8vN2dBQUFBQ2tHZXlrVVZMRC8vdm9FQUFBQUlBWjdwZEVOL3hJQUFBQUFJQVo3cmFrTi94SUFBQUFBUFFacnVTYWhCYkpsTUZFdzMvLzdCJyk7XG4gICAgICB2aWRlby5wbGF5KCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVsZWFzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgdmlkZW8uc3JjID0gJyc7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlPU1dha2VMb2NrKCkge1xuICB2YXIgdGltZXIgPSBudWxsO1xuXG4gIHRoaXMucmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGltZXIpIHtcbiAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgc2V0VGltZW91dCh3aW5kb3cuc3RvcCwgMCk7XG4gICAgICB9LCAzMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBnZXRXYWtlTG9jaygpIHtcbiAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmE7XG4gIGlmICh1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQb2QvaSkpIHtcbiAgICByZXR1cm4gaU9TV2FrZUxvY2s7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEFuZHJvaWRXYWtlTG9jaztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdha2VMb2NrKCk7XG59LHtcIi4vdXRpbC5qc1wiOjIyfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcbnZhciBDYXJkYm9hcmRWUkRpc3BsYXkgPSBfZGVyZXFfKCcuL2NhcmRib2FyZC12ci1kaXNwbGF5LmpzJyk7XG52YXIgTW91c2VLZXlib2FyZFZSRGlzcGxheSA9IF9kZXJlcV8oJy4vbW91c2Uta2V5Ym9hcmQtdnItZGlzcGxheS5qcycpO1xuLy8gVW5jb21tZW50IHRvIGFkZCBwb3NpdGlvbmFsIHRyYWNraW5nIHZpYSB3ZWJjYW0uXG4vL3ZhciBXZWJjYW1Qb3NpdGlvblNlbnNvclZSRGV2aWNlID0gcmVxdWlyZSgnLi93ZWJjYW0tcG9zaXRpb24tc2Vuc29yLXZyLWRldmljZS5qcycpO1xudmFyIFZSRGlzcGxheSA9IF9kZXJlcV8oJy4vYmFzZS5qcycpLlZSRGlzcGxheTtcbnZhciBWUkZyYW1lRGF0YSA9IF9kZXJlcV8oJy4vYmFzZS5qcycpLlZSRnJhbWVEYXRhO1xudmFyIEhNRFZSRGV2aWNlID0gX2RlcmVxXygnLi9iYXNlLmpzJykuSE1EVlJEZXZpY2U7XG52YXIgUG9zaXRpb25TZW5zb3JWUkRldmljZSA9IF9kZXJlcV8oJy4vYmFzZS5qcycpLlBvc2l0aW9uU2Vuc29yVlJEZXZpY2U7XG52YXIgVlJEaXNwbGF5SE1ERGV2aWNlID0gX2RlcmVxXygnLi9kaXNwbGF5LXdyYXBwZXJzLmpzJykuVlJEaXNwbGF5SE1ERGV2aWNlO1xudmFyIFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlID0gX2RlcmVxXygnLi9kaXNwbGF5LXdyYXBwZXJzLmpzJykuVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2U7XG5cbmZ1bmN0aW9uIFdlYlZSUG9seWZpbGwoKSB7XG4gIHRoaXMuZGlzcGxheXMgPSBbXTtcbiAgdGhpcy5kZXZpY2VzID0gW107IC8vIEZvciBkZXByZWNhdGVkIG9iamVjdHNcbiAgdGhpcy5kZXZpY2VzUG9wdWxhdGVkID0gZmFsc2U7XG4gIHRoaXMubmF0aXZlV2ViVlJBdmFpbGFibGUgPSB0aGlzLmlzV2ViVlJBdmFpbGFibGUoKTtcbiAgdGhpcy5uYXRpdmVMZWdhY3lXZWJWUkF2YWlsYWJsZSA9IHRoaXMuaXNEZXByZWNhdGVkV2ViVlJBdmFpbGFibGUoKTtcbiAgdGhpcy5uYXRpdmVHZXRWUkRpc3BsYXlzRnVuYyA9IHRoaXMubmF0aXZlV2ViVlJBdmFpbGFibGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdldFZSRGlzcGxheXMgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcblxuICBpZiAoIXRoaXMubmF0aXZlTGVnYWN5V2ViVlJBdmFpbGFibGUpIHtcbiAgICB0aGlzLmVuYWJsZVBvbHlmaWxsKCk7XG4gICAgaWYgKFdlYlZSQ29uZmlnLkVOQUJMRV9ERVBSRUNBVEVEX0FQSSkge1xuICAgICAgdGhpcy5lbmFibGVEZXByZWNhdGVkUG9seWZpbGwoKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYSBzaGltIGluIHBsYWNlIHRvIHVwZGF0ZSB0aGUgQVBJIHRvIDEuMSBpZiBuZWVkZWQuXG4gIEluc3RhbGxXZWJWUlNwZWNTaGltKCk7XG59XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzV2ViVlJBdmFpbGFibGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICgnZ2V0VlJEaXNwbGF5cycgaW4gbmF2aWdhdG9yKTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzRGVwcmVjYXRlZFdlYlZSQXZhaWxhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAoJ2dldFZSRGV2aWNlcycgaW4gbmF2aWdhdG9yKSB8fCAoJ21vekdldFZSRGV2aWNlcycgaW4gbmF2aWdhdG9yKTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLnBvcHVsYXRlRGV2aWNlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kZXZpY2VzUG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBvdXIgdmlydHVhbCBWUiBkZXZpY2VzLlxuICB2YXIgdnJEaXNwbGF5ID0gbnVsbDtcblxuICAvLyBBZGQgYSBDYXJkYm9hcmQgVlJEaXNwbGF5IG9uIGNvbXBhdGlibGUgbW9iaWxlIGRldmljZXNcbiAgaWYgKHRoaXMuaXNDYXJkYm9hcmRDb21wYXRpYmxlKCkpIHtcbiAgICB2ckRpc3BsYXkgPSBuZXcgQ2FyZGJvYXJkVlJEaXNwbGF5KCk7XG4gICAgdGhpcy5kaXNwbGF5cy5wdXNoKHZyRGlzcGxheSk7XG5cbiAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAoV2ViVlJDb25maWcuRU5BQkxFX0RFUFJFQ0FURURfQVBJKSB7XG4gICAgICB0aGlzLmRldmljZXMucHVzaChuZXcgVlJEaXNwbGF5SE1ERGV2aWNlKHZyRGlzcGxheSkpO1xuICAgICAgdGhpcy5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlKHZyRGlzcGxheSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhIE1vdXNlIGFuZCBLZXlib2FyZCBkcml2ZW4gVlJEaXNwbGF5IGZvciBkZXNrdG9wcy9sYXB0b3BzXG4gIGlmICghdGhpcy5pc01vYmlsZSgpICYmICFXZWJWUkNvbmZpZy5NT1VTRV9LRVlCT0FSRF9DT05UUk9MU19ESVNBQkxFRCkge1xuICAgIHZyRGlzcGxheSA9IG5ldyBNb3VzZUtleWJvYXJkVlJEaXNwbGF5KCk7XG4gICAgdGhpcy5kaXNwbGF5cy5wdXNoKHZyRGlzcGxheSk7XG5cbiAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAoV2ViVlJDb25maWcuRU5BQkxFX0RFUFJFQ0FURURfQVBJKSB7XG4gICAgICB0aGlzLmRldmljZXMucHVzaChuZXcgVlJEaXNwbGF5SE1ERGV2aWNlKHZyRGlzcGxheSkpO1xuICAgICAgdGhpcy5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlKHZyRGlzcGxheSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVuY29tbWVudCB0byBhZGQgcG9zaXRpb25hbCB0cmFja2luZyB2aWEgd2ViY2FtLlxuICAvL2lmICghdGhpcy5pc01vYmlsZSgpICYmIFdlYlZSQ29uZmlnLkVOQUJMRV9ERVBSRUNBVEVEX0FQSSkge1xuICAvLyAgcG9zaXRpb25EZXZpY2UgPSBuZXcgV2ViY2FtUG9zaXRpb25TZW5zb3JWUkRldmljZSgpO1xuICAvLyAgdGhpcy5kZXZpY2VzLnB1c2gocG9zaXRpb25EZXZpY2UpO1xuICAvL31cblxuICB0aGlzLmRldmljZXNQb3B1bGF0ZWQgPSB0cnVlO1xufTtcblxuV2ViVlJQb2x5ZmlsbC5wcm90b3R5cGUuZW5hYmxlUG9seWZpbGwgPSBmdW5jdGlvbigpIHtcbiAgLy8gUHJvdmlkZSBuYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cy5cbiAgbmF2aWdhdG9yLmdldFZSRGlzcGxheXMgPSB0aGlzLmdldFZSRGlzcGxheXMuYmluZCh0aGlzKTtcblxuICAvLyBQb2x5ZmlsbCBuYXRpdmUgVlJEaXNwbGF5LmdldEZyYW1lRGF0YVxuICBpZiAodGhpcy5uYXRpdmVXZWJWUkF2YWlsYWJsZSAmJiB0aGlzLmlzQ2FyZGJvYXJkQ29tcGF0aWJsZSgpICYmIHdpbmRvdy5WUkZyYW1lRGF0YSkge1xuICAgIHZhciBuYXRpdmVGcmFtZURhdGEgPSBuZXcgd2luZG93LlZSRnJhbWVEYXRhKCk7XG4gICAgdmFyIG5hdGl2ZUdldEZyYW1lRGF0YSA9IHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YTtcbiAgICB3aW5kb3cuVlJGcmFtZURhdGEgPSBWUkZyYW1lRGF0YTtcblxuICAgIHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YSA9IGZ1bmN0aW9uKGZyYW1lRGF0YSkge1xuICAgICAgLypcbiAgICAgIENvcHkgZnJhbWUgZGF0YSBmcm9tIG5hdGl2ZSBvYmplY3QgaW50byBwb2x5ZmlsbGVkIG9iamVjdFxuICAgICAgKi9cblxuICAgICAgbmF0aXZlR2V0RnJhbWVEYXRhLmNhbGwodGhpcywgbmF0aXZlRnJhbWVEYXRhKTtcbiAgICAgIGZyYW1lRGF0YS5wb3NlID0gbmF0aXZlRnJhbWVEYXRhLnBvc2U7XG4gICAgICBVdGlsLmNvcHlBcnJheShuYXRpdmVGcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXgsIGZyYW1lRGF0YS5sZWZ0UHJvamVjdGlvbk1hdHJpeCk7XG4gICAgICBVdGlsLmNvcHlBcnJheShuYXRpdmVGcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4LCBmcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4KTtcbiAgICAgIFV0aWwuY29weUFycmF5KG5hdGl2ZUZyYW1lRGF0YS5sZWZ0Vmlld01hdHJpeCwgZnJhbWVEYXRhLmxlZnRWaWV3TWF0cml4KTtcbiAgICAgIFV0aWwuY29weUFycmF5KG5hdGl2ZUZyYW1lRGF0YS5yaWdodFZpZXdNYXRyaXgsIGZyYW1lRGF0YS5yaWdodFZpZXdNYXRyaXgpO1xuICAgICAgLy90b2RvOiBjb3B5XG4gICAgfTtcbiAgfVxuXG4gIC8vIFByb3ZpZGUgdGhlIFZSRGlzcGxheSBvYmplY3QuXG4gIHdpbmRvdy5WUkRpc3BsYXkgPSBWUkRpc3BsYXk7XG5cbiAgLy8gUHJvdmlkZSBuYXZpZ2F0b3IudnJFbmFibGVkLlxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuYXZpZ2F0b3IsICd2ckVuYWJsZWQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2VsZi5pc0NhcmRib2FyZENvbXBhdGlibGUoKSAmJlxuICAgICAgICAgIChzZWxmLmlzRnVsbFNjcmVlbkF2YWlsYWJsZSgpIHx8IFV0aWwuaXNJT1MoKSk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoISdWUkZyYW1lRGF0YScgaW4gd2luZG93KSB7XG4gICAgLy8gUHJvdmlkZSB0aGUgVlJGcmFtZURhdGEgb2JqZWN0LlxuICAgIHdpbmRvdy5WUkZyYW1lRGF0YSA9IFZSRnJhbWVEYXRhO1xuICB9XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5lbmFibGVEZXByZWNhdGVkUG9seWZpbGwgPSBmdW5jdGlvbigpIHtcbiAgLy8gUHJvdmlkZSBuYXZpZ2F0b3IuZ2V0VlJEZXZpY2VzLlxuICBuYXZpZ2F0b3IuZ2V0VlJEZXZpY2VzID0gdGhpcy5nZXRWUkRldmljZXMuYmluZCh0aGlzKTtcblxuICAvLyBQcm92aWRlIHRoZSBDYXJkYm9hcmRITURWUkRldmljZSBhbmQgUG9zaXRpb25TZW5zb3JWUkRldmljZSBvYmplY3RzLlxuICB3aW5kb3cuSE1EVlJEZXZpY2UgPSBITURWUkRldmljZTtcbiAgd2luZG93LlBvc2l0aW9uU2Vuc29yVlJEZXZpY2UgPSBQb3NpdGlvblNlbnNvclZSRGV2aWNlO1xufTtcblxuV2ViVlJQb2x5ZmlsbC5wcm90b3R5cGUuZ2V0VlJEaXNwbGF5cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBvcHVsYXRlRGV2aWNlcygpO1xuICB2YXIgcG9seWZpbGxEaXNwbGF5cyA9IHRoaXMuZGlzcGxheXM7XG5cbiAgaWYgKHRoaXMubmF0aXZlV2ViVlJBdmFpbGFibGUpIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVHZXRWUkRpc3BsYXlzRnVuYy5jYWxsKG5hdmlnYXRvcikudGhlbihmdW5jdGlvbihuYXRpdmVEaXNwbGF5cykge1xuICAgICAgaWYgKFdlYlZSQ29uZmlnLkFMV0FZU19BUFBFTkRfUE9MWUZJTExfRElTUExBWSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlRGlzcGxheXMuY29uY2F0KHBvbHlmaWxsRGlzcGxheXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZURpc3BsYXlzLmxlbmd0aCA+IDAgPyBuYXRpdmVEaXNwbGF5cyA6IHBvbHlmaWxsRGlzcGxheXM7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZShwb2x5ZmlsbERpc3BsYXlzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5nZXRWUkRldmljZXMgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS53YXJuKCdnZXRWUkRldmljZXMgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIGdldFZSRGlzcGxheXMgaW5zdGVhZC4nKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghc2VsZi5kZXZpY2VzUG9wdWxhdGVkKSB7XG4gICAgICAgIGlmIChzZWxmLm5hdGl2ZVdlYlZSQXZhaWxhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5nZXRWUkRpc3BsYXlzKGZ1bmN0aW9uKGRpc3BsYXlzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BsYXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGV2aWNlcy5wdXNoKG5ldyBWUkRpc3BsYXlITUREZXZpY2UoZGlzcGxheXNbaV0pKTtcbiAgICAgICAgICAgICAgc2VsZi5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlKGRpc3BsYXlzW2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmRldmljZXNQb3B1bGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZShzZWxmLmRldmljZXMpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5uYXRpdmVMZWdhY3lXZWJWUkF2YWlsYWJsZSkge1xuICAgICAgICAgIHJldHVybiAobmF2aWdhdG9yLmdldFZSRERldmljZXMgfHwgbmF2aWdhdG9yLm1vekdldFZSRGV2aWNlcykoZnVuY3Rpb24oZGV2aWNlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGlmIChkZXZpY2VzW2ldIGluc3RhbmNlb2YgSE1EVlJEZXZpY2UpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRldmljZXMucHVzaChkZXZpY2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZGV2aWNlc1tpXSBpbnN0YW5jZW9mIFBvc2l0aW9uU2Vuc29yVlJEZXZpY2UpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRldmljZXMucHVzaChkZXZpY2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5kZXZpY2VzUG9wdWxhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc29sdmUoc2VsZi5kZXZpY2VzKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYucG9wdWxhdGVEZXZpY2VzKCk7XG4gICAgICByZXNvbHZlKHNlbGYuZGV2aWNlcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIGRldmljZSBpcyBtb2JpbGUuXG4gKi9cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHxcbiAgICAgIC9pUGhvbmV8aVBhZHxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzQ2FyZGJvYXJkQ29tcGF0aWJsZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBGb3Igbm93LCBzdXBwb3J0IGFsbCBpT1MgYW5kIEFuZHJvaWQgZGV2aWNlcy5cbiAgLy8gQWxzbyBlbmFibGUgdGhlIFdlYlZSQ29uZmlnLkZPUkNFX1ZSIGZsYWcgZm9yIGRlYnVnZ2luZy5cbiAgcmV0dXJuIHRoaXMuaXNNb2JpbGUoKSB8fCBXZWJWUkNvbmZpZy5GT1JDRV9FTkFCTEVfVlI7XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5pc0Z1bGxTY3JlZW5BdmFpbGFibGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCB8fFxuICAgICAgICAgIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbmFibGVkIHx8XG4gICAgICAgICAgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQgfHxcbiAgICAgICAgICBmYWxzZSk7XG59O1xuXG4vLyBJbnN0YWxscyBhIHNoaW0gdGhhdCB1cGRhdGVzIGEgV2ViVlIgMS4wIHNwZWMgaW1wbGVtZW50YXRpb24gdG8gV2ViVlIgMS4xXG5mdW5jdGlvbiBJbnN0YWxsV2ViVlJTcGVjU2hpbSgpIHtcbiAgaWYgKCdWUkRpc3BsYXknIGluIHdpbmRvdyAmJiAhKCdWUkZyYW1lRGF0YScgaW4gd2luZG93KSkge1xuICAgIC8vIFByb3ZpZGUgdGhlIFZSRnJhbWVEYXRhIG9iamVjdC5cbiAgICB3aW5kb3cuVlJGcmFtZURhdGEgPSBWUkZyYW1lRGF0YTtcblxuICAgIC8vIEEgbG90IG9mIENocm9tZSBidWlsZHMgZG9uJ3QgaGF2ZSBkZXB0aE5lYXIgYW5kIGRlcHRoRmFyLCBldmVuXG4gICAgLy8gdGhvdWdoIHRoZXkncmUgaW4gdGhlIFdlYlZSIDEuMCBzcGVjLiBQYXRjaCB0aGVtIGluIGlmIHRoZXkncmUgbm90IHByZXNlbnQuXG4gICAgaWYoISgnZGVwdGhOZWFyJyBpbiB3aW5kb3cuVlJEaXNwbGF5LnByb3RvdHlwZSkpIHtcbiAgICAgIHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlLmRlcHRoTmVhciA9IDAuMDE7XG4gICAgfVxuXG4gICAgaWYoISgnZGVwdGhGYXInIGluIHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlKSkge1xuICAgICAgd2luZG93LlZSRGlzcGxheS5wcm90b3R5cGUuZGVwdGhGYXIgPSAxMDAwMC4wO1xuICAgIH1cblxuICAgIHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YSA9IGZ1bmN0aW9uKGZyYW1lRGF0YSkge1xuICAgICAgcmV0dXJuIFV0aWwuZnJhbWVEYXRhRnJvbVBvc2UoZnJhbWVEYXRhLCB0aGlzLmdldFBvc2UoKSwgdGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5XZWJWUlBvbHlmaWxsID0gV2ViVlJQb2x5ZmlsbDtcblxufSx7XCIuL2Jhc2UuanNcIjozLFwiLi9jYXJkYm9hcmQtdnItZGlzcGxheS5qc1wiOjYsXCIuL2Rpc3BsYXktd3JhcHBlcnMuanNcIjo5LFwiLi9tb3VzZS1rZXlib2FyZC12ci1kaXNwbGF5LmpzXCI6MTUsXCIuL3V0aWwuanNcIjoyMn1dfSx7fSxbMTNdKSgxMylcbn0pOyIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyk7XG52YXIgc2hha2EgPSByZXF1aXJlKCdzaGFrYS1wbGF5ZXInKTtcblxudmFyIFR5cGVzID0ge1xuICAgIEhMUzogMSxcbiAgICBEQVNIOiAyLFxuICAgIFZJREVPOiAzXG59O1xuXG52YXIgREVGQVVMVF9CSVRTX1BFUl9TRUNPTkQgPSAxMDAwMDAwO1xuXG4vKipcbiAqIFN1cHBvcnRzIHJlZ3VsYXIgdmlkZW8gVVJMcyAoZWcuIG1wNCksIGFzIHdlbGwgYXMgYWRhcHRpdmUgbWFuaWZlc3RzIGxpa2VcbiAqIERBU0ggKC5tcGQpIGFuZCBzb29uIEhMUyAoLm0zdTgpLlxuICpcbiAqIEV2ZW50czpcbiAqICAgbG9hZCh2aWRlbyk6IFdoZW4gdGhlIHZpZGVvIGlzIGxvYWRlZC5cbiAqICAgZXJyb3IobWVzc2FnZSk6IElmIGFuIGVycm9yIG9jY3Vycy5cbiAqXG4gKiBUbyBwbGF5L3BhdXNlL3NlZWsvZXRjLCBwbGVhc2UgdXNlIHRoZSB1bmRlcmx5aW5nIHZpZGVvIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIEFkYXB0aXZlUGxheWVyKGxvb3ApIHtcbiAgICB0aGlzLnZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAvLyBMb29wIGJ5IGRlZmF1bHQuXG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgdGhpcy52aWRlby5zZXRBdHRyaWJ1dGUoJ2xvb3AnLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gRm9yIEZGLCBtYWtlIHN1cmUgd2UgZW5hYmxlIHByZWxvYWQuXG4gICAgdGhpcy52aWRlby5zZXRBdHRyaWJ1dGUoJ3ByZWxvYWQnLCAnYXV0bycpO1xuICAgIC8vIEVuYWJsZSBpbmxpbmUgdmlkZW8gcGxheWJhY2sgaW4gaU9TIDEwKy5cbiAgICB0aGlzLnZpZGVvLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCB0cnVlKTtcbiAgICB0aGlzLnZpZGVvLnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCAnYW5vbnltb3VzJyk7XG59XG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbkFkYXB0aXZlUGxheWVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBUT0RPKHNtdXMpOiBJbnZlc3RpZ2F0ZSB3aGV0aGVyIG9yIG5vdCBkaWZmZXJlbnRpYXRpb24gaXMgYmVzdCBkb25lIGJ5XG4gICAgLy8gbWltZVR5cGUgYWZ0ZXIgYWxsLiBDdXJzb3J5IHJlc2VhcmNoIHN1Z2dlc3RzIHRoYXQgYWRhcHRpdmUgc3RyZWFtaW5nXG4gICAgLy8gbWFuaWZlc3QgbWltZSB0eXBlcyBhcmVuJ3QgcHJvcGVybHkgc3VwcG9ydGVkLlxuICAgIC8vXG4gICAgLy8gRm9yIG5vdywgbWFrZSBkZXRlcm1pbmF0aW9uIGJhc2VkIG9uIGV4dGVuc2lvbi5cbiAgICB2YXIgZXh0ZW5zaW9uID0gVXRpbC5nZXRFeHRlbnNpb24odXJsKTtcbiAgICBzd2l0Y2ggKGV4dGVuc2lvbikge1xuICAgICAgICBjYXNlICdtM3U4JzogLy8gSExTXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBUeXBlcy5ITFM7XG4gICAgICAgICAgICBpZiAoVXRpbC5pc1NhZmFyaSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkVmlkZW9fKHVybCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdCgnbG9hZCcsIHNlbGYudmlkZW8pO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKHRoaXMub25FcnJvcl8uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYub25FcnJvcl8oJ0hMUyBpcyBvbmx5IHN1cHBvcnRlZCBvbiBTYWZhcmkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbXBkJzogLy8gTVBFRy1EQVNIXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBUeXBlcy5EQVNIO1xuICAgICAgICAgICAgdGhpcy5sb2FkU2hha2FWaWRlb18odXJsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVGhlIHZpZGVvIGhhcyBub3cgYmVlbiBsb2FkZWQhJyk7XG4gICAgICAgICAgICAgICAgc2VsZi5lbWl0KCdsb2FkJywgc2VsZi52aWRlbyk7XG4gICAgICAgICAgICB9KS5jYXRjaCh0aGlzLm9uRXJyb3JfLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIEEgcmVndWxhciB2aWRlbywgbm90IGFuIGFkYXB0aXZlIG1hbmlmZXN0LlxuICAgICAgICAgICAgdGhpcy50eXBlID0gVHlwZXMuVklERU87XG4gICAgICAgICAgICB0aGlzLmxvYWRWaWRlb18odXJsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmVtaXQoJ2xvYWQnLCBzZWxmLnZpZGVvKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHRoaXMub25FcnJvcl8uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59O1xuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZpZGVvLnBhdXNlKCk7XG4gICAgdGhpcy52aWRlby5zcmMgPSAnJztcbiAgICB0aGlzLnZpZGVvID0gbnVsbDtcbn07XG5cbi8qKiogUFJJVkFURSBBUEkgKioqL1xuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUub25FcnJvcl8gPSBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xufTtcblxuQWRhcHRpdmVQbGF5ZXIucHJvdG90eXBlLmxvYWRWaWRlb18gPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLCB2aWRlbyA9IHNlbGYudmlkZW87XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmlkZW8uc3JjID0gdXJsO1xuICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIHJlc29sdmUpO1xuICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuZW1pdCgndGltZXVwZGF0ZScsIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZTogdmlkZW8uY3VycmVudFRpbWUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvLmR1cmF0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgdmlkZW8ubG9hZCgpO1xuICAgIH0pO1xufTtcblxuQWRhcHRpdmVQbGF5ZXIucHJvdG90eXBlLmluaXRTaGFrYV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wbGF5ZXIgPSBuZXcgc2hha2EuUGxheWVyKHRoaXMudmlkZW8pO1xuXG4gICAgdGhpcy5wbGF5ZXIuY29uZmlndXJlKHtcbiAgICAgICAgYWJyOiB7ZGVmYXVsdEJhbmR3aWR0aEVzdGltYXRlOiBERUZBVUxUX0JJVFNfUEVSX1NFQ09ORH1cbiAgICB9KTtcblxuICAgIC8vIExpc3RlbiBmb3IgZXJyb3IgZXZlbnRzLlxuICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbkVycm9yXyk7XG59O1xuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUubG9hZFNoYWthVmlkZW9fID0gZnVuY3Rpb24gKHVybCkge1xuICAgIC8vIEluc3RhbGwgYnVpbHQtaW4gcG9seWZpbGxzIHRvIHBhdGNoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuXG4gICAgc2hha2EucG9seWZpbGwuaW5zdGFsbEFsbCgpO1xuXG4gICAgaWYgKCFzaGFrYS5QbGF5ZXIuaXNCcm93c2VyU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignU2hha2EgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRTaGFrYV8oKTtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIubG9hZCh1cmwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZGFwdGl2ZVBsYXllcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRlbWl0dGVyMycpO1xudmFyIFRXRUVOID0gcmVxdWlyZSgndHdlZW4uanMnKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG4vLyBDb25zdGFudHMgZm9yIHRoZSBhY3RpdmUvaW5hY3RpdmUgYW5pbWF0aW9uLlxudmFyIElOQUNUSVZFX0NPTE9SID0gbmV3IFRIUkVFLkNvbG9yKDEsIDEsIDEpO1xudmFyIEFDVElWRV9DT0xPUiA9IG5ldyBUSFJFRS5Db2xvcigwLjgsIDAsIDApO1xudmFyIEFDVElWRV9EVVJBVElPTiA9IDEwMDtcblxuZnVuY3Rpb24gRWRpdG9yUmVuZGVyZXIod29ybGRSZW5kZXJlcikge1xuXG4gICAgdGhpcy53b3JsZFJlbmRlcmVyID0gd29ybGRSZW5kZXJlcjtcbiAgICB0aGlzLnNjZW5lID0gd29ybGRSZW5kZXJlci5zY2VuZTtcblxuICAgIC8vIGlmIHBsYXllciBpcyBpbiBlZGl0b3IgbW9kZVxuICAgIHRoaXMuZWRpdG9yTW9kZSA9IHRydWU7XG4gICAgLy8gaWYgZHJhdyBzaGFwZSB0b29sIGlzIGFjdGl2ZVxuICAgIHRoaXMudG9vbEFjdGl2ZSA9IGZhbHNlO1xuICAgIC8vIGlmIHVzZXIgaXMgY3VycmVudGx5IGRyYXdpbmcgYSBzaGFwZVxuICAgIHRoaXMuZHJhd2luZ1NoYXBlID0gZmFsc2U7XG4gICAgLy8gZ2VvbWV0cnkgb2YgdGhlIGN1cnJlbnRseSBkcmF3aW5nIHNoYXBlXG4gICAgdGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeSA9IG51bGw7XG4gICAgLy8gaGFuZGxlcyBvZiB0aGUgY3VycmVudGx5IGRyYXdpbmcgc2hhcGVcbiAgICB0aGlzLmN1cnJlbnRTaGFwZUhhbmRsZXMgPSBbXTtcbiAgICAvLyBzaGFwZXMgZHJhd25cbiAgICB0aGlzLnNoYXBlcyA9IHt9O1xuICAgIC8vIHNoYXBlcyBrZXlmcmFtZXMgKHBvc2l0aW9uIG9mIHZlcnRpY2VzIGR1cmluZyB2aWRlbyB0aW1lKVxuICAgIHRoaXMuc2hhcGVzS2V5ZnJhbWVzID0ge307XG4gICAgLy8gY3VycmVudGx5IHNlbGVjdGVkIHNoYXBlXG4gICAgdGhpcy5zZWxlY3RlZFNoYXBlID0gbnVsbDtcbiAgICAvLyBjdXJyZW50bHkgc2VsZWN0ZWQgc2hhcGUgaGFuZGxlXG4gICAgdGhpcy5zZWxlY3RlZFNoYXBlSGFuZGxlID0gbnVsbDtcbiAgICAvLyBmbGFnIGZvciB0cmFjayBkcmFnZ2luZ1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIC8vIHZpZGVvIHRpbWVcbiAgICB0aGlzLnZpZGVvVGltZSA9IDA7XG5cbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgaWYgKCFVdGlsLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgLy8gT25seSBlbmFibGUgbW91c2UgZXZlbnRzIG9uIGRlc2t0b3AuXG4gICAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl8uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmVfLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXBfLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYSBwbGFjZWhvbGRlciBmb3Igc2hhcGVzLlxuICAgIHRoaXMuc2hhcGVzUm9vdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuc2hhcGVzUm9vdCk7XG5cbiAgICAvLyBBZGQgYSBwbGFjZWhvbGRlciBmb3IgdGVtcCBzaGFwZXMgYm9yZGVycy5cbiAgICB0aGlzLnNoYXBlc1RlbXBSb290ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5zaGFwZXNUZW1wUm9vdCk7XG5cbiAgICAvLyBGb3IgcmF5Y2FzdGluZy4gSW5pdGlhbGl6ZSBtb3VzZSB0byBiZSBvZmYgc2NyZWVuIGluaXRpYWxseS5cbiAgICB0aGlzLnBvaW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMigxLCAxKTtcbiAgICB0aGlzLnJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKTtcbn1cblxuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRpbWUsIHZpZGVvVGltZSkge1xuXG4gICAgLy8gb24gZWFjaCB2aWRlbyBmcmFtZVxuICAgIGlmKHZpZGVvVGltZSAmJiB0aGlzLnZpZGVvVGltZSAhPT0gdmlkZW9UaW1lLmN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHRoaXMudmlkZW9UaW1lID0gdmlkZW9UaW1lLmN1cnJlbnRUaW1lO1xuXG4gICAgICAgIHZhciBzaGFwZSxcbiAgICAgICAgICAgIHNoYXBlUG9pbnRzLFxuICAgICAgICAgICAgc2hhcGVQb2ludFZlY3RvcixcbiAgICAgICAgICAgIHNoYXBlUG9pbnRUcmFuc2l0aW9uUXVhdGVybmlvbixcbiAgICAgICAgICAgIHRlbXAsXG4gICAgICAgICAgICBzaGFwZXNLZXlmcmFtZXNJbmRleCxcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U7XG5cbiAgICAgICAgZm9yKHZhciBzaGFwZV9pZCBpbiB0aGlzLnNoYXBlc0tleWZyYW1lcykge1xuXG4gICAgICAgICAgICB0ZW1wID0gdGhpcy5nZXRTaGFwZUFuaW1hdGlvblBlcmNlbnRhZ2VfKHNoYXBlX2lkLCB2aWRlb1RpbWUuY3VycmVudFRpbWUpO1xuXG4gICAgICAgICAgICBpZighdGVtcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hhcGVzS2V5ZnJhbWVzSW5kZXggPSB0ZW1wWzBdOyAvLyBpbml0aWFsIGtleWZyYW1lIGluZGV4XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gdGVtcFsxXTsgICAgICAgICAgIC8vIHBlcmNlbnRhZ2UgWzAsIDFdIG9mIHRoZSB0cmFuc2Zvcm1hdGlvblxuXG4gICAgICAgICAgICBzaGFwZSA9IHRoaXMuc2hhcGVzW3NoYXBlX2lkXTtcbiAgICAgICAgICAgIHNoYXBlUG9pbnRzID0gdGhpcy5zaGFwZXNLZXlmcmFtZXNbc2hhcGVfaWRdW3NoYXBlc0tleWZyYW1lc0luZGV4XS52ZXJ0aWNlcztcblxuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGFsbCBzaGFwZSBwb2ludCB1c2luZyBRdWF0ZXJuaW9uLnNsZXJwXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gc2hhcGVQb2ludHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2hhcGVQb2ludFZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKHNoYXBlUG9pbnRzW2ldLngsIHNoYXBlUG9pbnRzW2ldLnksIHNoYXBlUG9pbnRzW2ldLnopO1xuICAgICAgICAgICAgICAgIHNoYXBlUG9pbnRUcmFuc2l0aW9uUXVhdGVybmlvbiA9IChuZXcgVEhSRUUuUXVhdGVybmlvbigpKS5zbGVycChzaGFwZVBvaW50c1tpXS5xdWF0ZXJuaW9uLCBwZXJjZW50YWdlKTtcblxuICAgICAgICAgICAgICAgIGlmKHNoYXBlLmNoaWxkcmVuW2ldLm5hbWUgPT09ICdoYW5kbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlLmNoaWxkcmVuW2ldLnBvc2l0aW9uLmNvcHkoc2hhcGVQb2ludFZlY3Rvci5hcHBseVF1YXRlcm5pb24oc2hhcGVQb2ludFRyYW5zaXRpb25RdWF0ZXJuaW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNoYXBlRmlsbF8oc2hhcGUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuZ2V0U2hhcGVBbmltYXRpb25QZXJjZW50YWdlXyA9IGZ1bmN0aW9uKHNoYXBlX2lkLCBmcmFtZSkge1xuXG4gICAgdmFyIHNoYXBlS2V5ZnJhbWVzID0gdGhpcy5zaGFwZXNLZXlmcmFtZXNbc2hhcGVfaWRdLFxuICAgICAgICBzdGFydEZyYW1lLCBlbmRGcmFtZSxcbiAgICAgICAgUTEsIFEyO1xuXG4gICAgaWYoIXNoYXBlS2V5ZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZihzaGFwZUtleWZyYW1lcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIC8vIGRvbid0IHRyYXNmb3JtIGlmIHRoZXJlIGlzIG9ubHkgMSBrZXlmcmFtZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYoc2hhcGVLZXlmcmFtZXNbc2hhcGVLZXlmcmFtZXMubGVuZ3RoLTFdLmZyYW1lIDwgZnJhbWUpIHtcbiAgICAgICAgLy8gZG9uJ3QgdHJhc2Zvcm0gYWZ0ZXIgbGFzdCBrZXlmcmFtZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZ2V0IHJvdGF0aW9uIHF1YXRlcm5pb25zXG4gICAgZm9yKHZhciBpID0gMCwgbCA9IHNoYXBlS2V5ZnJhbWVzLmxlbmd0aC0xOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHN0YXJ0RnJhbWUgPSBzaGFwZUtleWZyYW1lc1tpXS5mcmFtZTtcbiAgICAgICAgZW5kRnJhbWUgPSBzaGFwZUtleWZyYW1lc1tpKzFdLmZyYW1lO1xuXG4gICAgICAgIGlmKHN0YXJ0RnJhbWUgPD0gZnJhbWUgJiYgZnJhbWUgPD0gZW5kRnJhbWUpIHtcblxuICAgICAgICAgICAgaWYodHlwZW9mIHNoYXBlS2V5ZnJhbWVzW2ldLnF1YXRlcm5pb25zID09PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHNoYXBlIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IDAsIGxsID0gc2hhcGVLZXlmcmFtZXNbaV0udmVydGljZXMubGVuZ3RoOyBqIDwgbGw7IGorKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzaGFwZUtleWZyYW1lc1tpXS52ZXJ0aWNlc1tqXS5xdWF0ZXJuaW9uID09PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBRMSA9IHNoYXBlS2V5ZnJhbWVzW2ldLnZlcnRpY2VzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgUTIgPSBzaGFwZUtleWZyYW1lc1tpKzFdLnZlcnRpY2VzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZUtleWZyYW1lc1tpXS52ZXJ0aWNlc1tqXS5xdWF0ZXJuaW9uID0gKG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkpLnNldEZyb21Vbml0VmVjdG9ycyhRMS5ub3JtYWxpemUoKSwgUTIubm9ybWFsaXplKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJldHVybiBhbmltYXRpb24gcGVyY2VudGFnZSBbMCwgMV1cbiAgICAgICAgICAgIHJldHVybiBbaSwgKGZyYW1lIC0gc3RhcnRGcmFtZSkgLyAoZW5kRnJhbWUgLSBzdGFydEZyYW1lKV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLndhcm4oJ0ZyYW1lIG91dHNpZGUgc2hhcGUgdGltZSBmcmFtZSwgVE9ETyBoaWRlIHNoYXBlLi4uJywgc3RhcnRGcmFtZSwgZnJhbWUsIGVuZEZyYW1lKTtcbiAgICByZXR1cm4gZmFsc2U7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGRyYXcgdG9vbCBpcyBhY3RpdmUgb3IgaWYgYSBzaGFwZSBpcyBzZWxlY3RlZFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5pc0RyYXdpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMudG9vbEFjdGl2ZSB8fCB0aGlzLnNlbGVjdGVkU2hhcGUgfHwgdGhpcy5zZWxlY3RlZFNoYXBlSGFuZGxlKTtcbn07XG5cbi8qKlxuICogQWN0aXZhdGUgZHJhdyBzaGFwZSB0b29sXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5zdGFydERyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b29sQWN0aXZlID0gdHJ1ZTtcbn07XG4vKipcbiAqIERlYWN0aXZhdGUgZHJhdyBzaGFwZSB0b29sXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudG9vbEFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuY2xlYXJEcmF3blNlZ21lbnRzXygpO1xufTtcblxuLyoqXG4gKiBPbiBtb3VzZSBkb3duXG4gKiBAcGFyYW0gZVxuICogQHByaXZhdGVcbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLm9uTW91c2VEb3duXyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGludGVyc2VjdGluZ1NoYXBlO1xuICAgIHZhciBoYW5kbGU7XG4gICAgdmFyIGlzSGFuZGxlO1xuICAgIHRoaXMudXBkYXRlTW91c2VfKGUpO1xuICAgIHRoaXMud2FzU2hhcGVUcmFuc2Zvcm1lZCA9IGZhbHNlO1xuICAgIHRoaXMud2FzU2hhcGVIYW5kbGVUcmFuc2Zvcm1lZCA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgY2xpY2sgaW50ZXJzZWN0cyB3aXRoIHNvbWUgc2hhcGVzLi4uXG4gICAgaW50ZXJzZWN0aW5nU2hhcGUgPSB0aGlzLmdldEludGVyc2VjdGluZ1NoYXBlT3JIYW5kbGVzXygpO1xuICAgIGlzSGFuZGxlID0gaW50ZXJzZWN0aW5nU2hhcGUgJiYgaW50ZXJzZWN0aW5nU2hhcGUubmFtZSA9PT0gJ2hhbmRsZSc7XG5cbiAgICAvLyBzaGFwZSBoYW5kbGUgc2VsZWN0ZWRcbiAgICBpZihpc0hhbmRsZSkge1xuICAgICAgICBoYW5kbGUgPSBpbnRlcnNlY3RpbmdTaGFwZTtcbiAgICAgICAgaW50ZXJzZWN0aW5nU2hhcGUgPSBoYW5kbGUucGFyZW50O1xuICAgICAgICB0aGlzLnNlbGVjdGVkU2hhcGVIYW5kbGUgPSBoYW5kbGU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGUhJywgaGFuZGxlKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTaGFwZUhhbmRsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgY3VycmVudCBzaGFwZSBoYXMgdG8gYmUgdW5zZWxlY3RlZFxuICAgIGlmKHRoaXMuc2VsZWN0ZWRTaGFwZSAmJiAoIWludGVyc2VjdGluZ1NoYXBlIHx8IHRoaXMuc2VsZWN0ZWRTaGFwZSAhPT0gaW50ZXJzZWN0aW5nU2hhcGUpKSB7XG4gICAgICAgIC8vIGlmIGEgc2hhcGUgd2FzIHNlbGVjdGVkIGJ1dCBub3cgaXQncyBub3QsIGRlc2VsZWN0IGl0XG4gICAgICAgIGlmKHRoaXMuZWRpdG9yTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5ibHVyU2hhcGVfKHRoaXMuc2VsZWN0ZWRTaGFwZS5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzZWxlY3RTaGFwZSgpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGEgc2hhcGUgaGFzIHRvIGJlIHNlbGVjdGVkXG4gICAgaWYoIXRoaXMuc2VsZWN0ZWRTaGFwZSkge1xuICAgICAgICAvLyBpZiBzaGFwZSBub3QgYWxyZWFkeSBzZWxlY3RlZCwgc2VsZWN0IGl0XG4gICAgICAgIGlmKGludGVyc2VjdGluZ1NoYXBlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFNoYXBlKGludGVyc2VjdGluZ1NoYXBlKTtcblxuICAgICAgICAgICAgaWYodGhpcy5lZGl0b3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1NoYXBlXyhpbnRlcnNlY3RpbmdTaGFwZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmKHRoaXMuZWRpdG9yTW9kZSkge1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRTaGFwZSkge1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50b29sQWN0aXZlKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnRPblNwaGVyZSA9IHRoaXMuZ2V0Q2xpY2tQb3NpdGlvbk9uU3BoZXJlXygpO1xuICAgICAgICAgICAgdGhpcy5hZGRQb2ludFRvU2hhcGVfKHBvaW50T25TcGhlcmUpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG4vKipcbiAqIE9uIG1vdXNlIG1vdmVcbiAqIEBwYXJhbSBlXG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUub25Nb3VzZU1vdmVfID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZih0aGlzLmlzRHJhd2luZygpKSB7XG4gICAgICAgIC8vIHByZXZlbnQgY2FtZXJhIHJvdGF0aW9uXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgaWYodGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlXyhlKTtcbiAgICAgICAgICAgIHZhciBwb2ludE9uU3BoZXJlID0gdGhpcy5nZXRDbGlja1Bvc2l0aW9uT25TcGhlcmVfKCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRTaGFwZUhhbmRsZSkge1xuICAgICAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSBzaGFwZSBoYW5kbGVcbiAgICAgICAgICAgICAgICB0aGlzLndhc1NoYXBlSGFuZGxlVHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTaGFwZUhhbmRsZS5wb3NpdGlvbi5jb3B5KHBvaW50T25TcGhlcmUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2hhcGVGaWxsXyh0aGlzLnNlbGVjdGVkU2hhcGVIYW5kbGUucGFyZW50LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zZWxlY3RlZFNoYXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGVudGlyZSBzaGFwZVxuICAgICAgICAgICAgICAgIGlmKHRoaXMucHJldlBvaW50ZXJQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndhc1NoYXBlVHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVNoYXBlXyh0aGlzLnNlbGVjdGVkU2hhcGUsIHRoaXMucHJldlBvaW50ZXJQb3NpdGlvbiwgcG9pbnRPblNwaGVyZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2UG9pbnRlclBvc2l0aW9uID0gcG9pbnRPblNwaGVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxufTtcblxuLyoqXG4gKiBPbiBNb3VzZSB1cFxuICogQHBhcmFtIGVcbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5vbk1vdXNlVXBfID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZih0aGlzLmlzRHJhd2luZygpKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICBpZih0aGlzLnNlbGVjdGVkU2hhcGVIYW5kbGUgJiYgdGhpcy53YXNTaGFwZUhhbmRsZVRyYW5zZm9ybWVkKSB7XG4gICAgICAgIHRoaXMuZW1pdCgndHJhbnNmb3JtZWQnLCB0aGlzLnNlbGVjdGVkU2hhcGVIYW5kbGUucGFyZW50KTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFNoYXBlSGFuZGxlID0gbnVsbDtcbiAgICB9XG5cbiAgICBlbHNlIGlmKHRoaXMuc2VsZWN0ZWRTaGFwZSAmJiB0aGlzLndhc1NoYXBlVHJhbnNmb3JtZWQpIHtcbiAgICAgICAgdGhpcy5lbWl0KCd0cmFuc2Zvcm1lZCcsIHRoaXMuc2VsZWN0ZWRTaGFwZSk7XG4gICAgICAgIHRoaXMucHJldlBvaW50ZXJQb3NpdGlvbiA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBTZWxlY3QgYSBzaGFwZVxuICogQHBhcmFtIHNoYXBlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5zZWxlY3RTaGFwZSA9IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgdGhpcy5zZWxlY3RlZFNoYXBlID0gc2hhcGU7XG4gICAgdGhpcy5lbWl0KCdzaGFwZXNlbGVjdGVkJywgdGhpcy5zZWxlY3RlZFNoYXBlKTtcbn07XG4vKipcbiAqIERlc2VsZWN0IGN1cnJlbnQgc2hhcGVcbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLmRlc2VsZWN0U2hhcGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNlbGVjdGVkU2hhcGUgPSBudWxsO1xuICAgIHRoaXMuZW1pdCgnc2hhcGV1bnNlbGVjdGVkJyk7XG59O1xuXG4vKipcbiAqIEZvY3VzIGEgc2hhcGVcbiAqIEBwYXJhbSBzaGFwZV9pZFxuICogQHByaXZhdGVcbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLmZvY3VzU2hhcGVfID0gZnVuY3Rpb24oc2hhcGVfaWQpIHtcbiAgICB2YXIgc2hhcGUgPSB0aGlzLnNoYXBlc1tzaGFwZV9pZF07XG4gICAgdmFyIG91dGVyID0gc2hhcGUuZ2V0T2JqZWN0QnlOYW1lKCdmaWxsJyk7XG5cbiAgICB0aGlzLnR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG91dGVyLm1hdGVyaWFsLmNvbG9yKS50byhBQ1RJVkVfQ09MT1IsIEFDVElWRV9EVVJBVElPTilcbiAgICAgICAgLnN0YXJ0KCk7XG59O1xuXG4vKipcbiAqIEJsdXIgYSBzaGFwZVxuICogQHBhcmFtIHNoYXBlX2lkXG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuYmx1clNoYXBlXyA9IGZ1bmN0aW9uKHNoYXBlX2lkKSB7XG4gICAgdmFyIHNoYXBlID0gdGhpcy5zaGFwZXNbc2hhcGVfaWRdO1xuICAgIHZhciBvdXRlciA9IHNoYXBlLmdldE9iamVjdEJ5TmFtZSgnZmlsbCcpO1xuXG4gICAgdGhpcy50d2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihvdXRlci5tYXRlcmlhbC5jb2xvcikudG8oSU5BQ1RJVkVfQ09MT1IsIEFDVElWRV9EVVJBVElPTilcbiAgICAgICAgLnN0YXJ0KCk7XG59O1xuXG4vKipcbiAqIEFkZCBhIHBvaW50IHRvIHRoZSBjdXJyZW50IGRyYXdpbmcgc2hhcGVcbiAqIENhbGxlZCBvbiBtb3VzZWRvd25cbiAqIEBwYXJhbSBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuYWRkUG9pbnRUb1NoYXBlXyA9IGZ1bmN0aW9uIChwb2ludCkge1xuXG4gICAgaWYoIXBvaW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY2xvc2VTaGFwZSA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgY3VycmVudCBwb2ludCBjYW4gY2xvc2UgdGhlIGdlb21ldHJ5IG9iamVjdFxuICAgIGlmKHRoaXMuY3VycmVudFNoYXBlR2VvbWV0cnkgJiYgdGhpcy5kcmF3aW5nU2hhcGUgJiYgdGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGNsb3NlU2hhcGUgPSB0aGlzLmlzUG9pbnROZWFyVG9fKHBvaW50LCB0aGlzLmN1cnJlbnRTaGFwZUdlb21ldHJ5LnZlcnRpY2VzWzBdKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgZ2VvbWV0cnkgb2JqZWN0XG4gICAgaWYoIXRoaXMuZHJhd2luZ1NoYXBlKSB7XG4gICAgICAgIHRoaXMuZHJhd2luZ1NoYXBlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuICAgIH1cblxuICAgIC8vIGFkZCBjdXJycmVudCBwb2ludCB0byBnZW9tZXRyeSBvYmplY3RcbiAgICBpZighdGhpcy5kcmF3aW5nU2hhcGUgfHwgIWNsb3NlU2hhcGUpIHtcblxuICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2goXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyhwb2ludC54LCBwb2ludC55LCBwb2ludC56KVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGRyYXcgdGVtcCBzZWdtZW50XG4gICAgICAgIHRoaXMucmVuZGVyRHJhd25TZWdtZW50XygpO1xuICAgIH1cblxuICAgIC8vIGNsb3NlIHRoZSBnZW9tZXRyeSBvYmplY3QgYW5kIHJlbmRlciB0aGUgc2hhcGVcbiAgICBpZihjbG9zZVNoYXBlKSB7XG5cbiAgICAgICAgLy8gYWRkIGxhc3QgdmVydGV4IChzYW1lIGFzIGZpcnN0KSB0byBjbG9zZSB0aGUgc2hhcGVcbiAgICAgICAgdGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjModGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeS52ZXJ0aWNlc1swXS54LCB0aGlzLmN1cnJlbnRTaGFwZUdlb21ldHJ5LnZlcnRpY2VzWzBdLnksIHRoaXMuY3VycmVudFNoYXBlR2VvbWV0cnkudmVydGljZXNbMF0ueilcbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgc2hhcGUgPSB0aGlzLmNyZWF0ZVNoYXBlKHRoaXMuY3VycmVudFNoYXBlR2VvbWV0cnkudmVydGljZXMpO1xuXG4gICAgICAgIC8vIHJlc2V0IHNoYXBlIGRyYXdpbmcgaGVscGVycyAodGVtcCBoYW5kbGVzIGFuZCBzZWdtZW50cylcbiAgICAgICAgdGhpcy5jbGVhckRyYXduU2VnbWVudHNfKCk7XG5cbiAgICAgICAgLy8gZGVhY3RpdmF0ZSB0b29sXG4gICAgICAgIHRoaXMuZW5kRHJhdygpO1xuICAgICAgICB0aGlzLmVtaXQoJ2RyYXduJywgc2hhcGUpO1xuICAgIH1cblxufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFwZVxuICogQHBhcmFtIHZlcnRpY2VzXG4gKiBAcGFyYW0gaWRcbiAqIEByZXR1cm5zIHtTRUEzRC5PYmplY3QzRHxUSFJFRS5TRUEzRC5PYmplY3QzRHwqfE9iamVjdDNEfFd8eH1cbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNoYXBlID0gZnVuY3Rpb24gKHZlcnRpY2VzLCBpZCkge1xuXG4gICAgdmFyIHNoYXBlID0gdGhpcy5jcmVhdGVTaGFwZV8odmVydGljZXMpO1xuICAgIHNoYXBlLm5hbWUgPSBpZCB8fCBzaGFwZS51dWlkO1xuXG4gICAgLy8gYWRkIHZlcnRpY2VzIHRvIHNoYXBlcyBrZXlmcmFtZXNcbiAgICB0aGlzLnNoYXBlc0tleWZyYW1lc1tzaGFwZS5uYW1lXSA9IFt7XG4gICAgICAgIGZyYW1lOiAwLFxuICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICB9XTtcblxuICAgIC8vIGFkZCBzaGFwZSB0byBzY2VuZVxuICAgIHRoaXMuc2hhcGVzW3NoYXBlLm5hbWVdID0gc2hhcGU7XG4gICAgdGhpcy5zaGFwZXNSb290LmFkZChzaGFwZSk7XG5cbiAgICByZXR1cm4gc2hhcGU7XG59O1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuYWRkU2hhcGVLZXlmcmFtZSA9IGZ1bmN0aW9uIChzaGFwZV9pZCwgZnJhbWUsIHZlcnRpY2VzKSB7XG5cbiAgICB2YXIgc2hhcGUsXG4gICAgICAgIHNoYXBlS2V5ZnJhbWVzO1xuXG4gICAgaWYodHlwZW9mIHRoaXMuc2hhcGVzW3NoYXBlX2lkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgYWRkIGtleWZyYW1lIHRvIHNoYXBlIHdpdGggaWQgJyArIHNoYXBlX2lkICsgJywgaXQgZG9lc25cXCd0IGV4aXN0cy4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNoYXBlID0gdGhpcy5zaGFwZXNbc2hhcGVfaWRdO1xuICAgIHNoYXBlS2V5ZnJhbWVzID0gdGhpcy5zaGFwZXNLZXlmcmFtZXNbc2hhcGVfaWRdO1xuXG4gICAgaWYoISh2ZXJ0aWNlcyBpbnN0YW5jZW9mIEFycmF5ICYmIHNoYXBlLmNoaWxkcmVuLmxlbmd0aC0xID09PSB2ZXJ0aWNlcy5sZW5ndGgpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGFkZCBrZXlmcmFtZSB0byBzaGFwZSB3aXRoIGlkICcgKyBzaGFwZV9pZCArICcsIGRpZmZlcmVudCBudW1iZXIgb2YgdmVydGljZXMuJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBhZGQgdG8gc2hhcGVzS2V5ZnJhbWVzIG9iamVjdFxuICAgIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW3NoYXBlX2lkXS5wdXNoKHtcbiAgICAgICAgZnJhbWU6IGZyYW1lLFxuICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICB9KTtcblxuICAgIC8vIG9yZGVyIGZyYW1lcyBhc2NlbmRpbmdcbiAgICBzaGFwZUtleWZyYW1lcy5zb3J0KGZ1bmN0aW9uKGEsYikge3JldHVybiAoYS5mcmFtZSA+IGIuZnJhbWUpID8gMSA6ICgoYi5mcmFtZSA+IGEuZnJhbWUpID8gLTEgOiAwKTt9ICk7XG5cbn07XG5cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5lZGl0U2hhcGVLZXlmcmFtZSA9IGZ1bmN0aW9uIChzaGFwZV9pZCwga2V5ZnJhbWUsIHZlcnRpY2VzKSB7XG5cbiAgICBpZih0eXBlb2YgdGhpcy5zaGFwZXNLZXlmcmFtZXNbc2hhcGVfaWRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCB1cGRhdGUgc2hhcGUsIG5vIHNoYXBlIGZvdW5kOicgKyBzaGFwZV9pZCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5zaGFwZXNLZXlmcmFtZXNbaWRdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmKHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXVtpXS5mcmFtZSA9PT0ga2V5ZnJhbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBzaGFwZSAnICsgc2hhcGVfaWQgKyAnIGF0IGtleWZyYW1lICcgKyBrZXlmcmFtZSArICcgd2FzICcsIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXVtpXS52ZXJ0aWNlcywgJ25vdycsIHZlcnRpY2VzKTtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXVtpXS52ZXJ0aWNlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5zaGFwZXNLZXlmcmFtZXNbaWRdW2ldLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCB1cGRhdGUgc2hhcGUsIG5vIGtleWZyYW1lIG9yIHNoYXBlIGZvdW5kIGF0ICcgKyBrZXlmcmFtZSArICcgZm9yIHNoYXBlIHdpdGggaWQgJyArIHNoYXBlX2lkKTtcbn07XG5cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5yZW1vdmVTaGFwZUtleWZyYW1lID0gZnVuY3Rpb24gKHNoYXBlX2lkLCBrZXlmcmFtZSkge1xuXG4gICAgaWYodHlwZW9mIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW3NoYXBlX2lkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgdXBkYXRlIHNoYXBlLCBubyBzaGFwZSBmb3VuZDonICsgc2hhcGVfaWQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZih0aGlzLnNoYXBlc0tleWZyYW1lc1tpZF1baV0uZnJhbWUgPT09IGtleWZyYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRpbmcga2V5ZnJhbWUgJyArIGtleWZyYW1lICsgJyBmb3Igc2hhcGUgJyArIHNoYXBlX2lkKTtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYXBlIGZvcm0gYSBzZXQgb2YgdmVydGljZXMgKHBvaW50cylcbiAqIEBwYXJhbSB2ZXJ0aWNlc1xuICogQHJldHVybnMge1NFQTNELk9iamVjdDNEfFRIUkVFLlNFQTNELk9iamVjdDNEfCp8T2JqZWN0M0R8V3x4fVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlU2hhcGVfID0gZnVuY3Rpb24gKHZlcnRpY2VzKSB7XG5cbiAgICAvL3ZhciBzaGFwZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG4gICAgLy9zaGFwZUdlb21ldHJ5LnZlcnRpY2VzID0gcG9pbnRzO1xuXG4gICAgLy8gZHJhdyBib3JkZXJzIG9mIHRoZSBzaGFwZVxuICAgIC8vdmFyIGJvcmRlcnMgPSBuZXcgVEhSRUUuTGluZShzaGFwZUdlb21ldHJ5LCBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOiBcInJlZFwifSkpO1xuICAgIC8vYm9yZGVycy5uYW1lID0gJ2JvcmRlcnMnO1xuXG4gICAgLy8gZHJhdyBmaWxsXG4gICAgdmFyIGZpbGwgPSB0aGlzLmNyZWF0ZVNoYXBlRmlsbF8odmVydGljZXMpO1xuXG4gICAgLy8gaGFuZGxlcyB3cmFwcGVyIG9iamVjdFxuICAgIC8vdmFyIGhhbmRsZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICAvL2hhbmRsZXMubmFtZSA9ICdoYW5kbGVzJztcblxuICAgIC8vIHdyYXBwZXIgb2JqZWN0XG4gICAgdmFyIHNoYXBlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgc2hhcGUubmFtZSA9ICdzaGFwZSc7XG4gICAgc2hhcGUuYWRkKGZpbGwpO1xuXG4gICAgLy8gZHJhdyBoYW5kbGVzXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBoYW5kbGUgPSB0aGlzLmNyZWF0ZUhhbmRsZV8odmVydGljZXNbaV0pO1xuICAgICAgICBzaGFwZS5hZGQoaGFuZGxlKTtcbiAgICB9XG5cbiAgICAvL3NoYXBlLmFkZChoYW5kbGVzKTtcbiAgICAvL3NoYXBlLmFkZChib3JkZXJzKTtcblxuICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIHNoYXBlIHdpdGggJyArIHZlcnRpY2VzLmxlbmd0aCArICcgdmVydGljZXMhJywgc2hhcGUpO1xuXG4gICAgcmV0dXJuIHNoYXBlO1xufTtcblxuLyoqXG4gKiBlZGl0IGEgc2hhcGUgYXQgYSBzcGVjaWZpZWQgZnJhbWVcbiAqIEBwYXJhbSBpZFxuICogQHBhcmFtIHBhcmFtc1xuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuZWRpdFNoYXBlID0gZnVuY3Rpb24gKGlkLCBwYXJhbXMpIHtcbiAgICBjb25zb2xlLndhcm4oJ2VkaXRTaGFwZTogVE9ETyBub3QgaW1wbGVtZW50ZWQgeWV0JywgaWQsIHBhcmFtcyk7XG59O1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlU2hhcGUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAvLyBJZiB0aGVyZSdzIG5vIHNoYXBlIHdpdGggdGhpcyBJRCwgZmFpbC5cbiAgICBpZiAoIXRoaXMuc2hhcGVzW2lkXSkge1xuICAgICAgICAvLyBUT0RPOiBQcm9wZXIgZXJyb3IgcmVwb3J0aW5nLlxuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0IHRvIHJlbW92ZSBub24tZXhpc3Rpbmcgc2hhcGUgd2l0aCBpZCAlcy4nLCBpZCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBtZXNoIGZyb20gdGhlIHNjZW5lLlxuICAgIHRoaXMuc2hhcGVzUm9vdC5yZW1vdmUodGhpcy5zaGFwZXNbaWRdKTtcblxuICAgIGRlbGV0ZSB0aGlzLnNoYXBlc1tpZF07XG4gICAgZGVsZXRlIHRoaXMuc2hhcGVzS2V5ZnJhbWVzW2lkXTtcblxuICAgIC8vIElmIHRoaXMgc2hhcGUgd2FzIHNlbGVjdGVkLCBtYWtlIHN1cmUgaXQgZ2V0cyB1bnNlbGVjdGVkLlxuICAgIHRoaXMuc2VsZWN0ZWRTaGFwZSA9IG51bGw7XG59O1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuY2xlYXJTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yKHZhciBpZCBpbiB0aGlzLnNoYXBlcykge1xuICAgICAgICB0aGlzLnJlbW92ZVNoYXBlKGlkKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgYSBzaGFwZSBNZXNoIGFmdGVyIGFuIGhhbmRsZSBkcmFnXG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUudXBkYXRlU2hhcGVGaWxsXyA9IGZ1bmN0aW9uKHNoYXBlLCBpc1NoYXBlU2VsZWN0ZWQpIHtcbiAgICB2YXIgdmVydGljZXMgPSBbXTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzaGFwZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb2JqID0gc2hhcGUuY2hpbGRyZW5baV07XG4gICAgICAgIGlmKG9iai5uYW1lID09PSAnaGFuZGxlJykge1xuICAgICAgICAgICAgdmVydGljZXMucHVzaChvYmoucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5ld0ZpbGwgPSB0aGlzLmNyZWF0ZVNoYXBlRmlsbF8odmVydGljZXMsIGlzU2hhcGVTZWxlY3RlZCk7XG5cbiAgICBzaGFwZS5yZW1vdmUoc2hhcGUuZ2V0T2JqZWN0QnlOYW1lKCdmaWxsJykpO1xuICAgIHNoYXBlLmFkZChuZXdGaWxsKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIE1lc2ggYmV0d2VlbiBnaXZlbiBwb2ludHNcbiAqIEBwYXJhbSB2ZXJ0aWNlc1xuICogQHBhcmFtIGlzU2hhcGVTZWxlY3RlZFxuICogQHJldHVybnMge1RIUkVFLlNFQTNELk1lc2h8UmF5Y2FzdGVyLnBhcmFtcy5NZXNofHt9fFNFQTNELk1lc2h8SmIucGFyYW1zLk1lc2h8cGUucGFyYW1zLk1lc2h8Kn1cbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVTaGFwZUZpbGxfID0gZnVuY3Rpb24odmVydGljZXMsIGlzU2hhcGVTZWxlY3RlZCkge1xuXG4gICAgdmFyIGZpbGxHZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuICAgIHZhciBmaWxsTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogaXNTaGFwZVNlbGVjdGVkID8gQUNUSVZFX0NPTE9SIDogMHhmZmZmZmYsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjZ9KTtcbiAgICB2YXIgZmFjZXMgPSBbXTtcbiAgICB2YXIgdHJpYW5nbGVzID0gVEhSRUUuU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlICh2ZXJ0aWNlcywgW10pO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBmYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyggdHJpYW5nbGVzW2ldWzBdLCB0cmlhbmdsZXNbaV1bMV0sIHRyaWFuZ2xlc1tpXVsyXSApKTtcbiAgICB9XG4gICAgZmlsbEdlb21ldHJ5LmZhY2VzID0gZmFjZXM7XG4gICAgZmlsbEdlb21ldHJ5LnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgdmFyIGZpbGwgPSBuZXcgVEhSRUUuTWVzaChmaWxsR2VvbWV0cnksIGZpbGxNYXRlcmlhbCk7XG4gICAgZmlsbC5uYW1lID0gJ2ZpbGwnO1xuXG4gICAgcmV0dXJuIGZpbGw7XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgY3VycmVudCBkcmF3biBzZWdtZW50IHdpdGggdGVtcCBoYW5kbGVzXG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyRHJhd25TZWdtZW50XyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMuY3VycmVudFNoYXBlR2VvbWV0cnkudmVydGljZXMuc2xpY2UoKTtcbiAgICB2YXIgY3VycmVudFZlcnRleCA9IHZlcnRpY2VzW3ZlcnRpY2VzLmxlbmd0aC0xXTtcblxuICAgIC8vIHNlZ21lbnRcbiAgICBpZih2ZXJ0aWNlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBsYXN0VmVydGV4ID0gdmVydGljZXNbdmVydGljZXMubGVuZ3RoLTJdO1xuICAgICAgICB2YXIgdGVtcEdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG4gICAgICAgIHRlbXBHZW9tZXRyeS52ZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKGxhc3RWZXJ0ZXgueCwgbGFzdFZlcnRleC55LCBsYXN0VmVydGV4LnopLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoY3VycmVudFZlcnRleC54LCBjdXJyZW50VmVydGV4LnksIGN1cnJlbnRWZXJ0ZXgueilcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIHRlbXBMaW5lID0gbmV3IFRIUkVFLkxpbmUodGVtcEdlb21ldHJ5LCBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOiBcInJlZFwifSkpO1xuICAgICAgICB0aGlzLnNoYXBlc1RlbXBSb290LmFkZCh0ZW1wTGluZSk7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlXG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuY3JlYXRlSGFuZGxlXyhjdXJyZW50VmVydGV4KTtcbiAgICB0aGlzLnNoYXBlc1RlbXBSb290LmFkZChoYW5kbGUpO1xuICAgIHRoaXMuY3VycmVudFNoYXBlSGFuZGxlcy5wdXNoKGhhbmRsZSk7XG5cbn07XG5cbi8qKlxuICogUmVtb3ZlIHRlbXAgZHJhd24gc2VnbWVudHNcbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5jbGVhckRyYXduU2VnbWVudHNfID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKCF0aGlzLmRyYXdpbmdTaGFwZSkgeyByZXR1cm47IH1cblxuICAgIHRoaXMuZHJhd2luZ1NoYXBlID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50U2hhcGVHZW9tZXRyeSA9IG51bGw7XG4gICAgZm9yKCB2YXIgaSA9IHRoaXMuc2hhcGVzVGVtcFJvb3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy5zaGFwZXNUZW1wUm9vdC5yZW1vdmUodGhpcy5zaGFwZXNUZW1wUm9vdC5jaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFNoYXBlSGFuZGxlcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGhhbmRsZVxuICogQHBhcmFtIHBvaW50XG4gKiBAcmV0dXJucyB7VEhSRUUuU0VBM0QuTWVzaHxSYXljYXN0ZXIucGFyYW1zLk1lc2h8e318U0VBM0QuTWVzaHxKYi5wYXJhbXMuTWVzaHxwZS5wYXJhbXMuTWVzaHwqfVxuICogQHByaXZhdGVcbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUhhbmRsZV8gPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICB2YXIgaGFuZGxlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogXCJibHVlXCIgfSk7XG4gICAgdmFyIGhhbmRsZUdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuMDIsIDMyLCAzMik7XG4gICAgdmFyIGhhbmRsZSA9IG5ldyBUSFJFRS5NZXNoKGhhbmRsZUdlb21ldHJ5LCBoYW5kbGVNYXRlcmlhbCk7XG4gICAgaGFuZGxlLnBvc2l0aW9uLnNldChwb2ludC54LCBwb2ludC55LCBwb2ludC56KTtcbiAgICBoYW5kbGUubmFtZSA9ICdoYW5kbGUnO1xuICAgIHJldHVybiBoYW5kbGU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2hhcGUgc2VsZWN0ZWQgYnkgYSBtb3VzZSBjbGlja1xuICogQHJldHVybnMgeyp9XG4gKiBAcHJpdmF0ZVxuICovXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuZ2V0SW50ZXJzZWN0aW5nU2hhcGVPckhhbmRsZXNfID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gY3JlYXRlIGEgUmF5IHdpdGggb3JpZ2luIGF0IHRoZSBtb3VzZSBwb3NpdGlvblxuICAgIC8vICAgYW5kIGRpcmVjdGlvbiBpbnRvIHRoZSBzY2VuZSAoY2FtZXJhIGRpcmVjdGlvbilcbiAgICB2YXIgY2FtZXJhID0gdGhpcy53b3JsZFJlbmRlcmVyLmNhbWVyYTtcbiAgICB2YXIgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjModGhpcy5wb2ludGVyLngsIHRoaXMucG9pbnRlci55LCAxKTtcbiAgICB2ZWN0b3IudW5wcm9qZWN0KGNhbWVyYSk7XG4gICAgdmFyIHJheSA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoY2FtZXJhLnBvc2l0aW9uLCB2ZWN0b3Iuc3ViKGNhbWVyYS5wb3NpdGlvbikubm9ybWFsaXplKCkpO1xuXG4gICAgLy8gY3JlYXRlIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9iamVjdHMgaW4gdGhlIHNjZW5lIHdpdGggd2hpY2ggdGhlIHJheSBpbnRlcnNlY3RzXG4gICAgdmFyIHRhcmdldExpc3QgPSB0aGlzLnNoYXBlc1Jvb3QuY2hpbGRyZW47XG4gICAgdmFyIGludGVyc2VjdGluZ0hhbmRsZXMgPSBbXTtcbiAgICB2YXIgaW50ZXJzZWN0aW5nU2hhcGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzaGFwZSA9IHRhcmdldExpc3RbaV07XG4gICAgICAgIHZhciBpbnRlcnNlY3RzID0gcmF5LmludGVyc2VjdE9iamVjdHMoc2hhcGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9uZSAob3IgbW9yZSkgaW50ZXJzZWN0aW9uc1xuICAgICAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBpbnRlcnNlY3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYoaW50ZXJzZWN0c1tqXS5vYmplY3QubmFtZSA9PT0gJ2hhbmRsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW5nSGFuZGxlcy5wdXNoKGludGVyc2VjdHNbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGludGVyc2VjdHNbal0ub2JqZWN0Lm5hbWUgPT09ICdmaWxsJykge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3RpbmdTaGFwZXMucHVzaChpbnRlcnNlY3RzW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc29ydGVkO1xuXG4gICAgaWYoaW50ZXJzZWN0aW5nSGFuZGxlcy5sZW5ndGgpIHtcbiAgICAgICAgc29ydGVkID0gaW50ZXJzZWN0aW5nSGFuZGxlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7IH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhzb3J0ZWQpO1xuICAgICAgICByZXR1cm4gc29ydGVkWzBdLm9iamVjdDtcbiAgICB9XG4gICAgZWxzZSBpZihpbnRlcnNlY3RpbmdTaGFwZXMubGVuZ3RoKSB7XG4gICAgICAgIHNvcnRlZCA9IGludGVyc2VjdGluZ1NoYXBlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7IH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhzb3J0ZWQpO1xuICAgICAgICByZXR1cm4gc29ydGVkWzBdLm9iamVjdC5wYXJlbnQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHBvaW50ZXIgKGNsaWNrKSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgc3BoZXJlXG4gKiBAcmV0dXJucyB7Kn1cbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5nZXRDbGlja1Bvc2l0aW9uT25TcGhlcmVfID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gY3JlYXRlIGEgUmF5IHdpdGggb3JpZ2luIGF0IHRoZSBtb3VzZSBwb3NpdGlvblxuICAgIC8vICAgYW5kIGRpcmVjdGlvbiBpbnRvIHRoZSBzY2VuZSAoY2FtZXJhIGRpcmVjdGlvbilcbiAgICB2YXIgY2FtZXJhID0gdGhpcy53b3JsZFJlbmRlcmVyLmNhbWVyYTtcbiAgICB2YXIgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjModGhpcy5wb2ludGVyLngsIHRoaXMucG9pbnRlci55LCAxKTtcbiAgICB2ZWN0b3IudW5wcm9qZWN0KGNhbWVyYSk7XG4gICAgdmFyIHJheSA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoY2FtZXJhLnBvc2l0aW9uLCB2ZWN0b3Iuc3ViKGNhbWVyYS5wb3NpdGlvbikubm9ybWFsaXplKCkpO1xuXG4gICAgLy8gY3JlYXRlIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9iamVjdHMgaW4gdGhlIHNjZW5lIHdpdGggd2hpY2ggdGhlIHJheSBpbnRlcnNlY3RzXG4gICAgdmFyIHRhcmdldExpc3QgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZSgncGhvdG8nKS5jaGlsZHJlbjtcbiAgICB2YXIgaW50ZXJzZWN0cyA9IHJheS5pbnRlcnNlY3RPYmplY3RzKHRhcmdldExpc3QpO1xuXG4gICAgLy8gaWYgdGhlcmUgaXMgb25lIChvciBtb3JlKSBpbnRlcnNlY3Rpb25zXG4gICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gaW50ZXJzZWN0c1swXS5wb2ludDtcbiAgICB9XG5cbn07XG5cblxuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLnRyYW5zbGF0ZVNoYXBlXyA9IGZ1bmN0aW9uIChzaGFwZSwgZnJvbVBvaW50LCB0b1BvaW50KSB7XG5cbiAgICB2YXIgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKGZyb21Qb2ludC5ub3JtYWxpemUoKSwgdG9Qb2ludC5ub3JtYWxpemUoKSk7XG5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgc2hhcGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYoc2hhcGUuY2hpbGRyZW5baV0ubmFtZSA9PT0gJ2hhbmRsZScpIHtcbiAgICAgICAgICAgIHNoYXBlLmNoaWxkcmVuW2ldLnBvc2l0aW9uLmFwcGx5UXVhdGVybmlvbihxdWF0ZXJuaW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU2hhcGVGaWxsXyhzaGFwZSwgdHJ1ZSk7XG59O1xuXG5FZGl0b3JSZW5kZXJlci5wcm90b3R5cGUuZ2V0UG9pbnRQb3NpdGlvbk9uU3BoZXJlXyA9IGZ1bmN0aW9uIChwb2ludCkge1xuXG4gICAgLy8gY3JlYXRlIGEgUmF5IHdpdGggb3JpZ2luIGF0IHRoZSBtb3VzZSBwb3NpdGlvblxuICAgIC8vICAgYW5kIGRpcmVjdGlvbiBpbnRvIHRoZSBzY2VuZSAoY2FtZXJhIGRpcmVjdGlvbilcbiAgICB2YXIgY2FtZXJhID0gdGhpcy53b3JsZFJlbmRlcmVyLmNhbWVyYTtcbiAgICB2YXIgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueik7XG4gICAgdmVjdG9yLnVucHJvamVjdChjYW1lcmEpO1xuICAgIHZhciByYXkgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKGNhbWVyYS5wb3NpdGlvbiwgdmVjdG9yLnN1YihjYW1lcmEucG9zaXRpb24pLm5vcm1hbGl6ZSgpKTtcblxuICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBjb250YWluaW5nIGFsbCBvYmplY3RzIGluIHRoZSBzY2VuZSB3aXRoIHdoaWNoIHRoZSByYXkgaW50ZXJzZWN0c1xuICAgIHZhciB0YXJnZXRMaXN0ID0gdGhpcy5zY2VuZS5nZXRPYmplY3RCeU5hbWUoJ3Bob3RvJykuY2hpbGRyZW47XG4gICAgdmFyIGludGVyc2VjdHMgPSByYXkuaW50ZXJzZWN0T2JqZWN0cyh0YXJnZXRMaXN0KTtcblxuICAgIC8vIGlmIHRoZXJlIGlzIG9uZSAob3IgbW9yZSkgaW50ZXJzZWN0aW9uc1xuICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy92YXIgaCA9IHRoaXMuY3JlYXRlSGFuZGxlXyhpbnRlcnNlY3RzWzBdLnBvaW50KTtcbiAgICAgICAgLy90aGlzLnNlbGVjdGVkU2hhcGUuYWRkKGgpO1xuICAgICAgICByZXR1cm4gaW50ZXJzZWN0c1swXS5wb2ludDtcbiAgICB9XG5cbn07XG5cbi8qKlxuICogVXBkYXRlIG1vdXNlIHBvc2l0aW9uXG4gKiBAcGFyYW0gZVxuICogQHByaXZhdGVcbiAqL1xuRWRpdG9yUmVuZGVyZXIucHJvdG90eXBlLnVwZGF0ZU1vdXNlXyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLmdldFNpemVfKCk7XG4gICAgdGhpcy5wb2ludGVyLnggPSAoZS5jbGllbnRYIC8gc2l6ZS53aWR0aCkgKiAyIC0gMTtcbiAgICB0aGlzLnBvaW50ZXIueSA9IC0oZS5jbGllbnRZIC8gc2l6ZS5oZWlnaHQpICogMiArIDE7XG59O1xuXG4vKipcbiAqIEdldCB2aWV3cG9ydCBzaXplXG4gKiBAcmV0dXJucyB7Kn1cbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5nZXRTaXplXyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy53b3JsZFJlbmRlcmVyLnJlbmRlcmVyLmdldFNpemUoKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBwb2ludCBpcyBuZWFyIHRvIGFub3RoZXJcbiAqIEBwYXJhbSBwMVxuICogQHBhcmFtIHAyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbkVkaXRvclJlbmRlcmVyLnByb3RvdHlwZS5pc1BvaW50TmVhclRvXyA9IGZ1bmN0aW9uIChwMSwgcDIpIHtcbiAgICB2YXIgZ3V0dGVyID0gMC4wNTtcblxuICAgIC8vY29uc29sZS5sb2coKE1hdGgucG93KHAxLngtcDIueCwgMikgKyBNYXRoLnBvdyhwMS55LXAyLnksIDIpICsgTWF0aC5wb3cocDEuei1wMi56LCAyKSksIE1hdGgucG93KGd1dHRlciwgMikpO1xuXG4gICAgcmV0dXJuIChNYXRoLnBvdyhwMS54LXAyLngsIDIpICsgTWF0aC5wb3cocDEueS1wMi55LCAyKSArIE1hdGgucG93KHAxLnotcDIueiwgMikpIDwgTWF0aC5wb3coZ3V0dGVyLCAyKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3JSZW5kZXJlcjsiLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEV5ZXMgPSB7XG4gIExFRlQ6IDEsXG4gIFJJR0hUOiAyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV5ZXM7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKTtcbnZhciBUV0VFTiA9IHJlcXVpcmUoJ3R3ZWVuLmpzJyk7XG5cbi8vIENvbnN0YW50cyBmb3IgdGhlIGZvY3VzL2JsdXIgYW5pbWF0aW9uLlxudmFyIE5PUk1BTF9TQ0FMRSA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsIDEsIDEpO1xudmFyIEZPQ1VTX1NDQUxFID0gbmV3IFRIUkVFLlZlY3RvcjMoMS4yLCAxLjIsIDEuMik7XG52YXIgRk9DVVNfRFVSQVRJT04gPSAyMDA7XG5cbi8vIENvbnN0YW50cyBmb3IgdGhlIGFjdGl2ZS9pbmFjdGl2ZSBhbmltYXRpb24uXG52YXIgSU5BQ1RJVkVfQ09MT1IgPSBuZXcgVEhSRUUuQ29sb3IoMSwgMSwgMSk7XG52YXIgQUNUSVZFX0NPTE9SID0gbmV3IFRIUkVFLkNvbG9yKDAuOCwgMCwgMCk7XG52YXIgQUNUSVZFX0RVUkFUSU9OID0gMTAwO1xuXG4vLyBDb25zdGFudHMgZm9yIG9wYWNpdHkuXG52YXIgTUFYX0lOTkVSX09QQUNJVFkgPSAwLjg7XG52YXIgTUFYX09VVEVSX09QQUNJVFkgPSAwLjU7XG52YXIgRkFERV9TVEFSVF9BTkdMRV9ERUcgPSAzNTtcbnZhciBGQURFX0VORF9BTkdMRV9ERUcgPSA2MDtcbi8qKlxuICogUmVzcG9uc2libGUgZm9yIHJlY3Rhbmd1bGFyIGhvdCBzcG90cyB0aGF0IHRoZSB1c2VyIGNhbiBpbnRlcmFjdCB3aXRoLlxuICpcbiAqIFNwZWNpZmljIGR1dGllczpcbiAqICAgQWRkaW5nIGFuZCByZW1vdmluZyBob3RzcG90cy5cbiAqICAgUmVuZGVyaW5nIHRoZSBob3RzcG90cyAoZGVidWcgbW9kZSBvbmx5KS5cbiAqICAgTm90aWZ5aW5nIHdoZW4gaG90c3BvdHMgYXJlIGludGVyYWN0ZWQgd2l0aC5cbiAqXG4gKiBFbWl0cyB0aGUgZm9sbG93aW5nIGV2ZW50czpcbiAqICAgY2xpY2sgKGlkKTogYSBob3RzcG90IGlzIGNsaWNrZWQuXG4gKiAgIGZvY3VzIChpZCk6IGEgaG90c3BvdCBpcyBmb2N1c2VkLlxuICogICBibHVyIChpZCk6IGEgaG90c3BvdCBpcyBubyBsb25nZXIgaG92ZXJlZCBvdmVyLlxuICovXG5mdW5jdGlvbiBIb3RzcG90UmVuZGVyZXIod29ybGRSZW5kZXJlcikge1xuICB0aGlzLndvcmxkUmVuZGVyZXIgPSB3b3JsZFJlbmRlcmVyO1xuICB0aGlzLnNjZW5lID0gd29ybGRSZW5kZXJlci5zY2VuZTtcblxuICAvLyBOb3RlOiB0aGlzIGV2ZW50IG11c3QgYmUgYWRkZWQgdG8gZG9jdW1lbnQuYm9keSBhbmQgbm90IHRvIHdpbmRvdyBmb3IgaXQgdG9cbiAgLy8gd29yayBpbnNpZGUgaU9TIGlmcmFtZXMuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgLy8gQmluZCBldmVudHMgZm9yIGhvdHNwb3QgaW50ZXJhY3Rpb24uXG4gIGlmICghVXRpbC5pc01vYmlsZSgpKSB7XG4gICAgLy8gT25seSBlbmFibGUgbW91c2UgZXZlbnRzIG9uIGRlc2t0b3AuXG4gICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duXy5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlXy5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXBfLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgfVxuICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydF8uYmluZCh0aGlzKSwgZmFsc2UpO1xuICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kXy5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbiAgLy8gQWRkIGEgcGxhY2Vob2xkZXIgZm9yIGhvdHNwb3RzLlxuICB0aGlzLmhvdHNwb3RSb290ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gIC8vIEFsaWduIHRoZSBjZW50ZXIgd2l0aCB0aGUgY2VudGVyIG9mIHRoZSBjYW1lcmEgdG9vLlxuICB0aGlzLmhvdHNwb3RSb290LnJvdGF0aW9uLnkgPSBNYXRoLlBJIC8gMjtcbiAgdGhpcy5zY2VuZS5hZGQodGhpcy5ob3RzcG90Um9vdCk7XG5cbiAgLy8gQWxsIGhvdHNwb3QgSURzLlxuICB0aGlzLmhvdHNwb3RzID0ge307XG5cbiAgLy8gQ3VycmVudGx5IHNlbGVjdGVkIGhvdHNwb3RzLlxuICB0aGlzLnNlbGVjdGVkSG90c3BvdHMgPSB7fTtcblxuICAvLyBIb3RzcG90cyB0aGF0IHRoZSBsYXN0IHRvdWNoc3RhcnQgLyBtb3VzZWRvd24gZXZlbnQgaGFwcGVuZWQgZm9yLlxuICB0aGlzLmRvd25Ib3RzcG90cyA9IHt9O1xuXG4gIC8vIEZvciByYXljYXN0aW5nLiBJbml0aWFsaXplIG1vdXNlIHRvIGJlIG9mZiBzY3JlZW4gaW5pdGlhbGx5LlxuICB0aGlzLnBvaW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMigxLCAxKTtcbiAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG59XG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4vKipcbiAqIEBwYXJhbSBwaXRjaCB7TnVtYmVyfSBUaGUgbGF0aXR1ZGUgb2YgY2VudGVyLCBzcGVjaWZpZWQgaW4gZGVncmVlcywgYmV0d2VlblxuICogLTkwIGFuZCA5MCwgd2l0aCAwIGF0IHRoZSBob3Jpem9uLlxuICogQHBhcmFtIHlhdyB7TnVtYmVyfSBUaGUgbG9uZ2l0dWRlIG9mIGNlbnRlciwgc3BlY2lmaWVkIGluIGRlZ3JlZXMsIGJldHdlZW5cbiAqIC0xODAgYW5kIDE4MCwgd2l0aCAwIGF0IHRoZSBpbWFnZSBjZW50ZXIuXG4gKiBAcGFyYW0gcmFkaXVzIHtOdW1iZXJ9IFRoZSByYWRpdXMgb2YgdGhlIGhvdHNwb3QsIHNwZWNpZmllZCBpbiBtZXRlcnMuXG4gKiBAcGFyYW0gZGlzdGFuY2Uge051bWJlcn0gVGhlIGRpc3RhbmNlIG9mIHRoZSBob3RzcG90IGZyb20gY2FtZXJhLCBzcGVjaWZpZWRcbiAqIGluIG1ldGVycy5cbiAqIEBwYXJhbSBob3RzcG90SWQge1N0cmluZ30gVGhlIElEIG9mIHRoZSBob3RzcG90LlxuICovXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHBpdGNoLCB5YXcsIHJhZGl1cywgZGlzdGFuY2UsIGlkLCBjdXN0b21TaGFwZSkge1xuICAvLyBJZiBhIGhvdHNwb3QgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGlzIElELCBzdG9wLlxuICBpZiAodGhpcy5ob3RzcG90c1tpZF0pIHtcbiAgICAvLyBUT0RPOiBQcm9wZXIgZXJyb3IgcmVwb3J0aW5nLlxuICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHQgdG8gYWRkIGhvdHNwb3Qgd2l0aCBleGlzdGluZyBpZCAlcy4nLCBpZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhvdHNwb3Q7XG4gIGlmKGN1c3RvbVNoYXBlKSB7XG5cbiAgICAgIGhvdHNwb3QgPSB0aGlzLmNyZWF0ZUN1c3RvbUhvdHNwb3RfKGN1c3RvbVNoYXBlLCBkaXN0YW5jZSk7XG4gICAgICBob3RzcG90Lm5hbWUgPSBpZDtcblxuICAgICAgLy8gUG9zaXRpb24gdGhlIGhvdHNwb3QgYmFzZWQgb24gdGhlIHBpdGNoIGFuZCB5YXcgc3BlY2lmaWVkLlxuICAgICAgLy92YXIgcXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgICAvL3F1YXQuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcihUSFJFRS5NYXRoLmRlZ1RvUmFkKHBpdGNoKSwgVEhSRUUuTWF0aC5kZWdUb1JhZCh5YXcpLCAwKSk7XG4gICAgICAvL2hvdHNwb3QucG9zaXRpb24uYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xuICAgICAgLy9ob3RzcG90Lmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygpKTtcblxuICAgICAgdmFyIHIgPSAxO1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB5YXc7XG4gICAgICB2YXIgcGhpID0gTWF0aC5QSSAqIHBpdGNoO1xuXG4gICAgICB2YXIgX3ggPSBNYXRoLmNvcyh0aGV0YSkgKiBNYXRoLnNpbihwaGkpICogcjtcbiAgICAgIHZhciBfeSA9IE1hdGguc2luKHRoZXRhKSAqIE1hdGguc2luKHBoaSkgKiByO1xuICAgICAgdmFyIF96ID0gLU1hdGguY29zKHBoaSkgKiByO1xuXG4gICAgICBob3RzcG90LnBvc2l0aW9uLnogPSBfejtcbiAgICAgIGhvdHNwb3QucG9zaXRpb24ueCA9IF94O1xuICAgICAgaG90c3BvdC5wb3NpdGlvbi55ID0gX3k7XG4gICAgICBob3RzcG90Lmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygpKTtcblxuICAgICAgdGhpcy5ob3RzcG90Um9vdC5hZGQoaG90c3BvdCk7XG4gICAgICB0aGlzLmhvdHNwb3RzW2lkXSA9IGhvdHNwb3Q7XG5cbiAgfSBlbHNlIHtcbiAgICAgIGhvdHNwb3QgPSB0aGlzLmNyZWF0ZUhvdHNwb3RfKHJhZGl1cywgZGlzdGFuY2UpO1xuICAgICAgaG90c3BvdC5uYW1lID0gaWQ7XG5cbiAgICAgIC8vIFBvc2l0aW9uIHRoZSBob3RzcG90IGJhc2VkIG9uIHRoZSBwaXRjaCBhbmQgeWF3IHNwZWNpZmllZC5cbiAgICAgIHZhciBxdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgIHF1YXQuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcihUSFJFRS5NYXRoLmRlZ1RvUmFkKHBpdGNoKSwgVEhSRUUuTWF0aC5kZWdUb1JhZCh5YXcpLCAwKSk7XG4gICAgICBob3RzcG90LnBvc2l0aW9uLmFwcGx5UXVhdGVybmlvbihxdWF0KTtcbiAgICAgIGhvdHNwb3QubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xuXG4gICAgICB0aGlzLmhvdHNwb3RSb290LmFkZChob3RzcG90KTtcbiAgICAgIHRoaXMuaG90c3BvdHNbaWRdID0gaG90c3BvdDtcbiAgfVxuXG59XG5cbi8qKlxuICogUmVtb3ZlcyBhIGhvdHNwb3QgYmFzZWQgb24gdGhlIElELlxuICpcbiAqIEBwYXJhbSBJRCB7U3RyaW5nfSBJZGVudGlmaWVyIG9mIHRoZSBob3RzcG90IHRvIGJlIHJlbW92ZWQuXG4gKi9cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaWQpIHtcbiAgLy8gSWYgdGhlcmUncyBubyBob3RzcG90IHdpdGggdGhpcyBJRCwgZmFpbC5cbiAgaWYgKCF0aGlzLmhvdHNwb3RzW2lkXSkgeyBcbiAgICAvLyBUT0RPOiBQcm9wZXIgZXJyb3IgcmVwb3J0aW5nLlxuICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHQgdG8gcmVtb3ZlIG5vbi1leGlzdGluZyBob3RzcG90IHdpdGggaWQgJXMuJywgaWQpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBSZW1vdmUgdGhlIG1lc2ggZnJvbSB0aGUgc2NlbmUuXG4gIHRoaXMuaG90c3BvdFJvb3QucmVtb3ZlKHRoaXMuaG90c3BvdHNbaWRdKTtcblxuICAvLyBJZiB0aGlzIGhvdHNwb3Qgd2FzIHNlbGVjdGVkLCBtYWtlIHN1cmUgaXQgZ2V0cyB1bnNlbGVjdGVkLlxuICBkZWxldGUgdGhpcy5zZWxlY3RlZEhvdHNwb3RzW2lkXTtcbiAgZGVsZXRlIHRoaXMuZG93bkhvdHNwb3RzW2lkXTtcbiAgZGVsZXRlIHRoaXMuaG90c3BvdHNbaWRdO1xuICB0aGlzLmVtaXQoJ2JsdXInLCBpZCk7XG59O1xuXG4vKipcbiAqIENsZWFycyBhbGwgaG90c3BvdHMgZnJvbSB0aGUgcGFuby4gT2Z0ZW4gY2FsbGVkIHdoZW4gY2hhbmdpbmcgcGFub3MuXG4gKi9cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuY2xlYXJBbGwgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5ob3RzcG90cykge1xuICAgIHRoaXMucmVtb3ZlKGlkKTtcbiAgfVxufTtcblxuSG90c3BvdFJlbmRlcmVyLnByb3RvdHlwZS5nZXRDb3VudCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY291bnQgPSAwO1xuICBmb3IgKHZhciBpZCBpbiB0aGlzLmhvdHNwb3RzKSB7XG4gICAgY291bnQgKz0gMTtcbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGNhbWVyYSkge1xuICBpZiAodGhpcy53b3JsZFJlbmRlcmVyLmlzVlJNb2RlKCkpIHtcbiAgICB0aGlzLnBvaW50ZXIuc2V0KDAsIDApO1xuICB9XG4gIC8vIFVwZGF0ZSB0aGUgcGlja2luZyByYXkgd2l0aCB0aGUgY2FtZXJhIGFuZCBtb3VzZSBwb3NpdGlvbi5cbiAgdGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLnBvaW50ZXIsIGNhbWVyYSk7XHRcblxuICAvLyBGYWRlIGhvdHNwb3RzIG91dCBpZiB0aGV5IGFyZSByZWFsbHkgZmFyIGZyb20gY2VudGVyIHRvIGF2b2lkIG92ZXJseVxuICAvLyBkaXN0b3J0ZWQgdmlzdWFscy5cbiAgdGhpcy5mYWRlT2ZmQ2VudGVySG90c3BvdHNfKGNhbWVyYSk7XG5cbiAgdmFyIGhvdHNwb3RzID0gdGhpcy5ob3RzcG90Um9vdC5jaGlsZHJlbjtcblxuICAvLyBHbyB0aHJvdWdoIGFsbCBob3RzcG90cyB0byBzZWUgaWYgdGhleSBhcmUgY3VycmVudGx5IHNlbGVjdGVkLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvdHNwb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGhvdHNwb3QgPSBob3RzcG90c1tpXTtcbiAgICAvL2hvdHNwb3QubG9va0F0KGNhbWVyYS5wb3NpdGlvbik7XG4gICAgdmFyIGlkID0gaG90c3BvdC5uYW1lO1xuICAgIC8vIENoZWNrIGlmIGhvdHNwb3QgaXMgaW50ZXJzZWN0ZWQgd2l0aCB0aGUgcGlja2luZyByYXkuXG4gICAgdmFyIGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKGhvdHNwb3QuY2hpbGRyZW4pO1xuICAgIHZhciBpc0ludGVyc2VjdGVkID0gKGludGVyc2VjdHMubGVuZ3RoID4gMCk7XG5cbiAgICAvLyBJZiBuZXdseSBzZWxlY3RlZCwgZW1pdCBhIGZvY3VzIGV2ZW50LlxuICAgIGlmIChpc0ludGVyc2VjdGVkICYmICF0aGlzLnNlbGVjdGVkSG90c3BvdHNbaWRdKSB7XG4gICAgICB0aGlzLmVtaXQoJ2ZvY3VzJywgaWQpO1xuICAgICAgdGhpcy5mb2N1c18oaWQpO1xuICAgIH1cbiAgICAvLyBJZiBubyBsb25nZXIgc2VsZWN0ZWQsIGVtaXQgYSBibHVyIGV2ZW50LlxuICAgIGlmICghaXNJbnRlcnNlY3RlZCAmJiB0aGlzLnNlbGVjdGVkSG90c3BvdHNbaWRdKSB7XG4gICAgICB0aGlzLmVtaXQoJ2JsdXInLCBpZCk7XG4gICAgICB0aGlzLmJsdXJfKGlkKTtcbiAgICB9XG4gICAgLy8gVXBkYXRlIHRoZSBzZXQgb2Ygc2VsZWN0ZWQgaG90c3BvdHMuXG4gICAgaWYgKGlzSW50ZXJzZWN0ZWQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRIb3RzcG90c1tpZF0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5zZWxlY3RlZEhvdHNwb3RzW2lkXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVG9nZ2xlIHdoZXRoZXIgb3Igbm90IGhvdHNwb3RzIGFyZSB2aXNpYmxlLlxuICovXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLnNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihpc1Zpc2libGUpIHtcbiAgdGhpcy5ob3RzcG90Um9vdC52aXNpYmxlID0gaXNWaXNpYmxlO1xufTtcblxuSG90c3BvdFJlbmRlcmVyLnByb3RvdHlwZS5vblRvdWNoU3RhcnRfID0gZnVuY3Rpb24oZSkge1xuICAvLyBJbiBWUiBtb2RlLCBkb24ndCB0b3VjaCB0aGUgcG9pbnRlciBwb3NpdGlvbi5cbiAgaWYgKCF0aGlzLndvcmxkUmVuZGVyZXIuaXNWUk1vZGUoKSkge1xuICAgIHRoaXMudXBkYXRlVG91Y2hfKGUpO1xuICB9XG5cbiAgLy8gRm9yY2UgYSBjYW1lcmEgdXBkYXRlIHRvIHNlZSBpZiBhbnkgaG90c3BvdHMgd2VyZSBzZWxlY3RlZC5cbiAgdGhpcy51cGRhdGUodGhpcy53b3JsZFJlbmRlcmVyLmNhbWVyYSk7XG5cbiAgdGhpcy5kb3duSG90c3BvdHMgPSB7fTtcbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5zZWxlY3RlZEhvdHNwb3RzKSB7XG4gICAgdGhpcy5kb3duSG90c3BvdHNbaWRdID0gdHJ1ZTtcbiAgICB0aGlzLmRvd25fKGlkKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLm9uVG91Y2hFbmRfID0gZnVuY3Rpb24oZSkge1xuICAvLyBJZiBubyBob3RzcG90cyBhcmUgcHJlc3NlZCwgZW1pdCBhbiBlbXB0eSBjbGljayBldmVudC5cbiAgaWYgKFV0aWwuaXNFbXB0eU9iamVjdCh0aGlzLmRvd25Ib3RzcG90cykpIHtcbiAgICB0aGlzLmVtaXQoJ2NsaWNrJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT25seSBlbWl0IGEgY2xpY2sgaWYgdGhlIGZpbmdlciB3YXMgZG93biBvbiB0aGUgc2FtZSBob3RzcG90IGJlZm9yZS5cbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5kb3duSG90c3BvdHMpIHtcbiAgICB0aGlzLmVtaXQoJ2NsaWNrJywgaWQpO1xuICAgIHRoaXMudXBfKGlkKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUudXBkYXRlVG91Y2hfID0gZnVuY3Rpb24oZSkge1xuICB2YXIgc2l6ZSA9IHRoaXMuZ2V0U2l6ZV8oKTtcbiAgdmFyIHRvdWNoID0gZS50b3VjaGVzWzBdO1xuXHR0aGlzLnBvaW50ZXIueCA9ICh0b3VjaC5jbGllbnRYIC8gc2l6ZS53aWR0aCkgKiAyIC0gMTtcblx0dGhpcy5wb2ludGVyLnkgPSAtICh0b3VjaC5jbGllbnRZIC8gc2l6ZS5oZWlnaHQpICogMiArIDE7XHRcbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUub25Nb3VzZURvd25fID0gZnVuY3Rpb24oZSkge1xuICB0aGlzLnVwZGF0ZU1vdXNlXyhlKTtcblxuICB0aGlzLmRvd25Ib3RzcG90cyA9IHt9O1xuICBmb3IgKHZhciBpZCBpbiB0aGlzLnNlbGVjdGVkSG90c3BvdHMpIHtcbiAgICB0aGlzLmRvd25Ib3RzcG90c1tpZF0gPSB0cnVlO1xuICAgIHRoaXMuZG93bl8oaWQpO1xuICB9XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLm9uTW91c2VNb3ZlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy51cGRhdGVNb3VzZV8oZSk7XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLm9uTW91c2VVcF8gPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMudXBkYXRlTW91c2VfKGUpO1xuXG4gIC8vIElmIG5vIGhvdHNwb3RzIGFyZSBwcmVzc2VkLCBlbWl0IGFuIGVtcHR5IGNsaWNrIGV2ZW50LlxuICBpZiAoVXRpbC5pc0VtcHR5T2JqZWN0KHRoaXMuZG93bkhvdHNwb3RzKSkge1xuICAgIHRoaXMuZW1pdCgnY2xpY2snLCBudWxsLCB0aGlzLnBvaW50ZXIueCwgdGhpcy5wb2ludGVyLnkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIE9ubHkgZW1pdCBhIGNsaWNrIGlmIHRoZSBtb3VzZSB3YXMgZG93biBvbiB0aGUgc2FtZSBob3RzcG90IGJlZm9yZS5cbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5zZWxlY3RlZEhvdHNwb3RzKSB7XG4gICAgaWYgKGlkIGluIHRoaXMuZG93bkhvdHNwb3RzKSB7XG4gICAgICB0aGlzLmVtaXQoJ2NsaWNrJywgaWQsIHRoaXMucG9pbnRlci54LCB0aGlzLnBvaW50ZXIueSk7XG4gICAgICB0aGlzLnVwXyhpZCk7XG4gICAgfVxuICB9XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLnVwZGF0ZU1vdXNlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIHNpemUgPSB0aGlzLmdldFNpemVfKCk7XG5cdHRoaXMucG9pbnRlci54ID0gKGUuY2xpZW50WCAvIHNpemUud2lkdGgpICogMiAtIDE7XG5cdHRoaXMucG9pbnRlci55ID0gLSAoZS5jbGllbnRZIC8gc2l6ZS5oZWlnaHQpICogMiArIDE7XHRcbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuZ2V0U2l6ZV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbnZhcyA9IHRoaXMud29ybGRSZW5kZXJlci5yZW5kZXJlci5kb21FbGVtZW50O1xuICByZXR1cm4gdGhpcy53b3JsZFJlbmRlcmVyLnJlbmRlcmVyLmdldFNpemUoKTtcbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlSG90c3BvdF8gPSBmdW5jdGlvbihyYWRpdXMsIGRpc3RhbmNlKSB7XG4gIHZhciBpbm5lckdlb21ldHJ5ID0gbmV3IFRIUkVFLkNpcmNsZUdlb21ldHJ5KHJhZGl1cywgMzIpO1xuXG4gIHZhciBpbm5lck1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICBjb2xvcjogMHhmZmZmZmYsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgIG9wYWNpdHk6IE1BWF9JTk5FUl9PUEFDSVRZLCBkZXB0aFRlc3Q6IGZhbHNlXG4gIH0pO1xuXG4gIHZhciBpbm5lciA9IG5ldyBUSFJFRS5NZXNoKGlubmVyR2VvbWV0cnksIGlubmVyTWF0ZXJpYWwpO1xuICBpbm5lci5uYW1lID0gJ2lubmVyJztcblxuICB2YXIgb3V0ZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG4gICAgY29sb3I6IDB4ZmZmZmZmLCBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLCB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICBvcGFjaXR5OiBNQVhfT1VURVJfT1BBQ0lUWSwgZGVwdGhUZXN0OiBmYWxzZVxuICB9KTtcbiAgdmFyIG91dGVyR2VvbWV0cnkgPSBuZXcgVEhSRUUuUmluZ0dlb21ldHJ5KHJhZGl1cyAqIDAuODUsIHJhZGl1cywgMzIpO1xuICB2YXIgb3V0ZXIgPSBuZXcgVEhSRUUuTWVzaChvdXRlckdlb21ldHJ5LCBvdXRlck1hdGVyaWFsKTtcbiAgb3V0ZXIubmFtZSA9ICdvdXRlcic7XG5cbiAgLy8gUG9zaXRpb24gYXQgdGhlIGV4dHJlbWUgZW5kIG9mIHRoZSBzcGhlcmUuXG4gIHZhciBob3RzcG90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gIGhvdHNwb3QucG9zaXRpb24ueiA9IC1kaXN0YW5jZTtcbiAgaG90c3BvdC5zY2FsZS5zZXQoTk9STUFMX1NDQUxFKTtcblxuICBob3RzcG90LmFkZChpbm5lcik7XG4gIGhvdHNwb3QuYWRkKG91dGVyKTtcblxuICByZXR1cm4gaG90c3BvdDtcbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ3VzdG9tSG90c3BvdF8gPSBmdW5jdGlvbihwb2ludHMsIGRpc3RhbmNlKSB7XG4gICAgaWYocG9pbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHNoYXBlXG4gICAgdmFyIHNoYXBlQm91bmRzID0gbmV3IFRIUkVFLlNoYXBlKCk7XG4gICAgc2hhcGVCb3VuZHMubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7IC8vIHN0YXJ0IHBvaW50XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2hhcGVCb3VuZHMubGluZVRvKHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSk7IC8vIGxpbmUgdG8gbmV4dCBwb2ludFxuICAgIH1cblxuICAgIC8vIGlubmVyIHNoYXBlXG4gICAgdmFyIGlubmVyR2VvbWV0cnkgPSBuZXcgVEhSRUUuU2hhcGVHZW9tZXRyeShzaGFwZUJvdW5kcyk7XG4gICAgdmFyIGlubmVyTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICBjb2xvcjogMHhmZmZmZmYsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBvcGFjaXR5OiBNQVhfSU5ORVJfT1BBQ0lUWSwgZGVwdGhUZXN0OiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIGlubmVyID0gbmV3IFRIUkVFLk1lc2goaW5uZXJHZW9tZXRyeSwgaW5uZXJNYXRlcmlhbCk7XG4gICAgaW5uZXIubmFtZSA9ICdpbm5lcic7XG5cbiAgICAvLyBvdXRlciBzaGFwZVxuICAgIHZhciBvdXRlckdlb21ldHJ5ID0gc2hhcGVCb3VuZHMuY3JlYXRlUG9pbnRzR2VvbWV0cnkoKTtcbiAgICB2YXIgb3V0ZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgge1xuICAgICAgICBjb2xvcjogMHhmZmZmZmYsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBvcGFjaXR5OiBNQVhfT1VURVJfT1BBQ0lUWSwgZGVwdGhUZXN0OiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIG91dGVyID0gbmV3IFRIUkVFLkxpbmUoIG91dGVyR2VvbWV0cnksIG91dGVyTWF0ZXJpYWwgKTtcbiAgICBvdXRlci5uYW1lID0gJ291dGVyJztcblxuICAgIC8vIFBvc2l0aW9uIGF0IHRoZSBleHRyZW1lIGVuZCBvZiB0aGUgc3BoZXJlLlxuICAgIHZhciBob3RzcG90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgaG90c3BvdC5wb3NpdGlvbi56ID0gLWRpc3RhbmNlO1xuICAgIGhvdHNwb3Quc2NhbGUuc2V0KE5PUk1BTF9TQ0FMRSk7XG5cbiAgICBob3RzcG90LmFkZChpbm5lcik7XG4gICAgaG90c3BvdC5hZGQob3V0ZXIpO1xuXG4gICAgY29uc29sZS5sb2coJ0NpcmNsZUhvdHNwb3QnLCBob3RzcG90KTtcblxuICAgIHJldHVybiBob3RzcG90O1xufTtcblxuLyoqXG4gKiBMYXJnZSBhc3BlY3QgcmF0aW9zIHRlbmQgdG8gY2F1c2UgdmlzdWFsbHkgamFycmluZyBkaXN0b3J0aW9ucyBvbiB0aGUgc2lkZXMuXG4gKiBIZXJlIHdlIGZhZGUgaG90c3BvdHMgb3V0IHRvIGF2b2lkIHRoZW0uXG4gKi9cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuZmFkZU9mZkNlbnRlckhvdHNwb3RzXyA9IGZ1bmN0aW9uKGNhbWVyYSkge1xuICB2YXIgbG9va0F0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMSwgMCwgMCk7XG4gIGxvb2tBdC5hcHBseVF1YXRlcm5pb24oY2FtZXJhLnF1YXRlcm5pb24pO1xuICAvLyBUYWtlIGludG8gYWNjb3VudCB0aGUgY2FtZXJhIHBhcmVudCB0b28uXG4gIGxvb2tBdC5hcHBseVF1YXRlcm5pb24oY2FtZXJhLnBhcmVudC5xdWF0ZXJuaW9uKTtcblxuICAvLyBHbyB0aHJvdWdoIGVhY2ggaG90c3BvdC4gQ2FsY3VsYXRlIGhvdyBmYXIgb2ZmIGNlbnRlciBpdCBpcy5cbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5ob3RzcG90cykge1xuICAgIHZhciBob3RzcG90ID0gdGhpcy5ob3RzcG90c1tpZF07XG4gICAgdmFyIGFuZ2xlID0gaG90c3BvdC5wb3NpdGlvbi5hbmdsZVRvKGxvb2tBdCk7XG4gICAgdmFyIGFuZ2xlRGVnID0gVEhSRUUuTWF0aC5yYWRUb0RlZyhhbmdsZSk7XG4gICAgdmFyIGlzVmlzaWJsZSA9IGFuZ2xlRGVnIDwgNDU7XG4gICAgdmFyIG9wYWNpdHk7XG4gICAgaWYgKGFuZ2xlRGVnIDwgRkFERV9TVEFSVF9BTkdMRV9ERUcpIHtcbiAgICAgIG9wYWNpdHkgPSAxO1xuICAgIH0gZWxzZSBpZiAoYW5nbGVEZWcgPiBGQURFX0VORF9BTkdMRV9ERUcpIHtcbiAgICAgIG9wYWNpdHkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBhcmUgaW4gdGhlIGNhc2UgU1RBUlQgPCBhbmdsZSA8IEVORC4gTGluZWFybHkgaW50ZXJwb2xhdGUuXG4gICAgICB2YXIgcmFuZ2UgPSBGQURFX0VORF9BTkdMRV9ERUcgLSBGQURFX1NUQVJUX0FOR0xFX0RFRztcbiAgICAgIHZhciB2YWx1ZSA9IEZBREVfRU5EX0FOR0xFX0RFRyAtIGFuZ2xlRGVnO1xuICAgICAgb3BhY2l0eSA9IHZhbHVlIC8gcmFuZ2U7XG4gICAgfVxuXG4gICAgLy8gT3BhY2l0eSBhIGZ1bmN0aW9uIG9mIGFuZ2xlLiBJZiBhbmdsZSBpcyBsYXJnZSwgb3BhY2l0eSBpcyB6ZXJvLiBBdCBzb21lXG4gICAgLy8gcG9pbnQsIHJhbXAgb3BhY2l0eSBkb3duLlxuICAgIHRoaXMuc2V0T3BhY2l0eV8oaWQsIG9wYWNpdHkpO1xuICB9XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLmZvY3VzXyA9IGZ1bmN0aW9uKGlkKSB7XG4gIHZhciBob3RzcG90ID0gdGhpcy5ob3RzcG90c1tpZF07XG5cbiAgLy8gVHdlZW4gc2NhbGUgb2YgaG90c3BvdC5cbiAgdGhpcy50d2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbihob3RzcG90LnNjYWxlKS50byhGT0NVU19TQ0FMRSwgRk9DVVNfRFVSQVRJT04pXG4gICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQpXG4gICAgICAuc3RhcnQoKTtcbn07XG5cbkhvdHNwb3RSZW5kZXJlci5wcm90b3R5cGUuYmx1cl8gPSBmdW5jdGlvbihpZCkge1xuICB2YXIgaG90c3BvdCA9IHRoaXMuaG90c3BvdHNbaWRdO1xuXG4gIHRoaXMudHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oaG90c3BvdC5zY2FsZSkudG8oTk9STUFMX1NDQUxFLCBGT0NVU19EVVJBVElPTilcbiAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLlF1YWRyYXRpYy5Jbk91dClcbiAgICAgIC5zdGFydCgpO1xufTtcblxuSG90c3BvdFJlbmRlcmVyLnByb3RvdHlwZS5kb3duXyA9IGZ1bmN0aW9uKGlkKSB7XG4gIC8vIEJlY29tZSBhY3RpdmUuXG4gIHZhciBob3RzcG90ID0gdGhpcy5ob3RzcG90c1tpZF07XG4gIHZhciBvdXRlciA9IGhvdHNwb3QuZ2V0T2JqZWN0QnlOYW1lKCdpbm5lcicpO1xuXG4gIHRoaXMudHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4ob3V0ZXIubWF0ZXJpYWwuY29sb3IpLnRvKEFDVElWRV9DT0xPUiwgQUNUSVZFX0RVUkFUSU9OKVxuICAgICAgLnN0YXJ0KCk7XG59O1xuXG5Ib3RzcG90UmVuZGVyZXIucHJvdG90eXBlLnVwXyA9IGZ1bmN0aW9uKGlkKSB7XG4gIC8vIEJlY29tZSBpbmFjdGl2ZS5cbiAgdmFyIGhvdHNwb3QgPSB0aGlzLmhvdHNwb3RzW2lkXTtcbiAgdmFyIG91dGVyID0gaG90c3BvdC5nZXRPYmplY3RCeU5hbWUoJ2lubmVyJyk7XG5cbiAgdGhpcy50d2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihvdXRlci5tYXRlcmlhbC5jb2xvcikudG8oSU5BQ1RJVkVfQ09MT1IsIEFDVElWRV9EVVJBVElPTilcbiAgICAgIC5zdGFydCgpO1xufTtcblxuSG90c3BvdFJlbmRlcmVyLnByb3RvdHlwZS5zZXRPcGFjaXR5XyA9IGZ1bmN0aW9uKGlkLCBvcGFjaXR5KSB7XG4gIHZhciBob3RzcG90ID0gdGhpcy5ob3RzcG90c1tpZF07XG4gIHZhciBvdXRlciA9IGhvdHNwb3QuZ2V0T2JqZWN0QnlOYW1lKCdvdXRlcicpO1xuICB2YXIgaW5uZXIgPSBob3RzcG90LmdldE9iamVjdEJ5TmFtZSgnaW5uZXInKTtcblxuICBvdXRlci5tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eSAqIE1BWF9PVVRFUl9PUEFDSVRZO1xuICBpbm5lci5tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eSAqIE1BWF9JTk5FUl9PUEFDSVRZO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIb3RzcG90UmVuZGVyZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKTtcbnZhciBNZXNzYWdlID0gcmVxdWlyZSgnLi4vbWVzc2FnZScpO1xudmFyIFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cblxuLyoqXG4gKiBTaXRzIGluIGFuIGVtYmVkZGVkIGlmcmFtZSwgcmVjZWl2aW5nIG1lc3NhZ2VzIGZyb20gYSBjb250YWluaW5nXG4gKiBpRnJhbWUuIFRoaXMgZmFjaWxpdGF0ZXMgYW4gQVBJIHdoaWNoIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG4gKlxuICogICAgUGxheWluZyBhbmQgcGF1c2luZyBjb250ZW50LlxuICogICAgQWRkaW5nIGhvdHNwb3RzLlxuICogICAgU2VuZGluZyBtZXNzYWdlcyBiYWNrIHRvIHRoZSBjb250YWluaW5nIGlmcmFtZSB3aGVuIGhvdHNwb3QgaXMgY2xpY2tlZFxuICogICAgU2VuZGluZyBhbmFseXRpY3MgZXZlbnRzIHRvIGNvbnRhaW5pbmcgaWZyYW1lLlxuICpcbiAqIE5vdGU6IHRoaXMgc2NyaXB0IHVzZWQgdG8gYWxzbyByZXNwb25kIHRvIHN5bnRoZXRpYyBkZXZpY2Vtb3Rpb24gZXZlbnRzLCBidXRcbiAqIG5vIGxvbmdlciBkb2VzIHNvLiBUaGlzIGlzIGJlY2F1c2UgYXMgb2YgaU9TIDkuMiwgU2FmYXJpIGRpc2FsbG93cyBsaXN0ZW5pbmdcbiAqIGZvciBkZXZpY2Vtb3Rpb24gZXZlbnRzIHdpdGhpbiBjcm9zcy1kZXZpY2UgaWZyYW1lcy4gVG8gd29yayBhcm91bmQgdGhpcywgdGhlXG4gKiB3ZWJ2ci1wb2x5ZmlsbCByZXNwb25kcyB0byB0aGUgcG9zdE1lc3NhZ2UgZXZlbnQgY29udGFpbmluZyBkZXZpY2Vtb3Rpb25cbiAqIGluZm9ybWF0aW9uIChzZW50IGJ5IHRoZSBpZnJhbWUtbWVzc2FnZS1zZW5kZXIgaW4gdGhlIFZSIFZpZXcgQVBJKS5cbiAqL1xuZnVuY3Rpb24gSUZyYW1lTWVzc2FnZVJlY2VpdmVyKCkge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub25NZXNzYWdlXy5iaW5kKHRoaXMpLCBmYWxzZSk7XG59XG5JRnJhbWVNZXNzYWdlUmVjZWl2ZXIucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5JRnJhbWVNZXNzYWdlUmVjZWl2ZXIucHJvdG90eXBlLm9uTWVzc2FnZV8gPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoVXRpbC5pc0RlYnVnKCkpIHtcbiAgICBjb25zb2xlLmxvZygnb25NZXNzYWdlXycsIGV2ZW50KTtcbiAgfVxuXG4gIHZhciBtZXNzYWdlID0gZXZlbnQuZGF0YTtcbiAgdmFyIHR5cGUgPSBtZXNzYWdlLnR5cGUudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGRhdGEgPSBtZXNzYWdlLmRhdGE7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBNZXNzYWdlLlNFVF9DT05URU5UOlxuICAgIGNhc2UgTWVzc2FnZS5TRVRfVk9MVU1FOlxuICAgIGNhc2UgTWVzc2FnZS5BRERfSE9UU1BPVDpcbiAgICBjYXNlIE1lc3NhZ2UuUExBWTpcbiAgICBjYXNlIE1lc3NhZ2UuUEFVU0U6XG4gICAgY2FzZSBNZXNzYWdlLkdFVF9QT1NJVElPTjpcbiAgICBjYXNlIE1lc3NhZ2UuU1RBUlRfRFJBVzpcbiAgICBjYXNlIE1lc3NhZ2UuRU5EX0RSQVc6XG4gICAgY2FzZSBNZXNzYWdlLkFERF9TSEFQRTpcbiAgICBjYXNlIE1lc3NhZ2UuRURJVF9TSEFQRTpcbiAgICBjYXNlIE1lc3NhZ2UuUkVNT1ZFX1NIQVBFOlxuICAgIGNhc2UgTWVzc2FnZS5BRERfU0hBUEVfS0VZRlJBTUU6XG4gICAgY2FzZSBNZXNzYWdlLkVESVRfU0hBUEVfS0VZRlJBTUU6XG4gICAgY2FzZSBNZXNzYWdlLlJFTU9WRV9TSEFQRV9LRVlGUkFNRTpcbiAgICBjYXNlIE1lc3NhZ2UuU0VUX0NVUlJFTlRfVElNRTpcbiAgICBjYXNlIE1lc3NhZ2UuU0VFSzpcbiAgICAgIHRoaXMuZW1pdCh0eXBlLCBkYXRhKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoVXRpbC5pc0RlYnVnKCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdHb3QgdW5rbm93biBtZXNzYWdlIG9mIHR5cGUgJXMgZnJvbSAlcycsIG1lc3NhZ2UudHlwZSwgbWVzc2FnZS5vcmlnaW4pO1xuICAgICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IElGcmFtZU1lc3NhZ2VSZWNlaXZlcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogU2hvd3MgYSAyRCBsb2FkaW5nIGluZGljYXRvciB3aGlsZSB2YXJpb3VzIHBpZWNlcyBvZiBFbWJlZFZSIGxvYWQuXG4gKi9cbmZ1bmN0aW9uIExvYWRpbmdJbmRpY2F0b3IoKSB7XG4gIHRoaXMuZWwgPSB0aGlzLmJ1aWxkXygpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICB0aGlzLnNob3coKTtcbn1cblxuTG9hZGluZ0luZGljYXRvci5wcm90b3R5cGUuYnVpbGRfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzID0gb3ZlcmxheS5zdHlsZTtcbiAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIHMudG9wID0gMDtcbiAgcy5sZWZ0ID0gMDtcbiAgcy53aWR0aCA9ICcxMDAlJztcbiAgcy5oZWlnaHQgPSAnMTAwJSc7XG4gIHMuYmFja2dyb3VuZCA9ICcjZWVlJztcbiAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWcuc3JjID0gJ2ltYWdlcy9sb2FkaW5nLmdpZic7XG4gIHZhciBzID0gaW1nLnN0eWxlO1xuICBzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgcy50b3AgPSAnNTAlJztcbiAgcy5sZWZ0ID0gJzUwJSc7XG4gIHMudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSc7XG5cbiAgb3ZlcmxheS5hcHBlbmRDaGlsZChpbWcpO1xuICByZXR1cm4gb3ZlcmxheTtcbn07XG5cbkxvYWRpbmdJbmRpY2F0b3IucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxuTG9hZGluZ0luZGljYXRvci5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nSW5kaWNhdG9yO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gSW5pdGlhbGl6ZSB0aGUgbG9hZGluZyBpbmRpY2F0b3IgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSB0byBnaXZlIHRoZSB1c2VyXG4vLyBpbW1lZGlhdGUgZmVlZGJhY2suXG52YXIgTG9hZGluZ0luZGljYXRvciA9IHJlcXVpcmUoJy4vbG9hZGluZy1pbmRpY2F0b3InKTtcbnZhciBsb2FkSW5kaWNhdG9yID0gbmV3IExvYWRpbmdJbmRpY2F0b3IoKTtcblxudmFyIEVTNlByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpO1xuLy8gUG9seWZpbGwgRVM2IHByb21pc2VzIGZvciBJRS5cbkVTNlByb21pc2UucG9seWZpbGwoKTtcblxudmFyIElGcmFtZU1lc3NhZ2VSZWNlaXZlciA9IHJlcXVpcmUoJy4vaWZyYW1lLW1lc3NhZ2UtcmVjZWl2ZXInKTtcbnZhciBNZXNzYWdlID0gcmVxdWlyZSgnLi4vbWVzc2FnZScpO1xudmFyIFNjZW5lSW5mbyA9IHJlcXVpcmUoJy4vc2NlbmUtaW5mbycpO1xudmFyIFN0YXRzID0gcmVxdWlyZSgnLi4vLi4vbm9kZV9tb2R1bGVzL3N0YXRzLWpzL2J1aWxkL3N0YXRzLm1pbicpO1xudmFyIFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgV2ViVlJQb2x5ZmlsbCA9IHJlcXVpcmUoJ3dlYnZyLXBvbHlmaWxsJyk7XG52YXIgV29ybGRSZW5kZXJlciA9IHJlcXVpcmUoJy4vd29ybGQtcmVuZGVyZXInKTtcblxudmFyIHJlY2VpdmVyID0gbmV3IElGcmFtZU1lc3NhZ2VSZWNlaXZlcigpO1xucmVjZWl2ZXIub24oTWVzc2FnZS5QTEFZLCBvblBsYXlSZXF1ZXN0KTtcbnJlY2VpdmVyLm9uKE1lc3NhZ2UuUEFVU0UsIG9uUGF1c2VSZXF1ZXN0KTtcbnJlY2VpdmVyLm9uKE1lc3NhZ2UuQUREX0hPVFNQT1QsIG9uQWRkSG90c3BvdCk7XG5yZWNlaXZlci5vbihNZXNzYWdlLlNFVF9DT05URU5ULCBvblNldENvbnRlbnQpO1xucmVjZWl2ZXIub24oTWVzc2FnZS5TRVRfVk9MVU1FLCBvblNldFZvbHVtZSk7XG5yZWNlaXZlci5vbihNZXNzYWdlLkdFVF9QT1NJVElPTiwgb25HZXRQb3NpdGlvbik7XG5yZWNlaXZlci5vbihNZXNzYWdlLlNUQVJUX0RSQVcsIG9uU3RhcnREcmF3KTtcbnJlY2VpdmVyLm9uKE1lc3NhZ2UuRU5EX0RSQVcsIG9uRW5kRHJhdyk7XG5yZWNlaXZlci5vbihNZXNzYWdlLkFERF9TSEFQRSwgb25BZGRTaGFwZSk7XG5yZWNlaXZlci5vbihNZXNzYWdlLkFERF9TSEFQRV9LRVlGUkFNRSwgb25BZGRTaGFwZUtleWZyYW1lKTtcbnJlY2VpdmVyLm9uKE1lc3NhZ2UuRURJVF9TSEFQRV9LRVlGUkFNRSwgb25FZGl0U2hhcGVLZXlmcmFtZSk7XG5yZWNlaXZlci5vbihNZXNzYWdlLlJFTU9WRV9TSEFQRV9LRVlGUkFNRSwgb25SZW1vdmVTaGFwZUtleWZyYW1lKTtcbnJlY2VpdmVyLm9uKE1lc3NhZ2UuRURJVF9TSEFQRSwgb25FZGl0U2hhcGUpO1xucmVjZWl2ZXIub24oTWVzc2FnZS5SRU1PVkVfU0hBUEUsIG9uUmVtb3ZlU2hhcGUpO1xucmVjZWl2ZXIub24oTWVzc2FnZS5DTEVBUl9TSEFQRVMsIG9uQ2xlYXJTaGFwZXMpO1xucmVjZWl2ZXIub24oTWVzc2FnZS5TRVRfQ1VSUkVOVF9USU1FLCBvblVwZGF0ZVRpbWUpO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG5cbnZhciBzdGF0cyA9IG5ldyBTdGF0cygpO1xuXG52YXIgd29ybGRSZW5kZXJlciA9IG5ldyBXb3JsZFJlbmRlcmVyKCk7XG53b3JsZFJlbmRlcmVyLm9uKCdlcnJvcicsIG9uUmVuZGVyRXJyb3IpO1xud29ybGRSZW5kZXJlci5vbignbG9hZCcsIG9uUmVuZGVyTG9hZCk7XG53b3JsZFJlbmRlcmVyLm9uKCdtb2RlY2hhbmdlJywgb25Nb2RlQ2hhbmdlKTtcbndvcmxkUmVuZGVyZXIuaG90c3BvdFJlbmRlcmVyLm9uKCdjbGljaycsIG9uSG90c3BvdENsaWNrKTtcbndvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIub24oJ2RyYXduJywgb25FZGl0b3JTaGFwZURyYXduKTtcbndvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIub24oJ3RyYW5zZm9ybWVkJywgb25FZGl0b3JTaGFwZVRyYW5zZm9ybWVkKTtcbndvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIub24oJ3NoYXBlc2VsZWN0ZWQnLCBvbkVkaXRvclNoYXBlU2VsZWN0ZWQpO1xud29ybGRSZW5kZXJlci5lZGl0b3JSZW5kZXJlci5vbignc2hhcGV1bnNlbGVjdGVkJywgb25FZGl0b3JTaGFwZVVuc2VsZWN0ZWQpO1xud29ybGRSZW5kZXJlci5vbignZW5kZWQnLCBvbkVuZGVkKTtcbndvcmxkUmVuZGVyZXIub24oJ3BsYXknLCBvblBsYXkpO1xuXG53aW5kb3cud29ybGRSZW5kZXJlciA9IHdvcmxkUmVuZGVyZXI7XG5cbnZhciBpc1JlYWR5U2VudCA9IGZhbHNlO1xudmFyIHZvbHVtZSA9IDA7XG5cbmZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICBpZiAoIVV0aWwuaXNXZWJHTEVuYWJsZWQoKSkge1xuICAgICAgICBzaG93RXJyb3IoJ1dlYkdMIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBMb2FkIHRoZSBzY2VuZS5cbiAgICB2YXIgc2NlbmUgPSBTY2VuZUluZm8ubG9hZEZyb21HZXRQYXJhbXMoKTtcbiAgICB3b3JsZFJlbmRlcmVyLnNldFNjZW5lKHNjZW5lKTtcblxuICAgIGlmIChzY2VuZS5pc0RlYnVnKSB7XG4gICAgICAgIC8vIFNob3cgc3RhdHMuXG4gICAgICAgIHNob3dTdGF0cygpO1xuICAgIH1cblxuICAgIGlmIChzY2VuZS5pc1lhd09ubHkpIHtcbiAgICAgICAgV2ViVlJDb25maWcgPSB3aW5kb3cuV2ViVlJDb25maWcgfHwge307XG4gICAgICAgIFdlYlZSQ29uZmlnLllBV19PTkxZID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG59XG5cblxuZnVuY3Rpb24gb25WaWRlb1RhcCgpIHtcbiAgICB3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkucGxheSgpO1xuICAgIGhpZGVQbGF5QnV0dG9uKCk7XG5cbiAgICAvLyBQcmV2ZW50IG11bHRpcGxlIHBsYXkoKSBjYWxscyBvbiB0aGUgdmlkZW8gZWxlbWVudC5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25WaWRlb1RhcCk7XG59XG5cbmZ1bmN0aW9uIG9uUmVuZGVyTG9hZChldmVudCkge1xuICAgIGlmIChldmVudC52aWRlb0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNjZW5lID0gU2NlbmVJbmZvLmxvYWRGcm9tR2V0UGFyYW1zKCk7XG4gICAgICAgIC8vIE9uIG1vYmlsZSwgdGVsbCB0aGUgdXNlciB0aGV5IG5lZWQgdG8gdGFwIHRvIHN0YXJ0LiBPdGhlcndpc2UsIGF1dG9wbGF5LlxuICAgICAgICBpZiAoVXRpbC5pc01vYmlsZSgpKSB7XG4gICAgICAgICAgICAvLyBUZWxsIHVzZXIgdG8gdGFwIHRvIHN0YXJ0LlxuICAgICAgICAgICAgc2hvd1BsYXlCdXR0b24oKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblZpZGVvVGFwKTtcbiAgICAgICAgfSBlbHNlIGlmKHNjZW5lLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICBldmVudC52aWRlb0VsZW1lbnQucGxheSgpO1xuICAgICAgICB9IGVsc2UgaWYoIXNjZW5lLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICBvblBhdXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggdG8gcGF1c2UgYW5kIHBsYXkgZXZlbnRzLCB0byBub3RpZnkgdGhlIEFQSS5cbiAgICAgICAgZXZlbnQudmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgb25QYXVzZSk7XG4gICAgICAgIGV2ZW50LnZpZGVvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwbGF5Jywgb25QbGF5KTtcbiAgICAgICAgZXZlbnQudmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBvbkdldEN1cnJlbnRUaW1lKTtcbiAgICAgICAgZXZlbnQudmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgb25FbmRlZCk7XG4gICAgfVxuICAgIC8vIEhpZGUgbG9hZGluZyBpbmRpY2F0b3IuXG4gICAgbG9hZEluZGljYXRvci5oaWRlKCk7XG5cbiAgICAvLyBBdXRvcGFuIG9ubHkgb24gZGVza3RvcCwgZm9yIHBob3RvcyBvbmx5LCBhbmQgb25seSBpZiBhdXRvcGFuIGlzIGVuYWJsZWQuXG4gICAgaWYgKCFVdGlsLmlzTW9iaWxlKCkgJiYgIXdvcmxkUmVuZGVyZXIuc2NlbmVJbmZvLnZpZGVvICYmICF3b3JsZFJlbmRlcmVyLnNjZW5lSW5mby5pc0F1dG9wYW5PZmYpIHtcbiAgICAgICAgd29ybGRSZW5kZXJlci5hdXRvcGFuKCk7XG4gICAgfVxuXG4gICAgLy8gTm90aWZ5IHRoZSBBUEkgdGhhdCB3ZSBhcmUgcmVhZHksIGJ1dCBvbmx5IGRvIHRoaXMgb25jZS5cbiAgICBpZiAoIWlzUmVhZHlTZW50KSB7XG4gICAgICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ3JlYWR5JyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogd29ybGRSZW5kZXJlci5zY2VuZUluZm8udmlkZW8gPyBldmVudC52aWRlb0VsZW1lbnQuZHVyYXRpb24gOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpc1JlYWR5U2VudCA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvblBsYXlSZXF1ZXN0KCkge1xuICAgIGlmICghd29ybGRSZW5kZXJlci52aWRlb1Byb3h5KSB7XG4gICAgICAgIG9uQXBpRXJyb3IoJ0F0dGVtcHQgdG8gcGF1c2UsIGJ1dCBubyB2aWRlbyBmb3VuZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkucGxheSgpO1xufVxuXG5mdW5jdGlvbiBvblBhdXNlUmVxdWVzdCgpIHtcbiAgICBpZiAoIXdvcmxkUmVuZGVyZXIudmlkZW9Qcm94eSkge1xuICAgICAgICBvbkFwaUVycm9yKCdBdHRlbXB0IHRvIHBhdXNlLCBidXQgbm8gdmlkZW8gZm91bmQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ybGRSZW5kZXJlci52aWRlb1Byb3h5LnBhdXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9uQWRkSG90c3BvdChlKSB7XG4gICAgaWYgKFV0aWwuaXNEZWJ1ZygpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvbkFkZEhvdHNwb3QnLCBlKTtcbiAgICB9XG4gICAgLy8gVE9ETzogSW1wbGVtZW50IHNvbWUgdmFsaWRhdGlvbj9cblxuICAgIHZhciBwaXRjaCA9IHBhcnNlRmxvYXQoZS5waXRjaCk7XG4gICAgdmFyIHlhdyA9IHBhcnNlRmxvYXQoZS55YXcpO1xuICAgIHZhciByYWRpdXMgPSBwYXJzZUZsb2F0KGUucmFkaXVzKTtcbiAgICB2YXIgZGlzdGFuY2UgPSBwYXJzZUZsb2F0KGUuZGlzdGFuY2UpO1xuICAgIHZhciBjdXN0b21TaGFwZSA9IGUuY3VzdG9tO1xuICAgIHZhciBpZCA9IGUuaWQ7XG4gICAgd29ybGRSZW5kZXJlci5ob3RzcG90UmVuZGVyZXIuYWRkKHBpdGNoLCB5YXcsIHJhZGl1cywgZGlzdGFuY2UsIGlkLCBjdXN0b21TaGFwZSk7XG59XG5cbmZ1bmN0aW9uIG9uU2V0Q29udGVudChlKSB7XG4gICAgaWYgKFV0aWwuaXNEZWJ1ZygpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvblNldENvbnRlbnQnLCBlKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFsbCBvZiB0aGUgc2hhcGVzLlxuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIuY2xlYXJTaGFwZXMoKTtcbiAgICAvLyBSZW1vdmUgYWxsIG9mIHRoZSBob3RzcG90cy5cbiAgICB3b3JsZFJlbmRlcmVyLmhvdHNwb3RSZW5kZXJlci5jbGVhckFsbCgpO1xuICAgIC8vIEZhZGUgdG8gYmxhY2suXG4gICAgd29ybGRSZW5kZXJlci5zcGhlcmVSZW5kZXJlci5zZXRPcGFjaXR5KDAsIDUwMCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZW4gbG9hZCB0aGUgbmV3IHNjZW5lLlxuICAgICAgICB2YXIgc2NlbmUgPSBTY2VuZUluZm8ubG9hZEZyb21BUElQYXJhbXMoZS5jb250ZW50SW5mbyk7XG4gICAgICAgIHdvcmxkUmVuZGVyZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgVVJMIHRvIHJlZmxlY3QgdGhlIG5ldyBzY2VuZS4gVGhpcyBpcyBpbXBvcnRhbnQgcGFydGljdWxhcmlseVxuICAgICAgICAvLyBvbiBpT1Mgd2hlcmUgd2UgdXNlIGEgZmFrZSBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICAgIHZhciB1cmwgPSBzY2VuZS5nZXRDdXJyZW50VXJsKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1VwZGF0aW5nIHVybCB0byBiZSAlcycsIHVybCk7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnVlIgVmlldycsIHVybCk7XG5cbiAgICAgICAgLy8gQW5kIHNldCB0aGUgbmV3IHNjZW5lLlxuICAgICAgICByZXR1cm4gd29ybGRSZW5kZXJlci5zZXRTY2VuZShzY2VuZSk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZW4gZmFkZSB0aGUgc2NlbmUgYmFjayBpbi5cbiAgICAgICAgd29ybGRSZW5kZXJlci5zcGhlcmVSZW5kZXJlci5zZXRPcGFjaXR5KDEsIDUwMCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uU2V0Vm9sdW1lKGUpIHtcbiAgICAvLyBPbmx5IHdvcmsgZm9yIHZpZGVvLiBJZiB0aGVyZSdzIG5vIHZpZGVvLCBzZW5kIGJhY2sgYW4gZXJyb3IuXG4gICAgaWYgKCF3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkpIHtcbiAgICAgICAgb25BcGlFcnJvcignQXR0ZW1wdCB0byBzZXQgdm9sdW1lLCBidXQgbm8gdmlkZW8gZm91bmQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ybGRSZW5kZXJlci52aWRlb1Byb3h5LnNldFZvbHVtZShlLnZvbHVtZUxldmVsKTtcbiAgICB2b2x1bWUgPSBlLnZvbHVtZUxldmVsO1xuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAndm9sdW1lY2hhbmdlJyxcbiAgICAgICAgZGF0YTogZS52b2x1bWVMZXZlbFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvblVwZGF0ZVRpbWUodGltZSkge1xuXG4gICAgaWYgKCF3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkpIHtcbiAgICAgICAgb25BcGlFcnJvcignQXR0ZW1wdCB0byBwYXVzZSwgYnV0IG5vIHZpZGVvIGZvdW5kLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd29ybGRSZW5kZXJlci52aWRlb1Byb3h5LnNldEN1cnJlbnRUaW1lKHRpbWUpO1xuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIudXBkYXRlKG51bGwsIHRpbWUpO1xuICAgIG9uR2V0Q3VycmVudFRpbWUoKTtcbn1cblxuZnVuY3Rpb24gb25HZXRDdXJyZW50VGltZSgpIHtcbiAgICB2YXIgdGltZSA9IHdvcmxkUmVuZGVyZXIudmlkZW9Qcm94eS5nZXRDdXJyZW50VGltZSgpO1xuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAndGltZXVwZGF0ZScsXG4gICAgICAgIGRhdGE6IHRpbWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25FbmRlZCgpIHtcbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2VuZGVkJyxcbiAgICAgICAgZGF0YTogdHJ1ZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkFwaUVycm9yKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBkYXRhOiB7bWVzc2FnZTogbWVzc2FnZX1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25Nb2RlQ2hhbmdlKG1vZGUpIHtcbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ21vZGVjaGFuZ2UnLFxuICAgICAgICBkYXRhOiB7bW9kZTogbW9kZX1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25Ib3RzcG90Q2xpY2soaWQpIHtcbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2NsaWNrJyxcbiAgICAgICAgZGF0YToge2lkOiBpZH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25QbGF5KCkge1xuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAncGF1c2VkJyxcbiAgICAgICAgZGF0YTogZmFsc2VcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25QYXVzZSgpIHtcbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ3BhdXNlZCcsXG4gICAgICAgIGRhdGE6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25TY2VuZUVycm9yKG1lc3NhZ2UpIHtcbiAgICBzaG93RXJyb3IoJ0xvYWRlcjogJyArIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBvblJlbmRlckVycm9yKG1lc3NhZ2UpIHtcbiAgICBzaG93RXJyb3IoJ1JlbmRlcjogJyArIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgb3B0X3RpdGxlKSB7XG4gICAgLy8gSGlkZSBsb2FkaW5nIGluZGljYXRvci5cbiAgICBsb2FkSW5kaWNhdG9yLmhpZGUoKTtcblxuICAgIHZhciBlcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlcnJvcicpO1xuICAgIGVycm9yLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgICBlcnJvci5xdWVyeVNlbGVjdG9yKCcubWVzc2FnZScpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG5cbiAgICB2YXIgdGl0bGUgPSAob3B0X3RpdGxlICE9PSB1bmRlZmluZWQgPyBvcHRfdGl0bGUgOiAnRXJyb3InKTtcbiAgICBlcnJvci5xdWVyeVNlbGVjdG9yKCcudGl0bGUnKS5pbm5lckhUTUwgPSB0aXRsZTtcbn1cblxuZnVuY3Rpb24gaGlkZUVycm9yKCkge1xuICAgIHZhciBlcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlcnJvcicpO1xuICAgIGVycm9yLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcbn1cblxuZnVuY3Rpb24gc2hvd1BsYXlCdXR0b24oKSB7XG4gICAgdmFyIHBsYXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheS1vdmVybGF5Jyk7XG4gICAgcGxheUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG59XG5cbmZ1bmN0aW9uIGhpZGVQbGF5QnV0dG9uKCkge1xuICAgIHZhciBwbGF5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXktb3ZlcmxheScpO1xuICAgIHBsYXlCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xufVxuXG5mdW5jdGlvbiBzaG93U3RhdHMoKSB7XG4gICAgc3RhdHMuc2V0TW9kZSgwKTsgLy8gMDogZnBzLCAxOiBtc1xuXG4gICAgLy8gQWxpZ24gYm90dG9tLWxlZnQuXG4gICAgc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5ib3R0b20gPSAnMHB4JztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0YXRzLmRvbUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBsb29wKHRpbWUpIHtcbiAgICAvLyBVc2UgdGhlIFZSRGlzcGxheSBSQUYgaWYgaXQgaXMgcHJlc2VudC5cbiAgICBpZiAod29ybGRSZW5kZXJlci52ckRpc3BsYXkpIHtcbiAgICAgICAgd29ybGRSZW5kZXJlci52ckRpc3BsYXkucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9XG5cbiAgICBzdGF0cy5iZWdpbigpO1xuICAgIC8vIFVwZGF0ZSB0aGUgdmlkZW8gaWYgbmVlZGVkLlxuICAgIGlmICh3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkpIHtcbiAgICAgICAgd29ybGRSZW5kZXJlci52aWRlb1Byb3h5LnVwZGF0ZSh0aW1lKTtcbiAgICB9XG4gICAgd29ybGRSZW5kZXJlci5yZW5kZXIodGltZSk7XG4gICAgd29ybGRSZW5kZXJlci5zdWJtaXRGcmFtZSgpO1xuICAgIHN0YXRzLmVuZCgpO1xufVxuXG5mdW5jdGlvbiBvbkdldFBvc2l0aW9uKCkge1xuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBNZXNzYWdlLkdFVF9QT1NJVElPTixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgWWF3OiB3b3JsZFJlbmRlcmVyLmNhbWVyYS5yb3RhdGlvbi55ICogMTgwIC8gTWF0aC5QSSxcbiAgICAgICAgICAgIFBpdGNoOiB3b3JsZFJlbmRlcmVyLmNhbWVyYS5yb3RhdGlvbi54ICogMTgwIC8gTWF0aC5QSVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uU3RhcnREcmF3KCkge1xuICAgIC8vIGFjdGl2YXRlIGRyYXcgdG9vbFxuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIuc3RhcnREcmF3KCk7XG59XG5mdW5jdGlvbiBvbkVuZERyYXcoKSB7XG4gICAgLy8gZGVhY3RpdmF0ZSBkcmF3IHRvb2xcbiAgICB3b3JsZFJlbmRlcmVyLmVkaXRvclJlbmRlcmVyLmVuZERyYXcoKTtcbn1cbmZ1bmN0aW9uIG9uRWRpdG9yU2hhcGVEcmF3bihzaGFwZSkge1xuICAgIC8vIG9uIHNoYXBlIGRyYXduXG4gICAgVXRpbC5zZW5kUGFyZW50TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IE1lc3NhZ2UuRU5EX0RSQVcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGlkOiBzaGFwZS5uYW1lLFxuICAgICAgICAgICAgdmVydGljZXM6IHNoYXBlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwubmFtZSA9PT0gJ2hhbmRsZSc7XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLnBvc2l0aW9uO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gb25FZGl0b3JTaGFwZVRyYW5zZm9ybWVkKHNoYXBlKSB7XG4gICAgLy8gb24gc2hhcGUgZHJhd25cbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogTWVzc2FnZS5TSEFQRV9UUkFOU0ZPUk1FRCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaWQ6IHNoYXBlLm5hbWUsXG4gICAgICAgICAgICB2ZXJ0aWNlczogc2hhcGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC5uYW1lID09PSAnaGFuZGxlJztcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwucG9zaXRpb247XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuZnVuY3Rpb24gb25FZGl0b3JTaGFwZVNlbGVjdGVkKHNoYXBlKSB7XG4gICAgLy8gb24gc2hhcGUgc2VsZWN0ZWRcbiAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogTWVzc2FnZS5TSEFQRV9TRUxFQ1RFRCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaWQ6IHNoYXBlLm5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkVkaXRvclNoYXBlVW5zZWxlY3RlZCgpIHtcbiAgICAvLyBvbiBzaGFwZSBzZWxlY3RlZFxuICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBNZXNzYWdlLlNIQVBFX1VOU0VMRUNURUQsXG4gICAgICAgIGRhdGE6IGZhbHNlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQWRkU2hhcGUoZGF0YSkge1xuICAgIC8vIG9uIGV4dGVybmFsIHNoYXBlIGFkZFxuXG4gICAgdmFyIHZlcnRpY2VzID0gZGF0YS5wYXJhbXMudmVydGljZXM7XG5cbiAgICBpZiAodmVydGljZXMubGVuZ3RoICYmICEodmVydGljZXNbMF0gaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzKSkge1xuICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHAueCwgcC55LCBwLnopO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIuY3JlYXRlU2hhcGUodmVydGljZXMsIGRhdGEuaWQpO1xufVxuXG5mdW5jdGlvbiBvbkFkZFNoYXBlS2V5ZnJhbWUoZGF0YSkge1xuXG4gICAgdmFyIHZlcnRpY2VzID0gZGF0YS5wYXJhbXMudmVydGljZXM7XG4gICAgdmFyIGZyYW1lID0gZGF0YS5wYXJhbXMuZnJhbWU7XG5cbiAgICBpZiAodmVydGljZXMubGVuZ3RoICYmICEodmVydGljZXNbMF0gaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzKSkge1xuICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHAueCwgcC55LCBwLnopO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdBZGRpbmcgc2hhcGUgJyArIGRhdGEuaWQsIGZyYW1lLCB2ZXJ0aWNlcylcblxuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIuYWRkU2hhcGVLZXlmcmFtZShkYXRhLmlkLCBmcmFtZSwgdmVydGljZXMpO1xuXG59XG5cbmZ1bmN0aW9uIG9uRWRpdFNoYXBlS2V5ZnJhbWUoZGF0YSkge1xuXG4gICAgdmFyIHZlcnRpY2VzID0gZGF0YS5wYXJhbXMudmVydGljZXM7XG4gICAgdmFyIGZyYW1lID0gZGF0YS5wYXJhbXMuZnJhbWU7XG5cbiAgICBpZiAodmVydGljZXMubGVuZ3RoICYmICEodmVydGljZXNbMF0gaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzKSkge1xuICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHAueCwgcC55LCBwLnopO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBzaGFwZSAnICsgZGF0YS5pZCwgZnJhbWUsIHZlcnRpY2VzKTtcblxuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIuZWRpdFNoYXBlS2V5ZnJhbWUoZGF0YS5pZCwgZnJhbWUsIHZlcnRpY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBvblJlbW92ZVNoYXBlS2V5ZnJhbWUoZGF0YSkge1xuICAgIHZhciBmcmFtZSA9IGRhdGEucGFyYW1zLmZyYW1lO1xuICAgIHdvcmxkUmVuZGVyZXIuZWRpdG9yUmVuZGVyZXIucmVtb3ZlU2hhcGVLZXlmcmFtZShkYXRhLmlkLCBmcmFtZSk7XG59XG5cbmZ1bmN0aW9uIG9uRWRpdFNoYXBlKGRhdGEpIHtcbiAgICB3b3JsZFJlbmRlcmVyLmVkaXRvclJlbmRlcmVyLmVkaXRTaGFwZShkYXRhLmlkKTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmVTaGFwZShkYXRhKSB7XG4gICAgd29ybGRSZW5kZXJlci5lZGl0b3JSZW5kZXJlci5yZW1vdmVTaGFwZShkYXRhLmlkKTtcbn1cblxuZnVuY3Rpb24gb25DbGVhclNoYXBlcygpIHtcbiAgICB3b3JsZFJlbmRlcmVyLmVkaXRvclJlbmRlcmVyLmNsZWFyU2hhcGVzKCk7XG59XG5cbmZ1bmN0aW9uIG9uU2VlayhkYXRhKSB7XG4gICAgaWYgKCF3b3JsZFJlbmRlcmVyLnZpZGVvUHJveHkpIHtcbiAgICAgICAgb25BcGlFcnJvcignQXR0ZW1wdCB0byBzZWVrLCBidXQgbm8gdmlkZW8gZm91bmQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ybGRSZW5kZXJlci52aWRlb1Byb3h5LnNlZWsoKTsgLy8gZGF0YS5mcmFtZVxufSIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIFJldGljbGVSZW5kZXJlcihjYW1lcmEpIHtcbiAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cbiAgdGhpcy5yZXRpY2xlID0gdGhpcy5jcmVhdGVSZXRpY2xlXygpO1xuICAvLyBJbiBmcm9udCBvZiB0aGUgaG90c3BvdCBpdHNlbGYsIHdoaWNoIGlzIGF0IHI9MC45OS5cbiAgdGhpcy5yZXRpY2xlLnBvc2l0aW9uLnogPSAtMC45NztcbiAgY2FtZXJhLmFkZCh0aGlzLnJldGljbGUpO1xuXG4gIHRoaXMuc2V0VmlzaWJpbGl0eShmYWxzZSk7XG59XG5cblJldGljbGVSZW5kZXJlci5wcm90b3R5cGUuc2V0VmlzaWJpbGl0eSA9IGZ1bmN0aW9uKGlzVmlzaWJsZSkge1xuICAvLyBUT0RPOiBUd2VlbiB0aGUgdHJhbnNpdGlvbi5cbiAgdGhpcy5yZXRpY2xlLnZpc2libGUgPSBpc1Zpc2libGU7XG59O1xuXG5SZXRpY2xlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVJldGljbGVfID0gZnVuY3Rpb24oKSB7XG4gIC8vIE1ha2UgYSB0b3J1cy5cbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlRvcnVzR2VvbWV0cnkoMC4wMiwgMC4wMDUsIDEwLCAyMCk7XG4gIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6IDB4MDAwMDAwfSk7XG4gIHZhciB0b3J1cyA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5cbiAgcmV0dXJuIHRvcnVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXRpY2xlUmVuZGVyZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgQ0FNRUxfVE9fVU5ERVJTQ09SRSA9IHtcbiAgICB2aWRlbzogJ3ZpZGVvJyxcbiAgICBpbWFnZTogJ2ltYWdlJyxcbiAgICBwcmV2aWV3OiAncHJldmlldycsXG4gICAgbG9vcDogJ2xvb3AnLFxuICAgIGF1dG9wbGF5OiAnYXV0b3BsYXknLFxuICAgIGlzU3RlcmVvOiAnaXNfc3RlcmVvJyxcbiAgICBkZWZhdWx0WWF3OiAnZGVmYXVsdF95YXcnLFxuICAgIGlzWWF3T25seTogJ2lzX3lhd19vbmx5JyxcbiAgICBpc0RlYnVnOiAnaXNfZGVidWcnLFxuICAgIGlzVlJPZmY6ICdpc192cl9vZmYnLFxuICAgIGlzQXV0b3Bhbk9mZjogJ2lzX2F1dG9wYW5fb2ZmJyxcbn07XG5cbi8qKlxuICogQ29udGFpbnMgYWxsIGluZm9ybWF0aW9uIGFib3V0IGEgZ2l2ZW4gc2NlbmUuXG4gKi9cbmZ1bmN0aW9uIFNjZW5lSW5mbyhvcHRfcGFyYW1zKSB7XG4gICAgdmFyIHBhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XG5cbiAgICB0aGlzLmltYWdlID0gcGFyYW1zLmltYWdlO1xuICAgIHRoaXMucHJldmlldyA9IHBhcmFtcy5wcmV2aWV3O1xuICAgIHRoaXMudmlkZW8gPSBwYXJhbXMudmlkZW87XG4gICAgdGhpcy5kZWZhdWx0WWF3ID0gVEhSRUUuTWF0aC5kZWdUb1JhZChwYXJhbXMuZGVmYXVsdFlhdyB8fCAwKTtcblxuICAgIHRoaXMuaXNTdGVyZW8gPSBVdGlsLnBhcnNlQm9vbGVhbihwYXJhbXMuaXNTdGVyZW8pO1xuICAgIHRoaXMuaXNZYXdPbmx5ID0gVXRpbC5wYXJzZUJvb2xlYW4ocGFyYW1zLmlzWWF3T25seSk7XG4gICAgdGhpcy5pc0RlYnVnID0gVXRpbC5wYXJzZUJvb2xlYW4ocGFyYW1zLmlzRGVidWcpO1xuICAgIHRoaXMuaXNWUk9mZiA9IFV0aWwucGFyc2VCb29sZWFuKHBhcmFtcy5pc1ZST2ZmKTtcbiAgICB0aGlzLmlzQXV0b3Bhbk9mZiA9IFV0aWwucGFyc2VCb29sZWFuKHBhcmFtcy5pc0F1dG9wYW5PZmYpO1xuICAgIHRoaXMubG9vcCA9IFV0aWwucGFyc2VCb29sZWFuKHBhcmFtcy5sb29wKTtcbiAgICB0aGlzLmF1dG9wbGF5ID0gVXRpbC5wYXJzZUJvb2xlYW4ocGFyYW1zLmF1dG9wbGF5KTtcbn1cblxuU2NlbmVJbmZvLmxvYWRGcm9tR2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICBmb3IgKHZhciBjYW1lbENhc2UgaW4gQ0FNRUxfVE9fVU5ERVJTQ09SRSkge1xuICAgICAgICB2YXIgdW5kZXJzY29yZSA9IENBTUVMX1RPX1VOREVSU0NPUkVbY2FtZWxDYXNlXTtcbiAgICAgICAgcGFyYW1zW2NhbWVsQ2FzZV0gPSBVdGlsLmdldFF1ZXJ5UGFyYW1ldGVyKHVuZGVyc2NvcmUpO1xuICAgIH1cbiAgICB2YXIgc2NlbmUgPSBuZXcgU2NlbmVJbmZvKHBhcmFtcyk7XG4gICAgaWYgKCFzY2VuZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHNjZW5lOiAlcycsIHNjZW5lLmVycm9yTWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiBzY2VuZTtcbn07XG5cblNjZW5lSW5mby5sb2FkRnJvbUFQSVBhcmFtcyA9IGZ1bmN0aW9uICh1bmRlcnNjb3JlUGFyYW1zKSB7XG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgIGZvciAodmFyIGNhbWVsQ2FzZSBpbiBDQU1FTF9UT19VTkRFUlNDT1JFKSB7XG4gICAgICAgIHZhciB1bmRlcnNjb3JlID0gQ0FNRUxfVE9fVU5ERVJTQ09SRVtjYW1lbENhc2VdO1xuICAgICAgICBpZiAodW5kZXJzY29yZVBhcmFtc1t1bmRlcnNjb3JlXSkge1xuICAgICAgICAgICAgcGFyYW1zW2NhbWVsQ2FzZV0gPSB1bmRlcnNjb3JlUGFyYW1zW3VuZGVyc2NvcmVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBzY2VuZSA9IG5ldyBTY2VuZUluZm8ocGFyYW1zKTtcbiAgICBpZiAoIXNjZW5lLmlzVmFsaWQoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgc2NlbmU6ICVzJywgc2NlbmUuZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjZW5lO1xufTtcblxuU2NlbmVJbmZvLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEVpdGhlciBpdCdzIGFuIGltYWdlIG9yIGEgdmlkZW8uXG4gICAgaWYgKCF0aGlzLmltYWdlICYmICF0aGlzLnZpZGVvKSB7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gJ0VpdGhlciBpbWFnZSBvciB2aWRlbyBVUkwgbXVzdCBiZSBzcGVjaWZpZWQuJztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbWFnZSAmJiB0aGlzLnZpZGVvKSB7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gJ0JvdGggaW1hZ2UgYW5kIHZpZGVvIFVSTCBjYW5cXCd0IGJlIHNwZWNpZmllZC4nO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLmltYWdlICYmICF0aGlzLmlzVmFsaWRJbWFnZV8odGhpcy5pbWFnZSkpIHtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSAnSW52YWxpZCBpbWFnZSBVUkw6ICcgKyB0aGlzLmltYWdlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gbnVsbDtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgVVJMIHRvIHJlZmxlY3QgdGhpcyBzY2VuZS5cbiAqL1xuU2NlbmVJbmZvLnByb3RvdHlwZS5nZXRDdXJyZW50VXJsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB1cmwgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnPyc7XG4gICAgZm9yICh2YXIgY2FtZWxDYXNlIGluIENBTUVMX1RPX1VOREVSU0NPUkUpIHtcbiAgICAgICAgdmFyIHVuZGVyc2NvcmUgPSBDQU1FTF9UT19VTkRFUlNDT1JFW2NhbWVsQ2FzZV07XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXNbY2FtZWxDYXNlXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHVybCArPSB1bmRlcnNjb3JlICsgJz0nICsgdmFsdWUgKyAnJic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2hvcCBvZmYgdGhlIHRyYWlsaW5nIGFtcGVyc2FuZC5cbiAgICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwubGVuZ3RoIC0gMSk7XG59O1xuXG5TY2VuZUluZm8ucHJvdG90eXBlLmlzVmFsaWRJbWFnZV8gPSBmdW5jdGlvbiAoaW1hZ2VVcmwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2NlbmVJbmZvO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIEV5ZXMgPSByZXF1aXJlKCcuL2V5ZXMnKTtcbnZhciBUV0VFTiA9IHJlcXVpcmUoJ3R3ZWVuLmpzJyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuZnVuY3Rpb24gU3BoZXJlUmVuZGVyZXIoc2NlbmUpIHtcbiAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuXG4gIC8vIENyZWF0ZSBhIHRyYW5zcGFyZW50IG1hc2suXG4gIHRoaXMuY3JlYXRlT3BhY2l0eU1hc2tfKCk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgcGhvdG9zcGhlcmUgYmFzZWQgb24gdGhlIGltYWdlIGluIHRoZSBzb3VyY2UuIFN1cHBvcnRzIHN0ZXJlbyBhbmRcbiAqIG1vbm8gcGhvdG9zcGhlcmVzLlxuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cblNwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5zZXRQaG90b3NwaGVyZSA9IGZ1bmN0aW9uKHNyYywgb3B0X3BhcmFtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcblxuICAgIHZhciBwYXJhbXMgPSBvcHRfcGFyYW1zIHx8IHt9O1xuXG4gICAgdGhpcy5pc1N0ZXJlbyA9ICEhcGFyYW1zLmlzU3RlcmVvO1xuICAgIHRoaXMuc3JjID0gc3JjO1xuXG4gICAgLy8gTG9hZCB0ZXh0dXJlLlxuICAgIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuICAgIGxvYWRlci5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgIGxvYWRlci5sb2FkKHNyYywgdGhpcy5vblRleHR1cmVMb2FkZWRfLmJpbmQodGhpcyksIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0aGlzLm9uVGV4dHVyZUVycm9yXy5iaW5kKHRoaXMpKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7UHJvbWlzZX0gWWVhaC5cbiAqL1xuU3BoZXJlUmVuZGVyZXIucHJvdG90eXBlLnNldDM2MFZpZGVvID0gZnVuY3Rpb24odmlkZW9FbGVtZW50LCBvcHRfcGFyYW1zKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuXG4gICAgdmFyIHBhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XG5cbiAgICB0aGlzLmlzU3RlcmVvID0gISFwYXJhbXMuaXNTdGVyZW87XG5cbiAgICAvLyBMb2FkIHRoZSB2aWRlbyB0ZXh0dXJlLlxuICAgIHZhciB2aWRlb1RleHR1cmUgPSBuZXcgVEhSRUUuVmlkZW9UZXh0dXJlKHZpZGVvRWxlbWVudCk7XG4gICAgdmlkZW9UZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcbiAgICB2aWRlb1RleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xuICAgIHZpZGVvVGV4dHVyZS5mb3JtYXQgPSBUSFJFRS5SR0JGb3JtYXQ7XG4gICAgdmlkZW9UZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgIHZpZGVvVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbiAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZF8odmlkZW9UZXh0dXJlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBvcGFjaXR5IG9mIHRoZSBwYW5vcmFtYS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gb3BhY2l0eSBIb3cgb3BhcXVlIHdlIHdhbnQgdGhlIHBhbm9yYW1hIHRvIGJlLiAwIG1lYW5zIGJsYWNrLFxuICogMSBtZWFucyBmdWxsIGNvbG9yLlxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhlIHRyYW5zaXRpb24gc2hvdWxkIHRha2UuXG4gKlxuICogQHJldHVybiB7UHJvbWlzZX0gV2hlbiB0aGUgb3BhY2l0eSBjaGFuZ2UgaXMgY29tcGxldGUuXG4gKi9cblNwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5zZXRPcGFjaXR5ID0gZnVuY3Rpb24ob3BhY2l0eSwgZHVyYXRpb24pIHtcbiAgdmFyIHNjZW5lID0gdGhpcy5zY2VuZTtcbiAgLy8gSWYgd2Ugd2FudCB0aGUgb3BhY2l0eVxuICB2YXIgb3ZlcmxheU9wYWNpdHkgPSAxIC0gb3BhY2l0eTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBtYXNrID0gc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKCdvcGFjaXR5TWFzaycpO1xuICAgIHZhciB0d2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbih7b3BhY2l0eTogbWFzay5tYXRlcmlhbC5vcGFjaXR5fSlcbiAgICAgICAgLnRvKHtvcGFjaXR5OiBvdmVybGF5T3BhY2l0eX0sIGR1cmF0aW9uKVxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQpO1xuICAgIHR3ZWVuLm9uVXBkYXRlKGZ1bmN0aW9uKGUpIHtcbiAgICAgIG1hc2subWF0ZXJpYWwub3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICB9KTtcbiAgICB0d2Vlbi5vbkNvbXBsZXRlKHJlc29sdmUpLnN0YXJ0KCk7XG4gIH0pO1xufTtcblxuU3BoZXJlUmVuZGVyZXIucHJvdG90eXBlLm9uVGV4dHVyZUxvYWRlZF8gPSBmdW5jdGlvbih0ZXh0dXJlKSB7XG4gIHZhciBzcGhlcmVMZWZ0O1xuICB2YXIgc3BoZXJlUmlnaHQ7XG4gIGlmICh0aGlzLmlzU3RlcmVvKSB7XG4gICAgc3BoZXJlTGVmdCA9IHRoaXMuY3JlYXRlUGhvdG9zcGhlcmVfKHRleHR1cmUsIHtvZmZzZXRZOiAwLjUsIHNjYWxlWTogMC41fSk7XG4gICAgc3BoZXJlUmlnaHQgPSB0aGlzLmNyZWF0ZVBob3Rvc3BoZXJlXyh0ZXh0dXJlLCB7b2Zmc2V0WTogMCwgc2NhbGVZOiAwLjV9KTtcbiAgfSBlbHNlIHtcbiAgICBzcGhlcmVMZWZ0ID0gdGhpcy5jcmVhdGVQaG90b3NwaGVyZV8odGV4dHVyZSk7XG4gICAgc3BoZXJlUmlnaHQgPSB0aGlzLmNyZWF0ZVBob3Rvc3BoZXJlXyh0ZXh0dXJlKTtcbiAgfVxuXG4gIC8vIERpc3BsYXkgaW4gbGVmdCBhbmQgcmlnaHQgZXllIHJlc3BlY3RpdmVseS5cbiAgc3BoZXJlTGVmdC5sYXllcnMuc2V0KEV5ZXMuTEVGVCk7XG4gIHNwaGVyZUxlZnQuZXllID0gRXllcy5MRUZUO1xuICBzcGhlcmVSaWdodC5sYXllcnMuc2V0KEV5ZXMuUklHSFQpO1xuICBzcGhlcmVSaWdodC5leWUgPSBFeWVzLlJJR0hUO1xuXG4gIHRoaXMuc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKCdwaG90bycpLmNoaWxkcmVuID0gW3NwaGVyZUxlZnQsIHNwaGVyZVJpZ2h0XTtcblxuICB0aGlzLnJlc29sdmUoKTtcbn07XG5cblNwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5vblRleHR1cmVFcnJvcl8gPSBmdW5jdGlvbihlcnJvcikge1xuICB0aGlzLnJlamVjdCgnVW5hYmxlIHRvIGxvYWQgdGV4dHVyZSBmcm9tIFwiJyArIHRoaXMuc3JjICsgJ1wiJyk7XG59O1xuXG5cblNwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVQaG90b3NwaGVyZV8gPSBmdW5jdGlvbih0ZXh0dXJlLCBvcHRfcGFyYW1zKSB7XG4gIHZhciBwID0gb3B0X3BhcmFtcyB8fCB7fTtcbiAgcC5zY2FsZVggPSBwLnNjYWxlWCB8fCAxO1xuICBwLnNjYWxlWSA9IHAuc2NhbGVZIHx8IDE7XG4gIHAub2Zmc2V0WCA9IHAub2Zmc2V0WCB8fCAwO1xuICBwLm9mZnNldFkgPSBwLm9mZnNldFkgfHwgMDtcbiAgcC5waGlTdGFydCA9IHAucGhpU3RhcnQgfHwgMDtcbiAgcC5waGlMZW5ndGggPSBwLnBoaUxlbmd0aCB8fCBNYXRoLlBJICogMjtcbiAgcC50aGV0YVN0YXJ0ID0gcC50aGV0YVN0YXJ0IHx8IDA7XG4gIHAudGhldGFMZW5ndGggPSBwLnRoZXRhTGVuZ3RoIHx8IE1hdGguUEk7XG5cbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEsIDQ4LCA0OCxcbiAgICAgIHAucGhpU3RhcnQsIHAucGhpTGVuZ3RoLCBwLnRoZXRhU3RhcnQsIHAudGhldGFMZW5ndGgpO1xuICBnZW9tZXRyeS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VTY2FsZSgtMSwgMSwgMSkpO1xuICB2YXIgdXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1swXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dnMubGVuZ3RoOyBpICsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqICsrKSB7XG4gICAgICB1dnNbaV1bal0ueCAqPSBwLnNjYWxlWDtcbiAgICAgIHV2c1tpXVtqXS54ICs9IHAub2Zmc2V0WDtcbiAgICAgIHV2c1tpXVtqXS55ICo9IHAuc2NhbGVZO1xuICAgICAgdXZzW2ldW2pdLnkgKz0gcC5vZmZzZXRZO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IG1hcDogdGV4dHVyZSB9KTtcbiAgdmFyIG91dCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gIC8vb3V0LnZpc2libGUgPSBmYWxzZTtcbiAgb3V0LnJlbmRlck9yZGVyID0gLTE7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5TcGhlcmVSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlT3BhY2l0eU1hc2tfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgwLjQ5LCA0OCwgNDgpO1xuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgIGNvbG9yOiAweDAwMDAwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZSwgb3BhY2l0eTogMCwgdHJhbnNwYXJlbnQ6IHRydWV9KTtcbiAgdmFyIG9wYWNpdHlNYXNrID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgb3BhY2l0eU1hc2submFtZSA9ICdvcGFjaXR5TWFzayc7XG4gIG9wYWNpdHlNYXNrLnJlbmRlck9yZGVyID0gMTtcblxuICB0aGlzLnNjZW5lLmFkZChvcGFjaXR5TWFzayk7XG4gIHJldHVybiBvcGFjaXR5TWFzaztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BoZXJlUmVuZGVyZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuLyoqXG4gKiBBIHByb3h5IGNsYXNzIGZvciB3b3JraW5nIGFyb3VuZCB0aGUgZmFjdCB0aGF0IGFzIHNvb24gYXMgYSB2aWRlbyBpcyBwbGF5KCllZFxuICogb24gaU9TLCBTYWZhcmkgYXV0by1mdWxsc2NyZWVucyB0aGUgdmlkZW8uXG4gKlxuICogVE9ETyhzbXVzKTogVGhlIGVudGlyZSByYWlzb24gZCdldHJlIGZvciB0aGlzIGNsYXNzIGlzIHRvIHdvcmsgYXJvdW5kIHRoaXNcbiAqIGlzc3VlLiBPbmNlIFNhZmFyaSBpbXBsZW1lbnRzIHNvbWUgd2F5IHRvIHN1cHByZXNzIHRoaXMgZnVsbHNjcmVlbiBwbGF5ZXIsIHdlXG4gKiBjYW4gcmVtb3ZlIHRoaXMgY29kZS5cbiAqL1xuZnVuY3Rpb24gVmlkZW9Qcm94eSh2aWRlb0VsZW1lbnQpIHtcbiAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHZpZGVvRWxlbWVudDtcbiAgICAvLyBUcnVlIGlmIHdlJ3JlIGN1cnJlbnRseSBtYW51YWxseSBhZHZhbmNpbmcgdGhlIHBsYXloZWFkIChvbmx5IG9uIGlPUykuXG4gICAgdGhpcy5pc0Zha2VQbGF5YmFjayA9IGZhbHNlO1xuXG4gICAgLy8gV2hlbiB0aGUgdmlkZW8gc3RhcnRlZCBwbGF5aW5nLlxuICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbn1cblxuVmlkZW9Qcm94eS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoVXRpbC5pc0lPUzlPckxlc3MoKSkge1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLmlzRmFrZVBsYXliYWNrID0gdHJ1ZTtcblxuICAgICAgICAvLyBNYWtlIGFuIGF1ZGlvIGVsZW1lbnQgdG8gcGxheWJhY2sganVzdCB0aGUgYXVkaW8gcGFydC5cbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQgPSBuZXcgQXVkaW8oKTtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuc3JjID0gdGhpcy52aWRlb0VsZW1lbnQuc3JjO1xuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheSgpLnRoZW4oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQbGF5aW5nIHZpZGVvLicsIGUpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5WaWRlb1Byb3h5LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoVXRpbC5pc0lPUzlPckxlc3MoKSAmJiB0aGlzLmlzRmFrZVBsYXliYWNrKSB7XG4gICAgICAgIHRoaXMuaXNGYWtlUGxheWJhY2sgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGF1c2UoKTtcbiAgICB9XG59O1xuXG5WaWRlb1Byb3h5LnByb3RvdHlwZS5zZWVrID0gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgaWYgKFV0aWwuaXNJT1M5T3JMZXNzKCkgJiYgdGhpcy5pc0Zha2VQbGF5YmFjaykge1xuICAgICAgICB0aGlzLmlzRmFrZVBsYXliYWNrID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5zZWVrKGZyYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zZWVrKGZyYW1lKTtcbiAgICB9XG59O1xuXG5WaWRlb1Byb3h5LnByb3RvdHlwZS5zZXRWb2x1bWUgPSBmdW5jdGlvbiAodm9sdW1lTGV2ZWwpIHtcbiAgICBpZiAodGhpcy52aWRlb0VsZW1lbnQpIHtcbiAgICAgICAgLy8gT24gaU9TIDEwLCB0aGUgVmlkZW9FbGVtZW50LnZvbHVtZSBwcm9wZXJ0eSBpcyByZWFkLW9ubHkuIFNvIHdlIHNwZWNpYWxcbiAgICAgICAgLy8gY2FzZSBtdXRpbmcgYW5kIHVubXV0aW5nLlxuICAgICAgICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5tdXRlZCA9ICh2b2x1bWVMZXZlbCA9PT0gMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC52b2x1bWUgPSB2b2x1bWVMZXZlbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5hdWRpb0VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQudm9sdW1lID0gdm9sdW1lTGV2ZWw7XG4gICAgfVxufTtcblxuVmlkZW9Qcm94eS5wcm90b3R5cGUuZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3VycmVudFRpbWU6IFV0aWwuaXNJT1M5T3JMZXNzKCkgPyB0aGlzLmF1ZGlvRWxlbWVudC5jdXJyZW50VGltZSA6IHRoaXMudmlkZW9FbGVtZW50LmN1cnJlbnRUaW1lLFxuICAgICAgICBkdXJhdGlvbjogVXRpbC5pc0lPUzlPckxlc3MoKSA/IHRoaXMuYXVkaW9FbGVtZW50LmR1cmF0aW9uIDogdGhpcy52aWRlb0VsZW1lbnQuZHVyYXRpb25cbiAgICB9XG59O1xuXG4vKipcbiArICpcbiArICogQHBhcmFtIHtPYmplY3R9IHRpbWVcbiArICovXG5WaWRlb1Byb3h5LnByb3RvdHlwZS5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgaWYgKHRoaXMudmlkZW9FbGVtZW50KSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmN1cnJlbnRUaW1lID0gdGltZS5jdXJyZW50VGltZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYXVkaW9FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gdGltZS5jdXJyZW50VGltZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCBvbiBSQUYgdG8gcHJvZ3Jlc3MgcGxheWJhY2suXG4gKi9cblZpZGVvUHJveHkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGYWtlcyBwbGF5YmFjayBmb3IgaU9TIG9ubHkuXG4gICAgaWYgKCF0aGlzLmlzRmFrZVBsYXliYWNrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy52aWRlb0VsZW1lbnQuZHVyYXRpb247XG4gICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHZhciBkZWx0YSA9IG5vdyAtIHRoaXMuc3RhcnRUaW1lO1xuICAgIHZhciBkZWx0YVMgPSBkZWx0YSAvIDEwMDA7XG4gICAgdGhpcy52aWRlb0VsZW1lbnQuY3VycmVudFRpbWUgPSBkZWx0YVM7XG5cbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIHZpZGVvXG4gICAgaWYgKGRlbHRhUyA+IGR1cmF0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbm93O1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgIC8vIEFsc28gcmVzdGFydCB0aGUgYXVkaW8uXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gMDtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZGVvUHJveHk7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEFkYXB0aXZlUGxheWVyID0gcmVxdWlyZSgnLi9hZGFwdGl2ZS1wbGF5ZXInKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyk7XG52YXIgRXllcyA9IHJlcXVpcmUoJy4vZXllcycpO1xudmFyIEhvdHNwb3RSZW5kZXJlciA9IHJlcXVpcmUoJy4vaG90c3BvdC1yZW5kZXJlcicpO1xudmFyIFJldGljbGVSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmV0aWNsZS1yZW5kZXJlcicpO1xudmFyIFNwaGVyZVJlbmRlcmVyID0gcmVxdWlyZSgnLi9zcGhlcmUtcmVuZGVyZXInKTtcbnZhciBFZGl0b3JSZW5kZXJlciA9IHJlcXVpcmUoJy4vZWRpdG9yLXJlbmRlcmVyJyk7XG52YXIgVFdFRU4gPSByZXF1aXJlKCd0d2Vlbi5qcycpO1xudmFyIFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgVmlkZW9Qcm94eSA9IHJlcXVpcmUoJy4vdmlkZW8tcHJveHknKTtcbnZhciBXZWJWUk1hbmFnZXIgPSByZXF1aXJlKCd3ZWJ2ci1ib2lsZXJwbGF0ZScpO1xuXG52YXIgQVVUT1BBTl9EVVJBVElPTiA9IDMwMDA7XG52YXIgQVVUT1BBTl9BTkdMRSA9IDAuNDtcblxuLyoqXG4gKiBUaGUgbWFpbiBXZWJHTCByZW5kZXJpbmcgZW50cnkgcG9pbnQuIE1hbmFnZXMgdGhlIHNjZW5lLCBjYW1lcmEsIFZSLXJlbGF0ZWRcbiAqIHJlbmRlcmluZyB1cGRhdGVzLiBJbnRlcmFjdHMgd2l0aCB0aGUgV2ViVlJNYW5hZ2VyLlxuICpcbiAqIENvb3JkaW5hdGVzIHRoZSBvdGhlciByZW5kZXJlcnM6IFNwaGVyZVJlbmRlcmVyLCBIb3RzcG90UmVuZGVyZXIsXG4gKiBSZXRpY2xlUmVuZGVyZXIuXG4gKlxuICogQWxzbyBtYW5hZ2VzIHRoZSBBZGFwdGl2ZVBsYXllciBhbmQgVmlkZW9Qcm94eS5cbiAqXG4gKiBFbWl0cyB0aGUgZm9sbG93aW5nIGV2ZW50czpcbiAqICAgbG9hZDogd2hlbiB0aGUgc2NlbmUgaXMgbG9hZGVkLlxuICogICBlcnJvcjogaWYgdGhlcmUgaXMgYW4gZXJyb3IgbG9hZGluZyB0aGUgc2NlbmUuXG4gKiAgIG1vZGVjaGFuZ2UoQm9vbGVhbiBpc1ZSKTogaWYgdGhlIG1vZGUgKGVnLiBWUiwgZnVsbHNjcmVlbiwgZXRjKSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBXb3JsZFJlbmRlcmVyKCkge1xuICAgIHRoaXMuaW5pdF8oKTtcblxuICAgIHRoaXMuc3BoZXJlUmVuZGVyZXIgPSBuZXcgU3BoZXJlUmVuZGVyZXIodGhpcy5zY2VuZSwgdGhpcyk7XG4gICAgdGhpcy5ob3RzcG90UmVuZGVyZXIgPSBuZXcgSG90c3BvdFJlbmRlcmVyKHRoaXMpO1xuICAgIHRoaXMuaG90c3BvdFJlbmRlcmVyLm9uKCdmb2N1cycsIHRoaXMub25Ib3RzcG90Rm9jdXNfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaG90c3BvdFJlbmRlcmVyLm9uKCdibHVyJywgdGhpcy5vbkhvdHNwb3RCbHVyXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnJldGljbGVSZW5kZXJlciA9IG5ldyBSZXRpY2xlUmVuZGVyZXIodGhpcy5jYW1lcmEpO1xuICAgIHRoaXMuZWRpdG9yUmVuZGVyZXIgPSBuZXcgRWRpdG9yUmVuZGVyZXIodGhpcyk7XG4gICAgdGhpcy5jdXJyZW50VmlkZW9UaW1lID0gbnVsbDtcblxuICAgIC8vIEdldCB0aGUgVlIgRGlzcGxheSBhcyBzb29uIGFzIHdlIGluaXRpYWxpemUuXG4gICAgbmF2aWdhdG9yLmdldFZSRGlzcGxheXMoKS50aGVuKGZ1bmN0aW9uIChkaXNwbGF5cykge1xuICAgICAgICBpZiAoZGlzcGxheXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy52ckRpc3BsYXkgPSBkaXNwbGF5c1swXTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG5cbn1cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAodGltZSkge1xuICAgIGlmICghdGhpcy5lZGl0b3JSZW5kZXJlci5pc0RyYXdpbmcoKSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB0aGlzLmhvdHNwb3RSZW5kZXJlci51cGRhdGUodGhpcy5jYW1lcmEpO1xuICAgIFRXRUVOLnVwZGF0ZSh0aW1lKTtcbiAgICB0aGlzLmVmZmVjdC5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgIGlmKHRoaXMudmlkZW9Qcm94eSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRWaWRlb1RpbWUgPSB0aGlzLnZpZGVvUHJveHkuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgdGhpcy5lbWl0KCd0aW1ldXBkYXRlJywgdGhpcy5jdXJyZW50VmlkZW9UaW1lKTtcbiAgICB9XG4gICAgdGhpcy5lZGl0b3JSZW5kZXJlci51cGRhdGUodGltZSwgdGhpcy5jdXJyZW50VmlkZW9UaW1lKTtcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7UHJvbWlzZX0gV2hlbiB0aGUgc2NlbmUgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5zZXRTY2VuZSA9IGZ1bmN0aW9uIChzY2VuZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5zY2VuZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBzZWxmLnNjZW5lUmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgaWYgKCFzY2VuZSB8fCAhc2NlbmUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHRoaXMuZGlkTG9hZEZhaWxfKHNjZW5lLmVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBpc1N0ZXJlbzogc2NlbmUuaXNTdGVyZW8sXG4gICAgICAgIGxvb3A6IHNjZW5lLmxvb3BcbiAgICB9O1xuICAgIHRoaXMuc2V0RGVmYXVsdFlhd18oc2NlbmUuZGVmYXVsdFlhdyB8fCAwKTtcblxuICAgIC8vIERpc2FibGUgVlIgbW9kZSBpZiBleHBsaWNpdGx5IGRpc2FibGVkLCBvciBpZiB3ZSdyZSBsb2FkaW5nIGEgdmlkZW8gb24gaU9TXG4gICAgLy8gOSBvciBlYXJsaWVyLlxuICAgIGlmIChzY2VuZS5pc1ZST2ZmIHx8IChzY2VuZS52aWRlbyAmJiBVdGlsLmlzSU9TOU9yTGVzcygpKSkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2V0VlJDb21wYXRpYmxlT3ZlcnJpZGUoZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIFNldCB2YXJpb3VzIGNhbGxiYWNrIG92ZXJyaWRlcyBpbiBpT1MuXG4gICAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2V0RnVsbHNjcmVlbkNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe3R5cGU6ICdlbnRlci1mdWxsc2NyZWVuJ30pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnNldEV4aXRGdWxsc2NyZWVuQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVXRpbC5zZW5kUGFyZW50TWVzc2FnZSh7dHlwZTogJ2V4aXQtZnVsbHNjcmVlbid9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFuYWdlci5zZXRWUkNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFV0aWwuc2VuZFBhcmVudE1lc3NhZ2Uoe3R5cGU6ICdlbnRlci12cid9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgZGVhbGluZyB3aXRoIGFuIGltYWdlLCBhbmQgbm90IGEgdmlkZW8uXG4gICAgaWYgKHNjZW5lLmltYWdlICYmICFzY2VuZS52aWRlbykge1xuICAgICAgICBpZiAoc2NlbmUucHJldmlldykge1xuICAgICAgICAgICAgLy8gRmlyc3QgbG9hZCB0aGUgcHJldmlldy5cbiAgICAgICAgICAgIHRoaXMuc3BoZXJlUmVuZGVyZXIuc2V0UGhvdG9zcGhlcmUoc2NlbmUucHJldmlldywgcGFyYW1zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBBcyBzb29uIGFzIHNvbWV0aGluZyBpcyBsb2FkZWQsIGVtaXQgdGhlIGxvYWQgZXZlbnQgdG8gaGlkZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBsb2FkaW5nIHByb2dyZXNzIGJhci5cbiAgICAgICAgICAgICAgICBzZWxmLmRpZExvYWRfKCk7XG4gICAgICAgICAgICAgICAgLy8gVGhlbiBsb2FkIHRoZSBmdWxsIHJlc29sdXRpb24gaW1hZ2UuXG4gICAgICAgICAgICAgICAgc2VsZi5zcGhlcmVSZW5kZXJlci5zZXRQaG90b3NwaGVyZShzY2VuZS5pbWFnZSwgcGFyYW1zKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHNlbGYuZGlkTG9hZEZhaWxfLmJpbmQoc2VsZikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTm8gcHJldmlldyAtLSBnbyBzdHJhaWdodCB0byByZW5kZXJpbmcgdGhlIGZ1bGwgaW1hZ2UuXG4gICAgICAgICAgICB0aGlzLnNwaGVyZVJlbmRlcmVyLnNldFBob3Rvc3BoZXJlKHNjZW5lLmltYWdlLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZGlkTG9hZF8oKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHNlbGYuZGlkTG9hZEZhaWxfLmJpbmQoc2VsZikpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChzY2VuZS52aWRlbykge1xuICAgICAgICBpZiAoVXRpbC5pc0lFMTEoKSkge1xuICAgICAgICAgICAgLy8gT24gSUUgMTEsIGlmIGFuICdpbWFnZScgcGFyYW0gaXMgcHJvdmlkZWQsIGxvYWQgaXQgaW5zdGVhZCBvZiBzaG93aW5nXG4gICAgICAgICAgICAvLyBhbiBlcnJvci5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUT0RPKHNtdXMpOiBPbmNlIHZpZGVvIHRleHR1cmVzIGFyZSBzdXBwb3J0ZWQsIHJlbW92ZSB0aGlzIGZhbGxiYWNrLlxuICAgICAgICAgICAgaWYgKHNjZW5lLmltYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGhlcmVSZW5kZXJlci5zZXRQaG90b3NwaGVyZShzY2VuZS5pbWFnZSwgcGFyYW1zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWRMb2FkXygpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKHNlbGYuZGlkTG9hZEZhaWxfLmJpbmQoc2VsZikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpZExvYWRGYWlsXygnVmlkZW8gaXMgbm90IHN1cHBvcnRlZCBvbiBJRTExLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgQWRhcHRpdmVQbGF5ZXIocGFyYW1zLmxvb3ApO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIub24oJ2xvYWQnLCBmdW5jdGlvbiAodmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zcGhlcmVSZW5kZXJlci5zZXQzNjBWaWRlbyh2aWRlb0VsZW1lbnQsIHBhcmFtcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlkTG9hZF8oe3ZpZGVvRWxlbWVudDogdmlkZW9FbGVtZW50fSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goc2VsZi5kaWRMb2FkRmFpbF8uYmluZChzZWxmKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHNlbGYuZGlkTG9hZEZhaWxfKCdWaWRlbyBsb2FkIGVycm9yOiAnICsgZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5sb2FkKHNjZW5lLnZpZGVvKTtcblxuICAgICAgICAgICAgdGhpcy52aWRlb1Byb3h5ID0gbmV3IFZpZGVvUHJveHkodGhpcy5wbGF5ZXIudmlkZW8pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY2VuZUluZm8gPSBzY2VuZTtcbiAgICBpZiAoVXRpbC5pc0RlYnVnKCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0xvYWRlZCBzY2VuZScsIHNjZW5lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLmlzVlJNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMudnJEaXNwbGF5ICYmIHRoaXMudnJEaXNwbGF5LmlzUHJlc2VudGluZztcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzVlJNb2RlKCkpIHtcbiAgICAgICAgdGhpcy52ckRpc3BsYXkuc3VibWl0RnJhbWUoKTtcbiAgICB9XG59O1xuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBleWVMZWZ0ID0gdGhpcy5zY2VuZS5nZXRPYmplY3RCeU5hbWUoJ2V5ZUxlZnQnKSxcbiAgICAgICAgZXllUmlnaHQgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZSgnZXllUmlnaHQnKTtcbiAgICBpZiAoIWV5ZUxlZnQgfHwgIWV5ZVJpZ2h0KSByZXR1cm5cbiAgICBpZiAoZXllTGVmdC5tYXRlcmlhbC5tYXApIGV5ZUxlZnQubWF0ZXJpYWwubWFwLmRpc3Bvc2UoKTtcbiAgICBleWVMZWZ0Lmdlb21ldHJ5LmRpc3Bvc2UoKTtcblxuICAgIGlmIChleWVSaWdodC5tYXRlcmlhbC5tYXApIGV5ZVJpZ2h0Lm1hdGVyaWFsLm1hcC5kaXNwb3NlKCk7XG4gICAgZXllUmlnaHQuZ2VvbWV0cnkuZGlzcG9zZSgpO1xufVxuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnBsYXllcikge1xuICAgICAgICB0aGlzLnBsYXllci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBsYXllciA9IG51bGw7XG4gICAgfVxufVxuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5kaWRMb2FkXyA9IGZ1bmN0aW9uIChvcHRfZXZlbnQpIHtcbiAgICB2YXIgZXZlbnQgPSBvcHRfZXZlbnQgfHwge307XG4gICAgdGhpcy5lbWl0KCdsb2FkJywgZXZlbnQpO1xuICAgIGlmICh0aGlzLnNjZW5lUmVzb2x2ZSkge1xuICAgICAgICB0aGlzLnNjZW5lUmVzb2x2ZSgpO1xuICAgIH1cbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLmRpZExvYWRGYWlsXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIG1lc3NhZ2UpO1xuICAgIGlmICh0aGlzLnNjZW5lUmVqZWN0KSB7XG4gICAgICAgIHRoaXMuc2NlbmVSZWplY3QobWVzc2FnZSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IHlhdy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZVJhZCBUaGUgeWF3IGluIHJhZGlhbnMuXG4gKi9cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLnNldERlZmF1bHRZYXdfID0gZnVuY3Rpb24gKGFuZ2xlUmFkKSB7XG4gICAgLy8gUm90YXRlIHRoZSBjYW1lcmEgcGFyZW50IHRvIHRha2UgaW50byBhY2NvdW50IHRoZSBzY2VuZSdzIHJvdGF0aW9uLlxuICAgIC8vIEJ5IGRlZmF1bHQsIGl0IHNob3VsZCBiZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBpbWFnZS5cbiAgICB0aGlzLmNhbWVyYS5wYXJlbnQucm90YXRpb24ueSA9IChNYXRoLlBJIC8gMi4wKSArIGFuZ2xlUmFkO1xufTtcblxuLyoqXG4gKiBEbyB0aGUgaW5pdGlhbCBjYW1lcmEgdHdlZW4gdG8gcm90YXRlIHRoZSBjYW1lcmEsIGdpdmluZyBhbiBpbmRpY2F0aW9uIHRoYXRcbiAqIHRoZXJlIGlzIGxpdmUgY29udGVudCB0aGVyZSAob24gZGVza3RvcCBvbmx5KS5cbiAqL1xuV29ybGRSZW5kZXJlci5wcm90b3R5cGUuYXV0b3BhbiA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciB0YXJnZXRZID0gdGhpcy5jYW1lcmEucGFyZW50LnJvdGF0aW9uLnkgLSBBVVRPUEFOX0FOR0xFO1xuICAgIHZhciB0d2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbih0aGlzLmNhbWVyYS5wYXJlbnQucm90YXRpb24pXG4gICAgICAgIC50byh7eTogdGFyZ2V0WX0sIEFVVE9QQU5fRFVSQVRJT04pXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLlF1YWRyYXRpYy5PdXQpXG4gICAgICAgIC5zdGFydCgpO1xufTtcblxuV29ybGRSZW5kZXJlci5wcm90b3R5cGUuaW5pdF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICB2YXIgYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdmFyIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg3NSwgYXNwZWN0LCAwLjEsIDEwMCk7XG4gICAgY2FtZXJhLmxheWVycy5lbmFibGUoMSk7XG5cbiAgICB2YXIgY2FtZXJhRHVtbXkgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICBjYW1lcmFEdW1teS5hZGQoY2FtZXJhKTtcblxuICAgIC8vIEFudGlhbGlhc2luZyBkaXNhYmxlZCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICAgIHZhciByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbnRpYWxpYXM6IGZhbHNlfSk7XG4gICAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgIHZhciBjb250cm9scyA9IG5ldyBUSFJFRS5WUkNvbnRyb2xzKGNhbWVyYSk7XG4gICAgdmFyIGVmZmVjdCA9IG5ldyBUSFJFRS5WUkVmZmVjdChyZW5kZXJlcik7XG5cbiAgICAvLyBEaXNhYmxlIGV5ZSBzZXBhcmF0aW9uLlxuICAgIGVmZmVjdC5zY2FsZSA9IDA7XG4gICAgZWZmZWN0LnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cbiAgICAvLyBQcmVzZW50IHN1Ym1pc3Npb24gb2YgZnJhbWVzIGF1dG9tYXRpY2FsbHkuIFRoaXMgaXMgZG9uZSBtYW51YWxseSBpblxuICAgIC8vIHN1Ym1pdEZyYW1lKCkuXG4gICAgZWZmZWN0LmF1dG9TdWJtaXRGcmFtZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuZWZmZWN0ID0gZWZmZWN0O1xuICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgICB0aGlzLm1hbmFnZXIgPSBuZXcgV2ViVlJNYW5hZ2VyKHJlbmRlcmVyLCBlZmZlY3QsIHtwcmVkaXN0b3J0ZWQ6IGZhbHNlfSk7XG5cbiAgICB0aGlzLnNjZW5lID0gdGhpcy5jcmVhdGVTY2VuZV8oKTtcbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmNhbWVyYS5wYXJlbnQpO1xuXG5cbiAgICAvLyBXYXRjaCB0aGUgcmVzaXplIGV2ZW50LlxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplXy5iaW5kKHRoaXMpKTtcblxuICAgIC8vIFByZXZlbnQgY29udGV4dCBtZW51LlxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMub25Db250ZXh0TWVudV8uYmluZCh0aGlzKSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsXG4gICAgICAgIHRoaXMub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXy5iaW5kKHRoaXMpKTtcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLm9uUmVzaXplXyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVmZmVjdC5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLm9uVlJEaXNwbGF5UHJlc2VudENoYW5nZV8gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChVdGlsLmlzRGVidWcoKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXycpO1xuICAgIH1cbiAgICB2YXIgaXNWUiA9IHRoaXMuaXNWUk1vZGUoKTtcblxuICAgIC8vIElmIHRoZSBtb2RlIGNoYW5nZWQgdG8gVlIgYW5kIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBob3RzcG90LCBzaG93IHJldGljbGUuXG4gICAgdmFyIGlzUmV0aWNsZVZpc2libGUgPSBpc1ZSICYmIHRoaXMuaG90c3BvdFJlbmRlcmVyLmdldENvdW50KCkgPiAwO1xuICAgIC8vdGhpcy5yZXRpY2xlUmVuZGVyZXIuc2V0VmlzaWJpbGl0eShpc1JldGljbGVWaXNpYmxlKTtcblxuICAgIC8vIFJlc2l6ZSB0aGUgcmVuZGVyZXIgZm9yIGdvb2QgbWVhc3VyZS5cbiAgICB0aGlzLm9uUmVzaXplXygpO1xuXG4gICAgLy8gQW5hbHl0aWNzLlxuICAgIGlmICh3aW5kb3cuYW5hbHl0aWNzKSB7XG4gICAgICAgIGFuYWx5dGljcy5sb2dNb2RlQ2hhbmdlZChpc1ZSKTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIGV4aXRpbmcgVlIgbW9kZSBmcm9tIGlPUywgbWFrZSBzdXJlIHdlIGVtaXQgYmFjayBhbiBleGl0LWZ1bGxzY3JlZW4gZXZlbnQuXG4gICAgaWYgKCFpc1ZSICYmIFV0aWwuaXNJT1MoKSkge1xuICAgICAgICBVdGlsLnNlbmRQYXJlbnRNZXNzYWdlKHt0eXBlOiAnZXhpdC1mdWxsc2NyZWVuJ30pO1xuICAgIH1cblxuICAgIC8vIEVtaXQgYSBtb2RlIGNoYW5nZSBldmVudCBiYWNrIHRvIGFueSBsaXN0ZW5lcnMuXG4gICAgdGhpcy5lbWl0KCdtb2RlY2hhbmdlJywgaXNWUik7XG59O1xuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVTY2VuZV8gPSBmdW5jdGlvbiAob3B0X3BhcmFtcykge1xuICAgIHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXG4gICAgLy8gQWRkIGEgZ3JvdXAgZm9yIHRoZSBwaG90b3NwaGVyZS5cbiAgICB2YXIgcGhvdG9Hcm91cCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHBob3RvR3JvdXAubmFtZSA9ICdwaG90byc7XG4gICAgc2NlbmUuYWRkKHBob3RvR3JvdXApO1xuXG4gICAgcmV0dXJuIHNjZW5lO1xufTtcblxuV29ybGRSZW5kZXJlci5wcm90b3R5cGUub25Ib3RzcG90Rm9jdXNfID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IGN1cnNvciB0byBiZSBhIHBvaW50ZXIuXG4gICAgdGhpcy5zZXRDdXJzb3JfKCdwb2ludGVyJyk7XG59O1xuXG5Xb3JsZFJlbmRlcmVyLnByb3RvdHlwZS5vbkhvdHNwb3RCbHVyXyA9IGZ1bmN0aW9uIChpZCkge1xuICAgIC8vIFJlc2V0IHRoZSBkZWZhdWx0IGN1cnNvciB0byBiZSB0aGUgZGVmYXVsdCBvbmUuXG4gICAgdGhpcy5zZXRDdXJzb3JfKCcnKTtcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLnNldEN1cnNvcl8gPSBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcbn07XG5cbldvcmxkUmVuZGVyZXIucHJvdG90eXBlLm9uQ29udGV4dE1lbnVfID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gV29ybGRSZW5kZXJlcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogTWVzc2FnZXMgZnJvbSB0aGUgQVBJIHRvIHRoZSBlbWJlZC5cbiAqL1xudmFyIE1lc3NhZ2UgPSB7XG4gICAgUExBWTogJ3BsYXknLFxuICAgIFBBVVNFOiAncGF1c2UnLFxuICAgIEFERF9IT1RTUE9UOiAnYWRkaG90c3BvdCcsXG4gICAgU0VUX0NPTlRFTlQ6ICdzZXRpbWFnZScsXG4gICAgU0VUX1ZPTFVNRTogJ3NldHZvbHVtZScsXG4gICAgU0VUX0FVVE9QTEFZOiAnc2V0YXV0b3BsYXknLFxuICAgIFRJTUVVUERBVEU6ICd0aW1ldXBkYXRlJyxcbiAgICBTRVRfQ1VSUkVOVF9USU1FOiAnc2V0Y3VycmVudHRpbWUnLFxuICAgIFNFRUs6ICdzZWVrJyxcbiAgICBERVZJQ0VfTU9USU9OOiAnZGV2aWNlbW90aW9uJyxcbiAgICBHRVRfUE9TSVRJT046ICdnZXRwb3NpdGlvbicsXG4gICAgU1RBUlRfRFJBVzogJ3N0YXJ0ZHJhdycsXG4gICAgRU5EX0RSQVc6ICdlbmRkcmF3JyxcbiAgICBBRERfU0hBUEU6ICdhZGRzaGFwZScsXG4gICAgQUREX1NIQVBFX0tFWUZSQU1FOiAnYWRkc2hhcGVrZXlmcmFtZScsXG4gICAgRURJVF9TSEFQRV9LRVlGUkFNRTogJ2VkaXRzaGFwZWtleWZyYW1lJyxcbiAgICBSRU1PVkVfU0hBUEVfS0VZRlJBTUU6ICdyZW1vdmVzaGFwZWtleWZyYW1lJyxcbiAgICBFRElUX1NIQVBFOiAnZWRpdHNoYXBlJyxcbiAgICBSRU1PVkVfU0hBUEU6ICdyZW1vdmVzaGFwZScsXG4gICAgQ0xFQVJfU0hBUEVTOiAnY2xlYXJzaGFwZXMnLFxuICAgIFNIQVBFX1RSQU5TRk9STUVEOiAnc2hhcGV0cmFuc2Zvcm1lZCcsXG4gICAgU0hBUEVfU0VMRUNURUQ6ICdzaGFwZXNlbGVjdGVkJyxcbiAgICBTSEFQRV9VTlNFTEVDVEVEOiAnc2hhcGV1bnNlbGVjdGVkJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuVXRpbCA9IHdpbmRvdy5VdGlsIHx8IHt9O1xuXG5VdGlsLmlzRGF0YVVSSSA9IGZ1bmN0aW9uKHNyYykge1xuICByZXR1cm4gc3JjICYmIHNyYy5pbmRleE9mKCdkYXRhOicpID09IDA7XG59O1xuXG5VdGlsLmdlbmVyYXRlVVVJRCA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzNCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAudG9TdHJpbmcoMTYpXG4gICAgLnN1YnN0cmluZygxKTtcbiAgfVxuICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArXG4gICAgczQoKSArICctJyArIHM0KCkgKyBzNCgpICsgczQoKTtcbn07XG5cblV0aWwuaXNNb2JpbGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNoZWNrID0gZmFsc2U7XG4gIChmdW5jdGlvbihhKXtpZigvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdChhLnN1YnN0cigwLDQpKSljaGVjayA9IHRydWV9KShuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEpO1xuICByZXR1cm4gY2hlY2s7XG59O1xuXG5VdGlsLmlzSU9TID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG5cblV0aWwuaXNTYWZhcmkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59O1xuXG5VdGlsLmNsb25lT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBvdXQgPSB7fTtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuVXRpbC5oYXNoQ29kZSA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMuc3BsaXQoXCJcIikucmVkdWNlKGZ1bmN0aW9uKGEsYil7YT0oKGE8PDUpLWEpK2IuY2hhckNvZGVBdCgwKTtyZXR1cm4gYSZhfSwwKTtcbn07XG5cblV0aWwubG9hZFRyYWNrU3JjID0gZnVuY3Rpb24oY29udGV4dCwgc3JjLCBjYWxsYmFjaywgb3B0X3Byb2dyZXNzQ2FsbGJhY2spIHtcbiAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgcmVxdWVzdC5vcGVuKCdHRVQnLCBzcmMsIHRydWUpO1xuICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cbiAgLy8gRGVjb2RlIGFzeW5jaHJvbm91c2x5LlxuICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKHJlcXVlc3QucmVzcG9uc2UsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgY2FsbGJhY2soYnVmZmVyKTtcbiAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH0pO1xuICB9O1xuICBpZiAob3B0X3Byb2dyZXNzQ2FsbGJhY2spIHtcbiAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGVyY2VudCA9IGUubG9hZGVkIC8gZS50b3RhbDtcbiAgICAgIG9wdF9wcm9ncmVzc0NhbGxiYWNrKHBlcmNlbnQpO1xuICAgIH07XG4gIH1cbiAgcmVxdWVzdC5zZW5kKCk7XG59O1xuXG5VdGlsLmlzUG93MiA9IGZ1bmN0aW9uKG4pIHtcbiAgcmV0dXJuIChuICYgKG4gLSAxKSkgPT0gMDtcbn07XG5cblV0aWwuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xufTtcblxuVXRpbC5pc0lGcmFtZSA9IGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuc2VsZiAhPT0gd2luZG93LnRvcDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vLyBGcm9tIGh0dHA6Ly9nb28uZ2wvNFdYM3RnXG5VdGlsLmdldFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sIFwiXFxcXFtcIikucmVwbGFjZSgvW1xcXV0vLCBcIlxcXFxdXCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiW1xcXFw/Jl1cIiArIG5hbWUgKyBcIj0oW14mI10qKVwiKSxcbiAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XG4gIHJldHVybiByZXN1bHRzID09PSBudWxsID8gXCJcIiA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufTtcblxuXG4vLyBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE4NzEwNzcvcHJvcGVyLXdheS10by1kZXRlY3Qtd2ViZ2wtc3VwcG9ydC5cblV0aWwuaXNXZWJHTEVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICB0cnkgeyBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7IH1cbiAgY2F0Y2ggKHgpIHsgZ2wgPSBudWxsOyB9XG5cbiAgaWYgKGdsID09IG51bGwpIHtcbiAgICB0cnkgeyBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIpOyBleHBlcmltZW50YWwgPSB0cnVlOyB9XG4gICAgY2F0Y2ggKHgpIHsgZ2wgPSBudWxsOyB9XG4gIH1cbiAgcmV0dXJuICEhZ2w7XG59O1xuXG5VdGlsLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufTtcblxuLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMTQwNjA0L2Zhc3Rlc3QtaHlwb3RlbnVzZS1pbi1qYXZhc2NyaXB0XG5VdGlsLmh5cG90ID0gTWF0aC5oeXBvdCB8fCBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbn07XG5cbi8vIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTc0NDc3MTgvNjkzOTM0XG5VdGlsLmlzSUUxMSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pO1xufTtcblxuVXRpbC5nZXRSZWN0Q2VudGVyID0gZnVuY3Rpb24ocmVjdCkge1xuICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIocmVjdC54ICsgcmVjdC53aWR0aC8yLCByZWN0LnkgKyByZWN0LmhlaWdodC8yKTtcbn07XG5cblV0aWwuZ2V0U2NyZWVuV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgubWF4KHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbn07XG5cblV0aWwuZ2V0U2NyZWVuSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLm1pbih3aW5kb3cuc2NyZWVuLndpZHRoLCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgKlxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW87XG59O1xuXG5VdGlsLmlzSU9TOU9yTGVzcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIVV0aWwuaXNJT1MoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmUgPSAvKGlQaG9uZXxpUGFkfGlQb2QpIE9TIChbXFxkX10rKS87XG4gIHZhciBpT1NWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChyZSk7XG4gIGlmICghaU9TVmVyc2lvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBHZXQgdGhlIGxhc3QgZ3JvdXAuXG4gIHZhciB2ZXJzaW9uU3RyaW5nID0gaU9TVmVyc2lvbltpT1NWZXJzaW9uLmxlbmd0aCAtIDFdO1xuICB2YXIgbWFqb3JWZXJzaW9uID0gcGFyc2VGbG9hdCh2ZXJzaW9uU3RyaW5nKTtcbiAgcmV0dXJuIG1ham9yVmVyc2lvbiA8PSA5O1xufTtcblxuVXRpbC5nZXRFeHRlbnNpb24gPSBmdW5jdGlvbih1cmwpIHtcbiAgcmV0dXJuIHVybC5zcGxpdCgnLicpLnBvcCgpO1xufTtcblxuVXRpbC5jcmVhdGVHZXRQYXJhbXMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgdmFyIG91dCA9ICc/JztcbiAgZm9yICh2YXIgayBpbiBwYXJhbXMpIHtcbiAgICB2YXIgcGFyYW1TdHJpbmcgPSBrICsgJz0nICsgcGFyYW1zW2tdICsgJyYnO1xuICAgIG91dCArPSBwYXJhbVN0cmluZztcbiAgfVxuICAvLyBSZW1vdmUgdGhlIHRyYWlsaW5nIGFtcGVyc2FuZC5cbiAgb3V0LnN1YnN0cmluZygwLCBwYXJhbXMubGVuZ3RoIC0gMik7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5VdGlsLnNlbmRQYXJlbnRNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBpZiAod2luZG93LnBhcmVudCkge1xuICAgIHBhcmVudC5wb3N0TWVzc2FnZShtZXNzYWdlLCAnKicpO1xuICB9XG59O1xuXG5VdGlsLnBhcnNlQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSAnZmFsc2UnIHx8IHZhbHVlID09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAodmFsdWUgPT0gJ3RydWUnIHx8IHZhbHVlID09IDEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gISF2YWx1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0gYmFzZSB7U3RyaW5nfSBBbiBhYnNvbHV0ZSBkaXJlY3Rvcnkgcm9vdC5cbiAqIEBwYXJhbSByZWxhdGl2ZSB7U3RyaW5nfSBBIHJlbGF0aXZlIHBhdGguXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQW4gYWJzb2x1dGUgcGF0aCBjb3JyZXNwb25kaW5nIHRvIHRoZSByb290UGF0aC5cbiAqXG4gKiBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0NzgwNDYzLzY5MzkzNC5cbiAqL1xuVXRpbC5yZWxhdGl2ZVRvQWJzb2x1dGVQYXRoID0gZnVuY3Rpb24oYmFzZSwgcmVsYXRpdmUpIHtcbiAgdmFyIHN0YWNrID0gYmFzZS5zcGxpdCgnLycpO1xuICB2YXIgcGFydHMgPSByZWxhdGl2ZS5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHBhcnRzW2ldID09ICcuJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwYXJ0c1tpXSA9PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhY2sucHVzaChwYXJ0c1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFjay5qb2luKCcvJyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWZmIHRoZSBzcGVjaWZpZWQgcGF0aCBpcyBhbiBhYnNvbHV0ZSBwYXRoLlxuICovXG5VdGlsLmlzUGF0aEFic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gISAvXig/OlxcL3xbYS16XSs6XFwvXFwvKS8udGVzdChwYXRoKTtcbn1cblxuVXRpbC5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PSAwO1xufTtcblxuVXRpbC5pc0RlYnVnID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBVdGlsLnBhcnNlQm9vbGVhbihVdGlsLmdldFF1ZXJ5UGFyYW1ldGVyKCdkZWJ1ZycpKTtcbn07XG5cblV0aWwuZ2V0Q3VycmVudFNjcmlwdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBOb3RlOiBpbiBJRTExLCBkb2N1bWVudC5jdXJyZW50U2NyaXB0IGRvZXNuJ3Qgd29yaywgc28gd2UgZmFsbCBiYWNrIHRvIHRoaXNcbiAgLy8gaGFjaywgdGFrZW4gZnJvbSBodHRwczovL2dvby5nbC9UcEV4dUguXG4gIGlmICghZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgIGNvbnNvbGUud2FybignVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgZG9jdW1lbnQuY3VycmVudFNjcmlwdC4gVHJ5aW5nIGZhbGxiYWNrLicpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0IHx8IGRvY3VtZW50LnNjcmlwdHNbZG9jdW1lbnQuc2NyaXB0cy5sZW5ndGggLSAxXTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWw7XG4iXX0=
